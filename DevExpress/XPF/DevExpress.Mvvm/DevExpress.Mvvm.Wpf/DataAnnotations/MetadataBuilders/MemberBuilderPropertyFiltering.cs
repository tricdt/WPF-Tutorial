#region Copyright (c) 2000-2024 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2024 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2024 Developer Express Inc.

using DevExpress.Mvvm.Native;
using System;
using System.ComponentModel.DataAnnotations;
namespace DevExpress.Mvvm.DataAnnotations {
	public abstract class FilteringPropertyMetadataBuilderGeneric<T, TProperty, TBuilder> :
		PropertyMetadataBuilderBase<T, TProperty, TBuilder>
		where TBuilder : FilteringPropertyMetadataBuilderGeneric<T, TProperty, TBuilder> {
		internal FilteringPropertyMetadataBuilderGeneric(MemberMetadataStorage storage, ClassMetadataBuilder<T> parent)
			: base(storage, parent) {
		}
		public FilteringMetadataBuilder<T> EndProperty() { return (FilteringMetadataBuilder<T>)parent; }
		public TBuilder DisplayName(string name) { return DisplayNameCore(name); }
		public TBuilder DisplayShortName(string shortName) { return DisplayShortNameCore(shortName); }
		public TBuilder Description(string description) { return DescriptionCore(description); }
		public TBuilder NotAutoGenerated() { return NotAutoGeneratedCore(); }
		public TBuilder AutoGenerated() { return AutoGeneratedCore(); }
		public TBuilder LocatedAt(int position, PropertyLocation propertyLocation = PropertyLocation.BeforePropertiesWithoutSpecifiedLocation) { return LocatedAtCore(position, propertyLocation); }
		public TBuilder MaxLength(int maxLength, Func<string> errorMessageAccessor = null) { return MaxLengthCore(maxLength, GetErrorMessageAccessor(errorMessageAccessor)); }
		public TBuilder MaxLength(int maxLength, Func<TProperty, string> errorMessageAccessor) { return MaxLengthCore(maxLength, errorMessageAccessor); }
		public TBuilder MinLength(int minLength, Func<string> errorMessageAccessor = null) { return MinLengthCore(minLength, GetErrorMessageAccessor(errorMessageAccessor)); }
		public TBuilder MinLength(int minLength, Func<TProperty, string> errorMessageAccessor) { return MinLengthCore(minLength, errorMessageAccessor); }
		public TBuilder DefaultEditor(object templateKey) { return DefaultEditorCore(templateKey); }
		public TBuilder GridEditor(object templateKey) { return GridEditorCore(templateKey); }
		public TBuilder LayoutControlEditor(object templateKey) { return LayoutControlEditor(templateKey); }
		public TBuilder PropertyGridEditor(object templateKey) { return PropertyGridEditorCore(templateKey); }
		public TBuilder DoNotConvertEmptyStringToNull() { return DoNotConvertEmptyStringToNullCore(); }
		public TBuilder NullDisplayText(string nullDisplayText) { return NullDisplayTextCore(nullDisplayText); }
		public TBuilder DisplayFormatString(string dataFormatString, bool applyDisplayFormatInEditMode = false) { return DisplayFormatStringCore(dataFormatString, applyDisplayFormatInEditMode); }
		public TBuilder FilterRange(
			object minOrMinMember = null, object maxOrMaxMember = null,
			string fromName = null, string toName = null,
			FilterRangeUIEditorType editorType = FilterRangeUIEditorType.Default) {
			return AddOrReplaceAttribute(new FilterRangeAttributeProxy() {
				MinOrMinMember = minOrMinMember,
				MaxOrMaxMember = maxOrMaxMember,
				FromName = fromName,
				ToName = toName,
				EditorType = editorType,
			});
		}
		public TBuilder FilterDateTimeRange(
			object minOrMinMember = null, object maxOrMaxMember = null,
			string fromName = null, string toName = null,
			FilterDateTimeRangeUIEditorType editorType = FilterDateTimeRangeUIEditorType.Default) {
			return AddOrReplaceAttribute(new FilterDateTimeRangeAttributeProxy() {
				MinOrMinMember = minOrMinMember,
				MaxOrMaxMember = maxOrMaxMember,
				FromName = fromName,
				ToName = toName,
				EditorType = editorType,
			});
		}
		public TBuilder FilterLookup(
			object dataSourceOrDataSourceMember, string displayMember = null, string valueMember = null,
			object topOrTopMember = null, object maxCountOrMaxCountMember = null,
			bool? useSelectAll = null, string selectAllName = null,
			bool? useFlags = null, FilterLookupUIEditorType editorType = FilterLookupUIEditorType.Default) {
			return AddOrReplaceAttribute(new FilterLookupAttributeProxy() {
				DataSourceOrDataSourceMember = dataSourceOrDataSourceMember,
				DisplayMember = displayMember,
				ValueMember = valueMember,
				TopOrTopMember = topOrTopMember,
				MaxCountOrMaxCountMember = maxCountOrMaxCountMember,
				UseSelectAll = useSelectAll,
				SelectAllName = selectAllName,
				UseFlags = useFlags,
				EditorType = editorType,
			});
		}
		public TBuilder FilterBooleanChoice(
			string defaultName = null, string trueName = null, string falseName = null,
			FilterBooleanUIEditorType editorType = FilterBooleanUIEditorType.Default,
			bool? defaultValue = null, string defaultValueMember = null) {
			return AddOrReplaceAttribute(new FilterBooleanChoiceAttributeProxy() {
				DefaultName = defaultName,
				TrueName = trueName,
				FalseName = falseName,
				EditorType = editorType,
				DefaultValue = defaultValue,
				DefaultValueMember = defaultValueMember,
			});
		}
		public TBuilder FilterEnumChoice(
			bool? useSelectAll = null, string selectAllName = null,
			bool? useFlags = null, FilterLookupUIEditorType editorType = FilterLookupUIEditorType.Default, Type enumDataType = null) {
			var res = AddOrReplaceAttribute(new FilterEnumChoiceAttributeProxy() {
				UseFlags = useFlags,
				UseSelectAll = useSelectAll,
				SelectAllName = selectAllName,
				EditorType = editorType,
			});
			if(enumDataType != null)
				res.AddOrReplaceAttribute(new EnumDataTypeAttribute(enumDataType));
			return res;
		}
	}
	public class FilteringPropertyMetadataBuilder<T, TProperty> :
		FilteringPropertyMetadataBuilderGeneric<T, TProperty, FilteringPropertyMetadataBuilder<T, TProperty>> {
		internal FilteringPropertyMetadataBuilder(MemberMetadataStorage storage, ClassMetadataBuilder<T> parent)
			: base(storage, parent) { }
	}
}
