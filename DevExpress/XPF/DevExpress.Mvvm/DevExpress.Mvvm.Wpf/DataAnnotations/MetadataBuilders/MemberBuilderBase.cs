#region Copyright (c) 2000-2024 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2024 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2024 Developer Express Inc.

using DevExpress.Mvvm.Native;
using System;
using System.Collections.Generic;
namespace DevExpress.Mvvm.DataAnnotations {
	public abstract class MemberMetadataBuilderBase<T, TBuilder, TParent> : 
		IPropertyMetadataBuilder, IAttributeBuilderInternal, IAttributeBuilderInternal<TBuilder>
		where TBuilder : MemberMetadataBuilderBase<T, TBuilder, TParent>
		where TParent : MetadataBuilderBase<T, TParent> {
		readonly MemberMetadataStorage storage;
		protected internal readonly TParent parent;
		internal MemberMetadataBuilderBase(MemberMetadataStorage storage, TParent parent) {
			this.storage = storage;
			this.parent = parent;
		}
		internal TBuilder AddOrModifyAttribute<TAttribute>(Action<TAttribute> setAttributeValue = null) where TAttribute : Attribute, new() {
			storage.AddOrModifyAttribute(setAttributeValue);
			return (TBuilder)this;
		}
		internal TBuilder AddOrReplaceAttribute<TAttribute>(TAttribute attribute) where TAttribute : Attribute {
			storage.AddOrReplaceAttribute(attribute);
			return (TBuilder)this;
		}
		TBuilder IAttributeBuilderInternal<TBuilder>.AddOrReplaceAttribute<TAttribute>(TAttribute attribute) {
			return AddOrReplaceAttribute(attribute);
		}
		TBuilder IAttributeBuilderInternal<TBuilder>.AddOrModifyAttribute<TAttribute>(Action<TAttribute> setAttributeValue) {
			return AddOrModifyAttribute(setAttributeValue);
		}
		void IAttributeBuilderInternal.AddOrReplaceAttribute<TAttribute>(TAttribute attribute) {
			AddOrReplaceAttribute(attribute);
		}
		void IAttributeBuilderInternal.AddOrModifyAttribute<TAttribute>(Action<TAttribute> setAttributeValue) {
			AddOrModifyAttribute(setAttributeValue);
		}
		internal TBuilder AddAttribute(Attribute attribute) {
			storage.AddAttribute(attribute);
			return (TBuilder)this;
		}
		IEnumerable<Attribute> IPropertyMetadataBuilder.Attributes {
			get { return storage.GetAttributes(); }
		}
		protected TBuilder DisplayNameCore(string name) {
			return DataAnnotationsAttributeHelper.DisplayNameCore((TBuilder)this, name);
		}
		protected TBuilder DisplayShortNameCore(string shortName) {
			return DataAnnotationsAttributeHelper.DisplayShortNameCore((TBuilder)this, shortName);
		}
		protected TBuilder DescriptionCore(string description) {
			return DataAnnotationsAttributeHelper.DescriptionCore((TBuilder)this, description);
		}
		protected TBuilder NotAutoGeneratedCore() {
			return DataAnnotationsAttributeHelper.AutoGeneratedCore((TBuilder)this, false);
		}
		protected TBuilder AutoGeneratedCore() {
			return DataAnnotationsAttributeHelper.AutoGeneratedCore((TBuilder)this, true);
		}
#if !FREE
		protected TBuilder DoNotScaffoldCore() {
			return DataAnnotationsAttributeHelper.DoNotScaffoldCore((TBuilder)this);
		}
		protected TBuilder DoNotScaffoldDetailCollectionCore() {
			return DataAnnotationsAttributeHelper.DoNotScaffoldDetailCollectionCore((TBuilder)this);
		}
		protected TBuilder LocatedAtCore(int position, PropertyLocation propertyLocation = PropertyLocation.BeforePropertiesWithoutSpecifiedLocation) {
			if(position < 0 || position >= LayoutGroupInfoConstants.LastPropertiesStartIndex)
				throw new ArgumentException("position should non-negative and less then " + PropertyLocation.AfterPropertiesWithoutSpecifiedLocation);
			if(propertyLocation == PropertyLocation.AfterPropertiesWithoutSpecifiedLocation)
				position += LayoutGroupInfoConstants.LastPropertiesStartIndex + 1;
			return DataAnnotationsAttributeHelper.SetOrderCore((TBuilder)this, position);
		}
		protected TBuilder ImageNameCore(string imageName) {
			return AddOrModifyAttribute<DXImageAttribute>(x => x.ImageName = imageName);
		}
		protected TBuilder ImageUriLargeCore(string uri) {
			return AddOrModifyAttribute<DXImageAttribute>(x => x.LargeImageUri = uri);
		}
		protected TBuilder ImageUriSmallCore(string uri) {
			return AddOrModifyAttribute<DXImageAttribute>(x => x.SmallImageUri = uri);
		}
#endif
		protected TBuilder ImageUriCore(string imageUri) {
			return AddOrModifyAttribute<ImageAttribute>(x => x.ImageUri = imageUri);
		}
	}
}
