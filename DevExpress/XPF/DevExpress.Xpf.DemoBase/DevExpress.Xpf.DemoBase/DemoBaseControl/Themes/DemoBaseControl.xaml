<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    xmlns:dxa="http://schemas.devexpress.com/winfx/2008/xaml/accordion"
                    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
                    xmlns:dxbn="http://schemas.devexpress.com/winfx/2008/xaml/bars/internal"
                    xmlns:dxr="http://schemas.devexpress.com/winfx/2008/xaml/ribbon"
                    xmlns:dxat="http://schemas.devexpress.com/winfx/2008/xaml/accordion/themekeys"
                    xmlns:utils="clr-namespace:DevExpress.Utils;assembly=DevExpress.Data.v24.1"
                    xmlns:ddh="clr-namespace:DevExpress.DemoData.Helpers;assembly=DevExpress.DemoData.v24.1"
                    xmlns:helpers="clr-namespace:DevExpress.Xpf.DemoBase.Helpers"
                    xmlns:internal="clr-namespace:DevExpress.Xpf.DemoCenter.Internal"
                    xmlns:local="clr-namespace:DevExpress.Xpf.DemoBase"
                    xmlns:dbh="clr-namespace:DevExpress.Xpf.DemoBase.Helpers"
                    xmlns:dxan="http://schemas.devexpress.com/winfx/2008/xaml/accordion/internal"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:dxdo="http://schemas.devexpress.com/winfx/2008/xaml/docking"
                    xmlns:db="clr-namespace:DevExpress.Xpf.Docking.Base;assembly=DevExpress.Xpf.Docking.v24.1"
                    xmlns:dxdot="http://schemas.devexpress.com/winfx/2008/xaml/docking/themekeys"
                    xmlns:ve="http://schemas.devexpress.com/winfx/2008/xaml/docking/visualelements">

    <dxmvvm:DataTemplateByTypeNameSelector x:Key="DemoModulePresenterTemplateSelector">
        <dxmvvm:DataTemplateByTypeNameSelector.Templates>
            <DataTemplate x:Key="String">
                <TextBlock Foreground="Purple" Background="White" TextWrapping="Wrap" Text="{Binding}" Padding="12" />
            </DataTemplate>
            <DataTemplate x:Key="DemoModuleOwner">
                <DockPanel>
                    <dx:ThemedBorder DockPanel.Dock="Bottom"
                                     BorderThickness="{Binding Path=(dx:ThemeManager.TreeWalker), RelativeSource={RelativeSource Self}, Converter={x:Static dbh:ThemeDependencyConverter.Instance},
                                     ConverterParameter='DescriptionBorderThickness'}"
                                     Visibility="{DXBinding '@a($local:DemoBaseControl).FullWindowMode ? $Visibility.Collapsed : $Visibility.Visible'}">
                        <DockPanel>
                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" VerticalAlignment="Center" Margin="5,5,15,5" Name="feedbackPanel">
                                <StackPanel.Resources>
                                    <Style x:Key="FeedbackButton" TargetType="Button">
                                        <Setter Property="Focusable" Value="False" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Button">
                                                    <ContentPresenter Opacity="0.5" x:Name="content" />
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="content" Property="Opacity" Value="1" />
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter TargetName="content" Property="Opacity" Value="0.15" />
                                                        </Trigger>
                                                        <Trigger Property="Tag" Value="TAG_Checked">
                                                            <Setter TargetName="content" Property="Opacity" Value="1" />
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter TargetName="content" Property="RenderTransform">
                                                                <Setter.Value>
                                                                    <ScaleTransform ScaleX="0.96" ScaleY="0.96" />
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </StackPanel.Resources>
                                <Button Style="{StaticResource FeedbackButton}"
                                        IsEnabled="{DXBinding 'Feedback == null'}"
                                        Tag="{DXBinding 'Feedback == true ? `TAG_Checked` : null', Mode=OneWay}"
                                        Click="{DXEvent Handler='@e(feedbackFlyout).IsOpen = false; @args.Handled = true; PostFeedback(true, null)'}">
                                    <Image Source="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/Yes.svg'}" Width="32" Height="32" />
                                </Button>
                                <Border Width="10" />
                                <Button Style="{StaticResource FeedbackButton}"
                                        IsEnabled="{DXBinding 'Feedback == null'}"
                                        Tag="{DXBinding 'Feedback == false ? `TAG_Checked` : null', Mode=OneWay}"
                                        Click="{DXEvent Handler='@e(feedbackFlyout).IsOpen = true; @args.Handled = true'}"
                                        Name="no">
                                    <Image Source="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/No.svg'}" Width="32" Height="32" />
                                </Button>
                                <dxe:FlyoutControl PlacementTarget="{x:Reference no}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                   AllowMoveAnimation="False"
                                                   Name="feedbackFlyout" Opened="{DXEvent Handler='@e(feedback).Focus()'}">
                                    <dxe:FlyoutControl.Settings>
                                        <dxe:FlyoutSettings Placement="Top" ShowIndicator="True" IndicatorHorizontalAlignment="Center" />
                                    </dxe:FlyoutControl.Settings>
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <TextBlock Text="Please tell us how we can improve this demo." Margin="0,0,0,3" />
                                        <dxe:TextEdit Grid.Row="1" AcceptsReturn="True" AcceptsTab="True" Name="feedback"
                                                      VerticalContentAlignment="Top" Width="330" Height="100"
                                                      VerticalScrollBarVisibility="Auto" TextWrapping="Wrap" />
                                        <Button Grid.Row="2" Content="Post" MinWidth="90" HorizontalAlignment="Right" Margin="0,3,0,0"
                                                Click="{DXEvent Handler='@e(feedbackFlyout).IsOpen = false; @args.Handled = true; PostFeedback(false, @e(feedback).EditValue)'}" />
                                    </Grid>
                                </dxe:FlyoutControl>
                                <dxe:FlyoutControl PlacementTarget="{x:Reference feedbackPanel}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                   AllowMoveAnimation="False" Name="feedbackMessage"
                                                   IsOpen="{Binding ShowMessage}">
                                    <dxe:FlyoutControl.Settings>
                                        <dxe:FlyoutSettings Placement="Top" ShowIndicator="True" IndicatorHorizontalAlignment="Center" />
                                    </dxe:FlyoutControl.Settings>
                                    <Grid>
                                        <StackPanel Margin="0,0,22,0" Orientation="Horizontal">
                                            <Image Source="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/Yes.svg', AutoSize=False, Size=110\,100}" Width="110" Height="100"
                                                   Margin="5,11,15,4">
                                                <dx:WpfSvgPalette.Palette>
                                                    <dx:WpfSvgPalette>
                                                        <SolidColorBrush x:Key="GreenColor" Color="#FFFFA70F" />
                                                    </dx:WpfSvgPalette>
                                                </dx:WpfSvgPalette.Palette>
                                            </Image>
                                            <StackPanel Margin="1,3,0,0" VerticalAlignment="Top">
                                                <TextBlock Text="Your opinion is valuable." Margin="0,0,0,2" FontSize="16" />
                                                <TextBlock Text="You have a chance to vote for each demo module.&#x0d;&#x0a;Please tell us what you think of the demos and how&#x0d;&#x0a;we can improve them in the future."
                                                           Margin="0,8,0,0"/>
                                                <CheckBox Content="Do not show again" IsChecked="{Binding HideFeedback, Mode=TwoWay}" Margin="0,8,0,0" />
                                            </StackPanel>
                                        </StackPanel>
                                        <Button Width="18" Height="18" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,-2,-2,0" Focusable="False"
                                                Click="{DXEvent Handler='@args.Handled = true; ShowMessage = false'}">
                                            <Button.Template>
                                                <ControlTemplate TargetType="Button">
                                                    <ContentPresenter Opacity="0.6" Name="content" />
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="content" Property="Opacity" Value="1" />
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter TargetName="content" Property="Opacity" Value="0.8" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Button.Template>
                                            <Image Source="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/Close.svg'}" />
                                        </Button>
                                    </Grid>
                                </dxe:FlyoutControl>
                            </StackPanel>
                            <helpers:DocumentPresenterContentAdapter Margin="21,22,21,23" x:Name="adapter"
                                                                     Document="{Binding Description}"
                                                                     AlwaysShowFullDescription="{Binding AlwaysShowFullDescription}"
                                                                     DocumentMaxHeight="60">
                                <dx:DocumentPresenter x:Name="TEST_DemoModuleDescription"
                                                      IsTabStop="False" Background="Transparent" dx:FocusHelper2.Focusable="False"
                                                      Document="{DXBinding '@e(adapter).UseShortDocument ? ShortDescription : Description'}"
                                                      FontSize="12" FontFamily="Segoe UI,Tahoma"
                                                      Foreground="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=TextForeground}}">
                                    <dx:DocumentPresenter.Resources>
                                        <Style TargetType="Paragraph">
                                            <Setter Property="Margin" Value="0,2" />
                                            <Setter Property="LineHeight" Value="14" />
                                            <Setter Property="LineStackingStrategy" Value="BlockLineHeight" />
                                        </Style>
                                    </dx:DocumentPresenter.Resources>
                                </dx:DocumentPresenter>
                            </helpers:DocumentPresenterContentAdapter>
                        </DockPanel>
                    </dx:ThemedBorder>
                    <dx:ThemedBorder BorderThickness="{Binding Path=(dx:ThemeManager.TreeWalker), RelativeSource={RelativeSource Self}, Converter={x:Static dbh:ThemeDependencyConverter.Instance},
                                     ConverterParameter='ModuleBorderThickness'}"
                                     CornerRadius="{Binding Path=(dx:ThemeManager.TreeWalker), RelativeSource={RelativeSource Self}, Converter={x:Static dbh:ThemeDependencyConverter.Instance},
                                     ConverterParameter='ModuleCornerRadius'}"
                                     Margin="{Binding Path=(dx:ThemeManager.TreeWalker), RelativeSource={RelativeSource Self}, Converter={x:Static dbh:ThemeDependencyConverter.Instance},
                                     ConverterParameter='ModuleMargin'}"
                                     x:Name="moduleBorder">
                        <Grid>
                            <Grid.Clip>
                                <MultiBinding Converter="{x:Static dbh:ClipGeometryConverter.Instance}">
                                    <Binding Path="ActualWidth"
                                             RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight"
                                             RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="CornerRadius"
                                             ElementName="moduleBorder"/>
                                    <Binding Path="(dx:ThemeManager.TreeWalker)"
                                             RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Grid.Clip>
                            <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <dx:ThemedBorder BorderThickness="{Binding Path=(dx:ThemeManager.TreeWalker), RelativeSource={RelativeSource Self}, Converter={x:Static dbh:ThemeDependencyConverter.Instance},
                                     ConverterParameter='OptionsBorderThickness'}"
                                         Margin="{Binding Path=(dx:ThemeManager.TreeWalker), RelativeSource={RelativeSource Self}, Converter={x:Static dbh:ThemeDependencyConverter.Instance},
                                     ConverterParameter='OptionsMargin'}"
                                         Grid.Column="1" Visibility="{Binding OptionsRoot.Visibility}" Background="{x:Null}">
                            <dxdo:DockLayoutManager x:Name="dlm" AutoHideExpandMode="MouseDown" AutoHideMode="Inline">
                                <dxdo:DockLayoutManager.Resources>
                                    <Thickness x:Key="{dxdot:AutoHidePaneElementsThemeKey ResourceKey=SizerThickness, IsThemeIndependent=True}">0</Thickness>
                                    <ControlTemplate x:Key="{dxdot:AutoHidePaneElementsThemeKey ResourceKey=Template, IsThemeIndependent=True}" TargetType="ve:AutoHidePane">
                                        <ve:AutoHidePanePresenter x:Name="PART_Presenter">
                                            <dx:ThemedBorder x:Name="TestBorder"
                                                             BorderThickness="{Binding Path=(dx:ThemeManager.TreeWalker), RelativeSource={RelativeSource Self}, Converter={x:Static dbh:ThemeDependencyConverter.Instance},
                                     ConverterParameter='OptionsInnerBorderThickness'}">
                                            <Grid x:Name="PART_PaneContent" Background="Transparent">
                                                <ContentPresenter Content="{TemplateBinding Content}" />
                                            </Grid>
                                            </dx:ThemedBorder>
                                        </ve:AutoHidePanePresenter>
                                    </ControlTemplate>
                                    <Style TargetType="dxdo:AutoHideGroup">
                                        <Setter Property="AutoHideSpeed" Value="0"/>
                                    </Style>
                                    <Style TargetType="ve:AutoHidePaneHeaderItem">
                                        <Setter Property="Margin" Value="0,0,3,0"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxdo:DockLayoutManager.UIScope).IsExpanded}" Value="True">
                                                <Setter Property="Template" Value="{x:Null}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </dxdo:DockLayoutManager.Resources>
                                <dxdo:LayoutGroup>
                                    <dxdo:LayoutPanel dxdo:AutoHideGroup.AutoHideType="Right" dxdo:AutoHideGroup.SizeToContent="Width"
                                                      FocusContentOnActivating="False"
                                                      AutoHidden="True" AutoHideExpandState="{Binding OptionsExpandState, Mode=TwoWay}" ShowCaption="False"
                                                      Caption="{Binding OptionsCaption}"
                                                      AllowMove="False"
                                                      AllowClose="False" AllowFloat="False" ShowBorder="False" Padding="0" AllowSizing="False">
                                        <helpers:TopTextPanel Visibility="{DXBinding 'ShowCode ? $Visibility.Hidden : $Visibility.Visible'}">
                                            <helpers:TopTextPanel.TopChild>
                                                <StackPanel>
                                                    <dx:ThemedBorder BorderThickness="0,0,0,1" Background="{x:Null}">
                                                        <DockPanel>
                                                            <dxe:ButtonEdit ShowText="False" AllowDefaultButton="False" ShowBorder="False" DockPanel.Dock="Left" Margin="6">
                                                                <dxe:ButtonEdit.Buttons>
                                                                    <dxe:ButtonInfo GlyphKind="Right" Click="{DXEvent Handler='OptionsExpandState = $db:AutoHideExpandState.Hidden'}" />
                                                                </dxe:ButtonEdit.Buttons>
                                                            </dxe:ButtonEdit>
                                                            <TextBlock Text="{Binding OptionsCaption}" FontWeight="Bold" VerticalAlignment="Center" />
                                                        </DockPanel>
                                                    </dx:ThemedBorder>
                                                    <TextBlock TextWrapping="Wrap" Text="{Binding OptionsText}" Margin="12,12,12,1"
                                                                   Visibility="{DXBinding '$string.IsNullOrEmpty(OptionsText) ? $Visibility.Collapsed : $Visibility.Visible'}" />
                                                </StackPanel>
                                            </helpers:TopTextPanel.TopChild>
                                            <helpers:TopTextPanel.MainChild>
                                                <ContentPresenter Content="{Binding Module.Options}" />
                                            </helpers:TopTextPanel.MainChild>
                                        </helpers:TopTextPanel>
                                    </dxdo:LayoutPanel>
                                </dxdo:LayoutGroup>
                            </dxdo:DockLayoutManager>
                        </dx:ThemedBorder>
                        <ContentPresenter Content="{Binding Module}" Visibility="{DXBinding 'ShowCode ? $Visibility.Hidden : $Visibility.Visible'}">
                            <dxmvvm:Interaction.Behaviors>
                                <helpers:TouchUICoerceBehavior AllowTouchUI="{Binding AllowTouchUI}" />
                            </dxmvvm:Interaction.Behaviors>
                        </ContentPresenter>
                        <helpers:CodeViewControl x:Name="TEST_CodeTextViewer" Focusable="True" HorizontalAlignment="Stretch" Grid.ColumnSpan="2"
                                                 ItemsSource="{Binding CodeTexts}"
                                                 Visibility="{DXBinding 'ShowCode ? $Visibility.Visible : $Visibility.Collapsed'}" />
                        <dxmvvm:Interaction.Behaviors>
                            <local:SplashScreeenManagerServiceEx
                                StartupLocation="CenterOwner"
                                TrackOwnerPosition="False"
                                InputBlock="Owner"
                                PredefinedSplashScreenType="WaitIndicator"
                                IsCompletelyLoaded="{Binding IsCompletelyLoaded}"
                                ShowLoadingIndicator="{Binding ShowLoadingIndicator, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:DemoBaseControl}}}">
                                <local:SplashScreeenManagerServiceEx.SplashScreenWindowStyle>
                                    <Style TargetType="dx:SplashScreenWindow">
                                        <Setter Property="AllowDrag" Value="False"/>
                                    </Style>
                                </local:SplashScreeenManagerServiceEx.SplashScreenWindowStyle>
                            </local:SplashScreeenManagerServiceEx>
                        </dxmvvm:Interaction.Behaviors>
                    </Grid>
                        </dx:ThemedBorder>
                </DockPanel>
            </DataTemplate>
        </dxmvvm:DataTemplateByTypeNameSelector.Templates>
    </dxmvvm:DataTemplateByTypeNameSelector>
    <DataTemplate x:Key="pageDemo">
        <ContentControl>
            <dxr:RibbonPage Caption="Demo" MergeOrder="10" dxb:BarNameScope.IsScopeOwner="True" helpers:RibbonDynamicCategoryBehavior.IsVisible="True">
                <dxr:RibbonPage.Resources>
                    <CollectionViewSource x:Key="moduleSource" Source="{Binding '[1].Modules'}">
                        <CollectionViewSource.GroupDescriptions>
                            <PropertyGroupDescription PropertyName="GroupName" />
                        </CollectionViewSource.GroupDescriptions>
                    </CollectionViewSource>
                </dxr:RibbonPage.Resources>
                <dxr:RibbonPageGroup Caption="Navigation" IsVisible="{Binding '[1].IsNavigationVisible'}">
                    <dxb:BarSubItem Content="Modules" ItemLinksSource="{Binding Groups, Source={StaticResource moduleSource}}"
                                    dxb:BarManager.ShowGlyphsInPopupMenus="False"
                                    RibbonStyle="Large"
                                    Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/Navigation.svg'}"
                                    MediumGlyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/Navigation_20x20.svg'}">
                        <dxb:BarSubItem.ItemTemplate>
                            <DataTemplate>
                                <ContentControl>
                                    <dxb:BarSubItem Content="{Binding Name}" ItemLinksSource="{Binding Items}">
                                        <dxb:BarSubItem.ItemTemplate>
                                            <DataTemplate>
                                                <ContentControl>
                                                    <dxb:BarButtonItem Content="{Binding Title}" Command="{DXCommand '@a($local:DemoBaseControl).LoadModule(@c)'}" />
                                                </ContentControl>
                                            </DataTemplate>
                                        </dxb:BarSubItem.ItemTemplate>
                                    </dxb:BarSubItem>
                                </ContentControl>
                            </DataTemplate>
                        </dxb:BarSubItem.ItemTemplate>
                    </dxb:BarSubItem>
                    <dxb:BarItemSeparator />
                    <dxb:BarButtonItem Content="Prev"
                                       Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/Previous.svg'}"
                                       MediumGlyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/Previous_20x20.svg'}"
                                       RibbonStyle="Large" Command="{DXCommand '[1].ShowPrev()'}" />
                    <dxb:BarButtonItem Content="Next"
                                       Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/Next.svg'}"
                                       MediumGlyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/Next_20x20.svg'}"
                                       RibbonStyle="Large" Command="{DXCommand '[1].ShowNext()'}" />
                </dxr:RibbonPageGroup>
                <dxr:RibbonPageGroup Caption="View" MergeOrder="10">
                    <dxb:BarCheckItem Content="Full-Window Mode" KeyGesture="F11"
                                      RibbonStyle="Large"
                                      Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/FullWindowView.svg'}"
                                      MediumGlyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/FullWindowView_20x20.svg'}"
                                      IsChecked="{Binding [1].FullWindowMode}" />
                </dxr:RibbonPageGroup>
                <dxr:RibbonPageGroup Caption="Code" MergeOrder="10">
                    <dxb:BarCheckItem Content="Show&#160;Code" IsChecked="{Binding '[1].CurrentDemoModule.Owner.ShowCode', Mode=TwoWay}"
                                      IsVisible="{Binding [1].CurrentDemoModule.Owner.HasCodeTexts}"
                                      RibbonStyle="Large"
                                      Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/ShowCode.svg'}"
                                      MediumGlyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/ShowCode_20x20.svg'}">
                        <dxmvvm:Interaction.Behaviors>
                            <local:ShowCodeVisibilityBehavior />
                        </dxmvvm:Interaction.Behaviors>
                    </dxb:BarCheckItem>
                    <dxb:BarSplitButtonItem Content="Open&#160;Solution" RibbonStyle="Large"
                                            IsVisible="{DXBinding '!$ddh:EnvironmentHelper.IsClickOnce'}"
                                            Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/OpenSolution.svg'}"
                                            MediumGlyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/OpenSolution_20x20.svg'}"
                                            dxb:BarManager.ShowGlyphsInPopupMenus="False">
                        <dxmvvm:Interaction.Behaviors>
                            <helpers:BarSplitButtonItemBehavior />
                        </dxmvvm:Interaction.Behaviors>
                        <dxb:PopupMenu>
                            <dxb:BarButtonItem Content="C# .NET Framework" Command="{DXCommand '[1].OpenCSSolution()'}" IsVisible="{Binding 'CurrentDemoModule.Owner.IsVisibleOpenCSSolution', RelativeSource={RelativeSource AncestorType=local:DemoBaseControl}}" />
                            <dxb:BarButtonItem Content="VB .NET Framework" Command="{DXCommand '[1].OpenVBSolution()'}" IsVisible="{Binding 'CurrentDemoModule.Owner.IsVisibleOpenVBSolution', RelativeSource={RelativeSource AncestorType=local:DemoBaseControl}}" />
                            <dxb:BarButtonItem Content="C# .NET Core" Command="{DXCommand '[1].OpenCSNetCoreSolution()'}" IsVisible="{Binding 'CurrentDemoModule.Owner.IsVisibleOpenCSNetCoreSolution', RelativeSource={RelativeSource AncestorType=local:DemoBaseControl}}" />
                            <dxb:BarButtonItem Content="VB .NET Core" Command="{DXCommand '[1].OpenVBNetCoreSolution()'}" IsVisible="{Binding 'CurrentDemoModule.Owner.IsVisibleOpenVBNetCoreSolution', RelativeSource={RelativeSource AncestorType=local:DemoBaseControl}}" />
                        </dxb:PopupMenu>
                    </dxb:BarSplitButtonItem>
                </dxr:RibbonPageGroup>
                <dxr:RibbonPageGroup Caption="DevExpress" MergeOrder="10">
                    <dxb:BarButtonItem Content="Getting Started"
                                       Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/GetStarted.svg'}"
                                       MediumGlyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/GetStarted_20x20.svg'}"
                                       RibbonStyle="Large"
                                       Command="{DXCommand '$dx:DocumentPresenter.OpenLink($helpers:LinksHelper.GetStarted(`Wpf`, [1].SelectedModule.Type))'}" />
                    <dxb:BarButtonItem Content="Support"
                                       Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/GetSupport.svg'}"
                                       MediumGlyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/GetSupport_20x20.svg'}"
                                       RibbonStyle="Large"
                                       Command="{DXCommand '$dx:DocumentPresenter.OpenLink($helpers:LinksHelper.GetSupport(`Wpf`, [1].SelectedModule.Type))'}" />
                    <dxb:BarButtonItem Content="Buy Now"
                                       Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/BuyNow.svg'}"
                                       MediumGlyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/BuyNow_20x20.svg'}"
                                       RibbonStyle="Large"
                                       Command="{DXCommand '$dx:DocumentPresenter.OpenLink($helpers:LinksHelper.BuyNow(`Wpf`, [1].SelectedModule.Type))'}" />
                    <dxb:BarButtonItem Content="About"
                                       Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/About.svg'}"
                                       MediumGlyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/About_20x20.svg'}"
                                       RibbonStyle="Large"
                                       Command="{DXCommand '[1].ShowAbout()'}"
                                       KeyGesture="F1" />
                </dxr:RibbonPageGroup>
            </dxr:RibbonPage>
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="pageThemes">
        <ContentControl>
            <dxr:RibbonPage Caption="Themes" MergeOrder="10" dxb:BarNameScope.IsScopeOwner="True"
                            IsVisible="False"
                            helpers:RibbonDynamicCategoryBehavior.IsVisible="{Binding [1].HideThemeSelector, Converter={dxmvvm:BooleanNegationConverter}}">
                <dxr:RibbonPageGroup Caption="Appearance">
                    <helpers:ThemesBarSplitButtonItem x:Name="themesItem"
                                                      dxb:BarManager.ShowGlyphsInPopupMenus="False"
                                                      GlyphSize="Large"
                                                      IsVisible="{Binding Source={x:Static helpers:LWThemeHelper.Instance}, Path=IsLightweightThemesEnabled, Converter={dxmvvm:BooleanNegationConverter}}">
                        <helpers:ThemesBarSplitButtonItem.Tag>
                            <sys:Boolean>False</sys:Boolean>
                        </helpers:ThemesBarSplitButtonItem.Tag>
                        <dxmvvm:Interaction.Behaviors>
                            <helpers:BarSplitItemDemoThemeSelectorBehavior x:Name="behavior" ShowTouchThemes="False"
                                                                           ShowAllCategories="{Binding AssociatedObject.Tag, Mode=TwoWay, RelativeSource={RelativeSource Self}}">
                                <helpers:BarSplitItemDemoThemeSelectorBehavior.Footer>
                                    <StackPanel>
                                        <Separator Margin="0"/>
                                        <Button  Content="{DXBinding '@s.Tag.Tag ? `Show Less` : `Show More`'}"  Command="{DXCommand '@s.Tag.Tag = !@s.Tag.Tag'}" Tag="{x:Reference themesItem}" BorderThickness="0"/>
                                    </StackPanel>
                                </helpers:BarSplitItemDemoThemeSelectorBehavior.Footer>
                                <dxmvvm:Interaction.Behaviors>
                                    <helpers:ThemeSelector AllowTouchUI="{Binding IsEnabled, Mode=OneWayToSource, Source={x:Reference touchUISelector}}"
                                                           TouchUI="{Binding EditValue, Source={x:Reference touchUISelector}}" />
                                </dxmvvm:Interaction.Behaviors>
                            </helpers:BarSplitItemDemoThemeSelectorBehavior>
                        </dxmvvm:Interaction.Behaviors>
                    </helpers:ThemesBarSplitButtonItem>
                    <dxb:BarSplitButtonItem
                        IsVisible="{Binding Source={x:Static helpers:LWThemeHelper.Instance}, Path=IsLightweightThemesEnabled}">
                        <dxmvvm:Interaction.Behaviors>
                            <dxb:BarSplitItemThemeSelectorBehavior
                                ShowSelectedThemeGlyph="True"
                                ShowTouchThemes="True"
                                ShowWin10SystemColorTheme="True" />
                        </dxmvvm:Interaction.Behaviors>
                    </dxb:BarSplitButtonItem>
                    <dxr:RibbonGalleryBarItem>
                        <dxmvvm:Interaction.Behaviors>
                            <dxr:RibbonGalleryItemThemePaletteSelectorBehavior />
                        </dxmvvm:Interaction.Behaviors>
                    </dxr:RibbonGalleryBarItem>
                </dxr:RibbonPageGroup>
                <dxr:RibbonPageGroup Caption="DebugTest" IsVisible="{Binding [1].DebugTest}">
                    <dxr:RibbonPageGroup.Resources>
                        <dxb:LightweightBarItemLinkControl x:Key="StaticLinkControl"/>
                    </dxr:RibbonPageGroup.Resources>
                    <dxb:BarSplitButtonItem Content="Copy Demo Link" RibbonStyle="Large"
                                            Glyph="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.DemoBase.v24.1;component/DemoBaseControl/Images/CopyLink.svg'}"
                                            dxb:BarManager.ShowGlyphsInPopupMenus="False">
                        <dxmvvm:Interaction.Behaviors>
                            <helpers:BarSplitButtonItemBehavior />
                        </dxmvvm:Interaction.Behaviors>
                        <dxb:PopupMenu>
                            <dxb:BarButtonItem Content="Copy Link"
                                               Command="{DXCommand '[1].CopyLink()'}" />
                            <dxb:BarButtonItem Content="Copy HTML Link"
                                               Command="{DXCommand '[1].CopyHtmlLink()'}" />
                        </dxb:PopupMenu>
                    </dxb:BarSplitButtonItem>
                    <dxb:BarEditItem EditValueChanged="{DXEvent Handler='$Window.GetWindow(@s).FlowDirection = @s.EditValue ? $FlowDirection.RightToLeft : $FlowDirection.LeftToRight'}"
                                     EditHorizontalAlignment="Left"
                                     IsVisible="{Binding [1].Demo.AllowRtl}">
                        <dxb:BarEditItem.EditSettings>
                            <dxe:CheckEditSettings Content="RTL" />
                        </dxb:BarEditItem.EditSettings>
                    </dxb:BarEditItem>
                    <dxb:BarEditItem x:Name="touchUISelector" EditHorizontalAlignment="Left"
                                     IsVisible="{DXBinding '@c[1].Demo.AllowTouchUI and !@c[1].HideThemeSelector'}">
                        <dxb:BarEditItem.EditValue>
                            <sys:Boolean>False</sys:Boolean>
                        </dxb:BarEditItem.EditValue>
                        <dxb:BarEditItem.EditSettings>
                            <dxe:CheckEditSettings Content="Touch UI" />
                        </dxb:BarEditItem.EditSettings>
                    </dxb:BarEditItem>
                    <dxb:BarEditItem EditHorizontalAlignment="Left"
                                     Hint="Something may not work when switching at runtime. Enable LW Themes at startup for real testing."
                                     EditValue="{Binding Source={x:Static helpers:LWThemeHelper.Instance}, Path=IsLightweightThemesEnabled, Mode=TwoWay}">
                        <dxb:BarEditItem.EditSettings>
                            <dxe:CheckEditSettings Content="Use LW Themes" />
                        </dxb:BarEditItem.EditSettings>
                        <dxb:BarEditItem.Content2Template>
                            <DataTemplate>
                                <Image Source="{dx:DXImage ImagePath='SvgImages/Status/Warning.svg'}" Width="16" Height="16"/>
                            </DataTemplate>
                        </dxb:BarEditItem.Content2Template>
                    </dxb:BarEditItem>
                    <dxb:BarEditItem EditHorizontalAlignment="Left" EditValue="{Binding Source={StaticResource StaticLinkControl}, Path=StaticIsEnabled}">
                        <dxb:BarEditItem.EditSettings>
                            <dxe:CheckEditSettings Content="Lightweight bar items" />
                        </dxb:BarEditItem.EditSettings>
                    </dxb:BarEditItem>
                    <dxb:BarEditItem EditHorizontalAlignment="Left" EditValueChanged="{DXEvent Handler='$dxbn:RecyclingPanelHelper.IsEnabled = @s.EditValue'}" EditValue="True">
                        <dxb:BarEditItem.EditSettings>
                            <dxe:CheckEditSettings Content="Recycling" />
                        </dxb:BarEditItem.EditSettings>
                    </dxb:BarEditItem>
                    <dxb:BarEditItem EditHorizontalAlignment="Left" EditValue="{Binding [1].UseNewFilteringUI}" IsVisible="{Binding [1].AllowUseNewFilteringUI}" >
                        <dxb:BarEditItem.EditSettings>
                            <dxe:CheckEditSettings Content="New FilteringUI" />
                        </dxb:BarEditItem.EditSettings>
                    </dxb:BarEditItem>
                    <dxb:BarButtonItem Content="ClearPaletteCache" Command="{Binding [1].ClearPaletteCache}" />
                    <dxb:BarEditItem EditHorizontalAlignment="Left" EditValue="{Binding [1].ShowModuleInfoInTooltip}">
                        <dxb:BarEditItem.EditSettings>
                            <dxe:CheckEditSettings Content="Show module info in tooltip"/>
                        </dxb:BarEditItem.EditSettings>
                    </dxb:BarEditItem>
                </dxr:RibbonPageGroup>
            </dxr:RibbonPage>
        </ContentControl>
    </DataTemplate>
    <DXDataTemplateSelector x:Key="ribbonPageSelector">
        <DXDataTemplateTrigger Binding="{Binding [0]}" Value="0" Template="{StaticResource pageDemo}" />
        <DXDataTemplateTrigger Binding="{Binding [0]}" Value="1" Template="{StaticResource pageThemes}" />
    </DXDataTemplateSelector>
    <Style TargetType="local:DemoBaseControl">
        <Setter Property="MinWidth" Value="560" />
        <Setter Property="MinHeight" Value="450" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <helpers:WindowTitleService WindowTitle="{DXBinding '@s.AssociatedObject.CurrentDemoModule == null ? null : @s.AssociatedObject.CurrentDemoModule.Owner.WindowTitle'}"
                                                    WindowIcon="{DXBinding '@s.AssociatedObject.CurrentDemoModule == null ? null : $dxi:ImageSourceHelper.GetImageSource($utils:AssemblyHelper.GetResourceUri(@s.AssociatedObject.CurrentDemoModule.GetType().Assembly, `demoicon.ico`))'}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DemoBaseControl">
                    <DockPanel>
                        <DockPanel.Resources>
                            <CollectionViewSource x:Key="moduleSource" Source="{DXBinding '@p.Modules'}">
                                <CollectionViewSource.GroupDescriptions>
                                    <PropertyGroupDescription PropertyName="GroupName" />
                                </CollectionViewSource.GroupDescriptions>
                            </CollectionViewSource>
                        </DockPanel.Resources>
                        <dxr:RibbonControl x:Name="PART_Ribbon"
                                           DockPanel.Dock="Top">
                            <!--To set an initial value for property, go to the ApplyDefaultRibbonProperties method-->
                            <dxr:RibbonDefaultPageCategory PagesSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={helpers:ObjectToItemsSourceConverter ItemsCount=2}}"
                                                           PageTemplateSelector="{StaticResource ribbonPageSelector}" />
                            <dxr:RibbonPageCategory Caption="Demo"
                                                    SelectedPageOnCategoryShowing="None"
                                                    IsVisible="False"
                                                    PagesSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={helpers:ObjectToItemsSourceConverter ItemsCount=2}}"
                                                    PageTemplateSelector="{StaticResource ribbonPageSelector}">
                                <dxmvvm:Interaction.Behaviors>
                                    <helpers:RibbonDynamicCategoryBehavior />
                                </dxmvvm:Interaction.Behaviors>
                            </dxr:RibbonPageCategory>
                        </dxr:RibbonControl>
                        <Grid>
                            <Border ClipToBounds="True" Name="PART_ModuleBorder">
                                <helpers:DemoTransferDecorator x:Name="PART_DemoTransfer">
                                    <helpers:DemoTransferDecorator.Storyboards>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.15" From="0" To="-200" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(TranslateTransform.X)">
                                                <DoubleAnimation.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation Duration="0:0:0.10" From="1" To="0" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                <DoubleAnimation.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.15" From="200" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(TranslateTransform.X)">
                                                <DoubleAnimation.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation Duration="0:0:0.10" From="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                <DoubleAnimation.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </helpers:DemoTransferDecorator.Storyboards>
                                    <Grid>
                                        <ContentControl x:Name="PART_DemoModule1Presenter" Content="{x:Null}" ContentTemplate="{x:Null}" ContentTemplateSelector="{StaticResource DemoModulePresenterTemplateSelector}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Focusable="False" />
                                        <ContentControl x:Name="PART_DemoModule2Presenter" Content="{x:Null}" ContentTemplate="{x:Null}" ContentTemplateSelector="{StaticResource DemoModulePresenterTemplateSelector}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Focusable="False" />
                                    </Grid>
                                </helpers:DemoTransferDecorator>
                            </Border>
                            <helpers:WindowSidebar>
                                <dx:BackgroundPanel dxi:WindowChrome.IsHitTestVisibleInChrome="True" Visibility="{DXBinding '@p.FullWindowMode or @p.Modules.Count le 1 ? $Visibility.Collapsed : $Visibility.Visible'}" Margin="{Binding Path=ActualRoundCorners, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dx:ThemedWindow}}, Converter={helpers:RoundCornersToMarginConverter}}">
                                    <dx:BackgroundPanel.Resources>
                                        <Thickness x:Key="{dxat:AccordionThemeKeys ResourceKey=SearchControlMargin, IsThemeIndependent=True}">12,13,12,25</Thickness>
                                        <sys:Double x:Key="HeaderTouchHeight">44</sys:Double>
                                        <Thickness x:Key="HeaderTouchMargin">12,0,0,0</Thickness>
                                        <Style TargetType="dxa:AccordionView">
                                            <Setter Property="ItemsPanel">
                                                <Setter.Value>
                                                    <ItemsPanelTemplate>
                                                        <dxan:AccordionVirtualizingPanel Margin="0,0,0,-15" />
                                                    </ItemsPanelTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                        <Style x:Key="NavigationAccordion" TargetType="dxa:AccordionControl">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type dxa:AccordionControl}">
                                                        <Grid Margin="{TemplateBinding Padding}">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition/>
                                                                <ColumnDefinition Width="0" x:Name="RightAccordionColumn"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Border Name="Border"
                                                                    Background="{TemplateBinding Background}"
                                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                                    BorderThickness="{TemplateBinding BorderThickness}"/>
                                                            <dxan:AccordionViewExpander x:Name="PART_Expander"
                                                                                        Style="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=AccordionViewExpanderStyle}}" ItemMinWidth="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderHeight}}"
                                                                                        ContentMinWidth="{Binding ActualWidth, ElementName=contentExpanderContainer}">
                                                                <Grid>
                                                                    <dxmvvm:Interaction.Behaviors>
                                                                        <dxa:AccordionResizeBehavior ContentRowIndex="2" OverflowControl="{Binding ElementName=PART_OverflowControl}"/>
                                                                    </dxmvvm:Interaction.Behaviors>
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition Height="Auto"/>
                                                                        <RowDefinition Height="Auto"/>
                                                                        <RowDefinition MinHeight="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderHeight}}"/>
                                                                        <RowDefinition Height="Auto"/>
                                                                    </Grid.RowDefinitions>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="*" x:Name="SearchControlColumn"/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                        <ColumnDefinition Width="0" x:Name="RightColumn"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentControl x:Name="PART_HeaderBackgroundControl" Grid.ColumnSpan="2" Template="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=HeaderBackgroundTemplate}}" HorizontalAlignment="Stretch"
                                                                            VerticalAlignment="Stretch" Visibility="{TemplateBinding ActualShowHeader, Converter={dxmvvm:BooleanToVisibilityConverter}}"/>
                                                                    <dxa:ItemPresenter x:Name="PART_HeaderPresenter" Style="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=HeaderPresenterStyleBase}}">
                                                                        <dxa:ItemPresenter.Visibility>
                                                                            <MultiBinding Converter="{dxan:ParametersToVisibilityConverter}">
                                                                                <Binding Path="ActualShowHeader" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                                <Binding Path="IsExpandedView" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                            </MultiBinding>
                                                                        </dxa:ItemPresenter.Visibility>
                                                                    </dxa:ItemPresenter>
                                                                    <dxa:AccordionSearchControl x:Name="PART_SearchControl"
                                                                                        Grid.Row="1"
                                                                                        Style="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=SearchControlStyle}}"
                                                                                        NullText="{TemplateBinding SearchControlNullText}">
                                                                        <dxa:AccordionSearchControl.Visibility>
                                                                            <MultiBinding Converter="{dxan:ParametersToVisibilityConverter}">
                                                                                <Binding Path="ShowSearchControl" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                                <Binding Path="IsExpandedView" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                            </MultiBinding>
                                                                        </dxa:AccordionSearchControl.Visibility>
                                                                    </dxa:AccordionSearchControl>
                                                                    <ToggleButton x:Name="PART_AccordionCollapseButton" Grid.Row="1" Grid.Column="1" Style="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=CollapseButtonStyle}}"
                                                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                                          Visibility="{Binding IsCollapseButtonVisible, Converter={dxmvvm:BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <ContentControl Grid.Row="2" Grid.ColumnSpan="2" x:Name="PART_ContentContainer" Focusable="False">
                                                                        <ContentPresenter x:Name="PART_ViewPresenter"/>
                                                                    </ContentControl>
                                                                    <Grid x:Name="contentExpanderContainer" Grid.Row="2" Grid.ColumnSpan="2" Visibility="Collapsed">
                                                                        <dxe:ListBoxEdit x:Name="PART_CollapsedItemsSelector" ScrollViewer.VerticalScrollBarVisibility="Hidden" SelectionMode="Multiple" ShowBorder="False"
                                                                                 ItemContainerStyle="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=CollapsedItemStyle}}" AllowItemHighlighting="True" Padding="0">
                                                                            <dxe:ListBoxEdit.ItemTemplate>
                                                                                <DataTemplate>
                                                                                    <dxa:CollapsedItemDecorator Style="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=CollapsedItemDecoratorStyle}}"/>
                                                                                </DataTemplate>
                                                                            </dxe:ListBoxEdit.ItemTemplate>
                                                                            <dxe:ListBoxEdit.ItemsPanel>
                                                                                <ItemsPanelTemplate>
                                                                                    <dxan:CollapsedAccordionVirtualizingPanel Style="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=CollapsedAccordionPanelStyle}}"/>
                                                                                </ItemsPanelTemplate>
                                                                            </dxe:ListBoxEdit.ItemsPanel>
                                                                        </dxe:ListBoxEdit>
                                                                        <dxa:AccordionPopup x:Name="PART_AccordionPopup" PlacementTarget="{Binding ElementName=PART_CollapsedItemsSelector}"
                                                                                    ActualContent="{Binding ElementName=PART_PopupContentContainer}"
                                                                                    Style="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=PopupStyle}}">
                                                                            <ContentControl x:Name="PART_PopupContentContainer" Template="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=PopupWindowFrameTemplate}}" Focusable="False"/>
                                                                        </dxa:AccordionPopup>
                                                                    </Grid>
                                                                    <dxa:AccordionOverflowControl x:Name="PART_OverflowControl" Grid.Row="3" Grid.ColumnSpan="2"
                                                                                          Template="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=AccordionOverflowControlTemplate}}"
                                                                                          OverflowItemMargin="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=OverflowItemMargin}}"
                                                                                          OverflowBackgroundPadding="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=OverflowBackgroundPadding}}"
                                                                                          OverflowItemMinLength="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderHeight}}"
                                                                                          Style="{dxi:ThemeResource {dxat:AccordionThemeKeys ResourceKey=AccordionOverflowControlStyle}}">
                                                                        <dxa:AccordionOverflowControl.Visibility>
                                                                            <MultiBinding Converter="{dxan:OverflowControlVisibilityConverter}">
                                                                                <Binding Path="CompactNavigation" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                                <Binding Path="ActualViewMode" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                            </MultiBinding>
                                                                        </dxa:AccordionOverflowControl.Visibility>
                                                                    </dxa:AccordionOverflowControl>
                                                                </Grid>
                                                            </dxan:AccordionViewExpander>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsExpandedView" Value="False">
                                                                <Setter Property="Width" TargetName="SearchControlColumn" Value="0"/>
                                                                <Setter TargetName="contentExpanderContainer" Property="Visibility" Value="Visible"/>
                                                                <Setter TargetName="PART_ContentContainer" Property="Visibility" Value="Hidden"/>
                                                                <Setter TargetName="PART_ContentContainer" Property="Width" Value="0"/>
                                                                <Setter TargetName="PART_ViewPresenter" Property="Margin" Value="1"/>
                                                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                            </Trigger>
                                                            <Trigger Property="IsExpanded" Value="False">
                                                                <Setter Property="Width" TargetName="RightAccordionColumn" Value="*"/>
                                                                <Setter Property="Width" TargetName="RightColumn" Value="*"/>
                                                            </Trigger>
                                                            <Trigger Property="ActualShowHeader" Value="True">
                                                                <Setter TargetName="PART_SearchControl" Property="Grid.ColumnSpan" Value="2"/>
                                                                <Setter TargetName="PART_AccordionCollapseButton" Property="Grid.Row" Value="0"/>
                                                            </Trigger>
                                                            <Trigger Property="AllowAnimation" Value="False">
                                                                <Setter TargetName="PART_Expander" Property="ExpandStoryboard" Value="{x:Null}" />
                                                                <Setter TargetName="PART_Expander" Property="CollapseStoryboard" Value="{x:Null}" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                        <Style x:Key="NavigationAccordionItem" TargetType="dxa:AccordionItem">
                                            <Setter Property="VerticalContentAlignment" Value="Stretch" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type dxa:AccordionItem}">
                                                        <Grid>
                                                            <ContentControl x:Name="PART_RootContentControl" BorderThickness="0" Background="Transparent" Focusable="False" FocusVisualStyle="{x:Null}" Foreground="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=TextForeground}}">
                                                                <dxmvvm:Interaction.Behaviors>
                                                                    <dxa:AccordionItemForegroundBehavior ItemType="{Binding ItemType, RelativeSource={RelativeSource TemplatedParent}}"
                                                                                                                     Foreground="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                                                                                                                     TextDefaultForeground="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=TextForeground}}"
                                                                                                                     ItemDefaultForeground="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderDefaultForeground}}"
                                                                                                                     RootItemDefaultForeground="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderDefaultForeground}}"/>
                                                                </dxmvvm:Interaction.Behaviors>
                                                                <Grid x:Name="PART_ItemContainer">
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition>
                                                                            <dxmvvm:Interaction.Behaviors>
                                                                                <dxa:AccordionItemOffsetBehavior ItemLevel="{Binding ItemLevel, RelativeSource={RelativeSource TemplatedParent}}"
                                                                                                                             Offset="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemOffset}}"
                                                                                                                             TouchOffset="35"
                                                                                                                             ItemType="{Binding ItemType, RelativeSource={RelativeSource TemplatedParent}}"
                                                                                                                             IsTouchEnabled="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource TemplatedParent}}"
                                                                                                                             RootItemDisplayMode="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.RootItemDisplayMode, RelativeSource={RelativeSource TemplatedParent}}"
                                                                                                                             RemoveOffset="{Binding Path=(dxa:AccordionView.CurrentView).IsSingleRootItemViewMode, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                            </dxmvvm:Interaction.Behaviors>
                                                                        </ColumnDefinition>
                                                                        <ColumnDefinition x:Name="HeaderColumn" Width="*"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition x:Name="HeaderRow" Height="Auto" MinHeight="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderHeight}}"/>
                                                                        <RowDefinition/>
                                                                    </Grid.RowDefinitions>
                                                                    <dxa:AccordionItemBackgroundControl x:Name="PART_BackgroundControl" Focusable="False" ItemState="Default" Grid.Column="1"
                                                                                                        ItemType="{TemplateBinding ItemType}"
                                                                                                        Margin="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderContainerMargin}}"
                                                                                                        Template="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemBackgroundTemplate}}"
                                                                                                        >
                                                                    </dxa:AccordionItemBackgroundControl>
                                                                    <Grid x:Name="PART_HeaderContainer" Grid.Column="1" Background="Transparent" Margin="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderContainerMargin}}"
                                                                          MouseLeftButtonDown="{DXEvent Handler='@args.Handled = true'}">
                                                                        <Grid x:Name="PART_HeaderInternalContainer" Grid.Column="1" Margin="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderMargin}}">
                                                                            <Grid.ColumnDefinitions>
                                                                                <ColumnDefinition Width="Auto"/>
                                                                                <ColumnDefinition x:Name="LeftExpandButtonColumn" Width="Auto"/>
                                                                                <ColumnDefinition Width="Auto"/>

                                                                                <ColumnDefinition Width="*"/>
                                                                                <ColumnDefinition Width="Auto"/>
                                                                                <ColumnDefinition Width="*"/>

                                                                                <ColumnDefinition Width="Auto"/>
                                                                                <ColumnDefinition x:Name="RightExpandButtonColumn" Width="Auto"/>
                                                                                <ColumnDefinition Width="Auto"/>
                                                                            </Grid.ColumnDefinitions>
                                                                            <Grid.RowDefinitions>
                                                                                <RowDefinition Height="Auto"/>
                                                                                <RowDefinition Height="*"/>
                                                                            </Grid.RowDefinitions>
                                                                            <dxa:AccordionItemBackgroundControl x:Name="PART_SelectionIndicator"
                                                                                                                Grid.RowSpan="2"
                                                                                                                Focusable="False"
                                                                                                                HorizontalAlignment="Left"
                                                                                                                VerticalAlignment="Center"
                                                                                                                ItemState="Default"
                                                                                                                ItemType="{TemplateBinding ItemType}"
                                                                                                                Tag="{Binding Path=(dx:ThemeManager.TreeWalker), RelativeSource={RelativeSource Self}}">
                                                                                <dxa:AccordionItemBackgroundControl.Style>
                                                                                    <Style TargetType="dxa:AccordionItemBackgroundControl">
                                                                                        <Setter Property="Template" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=SelectionIndicatorTemplate}}"/>
                                                                                        <Style.Triggers>
                                                                                            <DataTrigger Binding="{DXBinding '$helpers:DXBindingHelper.ThemeName(@s.Tag)'}" Value="Win11Light">
                                                                                                <Setter Property="Template">
                                                                                                    <Setter.Value>
                                                                                                        <ControlTemplate TargetType="dxa:AccordionItemBackgroundControl">
                                                                                                            <Border x:Name="SelectionIndicator"
                                                                                                                    Background="#FF005FBA"
                                                                                                                    CornerRadius="2"
                                                                                                                    Height="20"
                                                                                                                    HorizontalAlignment="Left"
                                                                                                                    Opacity="0"
                                                                                                                    VerticalAlignment="Center"
                                                                                                                    Width="3"
                                                                                                                    Margin="1,0,0,0"/>
                                                                                                            <ControlTemplate.Triggers>
                                                                                                                <Trigger Property="ItemState" Value="Selected">
                                                                                                                    <Setter Property="Opacity" TargetName="SelectionIndicator" Value="1"/>
                                                                                                                </Trigger>
                                                                                                            </ControlTemplate.Triggers>
                                                                                                        </ControlTemplate>
                                                                                                    </Setter.Value>
                                                                                                </Setter>
                                                                                            </DataTrigger>
                                                                                        </Style.Triggers>
                                                                                    </Style>
                                                                                </dxa:AccordionItemBackgroundControl.Style>
                                                                            </dxa:AccordionItemBackgroundControl>
                                                                            <dxa:AccordionExpandButton Grid.Column="1" Grid.RowSpan="2" x:Name="PART_ExpandButton" Style="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ExpanderButtonStyle}}"/>
                                                                            <Border x:Name="PART_Header" Grid.Column="3" Grid.ColumnSpan="3" Grid.Row="1" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
                                                                                <ContentPresenter x:Name="PART_HeaderContent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                                                              Margin="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=HeaderElementsMargin}}">
                                                                                    <ContentPresenter.Resources>
                                                                                        <Style TargetType="TextBlock" x:Key="{x:Type TextBlock}">
                                                                                            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                                                                        </Style>
                                                                                    </ContentPresenter.Resources>
                                                                                </ContentPresenter>
                                                                            </Border>
                                                                            <Border x:Name="PART_RightBorder" Grid.Column="8" Grid.RowSpan="2" BorderThickness="0" Margin="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=HeaderElementsMargin}}"/>
                                                                        </Grid>
                                                                    </Grid>
                                                                    <dxan:AccordionExpander Grid.Row="1" Grid.Column="1" x:Name="PART_Expander" IsExpanded="True" Duration="0"
                                                                                                        ExpandStoryboard="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.ExpandStoryboard, RelativeSource={RelativeSource TemplatedParent}}"
                                                                                                        CollapseStoryboard="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.CollapseStoryboard, RelativeSource={RelativeSource TemplatedParent}}">
                                                                        <ItemsPresenter x:Name="ItemsHost" />
                                                                    </dxan:AccordionExpander>
                                                                </Grid>
                                                            </ContentControl>
                                                            <Border BorderThickness="3,0,0,0" Margin="0,1,0,0" BorderBrush="#FFFCA90A" Visibility="{DXBinding '@p.Header.Name == `Highlighted Features` ? $Visibility.Visible : $Visibility.Collapsed'}" />
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <!--#region Misc-->
                                                            <Trigger Property="AllowAnimation" Value="false">
                                                                <Setter TargetName="PART_Expander" Property="ExpandStoryboard" Value="{x:Null}" />
                                                                <Setter TargetName="PART_Expander" Property="CollapseStoryboard" Value="{x:Null}" />
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter TargetName="PART_HeaderContainer" Property="Opacity" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=DisabledItemOpacity}}" />
                                                            </Trigger>
                                                            <Trigger Property="ItemType" Value="RootItem">
                                                                <Setter TargetName="PART_HeaderInternalContainer" Property="Margin" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderMargin}}"/>
                                                                <Setter TargetName="PART_Expander" Property="Margin" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemContainerMargin}}"/>
                                                                <Setter TargetName="PART_HeaderContainer" Property="Margin" Value="0"/>
                                                                <Setter TargetName="PART_BackgroundControl" Property="Margin" Value="0"/>
                                                            </Trigger>
                                                            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                                                <Setter TargetName="PART_HeaderContent" Property="Margin" Value="{StaticResource HeaderTouchMargin}"/>
                                                                <Setter TargetName="PART_RightBorder" Property="Margin" Value="{StaticResource HeaderTouchMargin}"/>
                                                            </Trigger>
                                                            <Trigger Property="ItemType" Value="Wrapper">
                                                                <Setter TargetName="PART_HeaderContent" Property="HorizontalAlignment" Value="Stretch" />
                                                                <Setter TargetName="PART_HeaderContent" Property="VerticalAlignment" Value="Stretch" />
                                                                <Setter TargetName="PART_HeaderContent" Property="Margin" Value="0" />
                                                                <Setter TargetName="PART_Header" Property="Margin" Value="0" />
                                                                <Setter TargetName="PART_HeaderInternalContainer" Property="Margin" Value="0" />
                                                                <Setter TargetName="PART_RightBorder" Property="Margin" Value="0" />
                                                                <Setter TargetName="PART_HeaderContainer" Property="Margin" Value="0" />
                                                                <Setter TargetName="PART_BackgroundControl" Property="Margin" Value="0"/>
                                                            </Trigger>
                                                            <!--#endregion-->
                                                            <!--#region Expand Collapse-->
                                                            <Trigger Property="IsExpanded" Value="false">
                                                                <Setter TargetName="PART_Expander" Property="IsExpanded" Value="False" />
                                                            </Trigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding ItemVisibilityMode, RelativeSource={RelativeSource Self}}" Value="ShowSubItems"/>
                                                                    <Condition Binding="{Binding ItemLevel, RelativeSource={RelativeSource Self}}" Value="0"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="PART_Expander" Property="IsExpanded" Value="True" />
                                                                <Setter TargetName="PART_Expander" Property="ExpandStoryboard" Value="{x:Null}" />
                                                                <Setter TargetName="PART_Expander" Property="CollapseStoryboard" Value="{x:Null}" />
                                                            </MultiDataTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsExpanded" SourceName="PART_Expander" Value="true"/>
                                                                    <Condition Property="Expanding" SourceName="PART_Expander" Value="false"/>
                                                                    <Condition Property="AllowAnimation" Value="false"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="PART_Expander" Property="AnimationProgress" Value="1"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="AnimationProgress" SourceName="PART_Expander" Value="0"/>
                                                                    <Condition Property="AllowAnimation" Value="true"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsExpanded" SourceName="PART_Expander" Value="false"/>
                                                                    <Condition Property="AllowAnimation" Value="false"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                                                            </MultiTrigger>
                                                            <!--#endregion-->
                                                            <!--#region Header row-->
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True"/>
                                                                    <Condition Property="ItemType" Value="SubItem"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="HeaderRow" Property="MinHeight" Value="{StaticResource HeaderTouchHeight}"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True"/>
                                                                    <Condition Property="ItemType" Value="RootItem"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="HeaderRow" Property="MinHeight" Value="{StaticResource HeaderTouchHeight}"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="ItemType" Value="RootItem"/>
                                                                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="False"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="HeaderRow" Property="MinHeight" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderHeight}}"/>
                                                            </MultiTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding ItemVisibilityMode, RelativeSource={RelativeSource Self}}" Value="ShowSubItems"/>
                                                                    <Condition Binding="{Binding ItemLevel, RelativeSource={RelativeSource Self}}" Value="0"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="HeaderRow" Property="MinHeight" Value="0"/>
                                                                <Setter TargetName="HeaderRow" Property="Height" Value="0"/>
                                                                <Setter TargetName="PART_Expander" Property="Margin" Value="0"/>
                                                            </MultiDataTrigger>
                                                            <!--#endregion-->
                                                            <!--#region Expand buttons visibility setters-->
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding HasItems, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                    <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Left"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="PART_ExpandButton" Property="Visibility" Value="Visible"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding HasItems, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                    <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Left"/>
                                                                    <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="PART_ExpandButton" Property="Margin" Value="{StaticResource LeftExpanderTouchMargin}"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding HasItems, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                    <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Right"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="PART_ExpandButton" Property="Visibility" Value="Visible"/>
                                                                <Setter TargetName="PART_ExpandButton" Property="Grid.Column" Value="7"/>
                                                                <Setter TargetName="PART_ExpandButton" Property="IsRightExpandButton" Value="True"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding HasItems, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                    <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Right"/>
                                                                    <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="PART_ExpandButton" Property="Margin" Value="{StaticResource RightExpanderTouchMargin}"/>
                                                            </MultiDataTrigger>
                                                            <!--#endregion-->
                                                            <!--#region ExpandButtonContainer-->
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Left"/>
                                                                    <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="False"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="LeftExpandButtonColumn" Property="MinWidth" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ExpandButtonContainerMinWidth}}"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Left"/>
                                                                    <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="LeftExpandButtonColumn" Property="MinWidth" Value="{StaticResource ExpandButtonContainerTouchMinWidth}"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Right"/>
                                                                    <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="False"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="RightExpandButtonColumn" Property="MinWidth" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ExpandButtonContainerMinWidth}}"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Right"/>
                                                                    <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="RightExpandButtonColumn" Property="MinWidth" Value="{StaticResource ExpandButtonContainerTouchMinWidth}"/>
                                                            </MultiDataTrigger>
                                                            <!--#endregion-->
                                                            <!--#region Foreground & States-->
                                                            <Trigger Property="ItemType" Value="RootItem">
                                                                <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderDefaultForeground}}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsSelected" Value="True">
                                                                <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Selected"/>
                                                                <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Selected"/>
                                                                <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="Selected"/>
                                                            </Trigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsSelected" Value="True"/>
                                                                    <Condition Property="IsSelectionActive" Value="False"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="SelectedInactive"/>
                                                                <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Selected"/>
                                                                <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="SelectedInactive"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsSelected" Value="True"/>
                                                                    <Condition Property="ItemType" Value="SubItem"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderSelectedForeground}}" />
                                                                <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderSelectedForeground}}"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsSelected" Value="True"/>
                                                                    <Condition Property="IsSelectionActive" Value="False"/>
                                                                    <Condition Property="ItemType" Value="SubItem"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderSelectedInactiveForeground}}" />
                                                                <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderSelectedInactiveForeground}}"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsSelected" Value="True"/>
                                                                    <Condition Property="ItemType" Value="RootItem"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderSelectedForeground}}" />
                                                                <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderSelectedForeground}}"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsSelected" Value="True"/>
                                                                    <Condition Property="IsSelectionActive" Value="False"/>
                                                                    <Condition Property="ItemType" Value="RootItem"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderSelectedInactiveForeground}}" />
                                                                <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderSelectedInactiveForeground}}"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsMouseOverHeader" Value="True"/>
                                                                    <Condition Property="ActualHighlightOnHover" Value="True"/>
                                                                    <Condition Property="ItemType" Value="SubItem"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderHoverForeground}}"/>
                                                                <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderHoverForeground}}"/>
                                                                <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Hover"/>
                                                                <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Hover"/>
                                                                <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="Hover"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsMouseOverHeader" Value="True"/>
                                                                    <Condition Property="ActualHighlightOnHover" Value="True"/>
                                                                    <Condition Property="ItemType" Value="RootItem"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderHoverForeground}}"/>
                                                                <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderHoverForeground}}"/>
                                                                <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Hover"/>
                                                                <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Hover"/>
                                                                <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="Hover"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsPressed" Value="True"/>
                                                                    <Condition Property="ActualHighlightOnPress" Value="True"/>
                                                                    <Condition Property="ItemType" Value="SubItem"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="Pressed"/>
                                                                <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Pressed"/>
                                                                <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Pressed"/>
                                                                <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderPressedForeground}}"/>
                                                                <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=ItemHeaderPressedForeground}}"/>
                                                            </MultiTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsPressed" Value="True"/>
                                                                    <Condition Property="ActualHighlightOnPress" Value="True"/>
                                                                    <Condition Property="ItemType" Value="RootItem"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="Pressed"/>
                                                                <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Pressed"/>
                                                                <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Pressed"/>
                                                                <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderPressedForeground}}"/>
                                                                <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{dxi:ThemeResource {dxat:AccordionItemThemeKeys ResourceKey=RootItemHeaderPressedForeground}}"/>
                                                            </MultiTrigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                        <DXDataTemplateSelector x:Key="SidebarItemTemplateSelector">
                                            <DXDataTemplateTrigger Binding="{DXBinding 'GetType().Name'}" Value="CollectionViewGroupInternal">
                                                <DataTemplate>
                                                    <TextBlock Margin="4,7,12,7" FontSize="10" FontWeight="Bold" Text="{DXBinding 'Name.ToUpper()'}" TextWrapping="Wrap"
                                                               FontFamily="Segoe UI,Tahoma" Opacity="0.75" VerticalAlignment="Center" />
                                                </DataTemplate>
                                            </DXDataTemplateTrigger>
                                            <DXDataTemplateTrigger>
                                                <DataTemplate>
                                                    <TextBlock Margin="6,4,6,4" FontSize="11.5" Text="{Binding Title}" TextWrapping="Wrap" FontFamily="Segoe UI,Tahoma"
                                                               VerticalAlignment="Center"
                                                               ToolTipService.IsEnabled="{DXBinding '@a($dxa:AccordionItem).Tag.ShowModuleInfoInTooltip'}"
                                                               ToolTip="{Binding ShortInfo}"/>
                                                </DataTemplate>
                                            </DXDataTemplateTrigger>
                                        </DXDataTemplateSelector>
                                    </dx:BackgroundPanel.Resources>
                                    <dx:ThemedBorder BorderThickness="{Binding Path=(dx:ThemeManager.TreeWalker), RelativeSource={RelativeSource Self}, Converter={x:Static dbh:ThemeDependencyConverter.Instance},
                                     ConverterParameter='AccordionBorderThickness'}"
                                                     Width="219">
                                        <dxa:AccordionControl Style="{StaticResource NavigationAccordion}"
                                                              AllowVirtualization="True"
                                                              ItemsSource="{Binding Groups, Source={StaticResource moduleSource}}"
                                                              ChildrenPath="Items"
                                                              SelectedItem="{Binding SelectedModule, RelativeSource={RelativeSource TemplatedParent}}"
                                                              ItemTemplateSelector="{StaticResource SidebarItemTemplateSelector}"
                                                              ShowSearchControl="True"
                                                              CustomItemFilter="{DXEvent '@args.Accepted = @p.IsDemoModuleVisible(@args.SearchText, @args.Item); @args.Handled = true'}"
                                                              SearchControlNullText="Type keywords here"
                                                              SearchText="{Binding SearchText, Mode=OneWayToSource, RelativeSource={RelativeSource TemplatedParent}}"
                                                              ExpandMode="Multiple"
                                                              RootItemExpandButtonPosition="None"
                                                              SubItemExpandButtonPosition="None"
                                                              AutoExpandAllItems="True"
                                                              SelectionMode="Single"
                                                              SelectionUnit="SubItem">
                                            <dxa:AccordionControl.ItemContainerStyleSelector>
                                                <DXStyleSelector>
                                                    <DXStyleTrigger Binding="{DXBinding 'GetType().Name'}" Value="DemoModuleDescription">
                                                        <Style TargetType="dxa:AccordionItem" BasedOn="{StaticResource NavigationAccordionItem}">
                                                            <Setter Property="Tag" Value="{Binding Path=(local:DemoBaseControl.DemoBase), RelativeSource={RelativeSource Self}}" />
                                                            <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                                                                <Setter.Value>
                                                                    <DataTemplate>
                                                                        <ItemsControl>
                                                                            <dxmvvm:EventToCommand EventName="KeyDown" Command="{DXCommand Execute='@parameter.Key == $Key.Enter ? @s.AssociatedObject.Tag.LoadModule(@c) : null'}" PassEventArgsToCommand="True" />
                                                                            <dxmvvm:EventToCommand EventName="PreviewMouseLeftButtonDown" Command="{DXCommand Execute='@parameter.Handled = true; @s.AssociatedObject.Tag.LoadModule(@c)'}" PassEventArgsToCommand="True" />
                                                                        </ItemsControl>
                                                                    </DataTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Style>
                                                    </DXStyleTrigger>
                                                    <DXStyleTrigger>
                                                        <Style TargetType="dxa:AccordionItem" BasedOn="{StaticResource NavigationAccordionItem}">
                                                            <Setter Property="Margin" Value="0,0,0,15" />
                                                        </Style>
                                                    </DXStyleTrigger>
                                                </DXStyleSelector>
                                            </dxa:AccordionControl.ItemContainerStyleSelector>
                                            <dxmvvm:Interaction.Behaviors>
                                                <helpers:AccordionResetSelectionBehavior ActiveDemoModule="{Binding ActiveDemoModule, RelativeSource={RelativeSource TemplatedParent}}" />
                                                <helpers:AccordionSearchFocusBehavior />
                                            </dxmvvm:Interaction.Behaviors>
                                        </dxa:AccordionControl>
                                    </dx:ThemedBorder>
                                </dx:BackgroundPanel>
                            </helpers:WindowSidebar>
                        </Grid>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>