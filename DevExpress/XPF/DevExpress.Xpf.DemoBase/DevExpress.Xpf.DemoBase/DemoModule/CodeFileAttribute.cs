#region Copyright (c) 2000-2024 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2024 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2024 Developer Express Inc.

using System;
using System.Collections.Generic;
using System.Linq;
using DevExpress.Utils;
namespace DevExpress.Xpf.DemoBase {
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
	public class CodeFileAttribute : Attribute {
		public CodeFileAttribute(string path) {
			Path = path;
		}
		public string Path { get; private set; }
	}
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
	public class NoAutogeneratedCodeFilesAttribute : Attribute { }
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
	public class CodeFilesAttribute : Attribute {
		public CodeFilesAttribute(string path1, string path2, string path3, string path4, string path5, string path6, string path7) {
			Paths = new[] { path1, path2, path3, path4, path5, path6, path7 };
		}
		public CodeFilesAttribute(string path1, string path2, string path3, string path4, string path5, string path6) {
			Paths = new[] { path1, path2, path3, path4, path5, path6 };
		}
		public CodeFilesAttribute(string path1, string path2, string path3, string path4, string path5) {
			Paths = new[] { path1, path2, path3, path4, path5 };
		}
		public CodeFilesAttribute(string path1, string path2, string path3, string path4) {
			Paths = new[] { path1, path2, path3, path4 };
		}
		public CodeFilesAttribute(string path1, string path2, string path3) {
			Paths = new[] { path1, path2, path3 };
		}
		public CodeFilesAttribute(string path1, string path2) {
			Paths = new[] { path1, path2 };
		}
		public CodeFilesAttribute(string str) {
			Paths = str.Split(';').Select(p => p.Trim()).ToArray();
		}
		public string[] Paths { get; private set; }
	}
	class CodeFileAttributeParser {
		public static List<string> GetCodeFiles(Type type) {
			List<string> files = type.GetCustomAttributes(typeof(CodeFileAttribute), true).OfType<CodeFileAttribute>().OrderBy(a => a.Path).Select(a => a.Path).ToList();
			files.AddRange(type.GetCustomAttributes(typeof(CodeFilesAttribute), true).OfType<CodeFilesAttribute>().SelectMany(a => a.Paths));
			string xamlName = type.Name + ".xaml";
			string csName = type.Name + ".xaml.(cs)";
			var noAutogenerated =
				type.GetCustomAttributes(typeof(NoAutogeneratedCodeFilesAttribute), true)
					.OfType<NoAutogeneratedCodeFilesAttribute>()
					.FirstOrDefault();
			if(noAutogenerated == null) {
				if(!files.Any(f => f.EndsWith(csName))) {
					files.Insert(0, CompositeUri.Combine("Modules", csName));
				}
				if(!files.Any(f => f.EndsWith(xamlName))) {
					files.Insert(0, CompositeUri.Combine("Modules", xamlName));
				}
			}
			return files;
		}
	}
}
