#region Copyright (c) 2000-2024 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2024 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2024 Developer Express Inc.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using DevExpress.Mvvm;
using DevExpress.Mvvm.Native;
using DevExpress.Utils;
using DevExpress.Xpf.Core.Native;
using DevExpress.Xpf.DemoBase.Helpers;
using DevExpress.Xpf.DemoBase.Helpers.TextColorizer;
namespace DevExpress.Xpf.DemoBase {
	[NoAutogeneratedCodeFiles]
	public sealed partial class ShowcaseBrowserModuleCore : DemoModule {
		static bool? isCsCodeFiles;
		IShowcaseInfo[] showcases;
		public bool IsCS {
			get { return (bool)GetValue(IsCSProperty); }
			set { SetValue(IsCSProperty, value); }
		}
		public static readonly DependencyProperty IsCSProperty =
			DependencyProperty.Register("IsCS", typeof(bool), typeof(ShowcaseBrowserModuleCore), new PropertyMetadata(true, 
				(d,e) => ((ShowcaseBrowserModuleCore)d).IsCSChanged(e)));
		void IsCSChanged(DependencyPropertyChangedEventArgs e) {
			foreach(var item in GetViewModelCodeInfos())
				item.IsCS = IsCS;
			isCsCodeFiles = IsCS;
		}
		IEnumerable<ViewModelCodeInfo> GetViewModelCodeInfos() {
			return GetInfos(showcases).SelectMany(x => x.CodeFiles).OfType<ViewModelCodeInfo>();
		}
		ShowcaseInfo CurrentShowcase { get { return showcasesList.SelectedItem as ShowcaseInfo; } }
		internal ShowcaseBrowserModuleCore(IShowcaseInfo[] showcases) {
			var infos = GetInfos(showcases);
			this.showcases = showcases;
			InitializeComponent();
			showcasesList.Padding = showcases.Any(x => x is ShowcaseNode) ? new Thickness(0) : new Thickness(-17, 1, 0, 0);
			showcasesList.ItemsSource = showcases;
			showcasesList.SelectedItemChanged += (o, e) => {
				if(CurrentShowcase == null)
					return;
				tabControl.ItemsSource = CurrentShowcase.CodeFiles;
				tabControl.SelectedIndex = 0;
				RecreateView();
			};
			UpdateSelection(infos);
			Unloaded += (o, e) => {
				RecreateView();
			};
			if(!isCsCodeFiles.HasValue)
				isCsCodeFiles = DemoHelper.GetDemoLanguage(Application.Current.GetType().Assembly) == CodeLanguage.CS;
			IsCS = isCsCodeFiles.Value;
		}
		void UpdateSelection(IEnumerable<ShowcaseInfo> infos) {
			int i = 0;
			foreach(var info in infos)
				info.IsSelected = i++ == 0;
		}
		void SetSelection(string name) {
			foreach(var info in GetInfos(showcases))
				info.IsSelected = info.ViewType.Name == name;
		}
		public override void ProcessArguments(string[] arguments) {
			if(arguments == null || arguments.Length == 0)
				return;
			SetSelection(arguments[0]);
		}
		public override string GetArgument() {
			foreach(var info in GetInfos(showcases))
				if(info.IsSelected)
					return info.ViewType.Name;
			return string.Empty;
		}
		IEnumerable<ShowcaseInfo> GetInfos(IShowcaseInfo[] showcases) {
			return showcases.SelectMany(x => x is ShowcaseInfo
				? (x as ShowcaseInfo).Yield()
				: GetInfos((x as ShowcaseNode).Children));
		}
		void RecreateView() {
			if(CurrentShowcase == null)
				return;
			viewPresenter.Content = CurrentShowcase.CreateView();
		}
		internal static ShowcaseInfo LoadShowcase(string name, string helpUri, string path, Type[] types, bool showCodeBehind, SourceCodeOrder codeOrder = SourceCodeOrder.CodeBehindFirst, bool useNewDocsSite = false) {
			var viewType = types.First(IsView);
			var siteUri = useNewDocsSite ? "https://docs.devexpress.com/WPF/" : "https://documentation.devexpress.com/WPF/";
			return new ShowcaseInfo(name, helpUri != null ? siteUri + helpUri : null, viewType,
					types.SelectMany(type => GetTypeCodeInfo(path, type, showCodeBehind, codeOrder))
					.Where(x => x != null)
					.ToArray()
			);
		}
		static IEnumerable<ICodeInfo> GetTypeCodeInfo(string path, Type type, bool showCodeBehind, SourceCodeOrder codeOrder) {
			var codeInfos = new List<ICodeInfo>();
			if(IsView(type)) {
				codeInfos.Add(CreateViewCodeInfo(path, type));
				if(showCodeBehind) {
					AddCodeInfo(path, type, codeInfos);
					if(codeOrder == SourceCodeOrder.CodeBehindFirst)
						codeInfos.Reverse();
				}
			} else {
				AddCodeInfo(path, type, codeInfos);
			}
			return codeInfos;
		}
		static void AddCodeInfo(string path, Type type, List<ICodeInfo> codeInfos) {
			codeInfos.Add(CreateViewModelCodeInfo(path, type));
		}
		static bool IsView(Type type) {
			return typeof(UserControl).IsAssignableFrom(type);
		}
		static CodeInfo CreateViewCodeInfo(string path, Type viewType) {
			return new CodeInfo(viewType.Name + ".xaml", new CodeLanguageText(CodeLanguage.XAML, DemoCodeHelper.LoadXaml(path, viewType)));
		}
		static ICodeInfo CreateViewModelCodeInfo(string path, Type viewModelType) {
			return new ViewModelCodeInfo(viewModelType.Name, 
				GetCode(path, viewModelType, CodeLanguage.CS),
				GetCode(path, viewModelType, CodeLanguage.VB));
		}
		static CodeLanguageText GetCode(string path, Type viewModelType, CodeLanguage language) {
#if DEBUGTEST
			if(language == CodeLanguage.VB)
				return new CodeLanguageText(CodeLanguage.VB, string.Empty);
#endif
			string sourceCode = null;
			sourceCode = DemoCodeHelper.LoadSourceCode(path, viewModelType, language, IsView(viewModelType));
			if(string.IsNullOrEmpty(sourceCode)) {
				var newPath = path.Substring(0, path.LastIndexOf('/'));
				sourceCode = DemoCodeHelper.LoadSourceCode(newPath, viewModelType, language, IsView(viewModelType));
			}
			if(language == CodeLanguage.CS) { 
				sourceCode = sourceCode
					.Replace("//_VB_MAKE_PUBLIC_SETTER", string.Empty) 
					.Replace("//VB_MAKE_PUBLIC_SETTER", string.Empty) 
					;
			}
			return new CodeLanguageText(language, sourceCode);
		}
		void Hyperlink_Click(object sender, RoutedEventArgs e) {
			DevExpress.Data.Utils.SafeProcess.Start(learnMoreLink.NavigateUri.AbsoluteUri);
			e.Handled = true;
		}
		void TreeViewItem_Selected(object sender, RoutedEventArgs e) {
			TreeViewItem item = sender as TreeViewItem;
			if(item != null) {
				item.BringIntoView();
				e.Handled = true;
			}
		}
	}
	public interface IShowcaseInfo {
		string Name { get; }
	}
	public class ShowcaseNode : IShowcaseInfo {
		public ShowcaseNode(string name) {
			Name = name;
		}
		public string Name { get; }
		public IShowcaseInfo[] Children { get; set; }
	}
	public class ShowcaseInfo : BindableBase, IShowcaseInfo {
		public ShowcaseInfo(string name, string helpUri, Type viewType, ICodeInfo[] codeFiles) {
			Name = name;
			HelpUri = helpUri != null ? new Uri(helpUri) : null;
			ViewType = viewType;
			CodeFiles = codeFiles;
		}
		public bool IsSelected { get; set; }
		public string Name { get; private set; }
		public Uri HelpUri { get; private set; }
		public Type ViewType { get; private set; }
		public ICodeInfo[] CodeFiles { get; private set; }
		public UserControl CreateView() {
			return (UserControl)Activator.CreateInstance(ViewType);
		}
	}
	public interface ICodeInfo {
		string Name { get; }
		CodeLanguageText CodeText { get; }
	}
	public class CodeInfo : BindableBase, ICodeInfo {
		public CodeInfo(string name, CodeLanguageText codeText) {
			Name = name;
			CodeText = codeText;
		}
		public string Name { get; private set; }
		public CodeLanguageText CodeText { get; private set; }
	}
	public class ViewModelCodeInfo : BindableBase, ICodeInfo {
		string name;
		CodeLanguageText csCodeText;
		CodeLanguageText vbCodeText;
		bool isCS = true;
		public ViewModelCodeInfo(string name, CodeLanguageText csCodeText, CodeLanguageText vbCodeText) {
			this.name = name;
			this.csCodeText = csCodeText;
			this.vbCodeText = vbCodeText;
		}
		public string Name { get { return name + (IsCS ? ".cs" : ".vb"); } }
		public CodeLanguageText CodeText { get { return IsCS ? csCodeText : vbCodeText; } }
		public bool IsCS {
			get { return isCS; }
			set { isCS = value;
				RaisePropertiesChanged("Name", "CodeText");
			}
		}
	}
	public enum SourceCodeOrder {
		CodeBehindFirst,
		XamlFirst
	}
	public class LanguageToImageConverter : IValueConverter {
		public object Convert(object value, Type targetType, object parameter, CultureInfo culture) {
			var path = AssemblyHelper.GetResourceUri(typeof(LanguageToImageConverter).Assembly,  @"DemoBaseControl/Images/" + ((bool)value ? "csharp" : "visualbasic") + ".svg");
			return WpfSvgRenderer.CreateImageSource(path);
		}
		public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) { throw new NotImplementedException(); }
	}
}
