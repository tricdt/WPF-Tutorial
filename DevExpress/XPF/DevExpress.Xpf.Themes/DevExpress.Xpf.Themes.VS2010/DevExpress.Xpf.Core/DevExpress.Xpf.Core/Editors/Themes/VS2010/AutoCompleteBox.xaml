<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
                    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:dxn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.VS2010.v24.1;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Editors/Themes/Generic/AutoCompleteBox.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="{dxet:TokenEditorThemeKey ResourceKey=TokenForeground}" Color="Black"/>

    <ControlTemplate x:Key="{dxet:TokenEditorThemeKey ResourceKey=CellPresenterTemplate}" TargetType="{x:Type dxei:TokenEditorPresenter}">
        <Grid Background="Transparent">
            <Border UseLayoutRounding="True">
                <ContentControl Focusable="False" Template="{TemplateBinding BorderTemplate}"/>
            </Border>
            <dxei:CellEditor x:Name="cell"
                             Focusable="False"
                             TextElement.Foreground="{TemplateBinding Foreground}"/>
        </Grid>
    </ControlTemplate>

    <SolidColorBrush x:Key="TokenBox.BorderBrush" Color="#FF98A4B8"/>

    <LinearGradientBrush x:Key="TokenBox.HighlightedBorder"
                         EndPoint="0.5,1"
                         StartPoint="0.5,0">
        <GradientStop Color="#FFFCFDFD" Offset="0"/>
        <GradientStop Color="#FFE7EAEF" Offset="1"/>
        <GradientStop Color="#FFEBEDF1" Offset="0.5"/>
        <GradientStop Color="#FFE7EAEF" Offset="0.5"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="TokenBox.Background"
                         EndPoint="0.5,1"
                         StartPoint="0.5,0">
        <GradientStop Color="#FFF7F8F9" Offset="0"/>
        <GradientStop Color="#FFEBEBEB" Offset="1"/>
        <GradientStop Color="#FFD6DBE4" Offset="0.5"/>
        <GradientStop Color="#FFCED4DF" Offset="0.5"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="TokenBox.HoverState.Border" Color="#FF98A4B8"/>

    <LinearGradientBrush x:Key="TokenBox.HoverState.HighlightedBorder"
                         EndPoint="0.5,1"
                         StartPoint="0.5,0">
        <GradientStop Color="#FFFFFEF8" Offset="0"/>
        <GradientStop Color="#FFFFF4D3" Offset="1"/>
        <GradientStop Color="#FFFFF8E6" Offset="0.5"/>
        <GradientStop Color="#FFFFF5D6" Offset="0.5"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="TokenBox.HoverState.Background"
                         EndPoint="0.5,1"
                         StartPoint="0.5,0">
        <GradientStop Color="#FFFFFBEE" Offset="0"/>
        <GradientStop Color="#FFFFE8A6" Offset="1"/>
        <GradientStop Color="#FFFFF2CD" Offset="0.5"/>
        <GradientStop Color="#FFFFE8A6" Offset="0.5"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="TokenBox.SelectedState.Border" Color="#FF8794A6"/>

    <SolidColorBrush x:Key="TokenBox.SelectedState.Background" Color="#9FFFFFFF"/>

    <ControlTemplate x:Key="{dxet:TokenEditorThemeKey ResourceKey=TokenContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid Margin="0,1,1,1">
            <Grid x:Name="DefaultState">
                <Border Background="{StaticResource TokenBox.BorderBrush}" Padding="1">
                    <Border Background="{StaticResource TokenBox.HighlightedBorder}" Padding="1">
                        <Border Background="{StaticResource TokenBox.Background}"/>
                    </Border>
                </Border>
            </Grid>
            <Grid x:Name="HoverState" Opacity="0">
                <Border Background="{StaticResource TokenBox.HoverState.Border}" Padding="1">
                    <Border Background="{StaticResource TokenBox.HoverState.HighlightedBorder}" Padding="1">
                        <Border Background="{StaticResource TokenBox.HoverState.Background}"/>
                    </Border>
                </Border>
            </Grid>
            <Grid x:Name="SelectedState" Opacity="0">
                <Border Background="{StaticResource TokenBox.SelectedState.Border}" Padding="1">
                    <Border Background="{StaticResource TokenBox.SelectedState.Background}"/>
                </Border>
            </Grid>
            <Grid x:Name="FocusedState" Opacity="0">
                <Border Background="#FFC8CFD9"
                        BorderBrush="#FFFFCC00"
                        BorderThickness="2"
                        Opacity="0.5"/>
                <Border Background="#00000000"
                        BorderBrush="#FFCFB440"
                        BorderThickness="1"
                        Opacity="1"/>
            </Grid>
            <Grid x:Name="FocusedUnselectedState" Opacity="0">
                <Border Background="#00000000"
                        BorderBrush="#FFFFCC00"
                        BorderThickness="2"
                        Opacity="0.5"/>
                <Border Background="#00000000"
                        BorderBrush="#FFCFB440"
                        BorderThickness="1"
                        Opacity="1"/>
            </Grid>
            <ContentPresenter/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Opacity"
                        TargetName="DefaultState"
                        Value="0"/>
                <Setter Property="Opacity"
                        TargetName="HoverState"
                        Value="1"/>
                <Setter Property="Opacity"
                        TargetName="SelectedState"
                        Value="0"/>
                <Setter Property="Opacity"
                        TargetName="FocusedState"
                        Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Opacity"
                        TargetName="DefaultState"
                        Value="0"/>
                <Setter Property="Opacity"
                        TargetName="HoverState"
                        Value="0"/>
                <Setter Property="Opacity"
                        TargetName="SelectedState"
                        Value="1"/>
                <Setter Property="Opacity"
                        TargetName="FocusedState"
                        Value="0"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsTokenFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity"
                        TargetName="FocusedUnselectedState"
                        Value="0"/>
                <Setter Property="Opacity"
                        TargetName="FocusedState"
                        Value="1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsTokenFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity"
                        TargetName="FocusedUnselectedState"
                        Value="1"/>
                <Setter Property="Opacity"
                        TargetName="FocusedState"
                        Value="0"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsEditorActivated, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Opacity"
                        TargetName="DefaultState"
                        Value="0"/>
                <Setter Property="Opacity"
                        TargetName="HoverState"
                        Value="0"/>
                <Setter Property="Opacity"
                        TargetName="SelectedState"
                        Value="0"/>
                <Setter Property="Opacity"
                        TargetName="FocusedUnselectedState"
                        Value="1"/>
                <Setter Property="Opacity"
                        TargetName="FocusedState"
                        Value="0"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxet:TokenEditorThemeKey ResourceKey=DeleteButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                            Background="Transparent"
                            Height="16"
                            HorizontalAlignment="Center"
                            Margin="0,0,2,0"
                            VerticalAlignment="Center"
                            Width="16">
                        <Grid>
                            <Border x:Name="Back"
                                    Background="#005C6778"
                                    CornerRadius="32"
                                    Height="12"
                                    Width="12"/>
                            <Path x:Name="Path"
                                  Data="F1 M 385,283L 386,283L 388,285L 390,283L 391,283L 391,284L 389,286L 391,288L 391,289L 390,289L 388,287L 386,289L 385,289L 385,288L 387,286L 385,284L 385,283 Z "
                                  Fill="#FF5C6778"
                                  Height="6"
                                  Stretch="Fill"
                                  Width="6"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Fill"
                                    TargetName="Path"
                                    Value="#FF5C6778"/>
                            <Setter Property="Background"
                                    TargetName="Back"
                                    Value="#005C6778"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill"
                                    TargetName="Path"
                                    Value="#FF2D3F5D"/>
                            <Setter Property="Background"
                                    TargetName="Back"
                                    Value="#3F5C6778"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill"
                                    TargetName="Path"
                                    Value="#FF2D3F5D"/>
                            <Setter Property="Background"
                                    TargetName="Back"
                                    Value="#7F5C6778"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>