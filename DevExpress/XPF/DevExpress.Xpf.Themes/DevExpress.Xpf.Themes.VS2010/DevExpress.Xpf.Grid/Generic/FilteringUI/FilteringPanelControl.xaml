<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxfui_local="http://schemas.devexpress.com/winfx/2008/xaml/core/filteringui" xmlns:dxfui_native="http://schemas.devexpress.com/winfx/2008/xaml/core/filteringui/internal" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys" xmlns:dxfui_themes="http://schemas.devexpress.com/winfx/2008/xaml/core/filteringui/themekeys" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxep="clr-namespace:DevExpress.Xpf.Editors.Popups;assembly=DevExpress.Xpf.Core.v24.1" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid" xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <CornerRadius x:Key="{dxfui_themes:FilteringPanelThemeKey ResourceKey=ButtonCornerRadius}">0</CornerRadius>
  <Thickness x:Key="{dxfui_themes:FilteringPanelThemeKey ResourceKey=PanelPadding}">1,0,1,0</Thickness>
  <dx:EditorStringIdConverter x:Key="EditorStringIdConverter" />
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.FilteringUI.Native.FilteringPanelFilterPresenter}" TargetType="{x:Type dxfui_native:FilteringPanelFilterPresenter}">
    <Setter Property="Margin" Value="2,1" />
    <Setter Property="TextBlock.FontSize" Value="11" />
    <Setter Property="ExtraPadding" Value="0,3" />
    <Setter Property="AddExtraPaddingIfHeightLesserThan" Value="26" />
  </Style>
  <Style x:Key="{dxfui_themes:FilteringPanelThemeKey ResourceKey=ToolbarButton}" TargetType="ButtonBase">
    <Setter Property="Width" Value="30" />
    <Setter Property="Height" Value="30" />
    <Setter Property="Margin" Value="0,1" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Background" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlBackground}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlBackground}}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ButtonSvgPalette}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ButtonCornerRadius}}">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlButtonsBorderBrushHover}}" />
              <Setter Property="Background" TargetName="border" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlButtonsBackgroundHover}}" />
              <Setter Property="dx:SvgImageHelper.State" Value="Hover" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" TargetName="border" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlButtonsBackgroundPressed}}" />
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlButtonsBorderBrushPressed}}" />
              <Setter Property="dx:SvgImageHelper.State" Value="Pressed" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter Property="Background" TargetName="border" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlButtonsBackgroundPressed}}" />
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlButtonsBorderBrushPressed}}" />
              <Setter Property="dx:SvgImageHelper.State" Value="Pressed" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
              <Setter Property="Margin" Value="0,8,0,1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
        <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
        <Setter Property="BorderBrush" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlStyle}" TargetType="{x:Type dxfui_local:FilteringPanelControl}">
    <Setter Property="BorderThickness" Value="0,1,0,0" />
    <Setter Property="AllowDisableFilter" Value="True" />
    <Setter Property="Background" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlBackground}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlBorderBrush}}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
        <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.FilteringUI.FilteringPanelControl}" TargetType="{x:Type dxfui_local:FilteringPanelControl}">
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Padding" Value="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=PanelPadding}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxfui_local:FilteringPanelControl}">
          <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Border Width="{TemplateBinding Indent}" />
              <dxe:CheckEdit x:Name="cbFilterEnable" Grid.Column="1" VerticalAlignment="Top" Margin="8,5" Content="{TemplateBinding Caption}" EditValue="{Binding IsFilterEnabled, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" AutomationProperties.Name="FilterEnable" />
              <dxfui_native:FilteringPanelFilterPresenter x:Name="filteringPanelFilterPresenter" Grid.Column="2" Filter="{TemplateBinding Filter}" MaxLineCount="{TemplateBinding ActualMaxLineCount}" AllowDeleteColumnFilters="{TemplateBinding AllowDeleteColumnFilters}" />
              <Border Grid.Column="2" HorizontalAlignment="Right" IsHitTestVisible="False" Focusable="False" VerticalAlignment="Stretch" Width="40" Background="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlBackground}}" x:Name="borderFade">
                <Border.OpacityMask>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Offset="0" Color="Transparent" />
                    <GradientStop Offset="1" Color="White" />
                  </LinearGradientBrush>
                </Border.OpacityMask>
              </Border>
              <Border Grid.ColumnSpan="7" HorizontalAlignment="Stretch" IsHitTestVisible="False" Focusable="False" VerticalAlignment="Bottom" Height="40" Background="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlBackground}}" x:Name="borderFadeVertical">
                <Border.OpacityMask>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="Transparent" />
                    <GradientStop Offset="1" Color="White" />
                  </LinearGradientBrush>
                </Border.OpacityMask>
              </Border>
              <Border Grid.Column="3" x:Name="borderButtonExpand" Background="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlBackground}}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                <Button Style="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ToolbarButton}}" Command="{TemplateBinding ExpandCommand}" x:Name="buttonExpand" ToolTip="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=FilterPanelExpand, Converter={StaticResource EditorStringIdConverter}}" AutomationProperties.Name="ExpandFilterPanel">
                  <dx:DXImage Source="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.Grid.v24.1;component/FilteringUI/FilteringPanel/Images/Expand.svg'}" Stretch="None" />
                </Button>
              </Border>
              <Button Grid.Column="3" Style="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ToolbarButton}}" Command="{TemplateBinding CollapseCommand}" x:Name="buttonCollapse" ToolTip="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=FilterPanelCollapse, Converter={StaticResource EditorStringIdConverter}}" AutomationProperties.Name="CollapseFilterPanel">
                <dx:DXImage Source="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.Grid.v24.1;component/FilteringUI/FilteringPanel/Images/Collapse.svg'}" Stretch="None" />
              </Button>
              <Grid Grid.Column="4" x:Name="mru">
                <dxe:ComboBoxEdit ShowBorder="False" IsTextEditable="False" Opacity="0" x:Name="PART_MRUList" IsHitTestVisible="False" Width="30" Height="30" ItemsSource="{TemplateBinding MRUFilters}">
                  <dxe:ComboBoxEdit.ItemTemplate>
                    <DataTemplate>
                      <Grid>
                        <dxfui_native:FilteringPanelFilterPresenter x:Name="filterPresenter" MaxWidth="1000" Filter="{Binding}" />
                        <Border HorizontalAlignment="Right" IsHitTestVisible="False" Focusable="False" VerticalAlignment="Stretch" Width="40" Background="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlBackground}}" Visibility="{Binding Path=IsTrimmed, ElementName=filterPresenter, Converter={dx:BooleanToVisibilityConverter}}" x:Name="borderFade">
                          <Border.OpacityMask>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                              <GradientStop Offset="0" Color="Transparent" />
                              <GradientStop Offset="1" Color="White" />
                            </LinearGradientBrush>
                          </Border.OpacityMask>
                        </Border>
                      </Grid>
                    </DataTemplate>
                  </dxe:ComboBoxEdit.ItemTemplate>
                  <dxe:ComboBoxEdit.Resources>
                    <ControlTemplate x:Key="{dxet:EditorListBoxThemeKey ResourceKey=Template, IsThemeIndependent=True}" TargetType="{x:Type dxep:EditorListBox}">
                      <Border x:Name="Bd" Background="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ControlBackground}}">
                        <Grid>
                          <ScrollViewer x:Name="ScrollViewer" Padding="{TemplateBinding Padding}" dx:FocusHelper2.Focusable="False" BorderThickness="0">
                            <ItemsPresenter />
                            <dx:ScrollBarExtensions.AllowMouseScrolling>
                              <system:Boolean>true</system:Boolean>
                            </dx:ScrollBarExtensions.AllowMouseScrolling>
                          </ScrollViewer>
                        </Grid>
                      </Border>
                    </ControlTemplate>
                    <ControlTemplate x:Key="{dxet:EditorListBoxThemeKey ResourceKey=ItemTemplate, IsThemeIndependent=True}" TargetType="{x:Type dxe:ListBoxEditItem}">
                      <Grid x:Name="Root" Background="{TemplateBinding Background}">
                        <Border x:Name="SelectedState" Background="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=PopupElementPressedBackground}}" Opacity="0" />
                        <Border x:Name="HoverState" Background="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=PopupElementHoverBackground}}" Opacity="0" Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowItemHighlighting, Converter={dx:BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                        <DockPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" LastChildFill="True">
                          <dxei:ImagePresenter Padding="{StaticResource {dxet:ComboBoxEditThemeKey ResourceKey=SelectedItemImagePadding}}" DockPanel.Dock="Left" />
                          <dx:ContentContainer x:Name="content" Margin="{StaticResource {dxet:ComboBoxEditThemeKey ResourceKey=SelectedItemContentPadding}}">
                            <ContentPresenter x:Name="contentPresenter" Width="Auto" Height="Auto" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                          </dx:ContentContainer>
                        </DockPanel>
                      </Grid>
                      <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                          <Setter TargetName="SelectedState" Property="Opacity" Value="1" />
                          <Setter TargetName="HoverState" Property="Opacity" Value="0" />
                        </Trigger>
                        <MultiTrigger>
                          <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True" />
                            <Condition Property="IsFocused" Value="False" />
                          </MultiTrigger.Conditions>
                          <Setter TargetName="SelectedState" Property="Opacity" Value="0" />
                          <Setter TargetName="HoverState" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                          <Setter TargetName="content" Property="Opacity" Value="0.35" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                          <Setter Property="Margin" TargetName="content" Value="12" />
                        </Trigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </dxe:ComboBoxEdit.Resources>
                </dxe:ComboBoxEdit>
                <ToggleButton Style="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ToolbarButton}}" IsChecked="{Binding IsPopupOpen, ElementName=PART_MRUList}" ToolTip="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=FilterPanelMRU, Converter={StaticResource EditorStringIdConverter}}" x:Name="buttonMRU" AutomationProperties.Name="MRUFilterList">
                  <dx:DXImage Source="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.Grid.v24.1;component/FilteringUI/FilteringPanel/Images/MRU.svg'}" Stretch="None" />
                </ToggleButton>
              </Grid>
              <Button Grid.Column="5" Style="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ToolbarButton}}" Command="{TemplateBinding ShowFilterEditorCommand}" ToolTip="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=FilterPanelEditFilter, Converter={StaticResource EditorStringIdConverter}}" x:Name="buttonEditFilter" AutomationProperties.Name="EditFilter">
                <dx:DXImage Source="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.Grid.v24.1;component/FilteringUI/FilteringPanel/Images/Edit.svg'}" Stretch="None" />
              </Button>
              <Button Grid.Column="6" Style="{DynamicResource {dxfui_themes:FilteringPanelThemeKey ResourceKey=ToolbarButton}}" Command="{TemplateBinding ClearFilterCommand}" ToolTip="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=FilterPanelClearFilter, Converter={StaticResource EditorStringIdConverter}}" x:Name="buttonClearFilter" AutomationProperties.Name="ClearFilter">
                <dx:DXImage Source="{dx:SvgImageSource Uri='pack://application:,,,/DevExpress.Xpf.Grid.v24.1;component/FilteringUI/FilteringPanel/Images/Close.svg'}" Stretch="None" />
              </Button>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsTrimmed, ElementName=filteringPanelFilterPresenter}" Value="True">
              <Setter Property="Visibility" Value="Visible" TargetName="borderButtonExpand" />
              <Setter Property="Visibility" Value="Visible" TargetName="borderFade" />
              <Setter Property="Grid.ColumnSpan" Value="2" TargetName="filteringPanelFilterPresenter" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsTrimmed, ElementName=filteringPanelFilterPresenter}" Value="False">
              <Setter Property="Visibility" Value="Collapsed" TargetName="borderButtonExpand" />
              <Setter Property="Visibility" Value="Collapsed" TargetName="borderFade" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsTrimmedVertical, ElementName=filteringPanelFilterPresenter}" Value="True">
              <Setter Property="Visibility" Value="Visible" TargetName="borderFadeVertical" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsTrimmedVertical, ElementName=filteringPanelFilterPresenter}" Value="False">
              <Setter Property="Visibility" Value="Collapsed" TargetName="borderFadeVertical" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ActualLineCount, ElementName=filteringPanelFilterPresenter}" Value="0">
              <Setter Property="Visibility" Value="Collapsed" TargetName="buttonCollapse" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ActualLineCount, ElementName=filteringPanelFilterPresenter}" Value="1">
              <Setter Property="Visibility" Value="Collapsed" TargetName="buttonCollapse" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsChecked, ElementName=cbFilterEnable}" Value="True">
              <Setter Property="ToolTip" Value="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=FilterPanelDisableFilter, Converter={StaticResource EditorStringIdConverter}}" TargetName="cbFilterEnable" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsChecked, ElementName=cbFilterEnable}" Value="False">
              <Setter Property="ToolTip" Value="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=FilterPanelEnableFilter, Converter={StaticResource EditorStringIdConverter}}" TargetName="cbFilterEnable" />
            </DataTrigger>
            <Trigger Property="Filter" Value="{x:Null}">
              <Setter Property="Visibility" Value="Collapsed" TargetName="cbFilterEnable" />
            </Trigger>
            <Trigger Property="IsMRUListEmpty" Value="true">
              <Setter Property="Visibility" Value="Collapsed" TargetName="mru" />
            </Trigger>
            <Trigger Property="AllowChangeExpandState" Value="False">
              <Setter Property="Visibility" Value="Collapsed" TargetName="borderButtonExpand" />
              <Setter Property="Visibility" Value="Collapsed" TargetName="buttonCollapse" />
            </Trigger>
            <Trigger Property="AllowMRU" Value="False">
              <Setter Property="Visibility" Value="Collapsed" TargetName="mru" />
            </Trigger>
            <Trigger Property="AllowEditFilter" Value="False">
              <Setter Property="Visibility" Value="Collapsed" TargetName="buttonEditFilter" />
            </Trigger>
            <Trigger Property="AllowDisableFilter" Value="False">
              <Setter Property="Visibility" Value="Collapsed" TargetName="cbFilterEnable" />
            </Trigger>
            <Trigger Property="AllowClearFilter" Value="False">
              <Setter Property="Visibility" Value="Collapsed" TargetName="buttonClearFilter" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>