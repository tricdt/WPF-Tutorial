<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Light.v24.1;component/Core/Core/Themes/UICore.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <!-- General -->
  <ControlTemplate x:Key="DefaultWaitIndicator" TargetType="{x:Type ProgressBar}">
    <Grid x:Name="Root">
      <Path x:Name="Content" Height="{TemplateBinding Height}" Margin="{TemplateBinding Margin}" RenderTransformOrigin="0.5,0.5" Style="{StaticResource UIShape.WaitIndicator}" Width="{TemplateBinding Width}">
        <Path.RenderTransform>
          <TransformGroup>
            <ScaleTransform />
            <SkewTransform />
            <RotateTransform Angle="0" />
            <TranslateTransform />
          </TransformGroup>
        </Path.RenderTransform>
      </Path>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Determinate" />
          <VisualState x:Name="Indeterminate">
            <Storyboard Timeline.DesiredFrameRate="{x:Static dx:WaitIndicator.DesiredFrameRate}">
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="Content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="180">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseOut" />
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
                <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="360">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseIn" />
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>
  </ControlTemplate>
  <!-- Column -->
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ColumnWaitIndicator}" TargetType="{x:Type dx:ColumnWaitIndicator}">
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="IsHitTestVisible" Value="{Binding IsHitTestVisible, FallbackValue=true, TargetNullValue=true}" />
    <Setter Property="IsIndeterminate" Value="True" />
    <Setter Property="Template" Value="{StaticResource DefaultWaitIndicator}" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <!-- Container -->
  <ControlTemplate x:Key="{dx:WaitIndicatorThemeKey ResourceKey=WaitIndicatorContainerTemplate}" TargetType="{x:Type dx:WaitIndicatorContainer}">
    <Border>
      <Border.Effect>
        <DropShadowEffect x:Name="Shadow" BlurRadius="14" Color="Black" Opacity="0.14" ShadowDepth="3" cs:id="DropShadowEffect_0000" />
      </Border.Effect>
      <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="7" Margin="8">
        <ContentPresenter />
      </Border>
    </Border>
  </ControlTemplate>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.WaitIndicatorContainer}" TargetType="{x:Type dx:WaitIndicatorContainer}">
    <Setter Property="Background" Value="#FFF9F9F9" cs:id="Setter_0000" x:Uid="@Value=FlyoutBackground" />
    <Setter Property="BorderBrush" Value="#FFE7E7E7" cs:id="Setter_0001" x:Uid="@Value=FlyoutBorder" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="#FF1A1A1A" cs:id="Setter_0002" x:Uid="@Value=Foreground.Primary" />
    <Setter Property="Template" Value="{DynamicResource {dx:WaitIndicatorThemeKey ResourceKey=WaitIndicatorContainerTemplate}}" />
  </Style>
  <!-- Indicator -->
  <ControlTemplate x:Key="{dx:WaitIndicatorThemeKey ResourceKey=WaitIndicatorTemplate}" TargetType="{x:Type dx:WaitIndicator}">
    <Grid x:Name="Root" HorizontalAlignment="Center" Margin="{TemplateBinding ContentPadding}" VerticalAlignment="Center" Visibility="Collapsed">
      <dx:WaitIndicatorContainer>
        <Grid HorizontalAlignment="Center" Margin="24" VerticalAlignment="Center">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="6" />
            <ColumnDefinition Width="*" />
          </Grid.ColumnDefinitions>
          <ProgressBar x:Name="progressBar" Height="26" HorizontalAlignment="Center" IsIndeterminate="True" Template="{StaticResource DefaultWaitIndicator}" VerticalAlignment="Center" Width="26" />
          <ContentPresenter Content="{TemplateBinding ActualContent}" ContentTemplate="{TemplateBinding ContentTemplate}" Grid.Column="2" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" />
        </Grid>
      </dx:WaitIndicatorContainer>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="Visibility">
          <VisualState x:Name="Visible">
            <Storyboard>
              <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="Visibility">
                <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                  <DiscreteObjectKeyFrame.Value>
                    <Visibility>Visible</Visibility>
                  </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
              </ObjectAnimationUsingKeyFrames>
              <BooleanAnimationUsingKeyFrames Storyboard.TargetName="progressBar" Storyboard.TargetProperty="IsIndeterminate">
                <DiscreteBooleanKeyFrame KeyTime="0:0:0.1" Value="True" />
              </BooleanAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Collapsed">
            <Storyboard>
              <DoubleAnimation BeginTime="0:0:0.1" Duration="0:0:0.1" From="1" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0" />
              <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="Visibility">
                <DiscreteObjectKeyFrame KeyTime="0:0:0.2">
                  <DiscreteObjectKeyFrame.Value>
                    <Visibility>Collapsed</Visibility>
                  </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
              </ObjectAnimationUsingKeyFrames>
              <BooleanAnimationUsingKeyFrames Storyboard.TargetName="progressBar" Storyboard.TargetProperty="IsIndeterminate">
                <DiscreteBooleanKeyFrame KeyTime="0:0:0.1" Value="False" />
              </BooleanAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>
  </ControlTemplate>
  <DataTemplate x:Key="{dx:WaitIndicatorThemeKey ResourceKey=WaitIndicatorContentTemplate}">
    <TextBlock Text="{Binding}" TextWrapping="Wrap" VerticalAlignment="Center" />
  </DataTemplate>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.WaitIndicator}" TargetType="{x:Type dx:WaitIndicator}">
    <Setter Property="Content" Value="{x:Null}" />
    <Setter Property="ContentPadding" Value="0" />
    <Setter Property="Padding" Value="6,0,0,0" />
    <Setter Property="ContentTemplate" Value="{DynamicResource {dx:WaitIndicatorThemeKey ResourceKey=WaitIndicatorContentTemplate}}" />
    <Setter Property="Template" Value="{DynamicResource {dx:WaitIndicatorThemeKey ResourceKey=WaitIndicatorTemplate}}" />
    <Setter Property="UseLayoutRounding" Value="True" />
  </Style>
  <dxcn:WaitIndicatorSizeToPointSizeConverter x:Key="waitIndicatorSizeToPointSizeConverter" />
  <ControlTemplate x:Key="{dxt:ButtonThemeKey ResourceKey=ButtonWaitIndicatorTemplate}" TargetType="{x:Type dx:WaitIndicator}">
    <Grid>
      <ContentPresenter x:Name="content" Content="{TemplateBinding Content}" />
      <Grid x:Name="root" Visibility="Collapsed">
        <ProgressBar x:Name="progressBar" IsEnabled="True" Template="{StaticResource DefaultWaitIndicator}" IsIndeterminate="True" Padding="4" MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource waitIndicatorSizeToPointSizeConverter}}" MinHeight="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource waitIndicatorSizeToPointSizeConverter}}"></ProgressBar>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="DeferedVisibility" Value="True">
        <Setter Property="Visibility" Value="Visible" TargetName="root" />
        <Setter Property="Visibility" Value="Collapsed" TargetName="content" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>