<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Light.v24.1;component/Core/Core/Editors/Themes/Generic/CheckEdit.xaml" />
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Light.v24.1;component/Core/Core/Editors/Themes/Win11Light/UICore.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <!-- General -->
  <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=CheckEditBoxTemplate}" TargetType="{x:Type dxe:CheckEditBox}">
    <Grid x:Name="Root" Background="Transparent" Margin="1,0" UseLayoutRounding="False" cs:id="Grid_0000">
      <Grid Margin="{TemplateBinding Padding}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid x:Name="Field" Grid.Column="0" Height="18" Margin="0,2" Width="18">
          <Border x:Name="IsDefault" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" cs:id="Border_0001" />
          <Border x:Name="IsCheckedBackground" Background="#FF005FBA" CornerRadius="4" Opacity="0" cs:id="Border_0002" x:Uid="@Background=Accent" />
          <Border x:Name="IsCheckedBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Opacity="0" cs:id="Border_0003" />
          <Border x:Name="IsFocused" BorderBrush="Black" BorderThickness="1" CornerRadius="5" Margin="-2" Opacity="0" cs:id="Border_0000" />
          <Path x:Name="IndeterminateGlyph" Fill="#FFFFFFFF" Opacity="0" Style="{StaticResource UIShape.Indeterminate}" cs:id="Path_0001" x:Uid="@Fill=Foreground.Alt" />
          <Path x:Name="CheckedGlyph" Fill="#FFFFFFFF" Margin="1,1,0,0" Style="{StaticResource UIShape.Checked}" cs:id="Path_0000" x:Uid="@Fill=Foreground.Alt">
            <Path.OpacityMask>
              <LinearGradientBrush EndPoint="1,0" StartPoint="0,0" cs:id="LinearGradientBrush_0000">
                <LinearGradientBrush.GradientStops>
                  <GradientStop x:Name="GradientDirection1" Color="Black" Offset="0" cs:id="GradientStop_0000" />
                  <GradientStop x:Name="GradientDirection2" Color="Transparent" Offset="1" cs:id="GradientStop_0001" />
                </LinearGradientBrush.GradientStops>
              </LinearGradientBrush>
            </Path.OpacityMask>
          </Path>
        </Grid>
        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="6,0,0,0" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding HasContent, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
      </Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CheckStates">
          <VisualState x:Name="Unchecked">
            <Storyboard>
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsCheckedBackground" Storyboard.TargetProperty="Opacity" To="0" />
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsCheckedBorder" Storyboard.TargetProperty="Opacity" To="0" />
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
              <DoubleAnimation Duration="0" Storyboard.TargetName="CheckedGlyph" Storyboard.TargetProperty="Opacity" To="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Checked">
            <Storyboard>
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0" />
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsCheckedBackground" Storyboard.TargetProperty="Opacity" To="1" />
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsCheckedBorder" Storyboard.TargetProperty="Opacity" To="1" />
              <DoubleAnimation Duration="0" From="0.0" Storyboard.TargetName="GradientDirection1" Storyboard.TargetProperty="Offset" To="1.0" />
              <DoubleAnimation Duration="0" From="0.0" Storyboard.TargetName="GradientDirection2" Storyboard.TargetProperty="Offset" To="1.0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Indeterminate">
            <Storyboard>
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsCheckedBackground" Storyboard.TargetProperty="Opacity" To="1" />
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsCheckedBorder" Storyboard.TargetProperty="Opacity" To="1" />
              <DoubleAnimation Duration="0" Storyboard.TargetName="IndeterminateGlyph" Storyboard.TargetProperty="Opacity" To="1" />
              <DoubleAnimation Duration="0" From="0.0" Storyboard.TargetName="GradientDirection2" Storyboard.TargetProperty="Offset" To="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
        <VisualStateGroup x:Name="InternalFocusStates">
          <!--VisualState x:Name="InternalFocused">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IsFocused"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"/>
                        </Storyboard>
                    </VisualState-->
          <VisualState x:Name="InternalFocused" />
          <VisualState x:Name="InternalUnfocused" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" TargetName="IsDefault" Value="#FFEBEBEB" cs:id="Setter_0002" x:Uid="@Value=Editor.Border" />
        <Setter Property="Background" TargetName="IsCheckedBackground" Value="#E6005FB8" cs:id="Setter_0000" x:Uid="@Value=Button.CheckedHoverBackground" />
        <Setter Property="BorderBrush" TargetName="IsCheckedBorder" Value="Transparent" cs:id="Setter_0005" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" TargetName="IsDefault" Value="#08000000" cs:id="Setter_0001" x:Uid="@Value=Button.PressedBackground" />
        <Setter Property="BorderBrush" TargetName="IsDefault" Value="#FFE3E3E3" cs:id="Setter_0004" x:Uid="@Value=Button.SimpleButtonBorder" />
        <Setter Property="Background" TargetName="IsCheckedBackground" Value="#CC005FB8" cs:id="Setter_0003" x:Uid="@Value=Button.CheckedPressedBackground" />
        <Setter Property="BorderBrush" TargetName="IsCheckedBorder" Value="#CC005FB8" cs:id="Setter_0006" x:Uid="@Value=Button.CheckedPressedBorder" />
      </Trigger>
      <!-- EditorAppearanceProperties -->
      <Trigger Property="dxe:EditorAppearanceProperties.HasCheckEditGlyphBrush" Value="True">
        <Setter Property="Fill" TargetName="CheckedGlyph" Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckEditGlyphBrush), RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
      <!--MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True"/>
                    <Condition Property="IsFocused" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                        TargetName="IsFocused"
                        Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
            </MultiTrigger-->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="dxe:EditorAppearanceProperties.HasCheckedStateBackground" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" TargetName="IsCheckedBackground" Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckedStateBackground), RelativeSource={RelativeSource TemplatedParent}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="dxe:EditorAppearanceProperties.HasCheckedStateBorderBrush" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" TargetName="IsCheckedBorder" Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckedStateBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
      </MultiTrigger>
      <!-- EditorAppearanceProperties -->
      <Trigger Property="FlowDirection" Value="RightToLeft">
        <Setter Property="LayoutTransform" TargetName="Field">
          <Setter.Value>
            <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="-1" ScaleY="1" />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" TargetName="Root" Value="0.38" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Height" TargetName="CheckedGlyph" Value="20" />
        <Setter Property="Width" TargetName="CheckedGlyph" Value="20" />
        <Setter Property="Height" TargetName="Field" Value="32" />
        <Setter Property="Width" TargetName="Field" Value="32" />
        <Setter Property="Margin" TargetName="Field" Value="0" />
        <Setter Property="Height" TargetName="IndeterminateGlyph" Value="20" />
        <Setter Property="Width" TargetName="IndeterminateGlyph" Value="20" />
      </Trigger>
      <Trigger Property="dxei:BaseEditAppearanceOptions.HasCheckBoxWidth" Value="True">
        <Setter Property="Width" TargetName="Field" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.CheckBoxWidth), RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
      <Trigger Property="dxei:BaseEditAppearanceOptions.HasCheckBoxHeight" Value="True">
        <Setter Property="Height" TargetName="Field" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.CheckBoxHeight), RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>