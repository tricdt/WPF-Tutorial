<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars" xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys" xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxr="http://schemas.devexpress.com/winfx/2008/xaml/ribbon" xmlns:dxri="http://schemas.devexpress.com/winfx/2008/xaml/ribbon/internal" xmlns:dxrt="http://schemas.devexpress.com/winfx/2008/xaml/ribbon/themekeys" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win10Dark.v24.1;component/Ribbon/Win10Dark/RibbonPage/RibbonPageCaption_Base.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <!-- General -->
  <ControlTemplate x:Key="{dxrt:RibbonPageThemeKey ResourceKey=CaptionBackgroundTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
    <Grid x:Name="PART_Root">
      <Border x:Name="OuterBorder">
        <Grid>
          <Border x:Name="IsDefault" Background="Transparent" BorderThickness="1,1,1,0" CornerRadius="{Binding ElementName=OuterBorder, Path=CornerRadius}" Margin="0,0,0,-1" cs:id="Border_0000" />
          <Border x:Name="LeftBorder" Background="Transparent" BorderBrush="{Binding ElementName=IsDefault, Path=Background}" BorderThickness="1,0,0,0" CornerRadius="{Binding ElementName=OuterBorder, Path=CornerRadius}" Margin="0,0,0,-1" Visibility="Hidden" cs:id="Border_0002" />
          <Border x:Name="BackgroundBorder" BorderBrush="Transparent" BorderThickness="1,1,1,0" CornerRadius="{Binding ElementName=OuterBorder, Path=CornerRadius}" cs:id="Border_0001" />
        </Grid>
      </Border>
      <ContentPresenter x:Name="PART_ContentPresenter" />
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStateGroup">
          <VisualState x:Name="NormalUnchecked">
            <Storyboard>
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="NormalChecked">
            <Storyboard>
              <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF202020" cs:id="ColorAnimation_0000" x:Uid="@To=Control.Background" />
              <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#FF2B2B2B" cs:id="ColorAnimation_0006" x:Uid="@To=Border" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="HoverUnchecked">
            <Storyboard>
              <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF444444" cs:id="ColorAnimation_0001" x:Uid="@To=HoverBackground" />
              <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#FF444444" cs:id="ColorAnimation_0002" x:Uid="@To=HoverBorder" />
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(Opacity)" To="1" />
              <DoubleAnimation Duration="0" Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="(Border.BorderBrush).(Opacity)" To="1" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="HoverChecked">
            <Storyboard>
              <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF202020" cs:id="ColorAnimation_0003" x:Uid="@To=Control.Background" />
              <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#FF2B2B2B" cs:id="ColorAnimation_0007" x:Uid="@To=Border" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="PressedChecked">
            <Storyboard>
              <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF202020" cs:id="ColorAnimation_0004" x:Uid="@To=Control.Background" />
              <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#FF2B2B2B" cs:id="ColorAnimation_0008" x:Uid="@To=Border" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Focused">
            <Storyboard>
              <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF353535" cs:id="ColorAnimation_0005" x:Uid="@To=Backstage.HoverBackground" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasBorderThickness)}" Value="True">
        <Setter Property="BorderThickness" TargetName="OuterBorder" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Page.(dxi:AppearanceOptions.BorderThickness)}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasBorderBrush)}" Value="True">
        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Page.(dxi:AppearanceOptions.BorderBrush)}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasBackground)}" Value="True">
        <Setter Property="Background" TargetName="BackgroundBorder" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DataContext.(dxi:AppearanceOptions.Background)}" />
        <Setter Property="Visibility" TargetName="IsDefault" Value="Collapsed" />
      </DataTrigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasCornerRadius)}" Value="True">
        <Setter Property="CornerRadius" TargetName="OuterBorder" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Page.(dxi:AppearanceOptions.CornerRadius)}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasMargin)}" Value="True">
        <Setter Property="Margin" TargetName="PART_Root" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Page.(dxi:AppearanceOptions.Margin)}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasPadding)}" Value="True">
        <Setter Property="Margin" TargetName="PART_ContentPresenter" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Page.(dxi:AppearanceOptions.Padding)}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=ShowApplicationButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dxr:RibbonControl}}}" Value="False" />
          <Condition Binding="{Binding Path=Index, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dxr:RibbonPageHeaderControl}}}" Value="0" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="BorderThickness" TargetName="BackgroundBorder" Value="0,1,1,0" />
          <Setter Property="Visibility" TargetName="LeftBorder" Value="Visible" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>