<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2013DarkGray.v24.1;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/TabControl/Themes/Generic.xaml" />
    <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2013DarkGray.v24.1;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/TabControl/Themes/Generic.Window.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <!--Tab Button Background Templates-->
  <SolidColorBrush x:Key="Button.Normal.Background" Color="Transparent" />
  <SolidColorBrush x:Key="Button.Hover.Background" Color="#3F009AFF" />
  <SolidColorBrush x:Key="Button.Pressed.Background" Color="#5F2592DA" />
  <DataTemplate x:Key="{dxdst:DXTabControlThemeKey ResourceKey=ButtonNormalBackground}">
    <Border Background="{StaticResource Button.Normal.Background}" />
  </DataTemplate>
  <DataTemplate x:Key="{dxdst:DXTabControlThemeKey ResourceKey=ButtonHoverBackground}">
    <Border Background="{StaticResource Button.Hover.Background}" />
  </DataTemplate>
  <DataTemplate x:Key="{dxdst:DXTabControlThemeKey ResourceKey=ButtonPressedBackground}">
    <Border Background="{StaticResource Button.Pressed.Background}" />
  </DataTemplate>
  <!--Tab Button Styles-->
  <SolidColorBrush x:Key="CloseButton.Normal.Foreground" Color="#FF666666" />
  <SolidColorBrush x:Key="CloseButton.Hover.Foreground" Color="#FF2B579A" />
  <SolidColorBrush x:Key="CloseButton.Pressed.Foreground" Color="#FF2B579A" />
  <SolidColorBrush x:Key="ScrollButton.Normal.Foreground" Color="#FF666666" />
  <SolidColorBrush x:Key="ScrollButton.Hover.Foreground" Color="#FF2B579A" />
  <SolidColorBrush x:Key="ScrollButton.Pressed.Foreground" Color="#FF2B579A" />
  <Style x:Key="HeaderPanelButtonStyle" BasedOn="{StaticResource ButtonDefaultStyle}" TargetType="{x:Type ButtonBase}">
    <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="2,0,2,0" />
    <Setter Property="Width" Value="17" />
    <Setter Property="Height" Value="17" />
    <Setter Property="Foreground" Value="{StaticResource ScrollButton.Normal.Foreground}" />
    <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{StaticResource ScrollButton.Hover.Foreground}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{StaticResource ScrollButton.Pressed.Foreground}" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Width" Value="36" />
        <Setter Property="Height" Value="36" />
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=6}" />
        <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="6,0,0,0" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DXTabItemThemeKey ResourceKey=CloseButtonStyle}" BasedOn="{StaticResource ButtonDefaultStyle}" TargetType="{x:Type Button}">
    <Style.Resources>
      <DataTemplate x:Key="{dxdst:DXTabControlThemeKey ResourceKey=ButtonHoverBackground}">
        <Border Background="{StaticResource Button.Normal.Background}" />
      </DataTemplate>
    </Style.Resources>
    <Setter Property="Foreground" Value="{StaticResource CloseButton.Normal.Foreground}" />
    <Setter Property="Width" Value="14" />
    <Setter Property="Height" Value="14" />
    <Setter Property="Margin" Value="7,0,-3,0" />
    <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{StaticResource CloseButton.Hover.Foreground}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{StaticResource CloseButton.Pressed.Foreground}" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Width" Value="28" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=4}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DXTabControlThemeKey ResourceKey=CloseButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}" />
  </Style>
  <Style x:Key="{dxdst:DXTabControlThemeKey ResourceKey=PanelNewButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}" />
    <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="5,0,3,0" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="6,0,6,0" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DXTabControlThemeKey ResourceKey=MainNewButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}" />
  </Style>
  <Style x:Key="{dxdst:DXTabControlThemeKey ResourceKey=PrevButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type RepeatButton}">
    <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}" />
  </Style>
  <Style x:Key="{dxdst:DXTabControlThemeKey ResourceKey=NextButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type RepeatButton}">
    <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}" />
  </Style>
  <Style x:Key="{dxdst:DXTabControlThemeKey ResourceKey=MenuButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}" />
  </Style>
  <!--TabControl and TabItem Background Templates-->
  <SolidColorBrush x:Key="TabControl.BorderBrush" Color="#FFABABAB" />
  <SolidColorBrush x:Key="TabControl.Background" Color="#FFE3E3E3" />
  <SolidColorBrush x:Key="TabControl.Normal.BorderBrush" Color="#FFACACAC" />
  <LinearGradientBrush x:Key="TabItem.Normal.Background" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFE3E3E3" Offset="0" />
    <GradientStop Color="#FFD3D3D3" Offset="1" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="TabItem.Hover.BorderBrush" Color="#FF92C0DF" />
  <LinearGradientBrush x:Key="TabItem.Hover.Background" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFECF4FC" Offset="0" />
    <GradientStop Color="#FFDCECFC" Offset="1" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="TabItem.Focused.BorderBrush" Color="#FF2B579A" />
  <DataTemplate x:Key="{dxdst:DXTabControlThemeKey ResourceKey=Background}">
    <dxcn:TabBorder BorderBackground="{StaticResource TabControl.Background}" BorderBrush="{StaticResource TabControl.BorderBrush}" BorderMode="BorderBrush" BorderThickness="1" ViewInfo="{Binding}" />
  </DataTemplate>
  <DataTemplate x:Key="{dxdst:DXTabItemThemeKey ResourceKey=NormalBackground}">
    <dxcn:TabBorder BackgroundMode="BorderBackground" BorderBackground="{StaticResource TabItem.Normal.Background}" BorderBrush="{StaticResource TabControl.Normal.BorderBrush}" BorderMargin="0,0,-1,0" BorderMode="BorderBrush" BorderThickness="1,1,1,0" CustomBackgroundBrightness="-0.1" HoldBorderMargin="0,0,1,1" HoldBorderThickness="1" ViewInfo="{Binding}" />
  </DataTemplate>
  <DataTemplate x:Key="{dxdst:DXTabItemThemeKey ResourceKey=HoverBackground}">
    <dxcn:TabBorder BackgroundMode="BorderBackground" BorderBackground="{StaticResource TabItem.Hover.Background}" BorderBrush="{StaticResource TabItem.Hover.BorderBrush}" BorderMargin="0,0,-1,0" BorderMode="BorderBrush" BorderThickness="1,1,1,0" CustomBackgroundBrightness="0.4" HoldBorderMargin="0,0,1,1" HoldBorderThickness="1" ViewInfo="{Binding}" />
  </DataTemplate>
  <DataTemplate x:Key="{dxdst:DXTabItemThemeKey ResourceKey=SelectedBackground}">
    <dxcn:TabBorder BorderBackground="{StaticResource TabControl.Background}" BorderBrush="{StaticResource TabControl.BorderBrush}" BorderMargin="0,-2,-1,-1" BorderMode="BorderBrush" BorderThickness="1,1,1,0" HoldBorderMargin="0,0,1,1" HoldBorderThickness="1" ViewInfo="{Binding}" />
  </DataTemplate>
  <DataTemplate x:Key="{dxdst:DXTabItemThemeKey ResourceKey=FocusedBackground}">
    <dxcn:TabBorder BorderBrush="{StaticResource TabItem.Focused.BorderBrush}" BorderThickness="0" HoldBorderMargin="0,0,1,1" HoldBorderThickness="1" ViewInfo="{Binding}" />
  </DataTemplate>
  <!--TabControl and TabItem Styles-->
  <SolidColorBrush x:Key="TabControl.Foreground" Color="#FF262626" />
  <SolidColorBrush x:Key="TabItem.Normal.Foreground" Color="#FF262626" />
  <SolidColorBrush x:Key="TabItem.Hover.Foreground" Color="#FF3C3C3C" />
  <SolidColorBrush x:Key="TabItem.Selected.Foreground" Color="#FF3C3C3C" />
  <SolidColorBrush x:Key="TabItem.Focused.Foreground" Color="#FF2B579A" />
  <Style x:Key="{dxdst:DXTabControlThemeKey ResourceKey=PanelContainerStyle}" BasedOn="{StaticResource PanelContainerDefaultStyle}" TargetType="{x:Type dxcn:TabPanelContainer}">
    <Setter Property="NormalMargin" Value="3,0,0,-1" />
    <Setter Property="NormalPadding" Value="0,2,1,1" />
    <Setter Property="HoldMargin" Value="0,0,-1,0" />
    <Setter Property="HoldPadding" Value="0,0,0,0" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabControl}" BasedOn="{StaticResource TabControlDefaultStyle}" TargetType="{x:Type dx:DXTabControl}">
    <Setter Property="Padding" Value="12" />
    <Setter Property="Foreground" Value="{StaticResource TabControl.Foreground}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabItem}" BasedOn="{StaticResource TabItemDefaultStyle}" TargetType="{x:Type dx:DXTabItem}">
    <Setter Property="Padding" Value="9,3,9,3" />
    <Setter Property="Foreground" Value="{StaticResource TabItem.Normal.Foreground}" />
    <Style.Triggers>
      <Trigger Property="IsFocused" Value="True">
        <Setter Property="Foreground" Value="{StaticResource TabItem.Focused.Foreground}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{StaticResource TabItem.Hover.Foreground}" />
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Foreground" Value="{StaticResource TabItem.Selected.Foreground}" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="12,8,12,8" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DXTabItemThemeKey ResourceKey=SeparatorStyle}" TargetType="{x:Type ContentPresenter}">
    <Setter Property="Visibility" Value="Collapsed" />
  </Style>
  <Style x:Key="{dxdst:DXTabControlThemeKey ResourceKey=ContentStyle}" />
  <!--TabbedWindow-->
  <SolidColorBrush x:Key="Window.Border.Active.BorderBrush" Color="#FF333333" />
  <SolidColorBrush x:Key="Window.Border.InActive.BorderBrush" Color="#FF999999" />
  <SolidColorBrush x:Key="Window.Border.Active.Background" Color="#FFE3E3E3" />
  <SolidColorBrush x:Key="Window.Foreground" Color="#FF262626" />
  <DataTemplate x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=HeaderTemplate}">
    <Border x:Name="border" />
  </DataTemplate>
  <DataTemplate x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=BorderTemplate}">
    <Border x:Name="border" Background="{StaticResource Window.Border.Active.Background}" BorderBrush="{StaticResource Window.Border.Active.BorderBrush}" BorderThickness="1" />
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False">
        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Window.Border.InActive.BorderBrush}" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=MainContainerStyle}" TargetType="Panel">
    <Setter Property="Margin" Value="1" />
  </Style>
  <Style x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=CaptionPresenterStyle}" TargetType="ContentPresenter">
    <!--<Setter Property="Margin" Value="5,0,0,0" />-->
  </Style>
  <Style x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=ContentBorderStyle}" TargetType="Border">
    <Setter Property="Margin" Value="6,0,6,6" />
  </Style>
  <Style x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=ControlContainerStyle}" BasedOn="{StaticResource DefaultButtonContainerStyle}" TargetType="ItemsControl">
    <!--<Setter Property="Margin" Value="0,-1,0,9" />-->
    <!--<Setter Property="VerticalContentAlignment" Value="Top" />-->
  </Style>
  <Style x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=ButtonContainerStyle}" BasedOn="{StaticResource DefaultButtonContainerStyle}" TargetType="ItemsControl">
    <Setter Property="Margin" Value="0,-1,6,9" />
    <!--<Setter Property="MinWidth" Value="96"/>-->
    <!--<Setter Property="VerticalContentAlignment" Value="Top" />-->
  </Style>
  <Style x:Key="WindowButtonStyle" BasedOn="{StaticResource WindowButtonDefaultStyle}" TargetType="Button">
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Width" Value="26" />
    <Setter Property="Height" Value="20" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Width" Value="44" />
        <Setter Property="Height" Value="44" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=MinimizeButtonStyle}" BasedOn="{StaticResource WindowButtonStyle}" TargetType="{x:Type Button}" />
  <Style x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=RestoreButtonStyle}" BasedOn="{StaticResource WindowButtonStyle}" TargetType="{x:Type Button}" />
  <Style x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=MaximizeButtonStyle}" BasedOn="{StaticResource WindowButtonStyle}" TargetType="{x:Type Button}" />
  <Style x:Key="{dxdst:DXTabbedWindowThemeKey ResourceKey=CloseButtonStyle}" BasedOn="{StaticResource WindowButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="Width" Value="45" />
    <Setter Property="Height" Value="20" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Width" Value="44" />
        <Setter Property="Height" Value="44" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabbedWindow}" BasedOn="{StaticResource WindowDefaultStyle}" TargetType="{x:Type dx:DXTabbedWindow}">
    <Setter Property="Foreground" Value="{StaticResource Window.Foreground}" />
  </Style>
</ResourceDictionary>