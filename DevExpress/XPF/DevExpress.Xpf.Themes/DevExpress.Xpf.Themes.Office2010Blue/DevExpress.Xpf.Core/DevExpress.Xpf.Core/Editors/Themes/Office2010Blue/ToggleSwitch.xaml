<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <sys:Double x:Key="{dxet:ToggleSwitchThemeKey ResourceKey=ToggleSwitchWidth}">48</sys:Double>
  <sys:Double x:Key="{dxet:ToggleSwitchThemeKey ResourceKey=ToggleSwitchHeight}">22</sys:Double>
  <sys:Double x:Key="{dxet:ToggleSwitchThemeKey ResourceKey=DisabledStateOpacity}">0.35</sys:Double>
  <Thickness x:Key="OutsideNearContentMargin">0,0,5,0</Thickness>
  <Thickness x:Key="InsideNearContentMargin">5,0,0,0</Thickness>
  <Thickness x:Key="OutsideFarContentMargin">5,0,0,0</Thickness>
  <Thickness x:Key="InsideFarContentMargin">0,0,5,0</Thickness>
  <!-- Switch -->
  <dxcn:RenderTemplate x:Key="{dxet:ToggleSwitchThemeKey ResourceKey=UndefinedStateContentTemplate}">
    <dxcn:RenderPanel LayoutProvider="{dxcn:GridPanelLayoutProvider}">
      <dxcn:RenderTextBlock Name="TextBlock" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
    </dxcn:RenderPanel>
    <dxcn:RenderTemplate.Triggers>
      <dxcn:RenderBinding TargetName="TextBlock" TargetProperty="Text" ValueSource="DataContext" />
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Near" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Left" />
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource OutsideNearContentMargin}" />
      </dxcn:RenderTrigger>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Far" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Right" />
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource OutsideFarContentMargin}" />
      </dxcn:RenderTrigger>
    </dxcn:RenderTemplate.Triggers>
  </dxcn:RenderTemplate>
  <dxcn:RenderTemplate x:Key="{dxet:ToggleSwitchThemeKey ResourceKey=SwitchThumbTemplate}">
    <dxcn:RenderBorder Name="Toggle" Width="16">
      <dxcn:RenderBorder.Background>
        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
          <GradientStop Color="#FF94ADCC" Offset="0" />
          <GradientStop Color="#FF94ADCC" Offset="1" />
        </LinearGradientBrush>
      </dxcn:RenderBorder.Background>
      <dxcn:RenderBorder Name="Inner" Margin="1">
        <dxcn:RenderBorder.Background>
          <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FFE0ECF9" Offset="0" />
            <GradientStop Color="#FFD1E0EF" Offset="1" />
          </LinearGradientBrush>
        </dxcn:RenderBorder.Background>
      </dxcn:RenderBorder>
    </dxcn:RenderBorder>
    <dxcn:RenderTemplate.Triggers>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsCheckedProperty}" Value="True" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="Background" TargetName="Toggle">
          <dxcn:RenderSetter.Value>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
              <GradientStop Color="#FF94ADCC" Offset="0" />
              <GradientStop Color="#FF94ADCC" Offset="1" />
            </LinearGradientBrush>
          </dxcn:RenderSetter.Value>
        </dxcn:RenderSetter>
        <dxcn:RenderSetter Property="Background" TargetName="Inner">
          <dxcn:RenderSetter.Value>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
              <GradientStop Color="#FFFBE392" Offset="0" />
              <GradientStop Color="#FFFCDF13" Offset="1" />
              <GradientStop Color="#FFF4BA18" Offset="0.5" />
            </LinearGradientBrush>
          </dxcn:RenderSetter.Value>
        </dxcn:RenderSetter>
      </dxcn:RenderTrigger>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsCheckedProperty}" Value="{x:Null}" ValueSource="TemplatedParent" />
      <dxcn:RenderTrigger DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="True" ValueSource="TemplatedParent" />
      <dxcn:RenderStateGroup Name="VisualStates">
        <dxcn:RenderStateTrigger Name="Normal" />
        <dxcn:RenderStateTrigger Name="MouseOver">
          <dxcn:RenderSetter Property="Opacity" TargetName="Toggle" Value="0.62" />
        </dxcn:RenderStateTrigger>
      </dxcn:RenderStateGroup>
    </dxcn:RenderTemplate.Triggers>
  </dxcn:RenderTemplate>
  <dxcn:RenderTemplate x:Key="{dxet:ToggleSwitchThemeKey ResourceKey=SwitchBorderTemplate}">
    <dxcn:RenderPanel>
      <dxcn:RenderBorder Name="Focus" Background="#FFFFCC00" Margin="-1" Opacity="0.75" Visibility="Hidden" />
      <dxcn:RenderBorder Name="Border">
        <dxcn:RenderBorder.Background>
          <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FF94ADCC" Offset="0" />
            <GradientStop Color="#FF94ADCC" Offset="1" />
          </LinearGradientBrush>
        </dxcn:RenderBorder.Background>
        <dxcn:RenderBorder Name="Background" Background="#FFFFFFFF" Margin="1">
          <dxcn:RenderBorder Name="Indicator" Background="#BFE0ECF9" Margin="4" />
        </dxcn:RenderBorder>
      </dxcn:RenderBorder>
    </dxcn:RenderPanel>
    <dxcn:RenderTemplate.Triggers>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsFocusedProperty}" Value="True" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="Visibility" TargetName="Focus" Value="Visible" />
      </dxcn:RenderTrigger>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsCheckedProperty}" Value="True" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="Background" TargetName="Indicator" Value="#7FF4BA18" />
      </dxcn:RenderTrigger>
      <dxcn:RenderTrigger DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="True" ValueSource="TemplatedParent" />
      <dxcn:RenderTrigger DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="True" ValueSource="TemplatedParent" />
      <dxcn:RenderStateGroup Name="VisualStates">
        <dxcn:RenderStateTrigger Name="Normal" />
        <dxcn:RenderStateTrigger Name="MouseOver" />
      </dxcn:RenderStateGroup>
    </dxcn:RenderTemplate.Triggers>
  </dxcn:RenderTemplate>
  <!-- CheckedStateContentTemplate -->
  <dxcn:RenderTemplate x:Key="{dxet:ToggleSwitchThemeKey ResourceKey=CheckedStateContentTemplate}">
    <dxcn:RenderPanel LayoutProvider="{dxcn:GridPanelLayoutProvider}">
      <dxcn:RenderTextBlock Name="TextBlock" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
    </dxcn:RenderPanel>
    <dxcn:RenderTemplate.Triggers>
      <dxcn:RenderBinding TargetName="TextBlock" TargetProperty="Text" ValueSource="DataContext" />
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Near" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Left" />
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource OutsideNearContentMargin}" />
      </dxcn:RenderTrigger>
      <dxcn:MultiRenderTrigger>
        <dxcn:MultiRenderTrigger.Conditions>
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="False" ValueSource="TemplatedParent" />
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Near" ValueSource="TemplatedParent" />
        </dxcn:MultiRenderTrigger.Conditions>
        <dxcn:RenderSetter Property="Foreground" TargetName="TextBlock" />
      </dxcn:MultiRenderTrigger>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Far" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Right" />
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource OutsideFarContentMargin}" />
      </dxcn:RenderTrigger>
      <dxcn:MultiRenderTrigger>
        <dxcn:MultiRenderTrigger.Conditions>
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="False" ValueSource="TemplatedParent" />
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Far" ValueSource="TemplatedParent" />
        </dxcn:MultiRenderTrigger.Conditions>
        <dxcn:RenderSetter Property="Foreground" TargetName="TextBlock" />
      </dxcn:MultiRenderTrigger>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Both" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Right" />
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource OutsideFarContentMargin}" />
      </dxcn:RenderTrigger>
      <dxcn:MultiRenderTrigger>
        <dxcn:MultiRenderTrigger.Conditions>
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="False" ValueSource="TemplatedParent" />
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Both" ValueSource="TemplatedParent" />
        </dxcn:MultiRenderTrigger.Conditions>
        <dxcn:RenderSetter Property="Foreground" TargetName="TextBlock" />
      </dxcn:MultiRenderTrigger>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Inside" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Left" />
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource InsideNearContentMargin}" />
      </dxcn:RenderTrigger>
      <dxcn:MultiRenderTrigger>
        <dxcn:MultiRenderTrigger.Conditions>
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="False" ValueSource="TemplatedParent" />
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Inside" ValueSource="TemplatedParent" />
        </dxcn:MultiRenderTrigger.Conditions>
        <dxcn:RenderSetter Property="Foreground" TargetName="TextBlock" Value="#FF1E395B" />
      </dxcn:MultiRenderTrigger>
      <dxcn:MultiRenderTrigger>
        <dxcn:MultiRenderTrigger.Conditions>
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Inside" ValueSource="TemplatedParent" />
          <dxcn:RenderCondition DependencyProperty="{x:Static ToggleButton.IsCheckedProperty}" Value="{x:Null}" ValueSource="TemplatedParent" />
        </dxcn:MultiRenderTrigger.Conditions>
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource InsideFarContentMargin}" />
      </dxcn:MultiRenderTrigger>
      <dxcn:ConditionalRenderBinding DependencyProperty="{x:Static dxe:ToggleSwitch.ForegroundProperty}" TargetName="TextBlock" TargetProperty="Foreground" ValueSource="TemplatedParent">
        <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="True" ValueSource="TemplatedParent" />
      </dxcn:ConditionalRenderBinding>
    </dxcn:RenderTemplate.Triggers>
  </dxcn:RenderTemplate>
  <!-- UncheckedStateContentTemplate -->
  <dxcn:RenderTemplate x:Key="{dxet:ToggleSwitchThemeKey ResourceKey=UncheckedStateContentTemplate}">
    <dxcn:RenderPanel LayoutProvider="{dxcn:GridPanelLayoutProvider}">
      <dxcn:RenderTextBlock Name="TextBlock" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
    </dxcn:RenderPanel>
    <dxcn:RenderTemplate.Triggers>
      <dxcn:RenderBinding TargetName="TextBlock" TargetProperty="Text" ValueSource="DataContext" />
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Near" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Left" />
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource OutsideNearContentMargin}" />
      </dxcn:RenderTrigger>
      <dxcn:MultiRenderTrigger>
        <dxcn:MultiRenderTrigger.Conditions>
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="False" ValueSource="TemplatedParent" />
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Near" ValueSource="TemplatedParent" />
        </dxcn:MultiRenderTrigger.Conditions>
        <dxcn:RenderSetter Property="Foreground" TargetName="TextBlock" />
      </dxcn:MultiRenderTrigger>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Far" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Right" />
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource OutsideFarContentMargin}" />
      </dxcn:RenderTrigger>
      <dxcn:MultiRenderTrigger>
        <dxcn:MultiRenderTrigger.Conditions>
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="False" ValueSource="TemplatedParent" />
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Far" ValueSource="TemplatedParent" />
        </dxcn:MultiRenderTrigger.Conditions>
        <dxcn:RenderSetter Property="Foreground" TargetName="TextBlock" />
      </dxcn:MultiRenderTrigger>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Both" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Left" />
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource OutsideNearContentMargin}" />
      </dxcn:RenderTrigger>
      <dxcn:MultiRenderTrigger>
        <dxcn:MultiRenderTrigger.Conditions>
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="False" ValueSource="TemplatedParent" />
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Both" ValueSource="TemplatedParent" />
        </dxcn:MultiRenderTrigger.Conditions>
        <dxcn:RenderSetter Property="Foreground" TargetName="TextBlock" />
      </dxcn:MultiRenderTrigger>
      <dxcn:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Inside" ValueSource="TemplatedParent">
        <dxcn:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Right" />
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource InsideFarContentMargin}" />
      </dxcn:RenderTrigger>
      <dxcn:MultiRenderTrigger>
        <dxcn:MultiRenderTrigger.Conditions>
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="False" ValueSource="TemplatedParent" />
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Inside" ValueSource="TemplatedParent" />
        </dxcn:MultiRenderTrigger.Conditions>
        <dxcn:RenderSetter Property="Foreground" TargetName="TextBlock" Value="#FF1E395B" />
      </dxcn:MultiRenderTrigger>
      <dxcn:MultiRenderTrigger>
        <dxcn:MultiRenderTrigger.Conditions>
          <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Inside" ValueSource="TemplatedParent" />
          <dxcn:RenderCondition DependencyProperty="{x:Static ToggleButton.IsCheckedProperty}" Value="{x:Null}" ValueSource="TemplatedParent" />
        </dxcn:MultiRenderTrigger.Conditions>
        <dxcn:RenderSetter Property="Margin" TargetName="TextBlock" Value="{StaticResource InsideNearContentMargin}" />
      </dxcn:MultiRenderTrigger>
      <dxcn:ConditionalRenderBinding DependencyProperty="{x:Static dxe:ToggleSwitch.ForegroundProperty}" TargetName="TextBlock" TargetProperty="Foreground" ValueSource="TemplatedParent">
        <dxcn:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="True" ValueSource="TemplatedParent" />
      </dxcn:ConditionalRenderBinding>
    </dxcn:RenderTemplate.Triggers>
  </dxcn:RenderTemplate>
</ResourceDictionary>