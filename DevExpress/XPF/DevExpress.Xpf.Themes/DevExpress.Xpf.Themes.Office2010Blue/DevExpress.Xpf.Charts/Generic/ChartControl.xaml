<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="http://schemas.devexpress.com/winfx/2008/xaml/charts" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/charts/themekeys" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <local:SelectionListRectToGeometryConverter x:Key="selectionListRectToGeometryConverter" />
  <Thickness x:Key="{dxt:ChartControlThemeKey ResourceKey=ChartPaddingValue}">16</Thickness>
  <Thickness x:Key="{dxt:ChartControlThemeKey ResourceKey=ChartBorderThickness}">1</Thickness>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.DropTargetControl}" TargetType="{x:Type local:DropTargetControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:DropTargetControl}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="HasData">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="lblData">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DataOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="lblHighlighted">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="lblData" Visibility="Collapsed" BorderThickness="1" BorderBrush="Gray" Background="Gray" />
            <Border x:Name="lblHighlighted" Visibility="Collapsed" BorderThickness="1" BorderBrush="Gray" Background="LightGray" />
            <Label x:Name="lblEmpty" Content="{TemplateBinding Content}" HorizontalContentAlignment="Center" BorderThickness="1" BorderBrush="Gray" Background="Transparent" />
            <Label AllowDrop="True" MinHeight="16" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.SelectionControl}" TargetType="{x:Type local:SelectionControl}">
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="local:SelectionControl">
          <Grid x:Name="root" Visibility="Collapsed">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Highlighted">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="root">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ColorAnimation Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="shape" To="#20FF0000" Duration="0:0:0" />
                    <ColorAnimation Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="shape" To="#FFFF0000" Duration="0:0:0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="root">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="shape" Margin="-4" RadiusX="4" RadiusY="4" StrokeThickness="3" Fill="#204ACBFC" Stroke="#FF4ACBFC" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.SelectionPresentation}" TargetType="{x:Type local:SelectionPresentation}">
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SelectionPresentation}">
          <Canvas x:Name="root" Visibility="Collapsed">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Highlighted">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="root">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ColorAnimation Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="shape" To="#20FF0000" Duration="0:0:0" />
                    <ColorAnimation Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="shape" To="#FFFF0000" Duration="0:0:0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="root">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="shape" Fill="#204ACBFC" Stroke="#FF4ACBFC" StrokeThickness="3" Data="{Binding Path=SelectionGeometryItem.Geometry, Converter={StaticResource selectionListRectToGeometryConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
          </Canvas>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.SelectionGeometryControl}" TargetType="{x:Type local:SelectionGeometryControl}">
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SelectionGeometryControl}">
          <Canvas x:Name="root" Visibility="Collapsed">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Highlighted">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="root">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ColorAnimation Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="shape" To="#20FF0000" Duration="0:0:0" />
                    <ColorAnimation Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="shape" To="#FFFF0000" Duration="0:0:0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="root">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="shape" Fill="#204ACBFC" Stroke="#FF4ACBFC" StrokeThickness="3" Data="{Binding Path=Geometry, Converter={StaticResource selectionListRectToGeometryConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
          </Canvas>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.NavigationLayer}" TargetType="{x:Type local:NavigationLayer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:NavigationLayer}">
          <Grid IsHitTestVisible="False">
            <ContentPresenter x:Name="PART_Selection" ContentTemplate="{Binding SelectionTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
            <Canvas>
              <Image x:Name="PART_Cursor" IsHitTestVisible="False" Cursor="None" HorizontalAlignment="Left" VerticalAlignment="Top" Stretch="None" />
            </Canvas>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="BreadcrumbItemDefaultTemplate">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Path x:Name="PART_HomeImage" VerticalAlignment="Center" Width="16" Height="16" Visibility="{Binding IsHome, Converter={mvvm:BooleanToVisibilityConverter}}" Data="M8,1 L1,8 L3,8 L3,14 L7,14 L7,10 L9,10 L9,14 L13,14 L13,8 L15,8 L8,1z" StrokeThickness="1.5" Fill="Transparent">
        <Path.Style>
          <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=Path}" TargetType="{x:Type Path}">
            <Style.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Stroke" Value="{DynamicResource ResourceKey={dxt:ChartBrushesThemeKey ResourceKey=BreadcrumbHoverForeground}}" />
              </Trigger>
              <DataTrigger Binding="{Binding IsNotLast}" Value="false">
                <Setter Property="Stroke" Value="{DynamicResource ResourceKey={dxt:ChartBrushesThemeKey ResourceKey=BreadcrumbForeground}}" />
              </DataTrigger>
              <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Stroke" Value="{DynamicResource ResourceKey={dxt:ChartBrushesThemeKey ResourceKey=BreadcrumbForeground}}" />
              </Trigger>
            </Style.Triggers>
          </Style>
        </Path.Style>
      </Path>
      <TextBlock x:Name="PART_Text" VerticalAlignment="Center" Grid.Column="1" Text="{Binding Text}" Visibility="{Binding IsHome, Converter={mvvm:BooleanToVisibilityConverter Inverse=True}}">
        <TextBlock.Style>
          <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=TextBlock}" TargetType="{x:Type TextBlock}">
            <Style.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:ChartBrushesThemeKey ResourceKey=BreadcrumbHoverForeground}}" />
              </Trigger>
              <DataTrigger Binding="{Binding IsNotLast}" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:ChartBrushesThemeKey ResourceKey=BreadcrumbForeground}}" />
              </DataTrigger>
              <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:ChartBrushesThemeKey ResourceKey=BreadcrumbForeground}}" />
              </Trigger>
            </Style.Triggers>
          </Style>
        </TextBlock.Style>
      </TextBlock>
      <Path x:Name="PART_Arrow" VerticalAlignment="Center" Margin="10,0,10,0" Grid.Column="2" Fill="{DynamicResource ResourceKey={dxt:ChartBrushesThemeKey ResourceKey=BreadcrumbForeground}}" Data="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=BreadcrumbArrowGeometry}}" Visibility="{Binding IsNotLast, Converter={mvvm:BooleanToVisibilityConverter}}" />
    </Grid>
  </DataTemplate>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.ChartControl}" TargetType="{x:Type local:ChartControl}">
    <Setter Property="ClipToBounds" Value="True" />
    <Setter Property="Background" Value="{DynamicResource {dxt:ChartBrushesThemeKey ResourceKey=ChartBackgroundBrush}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ChartBrushesThemeKey ResourceKey=ChartBorderBrush}}" />
    <Setter Property="BorderThickness" Value="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=ChartBorderThickness}}" />
    <Setter Property="Padding" Value="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=ChartPaddingValue}}" />
    <Setter Property="CrosshairSeriesLabelItemTemplate" Value="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=CrosshairSeriesLabelTemplate}}" />
    <Setter Property="CrosshairSeriesLabelPrintingTemplate" Value="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=CrosshairSeriesLabelPrintingTemplate}}" />
    <Setter Property="FocusManager.IsFocusScope" Value="True" />
    <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Once" />
    <Setter Property="AutomationProperties.Name" Value="ChartControl" />
    <Setter Property="BreadcrumbItemTemplate" Value="{StaticResource ResourceKey=BreadcrumbItemDefaultTemplate}" />
    <Setter Property="Palette">
      <Setter.Value>
        <local:OfficePalette />
      </Setter.Value>
    </Setter>
    <Setter Property="IndicatorsPalette">
      <Setter.Value>
        <local:DefaultIndicatorsPalette />
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ChartControl}">
          <local:ChartBaseLayoutElement>
            <local:ChartContentControl x:Name="ChartWrapper" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Template="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=ChartWrapperTemplate}}">
              <DockPanel LastChildFill="True">
                <local:ChartBreadcrumbControl DockPanel.Dock="Top" HorizontalAlignment="Left" ItemsSource="{Binding Path=Diagram.BreadcrumbItems, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=Diagram.IsDrillDownEnabled, RelativeSource={RelativeSource TemplatedParent}, Converter={mvvm:BooleanToVisibilityConverter}}" />
                <local:TitlesLayoutControl Titles="{TemplateBinding Titles}">
                  <local:TitlesLayoutControl.MasterElement>
                    <local:ChartElementItemsControl x:Name="ChartElements" Diagram="{TemplateBinding Diagram}">
                      <local:ChartElementItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                          <local:ChartElementPanel />
                        </ItemsPanelTemplate>
                      </local:ChartElementItemsControl.ItemsPanel>
                    </local:ChartElementItemsControl>
                  </local:TitlesLayoutControl.MasterElement>
                </local:TitlesLayoutControl>
              </DockPanel>
            </local:ChartContentControl>
            <local:ChartItemsControl x:Name="PART_Annotations" ItemsSource="{Binding ChartAnnotations, RelativeSource={RelativeSource TemplatedParent}}">
              <local:ChartItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <local:AnnotationLayoutPanel />
                </ItemsPanelTemplate>
              </local:ChartItemsControl.ItemsPanel>
            </local:ChartItemsControl>
            <local:NavigationLayer x:Name="PART_NavigationLayer" SupportNavigationControl="{Binding RelativeSource={RelativeSource TemplatedParent}}" />
            <Grid x:Name="PART_CrosshairLabelsContainer" DataContext="{TemplateBinding Diagram}" IsHitTestVisible="False">
              <local:ChartItemsControl ItemsSource="{Binding CrosshairAxisLabelItems}">
                <local:ChartItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <local:CrosshairAxisLabelsPanel />
                  </ItemsPanelTemplate>
                </local:ChartItemsControl.ItemsPanel>
                <local:ChartItemsControl.ItemTemplate>
                  <DataTemplate>
                    <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=CrosshairAxisLabelTemplate}}" />
                  </DataTemplate>
                </local:ChartItemsControl.ItemTemplate>
              </local:ChartItemsControl>
              <local:ChartItemsControl ItemsSource="{Binding CrosshairSeriesLabelItems}" ItemTemplate="{TemplateBinding CrosshairSeriesLabelItemTemplate}">
                <local:ChartItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <local:CrosshairLabelsPanel AutomationProperties.AutomationId="Crosshair" />
                  </ItemsPanelTemplate>
                </local:ChartItemsControl.ItemsPanel>
              </local:ChartItemsControl>
            </Grid>
            <local:ToolTipControl x:Name="PART_ToolTip" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" ToolTipItem="{TemplateBinding ToolTipItem}" />
          </local:ChartBaseLayoutElement>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.BreadcrumbItemPresentation}" TargetType="local:BreadcrumbItemPresentation">
    <Setter Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource AncestorType=local:ChartControl}, Path=BreadcrumbItemTemplate}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.ChartBreadcrumbControl}" TargetType="{x:Type local:ChartBreadcrumbControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ChartBreadcrumbControl}">
          <local:ChartBreadcrumbItemsControl x:Name="PART_ChartBreadcrumbItemsControl" Background="Transparent" ItemsSource="{TemplateBinding ItemsSource}">
            <local:ChartBreadcrumbItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <WrapPanel x:Name="chartBreadcrumbControlPanel" Orientation="Horizontal" />
              </ItemsPanelTemplate>
            </local:ChartBreadcrumbItemsControl.ItemsPanel>
          </local:ChartBreadcrumbItemsControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>