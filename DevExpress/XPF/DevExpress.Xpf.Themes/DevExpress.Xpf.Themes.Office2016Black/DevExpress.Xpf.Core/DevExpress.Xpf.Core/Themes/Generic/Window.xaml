<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:cs="colorscheme_ignorable_uri" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <ResourceDictionary.MergedDictionaries>
    <dxdst:ResourceDictionaryEx Source="{dxc:DynamicThemeResource PseudoWindow.xaml, ResourcePath=Themes, ResourcePathInTheme='DevExpress.Xpf.Core/DevExpress.Xpf.Core/Themes', TypeInTargetAssembly={x:Type dxcn:RenderTemplate}}" />
  </ResourceDictionary.MergedDictionaries>
  <dxmvvm:NumericToVisibilityConverter x:Key="NumericToVisibilityConverter" />
  <Label x:Key="DefaultDXDialogContent" />
  <!--DXHeaderTemplate-->
  <ControlTemplate x:Key="{dxt:DXWindowThemeKey ResourceKey=HeaderTemplate}" TargetType="{x:Type ContentControl}">
    <dxc:DXWindowHeader x:Name="PART_Header" CornerRadius="0" Background="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=ActiveHeaderBackground}}" Focusable="False">
      <Grid>
        <Thumb x:Name="PART_DragWidget" Template="{DynamicResource {dxt:FloatingContainerThemeKey IsVisibleInBlend=True, ResourceKey=FloatingContainerDragWidgetTemplate}}" />
        <DockPanel LastChildFill="True" Name="PART_HeaderDock" Margin="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerHeaderDockMargin}}">
          <Image x:Name="PART_Icon" Style="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=DXWindowIconStyle}}" DockPanel.Dock="Left" Source="{Binding Path=(dxc:FloatingContainer.FloatingContainer).Icon, RelativeSource={RelativeSource AncestorType=ContentPresenter}}" />
          <Grid x:Name="PART_Grid" DockPanel.Dock="Right" UseLayoutRounding="True" Focusable="False">
            <ItemsControl Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=ButtonContainerStyle}}" Visibility="Hidden">
              <dxc:HeaderItemControl Style="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerHeaderCloseButtonStyle}}" DockPanel.Dock="Right" />
            </ItemsControl>
            <ItemsControl x:Name="PART_HeaderButtons" Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=ButtonContainerStyle}}" Focusable="False" IsTabStop="False">
              <dxc:HeaderItemControl x:Name="PART_CloseButton" DockPanel.Dock="Right" Visibility="Collapsed" Style="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerHeaderCloseButtonStyle}}" />
              <dxc:HeaderItemControl x:Name="PART_Maximize" DockPanel.Dock="Right" Style="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerHeaderButtonStyle}}" Visibility="{Binding Path=(dxc:FloatingContainer.IsMaximized), Converter={dxc:BooleanToVisibilityConverter Invert=True}, RelativeSource={RelativeSource Self}}" />
              <dxc:HeaderItemControl x:Name="PART_Restore" DockPanel.Dock="Right" Style="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerHeaderButtonStyle}}" Visibility="{Binding Path=(dxc:FloatingContainer.IsMaximized), Converter={dxc:BooleanToVisibilityConverter Invert=False}, RelativeSource={RelativeSource Self}}" />
              <dxc:HeaderItemControl x:Name="PART_Minimize" DockPanel.Dock="Right" Style="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerHeaderButtonStyle}}" />
              <dxc:ThemedWindowHeaderItemsControl x:Name="PART_HeaderCustomItems" IsTabStop="False" Focusable="False" Margin="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=HeaderItemsControlMargin}}" DockPanel.Dock="Right" Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=ControlContainerStyle}}" />
            </ItemsControl>
          </Grid>
          <ContentPresenter x:Name="PART_CaptionContentPresenter" DockPanel.Dock="Left" Content="{x:Null}" ContentTemplate="{DynamicResource {dxt:FloatingContainerThemeKey IsVisibleInBlend=True, ResourceKey=FloatingContainerCaptionTemplate}}" />
        </DockPanel>
      </Grid>
    </dxc:DXWindowHeader>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=WindowStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, FallbackValue={x:Static sys:String.Empty}}" Value="None">
        <Setter Property="Visibility" TargetName="PART_Maximize" Value="Collapsed" />
        <Setter Property="Visibility" TargetName="PART_Restore" Value="Collapsed" />
        <Setter Property="Visibility" TargetName="PART_Minimize" Value="Collapsed" />
        <Setter Property="Visibility" TargetName="PART_HeaderCustomItems" Value="Collapsed" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxc:FloatingContainer.IsActive)}" Value="False" />
          <Condition Binding="{Binding Path=(dxcn:WindowButtonHelper.IsActiveAppearance)}" Value="False" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Background" TargetName="PART_Header" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=InactiveHeaderBackground}}" />
          <Setter Property="Opacity" TargetName="PART_CaptionContentPresenter" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=InactiveHeaderOpacity}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <!--<DataTrigger Binding="{Binding Path=(dxc:FloatingContainer.IsActive)}" Value="False">
                <Setter Property="Background" TargetName="PART_Header" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=InactiveHeaderBackground}}"/>
                <Setter Property="Opacity" TargetName="PART_CaptionContentPresenter" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=InactiveHeaderOpacity}}"/>
            </DataTrigger>-->
      <Trigger Property="Source" SourceName="PART_Icon" Value="{x:Null}">
        <Setter TargetName="PART_Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <!--FloatingContainerTamplate-->
  <DataTemplate x:Key="{dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerTemplate}">
    <Grid TextElement.Foreground="{DynamicResource {dxt:ThemeColorsThemeKey ResourceKey=DXMessageBoxForegroundColor}}">
      <Control x:Name="PART_ActiveBorder" Template="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingActiveBorder}}" Focusable="False" />
      <Control x:Name="PART_InactiveBorder" Visibility="Collapsed" Template="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingInactiveBorder}}" Focusable="False" />
      <Grid Margin="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingContainerBorderPadding}}" dxc:FrameworkElementHelper.ClipCornerRadius="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingContainerClipCornerRadius}}">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition />
        </Grid.RowDefinitions>
        <ContentControl x:Name="Header" Template="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=HeaderTemplate}}" dxcn:WindowChrome.IsHitTestVisibleInChrome="True" dxc:HeaderItemControl.CommonTemplateProvider="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=HeaderItemControlCommonTemplateProvider}}" dxc:HeaderItemControl.CloseTemplateProvider="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=HeaderItemControlCloseTemplateProvider}}" Focusable="False" />
        <Grid Grid.Row="1" x:Name="PART_ContentOffset" Margin="{Binding Path=(dxc:FloatingContainerControl.ContentOffset), RelativeSource={RelativeSource Self} }">
          <Control x:Name="PART_ContentBackground" Template="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingBackground}}" Focusable="False" />
          <Control x:Name="PART_InactiveContentBackground" Visibility="Collapsed" Template="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=InactiveFloatingBackground}}" Focusable="False" />
          <Grid Margin="1">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ContentPresenter x:Name="PART_ContainerContent" Content="{Binding}" />
          </Grid>
        </Grid>
      </Grid>
      <StackPanel x:Name="PART_StatusPanel" Grid.Row="0" Visibility="Collapsed" VerticalAlignment="Bottom" Margin="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=SizeGripMargin}}">
        <Thumb x:Name="PART_SizeGrip" Template="{DynamicResource {dxt:FloatingContainerThemeKey IsVisibleInBlend=True, ResourceKey=FloatingContainerSizeGripTemplate}}" Cursor="SizeNWSE" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="16" Height="16" />
      </StackPanel>
      <Control x:Name="PART_ResizeFrame" Template="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerResizeFrame}}" Focusable="False" Visibility="{Binding Path=(dxc:FloatingContainer.IsMaximized), Converter={dxc:BooleanToVisibilityConverter Invert=True}}" />
      <Thumb x:Name="AdditionalDragWidget" Height="1" Template="{DynamicResource {dxt:FloatingContainerThemeKey IsVisibleInBlend=True, ResourceKey=FloatingContainerDragWidgetTemplate}}" VerticalAlignment="Top" />
    </Grid>
    <DataTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxc:FloatingContainer.IsActive)}" Value="False" />
          <Condition Binding="{Binding Path=(dxcn:WindowButtonHelper.IsActiveAppearance)}" Value="False" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Visibility" TargetName="PART_InactiveBorder" Value="Visible" />
          <Setter Property="Visibility" TargetName="PART_ActiveBorder" Value="Collapsed" />
          <Setter Property="Visibility" TargetName="PART_InactiveContentBackground" Value="Visible" />
          <Setter Property="Visibility" TargetName="PART_ContentBackground" Value="Collapsed" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <!--<DataTrigger Binding="{Binding Path=(dxc:FloatingContainer.IsActive)}" Value="False">
                <Setter Property="Visibility" TargetName="PART_InactiveBorder" Value="Visible"/>
                <Setter Property="Visibility" TargetName="PART_ActiveBorder" Value="Collapsed"/>
                <Setter Property="Visibility" TargetName="PART_InactiveContentBackground" Value="Visible"/>
                <Setter Property="Visibility" TargetName="PART_ContentBackground" Value="Collapsed"/>
            </DataTrigger>-->
      <DataTrigger Binding="{Binding Path=(dxc:FloatingContainer.FloatingContainer).AllowSizing, RelativeSource={RelativeSource Self}}" Value="false">
        <Setter Property="Visibility" TargetName="PART_StatusPanel" Value="Collapsed" />
        <Setter Property="Visibility" TargetName="PART_ResizeFrame" Value="Collapsed" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=WindowStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, FallbackValue={x:Static sys:String.Empty}}" Value="None">
        <Setter Property="Visibility" TargetName="AdditionalDragWidget" Value="Collapsed" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <!--FullDXWindowTemplate-->
  <ControlTemplate TargetType="{x:Type dxc:DXWindow}" x:Key="DXWindowTemplate">
    <Grid x:Name="Root_Grid">
      <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
        <AdornerDecorator x:Name="PART_WindowAdornerDecorator" ClipToBounds="True">
          <ContentPresenter x:Name="PART_RootContentPresenter" DataContext="{TemplateBinding DataContext}" ContentTemplate="{TemplateBinding ActualWindowTemplate}">
            <ContentPresenter.Content>
              <dxc:DXWindowBackgroundPanel DataContext="{TemplateBinding DataContext}" Focusable="False">
                <dxc:DXWindowBackgroundPanel.ContentTemplate>
                  <Binding Path="ContentTemplate" RelativeSource="{RelativeSource TemplatedParent}" />
                </dxc:DXWindowBackgroundPanel.ContentTemplate>
                <dxc:DXWindowBackgroundPanel.Content>
                  <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}" />
                </dxc:DXWindowBackgroundPanel.Content>
              </dxc:DXWindowBackgroundPanel>
            </ContentPresenter.Content>
          </ContentPresenter>
        </AdornerDecorator>
      </Border>
    </Grid>
  </ControlTemplate>
  <!--EmptyDXWindowTemplate-->
  <ControlTemplate TargetType="{x:Type dxc:DXWindow}" x:Key="DXWindowEmptyTemplate">
    <Grid x:Name="Root_Grid" Height="Auto" Margin="0,0,0,0" VerticalAlignment="Stretch">
      <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
        <AdornerDecorator ClipToBounds="True" x:Name="PART_WindowAdornerDecorator">
          <ContentPresenter ContentTemplate="{TemplateBinding ActualWindowTemplate}" Height="Auto" Width="Auto" x:Name="PART_RootContentPresenter">
            <ContentPresenter.Content>
              <Border />
            </ContentPresenter.Content>
          </ContentPresenter>
        </AdornerDecorator>
      </Border>
    </Grid>
  </ControlTemplate>
  <!--ThemedWindowStyle-->
  <!--

    <Style TargetType="{x:Type dxc:ThemedWindow}">
        <Setter Property="AllowsTransparency" Value="False"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Background="BlueViolet"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
  <!--DXWindowStyle-->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXWindow}" TargetType="{x:Type dxc:DXWindow}">
    <Setter Property="MinHeight" Value="42" />
    <!--SPECIFICTHEME MetropolisDark, MetropolisLight <Setter Property="MinHeight" Value="50" /> SPECIFICTHEME-->
    <!--SPECIFICTHEME TouchlineDark
        <Setter Property="TextElement.FontSize" Value="{DynamicResource {dxdst:FloatingContainerThemeKey ResourceKey=GlobalFontSize}}" />
        <Setter Property="TextElement.FontFamily" Value="{DynamicResource {dxdst:FloatingContainerThemeKey ResourceKey=GlobalFontFamily}}" />
        <Setter Property="Control.Foreground" Value="{DynamicResource {dxdst:ThemeColorsThemeKey ResourceKey=WhiteForegroundColor}}" /> SPECIFICTHEME-->
    <Setter Property="ResizeMode" Value="CanResize" />
    <Setter Property="ResizeBorderThicknessInAeroMode" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=AeroWindowResizeBorderThickness}}" />
    <Setter Property="ResizeBorderThickness" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=ResizeBorderThickness}}" />
    <Setter Property="BorderEffectOffset" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectOffset}}" />
    <Setter Property="BorderEffectActiveColor" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectActiveColor}}" />
    <Setter Property="BorderEffectInactiveColor" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectInactiveColor}}" />
    <Setter Property="BorderEffectLeftMargins" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectLeftMargins}}" />
    <Setter Property="BorderEffectRightMargins" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectRightMargins}}" />
    <Setter Property="BorderEffectTopMargins" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectTopMargins}}" />
    <Setter Property="BorderEffectBottomMargins" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectBottomMargins}}" />
    <Setter Property="AeroWindowTemplate" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=AeroWindowTemplate}}" />
    <Setter Property="AeroBorderSize" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=AeroWindowBorderSize}}" />
    <Setter Property="WindowTemplate" Value="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerTemplate}}" />
    <Setter Property="Padding" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=FloatingContainerBodyMargin}}" />
    <Setter Property="Template" Value="{StaticResource DXWindowTemplate}" />
    <Style.Triggers>
      <Trigger Property="HasContent" Value="False">
        <Setter Property="Template" Value="{StaticResource DXWindowEmptyTemplate}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <!--DXDialogTemplate-->
  <ControlTemplate TargetType="{x:Type dxc:DXDialog}" x:Key="DXDialogTemplate">
    <Grid x:Name="Root_Grid">
      <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
        <AdornerDecorator x:Name="PART_WindowAdornerDecorator" ClipToBounds="True">
          <ContentPresenter x:Name="PART_RootContentPresenter" DataContext="{TemplateBinding DataContext}" ContentTemplate="{TemplateBinding ActualWindowTemplate}">
            <ContentPresenter.Content>
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <dxc:DXWindowBackgroundPanel DataContext="{TemplateBinding DataContext}">
                  <dxc:DXWindowBackgroundPanel.ContentTemplate>
                    <Binding Path="ContentTemplate" RelativeSource="{RelativeSource TemplatedParent}" />
                  </dxc:DXWindowBackgroundPanel.ContentTemplate>
                  <dxc:DXWindowBackgroundPanel.Content>
                    <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}" />
                  </dxc:DXWindowBackgroundPanel.Content>
                </dxc:DXWindowBackgroundPanel>
                <StackPanel Orientation="Horizontal" x:Name="Footer" Margin="12" Grid.Row="2" HorizontalAlignment="Right">
                  <Button x:Name="YesButton" IsDefault="True" Content="{dxc:DXMessageBoxStringId StringId=Yes}" MinWidth="65" MinHeight="22" Margin="6,0,0,0" />
                  <Button x:Name="NoButton" IsCancel="True" Content="{dxc:DXMessageBoxStringId StringId=No}" MinWidth="65" MinHeight="22" Margin="6,0,0,0" />
                  <Button x:Name="OkButton" IsDefault="True" Content="{dxc:DXMessageBoxStringId StringId=Ok}" MinWidth="65" MinHeight="22" Margin="6,0,0,0" />
                  <Button x:Name="CancelButton" IsCancel="True" Content="{dxc:DXMessageBoxStringId StringId=Cancel}" MinWidth="65" MinHeight="22" Margin="6,0,0,0" />
                </StackPanel>
              </Grid>
            </ContentPresenter.Content>
          </ContentPresenter>
        </AdornerDecorator>
      </Border>
    </Grid>
  </ControlTemplate>
  <!--DXDialogStyle-->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXDialog}" TargetType="{x:Type dxc:DXDialog}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXWindow}}">
    <!--SPECIFICTHEME TouchlineDark
        <Setter Property="TextElement.FontSize" Value="{DynamicResource {dxdst:FloatingContainerThemeKey ResourceKey=GlobalFontSize}}" />
        <Setter Property="TextElement.FontFamily" Value="{DynamicResource {dxdst:FloatingContainerThemeKey ResourceKey=GlobalFontFamily}}" />
        <Setter Property="Control.Foreground" Value="{DynamicResource {dxdst:ThemeColorsThemeKey ResourceKey=WhiteForegroundColor}}" /> SPECIFICTHEME-->
    <Setter Property="Template" Value="{StaticResource DXDialogTemplate}" />
  </Style>
  <!--DXDialogWindowTemplate-->
  <ControlTemplate x:Key="DXDialogWindowTemplate" TargetType="{x:Type dxc:DXDialogWindow}">
    <Grid x:Name="Root_Grid">
      <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
        <AdornerDecorator x:Name="PART_WindowAdornerDecorator" ClipToBounds="True">
          <ContentPresenter x:Name="PART_RootContentPresenter" ContentTemplate="{TemplateBinding ActualWindowTemplate}" DataContext="{TemplateBinding DataContext}">
            <ContentPresenter.Content>
              <Grid>
                <Grid.Resources>
                  <dxmvvm:BooleanToObjectConverter x:Key="DialogFooterMarginConverter">
                    <dxmvvm:BooleanToObjectConverter.TrueValue>
                      <Thickness>6,12,12,12</Thickness>
                    </dxmvvm:BooleanToObjectConverter.TrueValue>
                    <dxmvvm:BooleanToObjectConverter.FalseValue>
                      <Thickness>0</Thickness>
                    </dxmvvm:BooleanToObjectConverter.FalseValue>
                  </dxmvvm:BooleanToObjectConverter>
                </Grid.Resources>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <dxc:DXWindowBackgroundPanel>
                  <dxc:DXWindowBackgroundPanel.ContentTemplate>
                    <Binding Path="ContentTemplate" RelativeSource="{RelativeSource TemplatedParent}" />
                  </dxc:DXWindowBackgroundPanel.ContentTemplate>
                  <dxc:DXWindowBackgroundPanel.Content>
                    <PriorityBinding>
                      <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Source="{StaticResource DefaultDXDialogContent}" />
                    </PriorityBinding>
                  </dxc:DXWindowBackgroundPanel.Content>
                </dxc:DXWindowBackgroundPanel>
                <ItemsControl x:Name="Footer" Grid.Row="1" Focusable="False" ItemsSource="{Binding CommandButtons, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=CommandButtons.Count, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NumericToVisibilityConverter}}" ItemsPanel="{TemplateBinding CommandButtonsPanel}" />
                <ContentControl x:Name="FooterContainer" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Grid.Row="1" Focusable="False">
                  <dxc:NonLogicalDecorator x:Name="FooterPresenter" Margin="{Binding HasFooterButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DialogFooterMarginConverter}}" DataContext="{x:Null}" />
                </ContentControl>
              </Grid>
            </ContentPresenter.Content>
          </ContentPresenter>
        </AdornerDecorator>
      </Border>
    </Grid>
  </ControlTemplate>
  <!--DXDialogWindowCommandButtonStyle-->
  <Style x:Key="DXDialogWindowCommandButtonStyle" TargetType="Button">
    <Setter Property="MinWidth" Value="65" />
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="Margin" Value="6,0,0,0" />
    <Setter Property="ContentTemplate" Value="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="ContentTemplateSelector" Value="{Binding ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
  </Style>
  <!--DXDialogWindowStyle-->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXDialogWindow}" TargetType="{x:Type dxc:DXDialogWindow}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXWindow}}">
    <!--SPECIFICTHEME TouchlineDark
        <Setter Property="TextElement.FontSize" Value="{DynamicResource {dxdst:FloatingContainerThemeKey ResourceKey=GlobalFontSize}}" />
        <Setter Property="TextElement.FontFamily" Value="{DynamicResource {dxdst:FloatingContainerThemeKey ResourceKey=GlobalFontFamily}}" />
        <Setter Property="Control.Foreground" Value="{DynamicResource {dxdst:ThemeColorsThemeKey ResourceKey=WhiteForegroundColor}}" /> SPECIFICTHEME-->
    <Setter Property="Template" Value="{StaticResource DXDialogWindowTemplate}" />
    <Setter Property="CommandButtonStyle" Value="{StaticResource DXDialogWindowCommandButtonStyle}" />
    <Setter Property="CommandButtonsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Margin="12" HorizontalAlignment="Right" Orientation="Horizontal" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="HasContent" Value="False">
        <Setter Property="Template" Value="{StaticResource DXDialogWindowTemplate}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <!--DialogButtonStyle-->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DialogButton}" TargetType="dxc:DialogButton">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="CommandButtonStyle" Value="{StaticResource DXDialogWindowCommandButtonStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="dxc:DialogButton">
          <Button Style="{TemplateBinding CommandButtonStyle}" Visibility="{TemplateBinding CommandButtonVisibility}" Command="{TemplateBinding ActualCommand}" Content="{TemplateBinding ActualContent}" IsDefault="{TemplateBinding ActualIsDefault}" IsCancel="{TemplateBinding ActualIsCancel}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--DialogButtonControlStyle-->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DialogButtonsControl}" TargetType="dxc:DialogButtonsControl">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="ItemsSource" Value="{Binding Path=(dxc:DialogButtonsControl.CommandsSource), RelativeSource={RelativeSource Self}}" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Orientation="Horizontal" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="dxc:DialogButtonsControl">
          <ItemsPresenter Margin="{TemplateBinding Padding}" Visibility="{Binding HasItems, Converter={dxmvvm:BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--HeaderButtonTemplate-->
  <ControlTemplate x:Key="{dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerHeaderButtonTemplate}" TargetType="{x:Type dxc:HeaderItemControl}">
    <Grid>
      <Control Name="PART_Background" Focusable="False" Template="{Binding Path=TemplateProvider.NormalBackgroundTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
      <Border Name="MarginBorder" Background="Transparent" Margin="4,0">
        <ContentPresenter x:Name="PART_ContentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="Name" Value="PART_Minimize">
        <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{Binding Path=TemplateProvider.(dxc:CommonHeaderItemControlTemplateProvider.MinimizeGlyphTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="MarginBorder" Property="Margin" Value="0" />
      </Trigger>
      <Trigger Property="Name" Value="PART_Maximize">
        <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{Binding Path=TemplateProvider.(dxc:CommonHeaderItemControlTemplateProvider.MaximizeGlyphTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="MarginBorder" Property="Margin" Value="0" />
      </Trigger>
      <Trigger Property="Name" Value="PART_MinimizeRestore">
        <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{Binding Path=TemplateProvider.(dxc:CommonHeaderItemControlTemplateProvider.RestoreGlyphTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="MarginBorder" Property="Margin" Value="0" />
      </Trigger>
      <Trigger Property="Name" Value="PART_Restore">
        <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{Binding Path=TemplateProvider.(dxc:CommonHeaderItemControlTemplateProvider.RestoreGlyphTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="MarginBorder" Property="Margin" Value="0" />
      </Trigger>
      <Trigger Property="Name" Value="PART_CloseButton">
        <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{Binding Path=TemplateProvider.(dxc:CloseHeaderItemControlTemplateProvider.CloseGlyphTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="MarginBorder" Property="Margin" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ShowBorder" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Background" Property="Template" Value="{Binding Path=TemplateProvider.MouseOverBackgroundTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Foreground" Value="{Binding Path=TemplateProvider.MouseOverForeground, RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsPressed" Value="True" />
          <Condition Property="ShowBorder" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Background" Property="Template" Value="{Binding Path=TemplateProvider.PressedBackgroundTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Foreground" Value="{Binding Path=TemplateProvider.PressedForeground, RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <Trigger Property="ShowBorder" Value="False">
        <Setter TargetName="PART_Background" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{Binding Path=TemplateProvider.NormalForeground, RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <!--test isMouseOver-->
      <Trigger Property="dxcn:WindowButtonHelper.IsMouseOver" Value="True">
        <Setter TargetName="PART_Background" Property="Template" Value="{Binding Path=TemplateProvider.MouseOverBackgroundTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Foreground" Value="{Binding Path=TemplateProvider.MouseOverForeground, RelativeSource={RelativeSource Self}}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <!--CommonTemplateProvider-->
  <dxc:CommonHeaderItemControlTemplateProvider x:Key="{dxt:DXWindowThemeKey ResourceKey=HeaderItemControlCommonTemplateProvider}" NormalBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonBackgroundNormalState}}" MouseOverBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonBackgroundMouseOverState}}" PressedBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonBackgroundPressedState}}" MinimizeGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerMinimizeButtonGlyph}}" MaximizeGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerMaximizeButtonGlyph}}" RestoreGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerRestoreButtonGlyph}}" NormalForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonForegroundNormalState}}" MouseOverForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonForegroundMouseOverState}}" PressedForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonForegroundPressedState}}" />
  <!--CloseTemplateProvider-->
  <dxc:CloseHeaderItemControlTemplateProvider x:Key="{dxt:DXWindowThemeKey ResourceKey=HeaderItemControlCloseTemplateProvider}" CloseGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonGlyph}}" NormalBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonBackgroundNormalState}}" MouseOverBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonBackgroundMouseOverState}}" PressedBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonBackgroundPressedState}}" NormalForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonForegroundNormalState}}" MouseOverForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonForegroundMouseOverState}}" PressedForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonForegroundPressedState}}" />
</ResourceDictionary>