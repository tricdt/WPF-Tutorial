<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxdiag="http://schemas.devexpress.com/winfx/2008/xaml/diagram" xmlns:dxdiagt="http://schemas.devexpress.com/winfx/2008/xaml/diagram/themekeys" xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:dxdiagcore="http://schemas.devexpress.com/winfx/2008/xaml/diagram/internal" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <Style TargetType="Rectangle" x:Key="BoxStyle">
    <Setter Property="Width" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=PointsSize}}" />
    <Setter Property="Height" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=PointsSize}}" />
    <Setter Property="Fill" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ResizeBoxBackground}}" />
    <Setter Property="Stroke" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SelectionAdornerStroke}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.SelectionAdorner}" TargetType="{x:Type dxdiag:SelectionAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:SelectionAdorner}">
          <Grid Name="root">
            <Image x:Name="RotationIcon" Source="{dxdiag:DiagramSvgImage Size='21,21', Path=Images/Svg/Rotate.svg}" Width="21" Height="21" Margin="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=RotationAdornerMargin}}" HorizontalAlignment="Center" VerticalAlignment="Top" />
            <Grid Margin="-3">
              <Rectangle x:Name="rect" Margin="3" Stroke="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SelectionAdornerStroke}}" />
              <Border x:Name="MoveBorder" BorderThickness="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SelectionAdornerMoveBorderThickness}}" BorderBrush="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SelectionAdornerMoveBorderBrush}}" />
              <ItemsControl ItemsSource="{TemplateBinding ResizeModes}">
                <ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <Grid />
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                  <DataTemplate>
                    <Rectangle Style="{StaticResource BoxStyle}" dxdiag:DiagramInput.InputElementFactory="{Binding InputElementFactory}" VerticalAlignment="{Binding VerticalAlignment}" HorizontalAlignment="{Binding HorizontalAlignment}" />
                  </DataTemplate>
                </ItemsControl.ItemTemplate>
              </ItemsControl>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="CanResize" Value="False">
              <Setter TargetName="rect" Property="StrokeThickness" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SelectionAdornerRectStrokeThickness}}" />
            </Trigger>
            <Trigger Property="IsMultipleSelection" Value="True">
              <Setter TargetName="root" Property="Margin" Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="CanRotate" Value="False">
              <Setter TargetName="RotationIcon" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.SelectionPartAdorner}" TargetType="{x:Type dxdiag:SelectionPartAdorner}">
    <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SelectionPartBorderBrush}}" />
    <Setter Property="BorderThickness" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SelectionPartDefaultBorderThickness}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:SelectionPartAdorner}">
          <Border Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsPrimarySelection" Value="True">
        <Setter Property="BorderThickness" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SelectionPartSelectBorderThickness}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.ShapeParametersAdorner}" TargetType="{x:Type dxdiag:ShapeParametersAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:ShapeParametersAdorner}">
          <dxdiag:ScaleItemsControl x:Name="PART_ItemsControl" ItemsSource="{TemplateBinding Parameters}" Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}">
            <ItemsControl.ItemContainerStyle>
              <Style>
                <Setter Property="dxdiag:ScaleCanvas.Position" Value="{Binding Point}" />
              </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <Rectangle Width="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=PointsSize}}" Height="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=PointsSize}}" Fill="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ParameterPointsBackground}}" Stroke="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ParameterPointsStroke}}" StrokeThickness="1" />
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </dxdiag:ScaleItemsControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.ConnectorSelectionAdorner}" TargetType="{x:Type dxdiag:ConnectorSelectionAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:ConnectorSelectionAdorner}">
          <ControlTemplate.Resources>
            <Style x:Key="BoxContainerStyle" TargetType="Border">
              <Setter Property="Padding" Value="4" />
              <Setter Property="Background" Value="Transparent" />
            </Style>
          </ControlTemplate.Resources>
          <Grid>
            <dxdiag:ConnectorPointItemsControl x:Name="Points" ItemsSource="{TemplateBinding Points}" Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}">
              <ItemsControl.ItemContainerStyle>
                <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=ContentPresenter}" TargetType="{x:Type ContentPresenter}">
                  <Setter Property="dxdiag:ScaleCanvas.Position" Value="{Binding Position}" />
                </Style>
              </ItemsControl.ItemContainerStyle>
              <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type dxdiag:ConnectorPointViewModel}">
                  <dxdiag:ConnectorPointAdorner PointIndex="{Binding Index}" Connector="{Binding Connector}" />
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </dxdiag:ConnectorPointItemsControl>
            <dxdiag:ConnectorPointItemsControl x:Name="Segments" ItemsSource="{TemplateBinding Segments}" Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}">
              <ItemsControl.ItemContainerStyle>
                <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=ContentPresenter}" TargetType="{x:Type ContentPresenter}">
                  <Setter Property="dxdiag:ScaleCanvas.Position" Value="{Binding Position}" />
                </Style>
              </ItemsControl.ItemContainerStyle>
              <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type dxdiag:ConnectorPointViewModel}">
                  <dxdiag:ConnectorSegmentAdorner Segment="{Binding Segment}" Connector="{Binding Connector}" />
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </dxdiag:ConnectorPointItemsControl>
            <dxdiag:ScaleCanvas Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}">
              <Grid dxdiag:ScaleCanvas.Position="{TemplateBinding BeginPoint}">
                <Grid x:Name="BeginElement">
                  <Border x:Name="BeginFreeElement" Style="{StaticResource BoxContainerStyle}">
                    <Rectangle Style="{StaticResource BoxStyle}" />
                  </Border>
                  <Grid x:Name="BeginConnectedElement" Visibility="Collapsed" Width="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=BeginConnectedElementSize}}" Height="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=BeginConnectedElementSize}}" Background="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=BeginConnectedElementBackground}}">
                    <Ellipse Fill="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorConnectedMarkerFill}}" Stroke="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorConnectedMarkerStroke}}" Margin="3" />
                  </Grid>
                </Grid>
                <Grid x:Name="BeginProtectionMarker" Visibility="Collapsed" Width="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorProtectionMarkerSize}}" Height="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorProtectionMarkerSize}}">
                  <Ellipse Margin="3" StrokeThickness="1" Fill="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorProtectionMarkerFill}}" Stroke="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorProtectionMarkerStroke}}" />
                </Grid>
              </Grid>
              <Grid dxdiag:ScaleCanvas.Position="{TemplateBinding EndPoint}">
                <Grid x:Name="EndElement">
                  <Border x:Name="EndFreeElement" Style="{StaticResource BoxContainerStyle}">
                    <Rectangle Style="{StaticResource BoxStyle}" Fill="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=EndFreeElementBackground}}" />
                  </Border>
                  <Grid x:Name="EndConnectedElement" Visibility="Collapsed" Width="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=EndConnectedElementSize}}" Height="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=EndConnectedElementSize}}" Background="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=EndConnectedElementBackground}}">
                    <Ellipse Margin="1" Stroke="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorConnectedMarkerStroke}}" Fill="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorConnectedMarkerEndFill}}" />
                    <Ellipse Margin="4" Fill="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorConnectedMarkerFill}}" />
                  </Grid>
                </Grid>
                <Grid x:Name="EndProtectionMarker" Visibility="Collapsed" Width="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorProtectionMarkerSize}}" Height="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorProtectionMarkerSize}}">
                  <Ellipse Margin="3" StrokeThickness="2" Fill="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorProtectionMarkerFill}}" Stroke="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorProtectionMarkerStroke}}" />
                </Grid>
              </Grid>
            </dxdiag:ScaleCanvas>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsBeginPointConnected" Value="True">
              <Setter TargetName="BeginFreeElement" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="BeginConnectedElement" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEndPointConnected" Value="True">
              <Setter TargetName="EndFreeElement" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="EndConnectedElement" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="CanDragBeginPoint" Value="False">
              <Setter TargetName="BeginElement" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="BeginProtectionMarker" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="CanDragEndPoint" Value="False">
              <Setter TargetName="EndElement" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="EndProtectionMarker" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="CanChangeRoute" Value="False">
              <Setter TargetName="Points" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="Segments" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.ConnectorSegmentAdorner}" TargetType="{x:Type dxdiag:ConnectorSegmentAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:ConnectorSegmentAdorner}">
          <Ellipse Width="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorIntermediatePointSize}}" Height="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorIntermediatePointSize}}" Fill="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorIntermediatePointFill}}" Stroke="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorIntermediatePointStroke}}" StrokeThickness="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorIntermediatePointStrokeThickness}}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.ConnectorPointAdorner}" TargetType="{x:Type dxdiag:ConnectorPointAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:ConnectorPointAdorner}">
          <Ellipse Width="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorIntermediatePointSize}}" Height="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorIntermediatePointSize}}" Fill="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorIntermediatePointFill}}" Stroke="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorIntermediatePointStroke}}" StrokeThickness="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorIntermediatePointStrokeThickness}}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.ConnectorSelectionPartAdorner}" TargetType="{x:Type dxdiag:ConnectorSelectionPartAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:ConnectorSelectionPartAdorner}">
          <dxdiag:ShapePresenter x:Name="shapePresenter" Zoom="{TemplateBinding dxdiag:AdornerLayer.Zoom}" Shape="{TemplateBinding Shape}" Stroke="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SelectionPartBorderBrush}}" StrokeThickness="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorSelectionPartDefaultThickness}}" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsPrimarySelection" Value="True">
              <Setter TargetName="shapePresenter" Property="StrokeThickness" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorSelectionPartSelectedThickness}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ConnectorPreviewAdornerBaseStyle" TargetType="{x:Type dxdiag:ConnectorPreviewAdornerBase}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:ConnectorPreviewAdornerBase}">
          <Grid>
            <dxdiag:ShapePresenter Zoom="{TemplateBinding dxdiag:AdornerLayer.Zoom}" Shape="{TemplateBinding Shape}" Stroke="{TemplateBinding Stroke}" StrokeThickness="{TemplateBinding StrokeThickness}" Background="{TemplateBinding Stroke}" StrokeDashArray="{TemplateBinding StrokeDashArray}" />
            <dxdiag:ScaleCanvas>
              <TextBlock Text="{TemplateBinding Content}" TextDecorations="{TemplateBinding TextDecorations}" dxdiag:ScaleCanvas.Position="{TemplateBinding ContentPosition}" Background="{TemplateBinding ContentBackground}" />
            </dxdiag:ScaleCanvas>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.ConnectorDragPreviewAdorner}" TargetType="{x:Type dxdiag:ConnectorDragPreviewAdorner}" BasedOn="{StaticResource ConnectorPreviewAdornerBaseStyle}">
    <Setter Property="Opacity" Value="{DynamicResource {dxdiagt:ControlsThemeKeys ResourceKey=DragPreviewOpacity}}" />
    <Setter Property="Background" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorDragColor}}" />
    <Setter Property="Stroke" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorDragColor}}" />
    <Setter Property="StrokeThickness" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorDragThickness}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.ConnectorMovePointPreviewAdorner}" TargetType="{x:Type dxdiag:ConnectorMovePointPreviewAdorner}" BasedOn="{StaticResource ConnectorPreviewAdornerBaseStyle}">
    <Setter Property="Stroke" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ConnectorMovePointColor}}" />
    <Setter Property="StrokeThickness" Value="1" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.GlueToItemAdorner}" TargetType="{x:Type dxdiag:GlueToItemAdorner}">
    <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=GlueHighlightBrush}}" />
    <Setter Property="BorderThickness" Value="3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:GlueToItemAdorner}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="-3" />
          <ControlTemplate.Triggers>
            <Trigger Property="State" Value="Disabled">
              <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=GlueHighlightBrushDisabled}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.InsertTargetAdorner}" TargetType="{x:Type dxdiag:InsertTargetAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:InsertTargetAdorner}">
          <Border BorderBrush="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=InsertTargetHighlightBrush}}" BorderThickness="3" Margin="-3" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.GlueToPointAdorner}" TargetType="{x:Type dxdiag:GlueToPointAdorner}">
    <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=GlueHighlightBrush}}" />
    <Setter Property="BorderThickness" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=GlueToPointBorderThickness}}" />
    <!--<Setter Property="Width" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=GlueToPointBorderSize}}"/>
        <Setter Property="Height" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=GlueToPointBorderSize}}"/>-->
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:GlueToPointAdorner}">
          <dxdiag:ScaleCanvas>
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Width="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=GlueToPointBorderSize}}" Height="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=GlueToPointBorderSize}}" />
          </dxdiag:ScaleCanvas>
          <ControlTemplate.Triggers>
            <Trigger Property="State" Value="Disabled">
              <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=GlueHighlightBrushDisabled}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.ConnectionPointsAdorner}" TargetType="{x:Type dxdiag:ConnectionPointsAdorner}">
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:ConnectionPointsAdorner}">
          <dxdiag:ScaleItemsControl ItemsSource="{TemplateBinding Points}" Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}">
            <ItemsControl.ItemContainerStyle>
              <Style>
                <Setter Property="dxdiag:ScaleCanvas.Position" Value="{Binding Position}" />
              </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <Ellipse Width="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ShapeConnectionPointSize}}" Height="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ShapeConnectionPointSize}}" Fill="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ShapeConnectionPointBrush}}" />
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </dxdiag:ScaleItemsControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="boundsSnapLineStyle" TargetType="Line">
    <Setter Property="Stroke" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SnapLineBrush}}" />
    <Setter Property="StrokeDashArray" Value="4,2" />
    <Setter Property="StrokeThickness" Value="1" />
    <Setter Property="X1" Value="{Binding From.X, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Y1" Value="{Binding From.Y, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="X2" Value="{Binding To.X, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Y2" Value="{Binding To.Y, RelativeSource={RelativeSource TemplatedParent}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.Native.HorizontalBoundsSnapLineAdorner}" TargetType="{x:Type dxdiagcore:HorizontalBoundsSnapLineAdorner}">
    <Setter Property="Extent" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SnapLineExtent}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiagcore:HorizontalBoundsSnapLineAdorner}">
          <Line Name="Line" Style="{StaticResource boundsSnapLineStyle}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.Native.VerticalBoundsSnapLineAdorner}" TargetType="{x:Type dxdiagcore:VerticalBoundsSnapLineAdorner}">
    <Setter Property="Extent" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SnapLineExtent}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiagcore:VerticalBoundsSnapLineAdorner}">
          <Line Name="Line" Style="{StaticResource boundsSnapLineStyle}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.Native.HorizontalSizeSnapLineAdorner}" TargetType="{x:Type dxdiagcore:HorizontalSizeSnapLineAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiagcore:HorizontalSizeSnapLineAdorner}">
          <Grid Margin="0,0,0,-25">
            <ContentPresenter VerticalAlignment="Bottom" ContentTemplate="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SizeSnapLineTemplate}}" Height="17" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.Native.VerticalSizeSnapLineAdorner}" TargetType="{x:Type dxdiagcore:VerticalSizeSnapLineAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiagcore:VerticalSizeSnapLineAdorner}">
          <Grid Margin="0,0,-25,0">
            <ContentPresenter HorizontalAlignment="Right" ContentTemplate="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=SizeSnapLineTemplate}}" Height="17">
              <ContentPresenter.LayoutTransform>
                <RotateTransform Angle="90" />
              </ContentPresenter.LayoutTransform>
            </ContentPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.ShapeStylePresenter}" TargetType="{x:Type dxdiag:ShapeStylePresenter}">
    <Setter Property="Text" Value="Abc" />
    <Setter Property="Width" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ShapePresenterDefaultSize}}" />
    <Setter Property="Height" Value="{DynamicResource {dxdiagt:AdornersThemeKeys ResourceKey=ShapePresenterDefaultSize}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiag:ShapeStylePresenter}">
          <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Canvas Height="40" Width="40">
              <Polyline x:Name="PART_Line1" Stroke="Black" Points="5,5 5,35 35,35" />
              <Line x:Name="PART_Line2" Stroke="Black" X1="0" Y1="0" X2="-6" Y2="3" Canvas.Left="33" Canvas.Top="35" />
              <Line x:Name="PART_Line3" Stroke="Black" X1="0" Y1="0" X2="-6" Y2="-3" Canvas.Left="33" Canvas.Top="35" />
            </Canvas>
            <TextBlock x:Name="PART_Text" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{TemplateBinding Text}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.Native.BindingIndicatorAdorner}" TargetType="{x:Type dxdiagcore:BindingIndicatorAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiagcore:BindingIndicatorAdorner}">
          <Image x:Name="PART_Indicator" Stretch="None" Margin="0, 0, 0, 2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Visibility="Collapsed" />
          <ControlTemplate.Triggers>
            <Trigger Property="State" Value="Inactive">
              <Setter TargetName="PART_Indicator" Property="Opacity" Value="0.25" />
              <Setter TargetName="PART_Indicator" Property="Visibility" Value="Visible" />
              <Setter TargetName="PART_Indicator" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/BindingIndicatorInactive.svg}" />
            </Trigger>
            <Trigger Property="State" Value="HoverInactive">
              <Setter TargetName="PART_Indicator" Property="Visibility" Value="Visible" />
              <Setter TargetName="PART_Indicator" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/BindingIndicatorInactive.svg}" />
            </Trigger>
            <Trigger Property="State" Value="Active">
              <Setter TargetName="PART_Indicator" Property="Visibility" Value="Visible" />
              <Setter TargetName="PART_Indicator" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/BindingIndicatorActive.svg}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Diagram.Native.CollapseButtonAdorner}" TargetType="{x:Type dxdiagcore:CollapseButtonAdorner}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxdiagcore:CollapseButtonAdorner}">
          <Canvas x:Name="PART_Canvas">
            <Image x:Name="PART_Button" Stretch="None">
              <Image.LayoutTransform>
                <ScaleTransform CenterX="0" CenterY="0" ScaleX="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}" ScaleY="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}" />
              </Image.LayoutTransform>
              <Canvas.Left>
                <MultiBinding Converter="{dxdiagcore:CollapseButtonPositionConverter}">
                  <Binding Path="ActualWidth" ElementName="PART_Canvas" />
                  <Binding Path="Item.CollapseButtonPosition.X" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="Item.CollapseButtonOffset.X" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="Item.CollapseButtonHorizontalAlignment" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                  <Binding Path="(dxdiag:AdornerLayer.Zoom)" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </Canvas.Left>
              <Canvas.Top>
                <MultiBinding Converter="{dxdiagcore:CollapseButtonPositionConverter}">
                  <Binding Path="ActualHeight" ElementName="PART_Canvas" />
                  <Binding Path="Item.CollapseButtonPosition.Y" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="Item.CollapseButtonOffset.Y" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="Item.CollapseButtonVerticalAlignment" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                  <Binding Path="(dxdiag:AdornerLayer.Zoom)" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </Canvas.Top>
            </Image>
          </Canvas>
          <ControlTemplate.Triggers>
            <Trigger Property="State" Value="Collapse">
              <Setter TargetName="PART_Button" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/CollapseSubordinates.svg}" />
            </Trigger>
            <Trigger Property="State" Value="Expand">
              <Setter TargetName="PART_Button" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/ExpandSubordinates.svg}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>