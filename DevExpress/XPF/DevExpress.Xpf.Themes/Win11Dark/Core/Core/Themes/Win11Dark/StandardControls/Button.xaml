<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Dark.v24.1;component/Core/Core/Themes/UICore.xaml" />
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Dark.v24.1;component/Core/Core/Editors/Themes/Win11Dark/UICore.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <!-- General -->
  <Style x:Key="FocusVisualBorder">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border BorderBrush="Black" BorderThickness="2" CornerRadius="6" Margin="-3" cs:id="Border_0000" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="{dxt:ButtonThemeKey ResourceKey=LightweightTemplate}" TargetType="{x:Type ButtonBase}">
    <Grid>
      <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" SnapsToDevicePixels="true" />
      <Border BorderBrush="{StaticResource {dxt:CommonThemeKey ResourceKey=ButtonBottomBorder}}" BorderThickness="1" CornerRadius="0,0,4,4" Height="10" VerticalAlignment="Bottom" />
      <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="true">
        <Setter Property="MinWidth" TargetName="border" Value="44" />
        <Setter Property="MinHeight" TargetName="border" Value="44" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=System.Windows.Controls.Button}" BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="#FF303030" cs:id="Setter_0000" x:Uid="@Value=Button.SimpleButtonBackground" />
    <Setter Property="BorderBrush" Value="#FF494949" cs:id="Setter_0001" x:Uid="@Value=Button.SimpleButtonBorder" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
    <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}" />
    <Setter Property="Padding" Value="11,4,11,4" />
    <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=LightweightTemplate}}" />
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,12,14,12" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" />
      </MultiTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="#17FFFFFF" cs:id="Setter_0007" x:Uid="@Value=Button.HoverBackground" />
        <Setter Property="BorderBrush" Value="#26FFFFFF" cs:id="Setter_0008" x:Uid="@Value=Button.SimpleButtonHoverBorder" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
        <Setter Property="Background" Value="#FF60CDFF" cs:id="Setter_0002" x:Uid="@Value=Button.CheckedBackground" />
        <Setter Property="BorderBrush" Value="#FF60CDFF" cs:id="Setter_0003" x:Uid="@Value=Button.CheckedBorder" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" />
        <Setter Property="Background" Value="#0FFFFFFF" cs:id="Setter_0004" x:Uid="@Value=Button.PressedBackground" />
        <Setter Property="BorderBrush" Value="#1FFFFFFF" cs:id="Setter_0005" x:Uid="@Value=Button.SimpleButtonPressedBorder" />
        <Setter Property="Foreground" Value="#FFABABAB" cs:id="Setter_0006" x:Uid="@Value=Foreground.Muted" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="#FF656565" cs:id="Setter_0009" x:Uid="@Value=Foreground.Disabled" />
        <Setter Property="Background" Value="#FF2F2F2F" cs:id="Setter_0010" x:Uid="@Value=Button.DisableBackground" />
        <Setter Property="BorderBrush" Value="#122C2C2C" cs:id="Setter_0011" x:Uid="@Value=Button.DisableBorder" />
      </Trigger>
      <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
        <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=ButtonControlTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=System.Windows.Controls.Primitives.ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="#FF303030" cs:id="Setter_0000" x:Uid="@Value=Button.SimpleButtonBackground" />
    <Setter Property="BorderBrush" Value="#FF494949" cs:id="Setter_0001" x:Uid="@Value=Button.SimpleButtonBorder" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
    <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}" cs:id="Setter_0006" />
    <Setter Property="Padding" Value="11,4,11,4" />
    <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=LightweightTemplate}}" />
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,12,14,12" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" cs:id="Setter_0002" />
      </MultiTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="#17FFFFFF" cs:id="Setter_0007" x:Uid="@Value=Button.HoverBackground" />
        <Setter Property="BorderBrush" Value="#26FFFFFF" cs:id="Setter_0008" x:Uid="@Value=Button.SimpleButtonHoverBorder" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" cs:id="Setter_0004" />
        <Setter Property="Background" Value="#0FFFFFFF" cs:id="Setter_0010" x:Uid="@Value=Button.PressedBackground" />
        <Setter Property="BorderBrush" Value="#1FFFFFFF" cs:id="Setter_0011" x:Uid="@Value=Button.SimpleButtonPressedBorder" />
        <Setter Property="Foreground" Value="#FFABABAB" cs:id="Setter_0012" x:Uid="@Value=Foreground.Muted" />
      </MultiTrigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" cs:id="Setter_0003" />
        <Setter Property="Background" Value="#FF60CDFF" cs:id="Setter_0005" x:Uid="@Value=Button.CheckedBackground" />
        <Setter Property="BorderBrush" Value="#FF60CDFF" cs:id="Setter_0009" x:Uid="@Value=Button.CheckedBorder" />
        <Setter Property="Foreground" Value="#FF000000" cs:id="Setter_0019" x:Uid="@Value=Foreground.Alt" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ToggleButton.IsChecked" Value="True" />
          <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Background" Value="#FF59BBE8" cs:id="Setter_0015" x:Uid="@Value=Button.CheckedHoverBackground" />
          <Setter Property="BorderBrush" Value="#FF59BBE8" cs:id="Setter_0016" x:Uid="@Value=Button.CheckedHoverBorder" />
          <Setter Property="Foreground" Value="#FF000000" cs:id="Setter_0014" x:Uid="@Value=Foreground.Alt" />
        </MultiTrigger.Setters>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ToggleButton.IsChecked" Value="True" />
          <Condition Property="IsPressed" Value="True" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Background" Value="#FF53AAD2" cs:id="Setter_0013" x:Uid="@Value=Button.CheckedPressedBackground" />
          <Setter Property="BorderBrush" Value="#FF53AAD2" cs:id="Setter_0017" x:Uid="@Value=Button.CheckedPressedBorder" />
          <Setter Property="Foreground" Value="#FFD1D1D1" cs:id="Setter_0018" x:Uid="@Value=Foreground.AltMuted" />
        </MultiTrigger.Setters>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="#FF656565" cs:id="Setter_0020" x:Uid="@Value=Foreground.Disabled" />
        <Setter Property="Background" Value="#FF2F2F2F" cs:id="Setter_0021" x:Uid="@Value=Button.DisableBackground" />
        <Setter Property="BorderBrush" Value="#122C2C2C" cs:id="Setter_0022" x:Uid="@Value=Button.DisableBorder" />
      </Trigger>
      <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
        <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=ButtonBaseControlTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=System.Windows.Controls.Primitives.RepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}" TargetType="{x:Type RepeatButton}">
    <Setter Property="Background" Value="#FF303030" cs:id="Setter_0000" x:Uid="@Value=Button.SimpleButtonBackground" />
    <Setter Property="BorderBrush" Value="#FF494949" cs:id="Setter_0001" x:Uid="@Value=Button.SimpleButtonBorder" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
    <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}" />
    <Setter Property="Padding" Value="11,4,11,4" />
    <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=LightweightTemplate}}" />
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,12,14,12" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" />
      </MultiTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="#17FFFFFF" cs:id="Setter_0007" x:Uid="@Value=Button.HoverBackground" />
        <Setter Property="BorderBrush" Value="#26FFFFFF" cs:id="Setter_0008" x:Uid="@Value=Button.SimpleButtonHoverBorder" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" />
        <Setter Property="Background" Value="#0FFFFFFF" cs:id="Setter_0004" x:Uid="@Value=Button.PressedBackground" />
        <Setter Property="BorderBrush" Value="#1FFFFFFF" cs:id="Setter_0005" x:Uid="@Value=Button.SimpleButtonPressedBorder" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
        <Setter Property="Background" Value="#FF60CDFF" cs:id="Setter_0002" x:Uid="@Value=Button.CheckedBackground" />
        <Setter Property="BorderBrush" Value="#FF60CDFF" cs:id="Setter_0003" x:Uid="@Value=Button.CheckedBorder" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="#FF656565" cs:id="Setter_0009" x:Uid="@Value=Foreground.Disabled" />
        <Setter Property="Background" Value="#FF2F2F2F" cs:id="Setter_0010" x:Uid="@Value=Button.DisableBackground" />
        <Setter Property="BorderBrush" Value="#122C2C2C" cs:id="Setter_0011" x:Uid="@Value=Button.DisableBorder" />
      </Trigger>
      <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
        <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=ButtonBaseControlTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="simpleButtonBaseStyle" TargetType="{x:Type dx:SimpleButton}">
    <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}" />
    <Setter Property="GlyphToContentOffset" Value="5" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
  </Style>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DropDownButton}" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:DropDownButton}">
    <Setter Property="ArrowAlignment" Value="Right" />
    <Setter Property="ArrowPadding" Value="0,3,10,3" />
    <Setter Property="Padding" Value="10,3,10,3" />
    <Setter Property="Template" Value="{DynamicResource {dxt:DropDownButtonThemeKey ResourceKey=AsyncDropDownButtonTemplate}}" />
    <Style.Triggers>
      <Trigger Property="AsyncDisplayMode" Value="None">
        <Setter Property="Template" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=DropDownButtonTemplate}}" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="ArrowPadding" Value="0,13,27,13" />
        <Setter Property="Padding" Value="14,13,14,13" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" />
      </MultiTrigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" />
      </Trigger>
      <Trigger Property="ButtonKind" Value="Repeat">
        <Setter Property="ClickMode" Value="Press" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.SplitButton}" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:SplitButton}">
    <Setter Property="ArrowAlignment" Value="Right" />
    <Setter Property="ArrowPadding" Value="10,3,10,3" />
    <Setter Property="Padding" Value="10,3,10,3" />
    <Setter Property="ArrowBorderThickness" Value="1" />
    <Setter Property="SeparatorThickness" Value="1" />
    <Setter Property="Template" Value="{DynamicResource {dxt:DropDownButtonThemeKey ResourceKey=AsyncSplitButtonTemplate}}" />
    <Style.Triggers>
      <Trigger Property="AsyncDisplayMode" Value="None">
        <Setter Property="Template" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=SplitButtonTemplate}}" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,11,14,11" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsMouseOverArrow" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" />
      </MultiTrigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="True" />
          <Condition Property="IsMouseOverArrow" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" />
      </MultiTrigger>
      <Trigger Property="ButtonKind" Value="Repeat">
        <Setter Property="ClickMode" Value="Press" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.SimpleButton}" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:SimpleButton}">
    <Setter Property="Padding" Value="10,3,10,3" />
    <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=AsyncButtonTemplate}}" />
    <Style.Triggers>
      <Trigger Property="AsyncDisplayMode" Value="None">
        <Setter Property="Template" Value="{DynamicResource ResourceKey={dxt:ButtonThemeKey ResourceKey=ButtonControlTemplate}}" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,13,14,13" />
      </Trigger>
      <Trigger Property="Content" Value="{x:Null}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="GlyphToContentOffset" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsPressed" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
      </MultiTrigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsPressed" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" />
      </MultiTrigger>
      <Trigger Property="ButtonKind" Value="Repeat">
        <Setter Property="ClickMode" Value="Press" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <!--ThemedWindowDialogButtonStyle-->
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowDialogButton}" BasedOn="{StaticResource {dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.SimpleButton}}" TargetType="{x:Type dx:ThemedWindowDialogButton}">
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="MinWidth" Value="70" />
    <Setter Property="Margin" Value="2,0,2,0" />
    <Setter Property="AutomationProperties.AutomationId" Value="{Binding Path=Content, RelativeSource={RelativeSource Self}, Converter={dx:ThemedDialogButtonNameConverter}, FallbackValue={x:Static sys:String.Empty}, TargetNullValue={x:Static sys:String.Empty}}" />
    <Setter Property="AutomationProperties.Name" Value="{Binding Path=Content, RelativeSource={RelativeSource Self}, FallbackValue={x:Static sys:String.Empty}, TargetNullValue={x:Static sys:String.Empty}}" />
    <Setter Property="GlyphHeight" Value="16" />
  </Style>
</ResourceDictionary>