<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Dark.v24.1;component/Core/Core/Themes/UICore.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <!-- General -->
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=System.Windows.Controls.TabItem}" TargetType="{x:Type TabItem}">
    <Setter Property="Background" Value="Transparent" cs:id="Setter_0000" />
    <Setter Property="BorderBrush" Value="Transparent" cs:id="Setter_0001" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="#FFB8B8B8" cs:id="Setter_0002" x:Uid="@Value=Foreground.Secondary" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="12,3,12,3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid x:Name="Root">
            <Border x:Name="IsDefault" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4,4,0,0" />
            <!--Border x:Name="IsFocused"
                                CornerRadius="4.5,4.5,0,0"
                                Height="10"
                                Visibility="Collapsed"
                                cs:id="Border_0000">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0,1"
                                                     StartPoint="0,0"
                                                     cs:id="LinearGradientBrush_0000">
                                    <GradientStop Color="$Accent"
                                                  Offset="0.2"
                                                  cs:id="GradientStop_0000"/>
                                    <GradientStop Color="Transparent"
                                                  Offset="0.2"
                                                  cs:id="GradientStop_0002"/>
                                    <GradientStop Color="Transparent"
                                                  Offset="1"
                                                  cs:id="GradientStop_0001"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border-->
            <ContentPresenter x:Name="Content" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" TextElement.Foreground="{TemplateBinding Foreground}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="TextElement.Foreground" TargetName="Content" Value="#FFFFFFFF" cs:id="Setter_0007" x:Uid="@Value=Foreground.Primary" />
              <Setter Property="Background" TargetName="IsDefault" Value="#0FFFFFFF" cs:id="Setter_0003" x:Uid="@Value=ListItem.HoverBackground" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="TextElement.Foreground" TargetName="Content" Value="#FFFFFFFF" cs:id="Setter_0008" x:Uid="@Value=Foreground.Primary" />
              <Setter Property="Background" TargetName="IsDefault" Value="#FF303030" cs:id="Setter_0004" x:Uid="@Value=Button.SimpleButtonBackground" />
              <Setter Property="BorderBrush" TargetName="IsDefault" Value="#FF404040" cs:id="Setter_0005" x:Uid="@Value=PanelBorder" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Top">
              <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,1,0" />
              <Setter Property="Margin" TargetName="IsDefault" Value="0" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,0,1,1" />
              <Setter Property="Margin" TargetName="IsDefault" Value="0,1,0,1" />
              <Setter Property="CornerRadius" TargetName="IsDefault" Value="0,0,4,4" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,0,1" />
              <Setter Property="Margin" TargetName="IsDefault" Value="1,0,1,0" />
              <Setter Property="CornerRadius" TargetName="IsDefault" Value="4,0,0,4" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter Property="BorderThickness" TargetName="IsDefault" Value="0,1,1,1" />
              <Setter Property="Margin" TargetName="IsDefault" Value="1,0,1,0" />
              <Setter Property="CornerRadius" TargetName="IsDefault" Value="0,4,4,0" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="TabStripPlacement" Value="Top" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,1,0" />
              <Setter Property="Margin" TargetName="IsDefault" Value="0,0,0,-1" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="TabStripPlacement" Value="Bottom" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,0,1,1" />
              <Setter Property="Margin" TargetName="IsDefault" Value="0,-1,0,0" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="TabStripPlacement" Value="Left" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,0,1" />
              <Setter Property="Margin" TargetName="IsDefault" Value="0,0,-1,0" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="TabStripPlacement" Value="Right" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderThickness" TargetName="IsDefault" Value="0,1,1,1" />
              <Setter Property="Margin" TargetName="IsDefault" Value="-1,0,0,0" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="TextElement.Foreground" TargetName="Content" Value="#FFFFFFFF" cs:id="Setter_0013" x:Uid="@Value=Foreground.Primary" />
              <Setter Property="Background" TargetName="IsDefault" Value="#0FFFFFFF" cs:id="Setter_0006" x:Uid="@Value=ListItem.HoverBackground" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14" />
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>