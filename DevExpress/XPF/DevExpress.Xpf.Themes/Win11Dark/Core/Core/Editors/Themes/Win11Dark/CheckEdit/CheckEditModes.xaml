<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Dark.v24.1;component/Core/Core/Editors/Themes/Generic/CheckEdit.xaml" />
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Dark.v24.1;component/Core/Core/Editors/Themes/Win11Dark/UICore.xaml" />
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Dark.v24.1;component/Core/Core/Editors/Themes/Win11Dark/CheckEdit/CheckEditBox.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <!-- General -->
  <Style x:Key="{dxet:CheckEditThemeKey ResourceKey=EmptyFocusVisualStyle}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border x:Name="FocusedBorder" BorderBrush="Black" BorderThickness="2" CornerRadius="6" Margin="-4" cs:id="Border_0000"></Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InplaceFocusVisualBorder">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border BorderBrush="Black" BorderThickness="2" CornerRadius="6" Margin="-3,0" cs:id="Border_0000"></Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FocusVisualBorder">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border BorderBrush="Black" BorderThickness="2" CornerRadius="6" Margin="-3" cs:id="Border_0000"></Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxet:CheckEditThemeKey ResourceKey=CheckEditBoxStyle}" BasedOn="{StaticResource BaseCheckEditBoxStyle}" TargetType="{x:Type dxe:CheckEditBox}">
    <Setter Property="Background" Value="#FF292929" cs:id="Setter_0000" x:Uid="@Value=Editor.Background" />
    <Setter Property="BorderBrush" Value="#FF7D7D7D" cs:id="Setter_0002" x:Uid="@Value=Border" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="dxi:AppearanceOptions.BorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxi:AppearanceOptions.HasBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderBrush), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxi:AppearanceOptions.BorderThickness" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxi:AppearanceOptions.HasBorderThickness" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxi:AppearanceOptions.Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxi:AppearanceOptions.HasBackground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxi:AppearanceOptions.CornerRadius" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxi:AppearanceOptions.HasCornerRadius" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxi:AppearanceOptions.Padding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Padding), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxi:AppearanceOptions.HasPadding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasPadding), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxei:BaseEditAppearanceOptions.CheckBoxWidth" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.CheckBoxWidth), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxei:BaseEditAppearanceOptions.HasCheckBoxWidth" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasCheckBoxWidth), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxei:BaseEditAppearanceOptions.CheckBoxHeight" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.CheckBoxHeight), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxei:BaseEditAppearanceOptions.HasCheckBoxHeight" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasCheckBoxHeight), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxe:EditorAppearanceProperties.FocusedBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxe:EditorAppearanceProperties.ReadOnlyBackground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxe:EditorAppearanceProperties.ReadOnlyBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxe:EditorAppearanceProperties.CheckedStateBackground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.CheckedStateBackground), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxe:EditorAppearanceProperties.CheckedStateBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.CheckedStateBorderBrush), RelativeSource={RelativeSource Self}}" />
    <Setter Property="dxe:EditorAppearanceProperties.CheckEditGlyphBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.CheckEditGlyphBrush), RelativeSource={RelativeSource Self}}" />
    <Setter Property="FocusVisualStyle" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).FocusVisualStyle, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Template" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxTemplate}}" />
    <Style.Triggers>
      <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
        <Setter Property="Background" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
      </Trigger>
      <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
        <Setter Property="BorderThickness" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource Self}}" />
      </Trigger>
      <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
        <Setter Property="BorderBrush" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource Self}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsChecked" Value="True" />
          <Condition Property="dxe:EditorAppearanceProperties.HasCheckedStateBackground" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckedStateBackground), RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsChecked" Value="True" />
          <Condition Property="dxe:EditorAppearanceProperties.HasCheckedStateBorderBrush" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckedStateBorderBrush), RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=ReadOnlyBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=ReadOnlyBorder}}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Path=(dxe:EditorAppearanceProperties.HasReadOnlyBackground), RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource Self}}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Path=(dxe:EditorAppearanceProperties.HasReadOnlyBorderBrush), RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource Self}}" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxet:CheckEditThemeKey ResourceKey=CheckEditBoxInplaceStyle}" BasedOn="{StaticResource BaseCheckEditBoxInplaceStyle}" TargetType="{x:Type dxe:CheckEditBox}">
    <Setter Property="Background" Value="#FF292929" cs:id="Setter_0000" x:Uid="@Value=Editor.Background" />
    <Setter Property="BorderBrush" Value="#FF7D7D7D" cs:id="Setter_0001" x:Uid="@Value=Border" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="0,1" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource InplaceFocusVisualBorder}" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Template" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxTemplate}}" />
  </Style>
  <!-- Modes -->
  <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=DisplayTemplate}">
    <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxStyle}}" />
  </ControlTemplate>
  <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=EditTemplate}">
    <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxStyle}}" />
  </ControlTemplate>
  <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=DisplayInplaceTemplate}">
    <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxInplaceStyle}}" />
  </ControlTemplate>
  <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=EditInplaceTemplate}">
    <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxInplaceStyle}}" />
  </ControlTemplate>
  <!-- Other -->
  <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=Template}" TargetType="{x:Type dxe:CheckEdit}">
    <dxe:EditorControl x:Name="PART_Content" Template="{TemplateBinding ActualEditorControlTemplate}" />
    <ControlTemplate.Triggers>
      <Trigger Property="EditMode" Value="InplaceInactive">
        <Setter Property="HorizontalAlignment" Value="Center" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="HorizontalAlignment" Value="Center" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>