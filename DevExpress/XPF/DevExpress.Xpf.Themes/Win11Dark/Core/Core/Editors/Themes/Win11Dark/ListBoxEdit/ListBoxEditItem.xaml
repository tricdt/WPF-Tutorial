<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Dark.v24.1;component/Core/Core/Editors/Themes/Generic/PopupListBox.xaml" />
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Win11Dark.v24.1;component/Core/Core/Editors/Themes/Win11Dark/UICore.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <!-- General -->
  <Style x:Key="{dxet:EditorListBoxThemeKey ResourceKey=RadioButtonItemStyle}" BasedOn="{StaticResource RadioButtonItemBaseStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{StaticResource EditorListBox.RadioButtonItemSvgPalette}" />
  </Style>
  <ControlTemplate x:Key="{dxet:EditorListBoxThemeKey ResourceKey=ItemTemplate}" TargetType="{x:Type dxe:ListBoxEditItem}">
    <Grid x:Name="Root" Margin="0,0,0,1" MinHeight="20">
      <Rectangle x:Name="IsFocus" Opacity="0" Stroke="#FF60CDFF" StrokeDashArray="1 2" StrokeThickness="1" cs:id="Rectangle_0000" x:Uid="@Stroke=Accent" />
      <Border x:Name="IsDefault" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" cs:id="Border_0000" />
      <Border x:Name="SelectionIndicator" Background="#FF60CDFF" CornerRadius="2" HorizontalAlignment="Left" Margin="0,5" Opacity="0" Width="3" cs:id="Border_0001" x:Uid="@Background=Accent" />
      <DockPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" LastChildFill="True" Margin="0,2" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
        <dxei:ImagePresenter DockPanel.Dock="Left" Padding="{StaticResource {dxet:ComboBoxEditThemeKey ResourceKey=SelectedItemImagePadding}}" />
        <dx:ContentContainer x:Name="Content" Margin="{StaticResource {dxet:ComboBoxEditThemeKey ResourceKey=SelectedItemContentPadding}}" cs:id="ContentContainer_0000">
          <ContentPresenter />
        </dx:ContentContainer>
      </DockPanel>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsKeyboardFocused" Value="True">
        <Setter Property="Foreground" TargetName="Content" Value="#FFFFFFFF" cs:id="Setter_0003" x:Uid="@Value=Foreground.Primary" />
        <Setter Property="Opacity" TargetName="IsFocus" Value="1" />
      </Trigger>
      <Trigger Property="dxi:AppearanceOptions.HasPadding" Value="True">
        <Setter Property="Margin" TargetName="Content" Value="{Binding Path=Padding, RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocused" Value="True" />
          <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Stroke" TargetName="IsFocus" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"></Setter>
      </MultiTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="#0FFFFFFF" cs:id="Setter_0000" x:Uid="@Value=ListItem.HoverBackground" />
        <Setter Property="BorderBrush" Value="#0FFFFFFF" cs:id="Setter_0006" x:Uid="@Value=ListItem.HoverBorder" />
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Background" Value="#0AFFFFFF" cs:id="Setter_0004" x:Uid="@Value=ListItem.SelectionBackground" />
        <Setter Property="Foreground" Value="#FFFFFFFF" cs:id="Setter_0010" x:Uid="@Value=Foreground.Primary" />
        <Setter Property="BorderBrush" Value="#0AFFFFFF" cs:id="Setter_0011" x:Uid="@Value=ListItem.SelectionBorder" />
        <Setter Property="Opacity" TargetName="IsFocus" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True" />
          <Condition Property="IsFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="#FFFFFFFF" cs:id="Setter_0005" x:Uid="@Value=Foreground.Primary" />
        <Setter Property="Background" Value="#0AFFFFFF" cs:id="Setter_0001" x:Uid="@Value=ListItem.SelectionBackground" />
        <Setter Property="BorderBrush" Value="#0AFFFFFF" cs:id="Setter_0007" x:Uid="@Value=ListItem.SelectionBorder" />
        <Setter Property="Opacity" TargetName="SelectionIndicator" Value="1" />
      </MultiTrigger>
      <!--MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="IsFocused" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground"
                        Value="$Foreground.Primary"
                        cs:id="Setter_0012"/>
                <Setter Property="Background"
                        Value="$ListItem.SelectionBackground"
                        cs:id="Setter_0013"/>
                <Setter Property="BorderBrush"
                        Value="$ListItem.SelectionBorder"
                        cs:id="Setter_0014"/>
                <Setter Property="Opacity"
                        TargetName="IsDefault"
                        Value="1"/>
            </MultiTrigger-->
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowItemHighlighting, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Foreground" TargetName="Content" Value="#FFFFFFFF" cs:id="Setter_0009" x:Uid="@Value=Foreground.Primary" />
        <Setter Property="Background" Value="#0FFFFFFF" cs:id="Setter_0002" x:Uid="@Value=ListItem.HoverBackground" />
        <Setter Property="BorderBrush" Value="#0FFFFFFF" cs:id="Setter_0008" x:Uid="@Value=ListItem.HoverBorder" />
      </MultiDataTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" TargetName="Root" Value="0.38" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Margin" TargetName="Content" Value="14" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Thickness x:Key="{dxet:EditorListBoxThemeKey ResourceKey=CheckBoxItemPadding}">3,2,0,2</Thickness>
</ResourceDictionary>