<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:dxrt="http://schemas.devexpress.com/winfx/2008/xaml/ribbon/themekeys"
                    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/DevExpress.Xpf.Themes.HybridApp.v24.1;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Themes/Generic/ThemedWindow.xaml"/>
        <ResourceDictionary Source="/DevExpress.Xpf.Themes.HybridApp.v24.1;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Themes/Generic/DropShadow.xaml"/>
        <ResourceDictionary Source="/DevExpress.Xpf.Themes.HybridApp.v24.1;component/DevExpress.Xpf.Ribbon/Generic/RibbonControlBoxButton.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <sys:Boolean x:Key="{dxt:ThemedWindowThemeKey ResourceKey=RoundWindowCorners}">False</sys:Boolean>

    <!--Opacity-->

    <sys:Double x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}">0.7</sys:Double>

    <!--Header height-->

    <sys:Double x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowHeaderHeight}">32</sys:Double>

    <sys:Double x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowIconHeight}">16</sys:Double>

    <sys:Double x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowIconWidth}">16</sys:Double>

    <!-- SearchBox widths -->

    <sys:Double x:Key="{dxt:ThemedWindowSearchBoxThemeKey ResourceKey=MinWidth}">50</sys:Double>

    <sys:Double x:Key="{dxt:ThemedWindowSearchBoxThemeKey ResourceKey=MaxWidth}">200</sys:Double>

    <!--TitleFont Properties-->

    <sys:Double x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowTitleFontSize}">12</sys:Double>

    <FontWeight x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowTitleFontWeight}">Normal</FontWeight>

    <!--Thickness-->

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowBorderThickness}">1</Thickness>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowContentBorderThickness}">0</Thickness>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonContentBorderThickness}">0</Thickness>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=HeaderNormalPadding}">8,0,8,0</Thickness>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowNormalPadding}">0</Thickness>

    <sys:Double x:Key="{dxt:ThemedWindowThemeKey ResourceKey=TabbedModeDefaultTopMargin}">0</sys:Double>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=HeaderRibbonPadding}">8,0,8,0</Thickness>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonPadding}">0</Thickness>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowIconMargin}">0,0,8,0</Thickness>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=SizeGripMargin}">0,0,6,6</Thickness>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowTitleControlMargin}">0,0,8,0</Thickness>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowToolbarMargin}">0,0,8,0</Thickness>

    <Thickness x:Key="{dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxBorderThickness}">0</Thickness>

    <!-- Colors -->

    <Color x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=AcrylicColor}">#FF3F3F3F</Color>

    <!--Brushes-->

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowActiveBackground}" Color="#FF3F3F3F"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowActiveBorderBrush}" Color="#FF3F3F3F"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowActiveContentBackground}" Color="#FFFFFFFF"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowActiveContentBorderBrush}" Color="Transparent"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveBackground}" Color="#FF3F3F3F"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveBorderBrush}" Color="#FF7F7F7F"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}" Color="#FFFFFFFF"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}" Color="Transparent"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowTitleForeground}" Color="#FFFFFFFF"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonTitleForeground}" Color="#FFFFFFFF"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowContentForeground}" Color="#FF000000"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxBorderBrush}" Color="Transparent"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxBackground}" Color="Transparent"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowActiveHeaderBackground}" Color="#FF3F3F3F"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderBackground}" Color="#FF3F3F3F"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonActiveHeaderBackground}" Color="#FF3F3F3F"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonInactiveHeaderBackground}" Color="#FF3F3F3F"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=BackButtonForegroundNormalState}" Color="#FF2F4C8A"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=BackButtonForegroundMouseOverState}" Color="#FF2F4C8A"/>

    <SolidColorBrush x:Key="{dxt:ThemedWindowThemeKey ResourceKey=BackButtonForegroundPressedState}" Color="#FF2F4C8A"/>

    <!--BackButton Glyph Template-->

    <DataTemplate x:Key="{dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundGlyph}">
        <Grid Height="12"
              HorizontalAlignment="Center"
              Margin="0,2,0,0"
              Opacity="0.85"
              VerticalAlignment="Center"
              Width="12">
            <Ellipse Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}"
                     HorizontalAlignment="Stretch"
                     Stretch="Fill"
                     VerticalAlignment="Stretch"/>
        </Grid>
    </DataTemplate>

    <!--BackButton Normal Background-->

    <ControlTemplate x:Key="{dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundNormalState}"/>

    <!--BackButton MouseOver Background-->

    <ControlTemplate x:Key="{dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundMouseoverState}">
        <Grid x:Name="hover">
            <Border Background="#FF000000"
                    CornerRadius="2,2,2,2"
                    Margin="2,2,0,0"
                    Opacity="0.05"/>
            <Border Background="#FF5379AE"
                    CornerRadius="2,2,2,2"
                    Margin="1,1,1,1"
                    Padding="1,1,1,1">
                <Border CornerRadius="2,2,2,2" Padding="1,1,1,1">
                    <Border.Background>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FFD0E3FB" Offset="0"/>
                            <GradientStop Color="#FFADD0F6" Offset="1"/>
                            <GradientStop Color="#FFD5E6FA" Offset="0.5"/>
                        </LinearGradientBrush>
                    </Border.Background>
                    <Border CornerRadius="1,1,1,1">
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FFD1E4FC" Offset="0"/>
                                <GradientStop Color="#FFAED1F6" Offset="1"/>
                                <GradientStop Color="#FFB5D0F1" Offset="0.5"/>
                                <GradientStop Color="#FFA4C5ED" Offset="0.5"/>
                            </LinearGradientBrush>
                        </Border.Background>
                    </Border>
                </Border>
            </Border>
        </Grid>
    </ControlTemplate>

    <!--BackButton Pressed Background-->

    <ControlTemplate x:Key="{dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundPressedState}">
        <Grid x:Name="PressedState">
            <Border Background="#FFFFFFFF"
                    CornerRadius="2,2,2,2"
                    Margin="2,2,1,0"
                    Opacity="0.15"/>
            <Border Background="#FF3E6296"
                    CornerRadius="2,2,2,2"
                    Margin="1,1,1,1"
                    Padding="1,1,1,1">
                <Border Background="#FF5576A6"
                        CornerRadius="2,2,2,2"
                        Padding="1,1,1,1"/>
            </Border>
        </Grid>
    </ControlTemplate>

    <!--BackButtonStyle-->

    <Style x:Key="{dxt:ThemedWindowThemeKey ResourceKey=BackButtonStyle}" TargetType="{x:Type dx:ThemedWindowBackButton}">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Width" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:WindowChrome.CaptionHeight), RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Height" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:WindowChrome.CaptionHeight), RelativeSource={RelativeSource Self}}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonTemplate}}"/>
        <Setter Property="dxcn:WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
    </Style>

    <!--VerticalAlignment-->

    <VerticalAlignment x:Key="{dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxVerticalAlignment}">Center</VerticalAlignment>

    <!--TitleAlignment-->

    <dx:WindowTitleAlignment x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowTitleAlignment}">Center</dx:WindowTitleAlignment>

    <!--WindowStyle-->

    <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindow}"
           BasedOn="{StaticResource ResourceKey={dxt:ThemedWindowThemeKey ResourceKey=WindowStyle}}"
           TargetType="{x:Type dx:ThemedWindow}">
        <Setter Property="dx:HeaderItemControl.ExtendedCommonTemplateProvider" Value="{DynamicResource {dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonHeaderItemControlCommonTemplateProvider}}"/>
        <Setter Property="dx:HeaderItemControl.ExtendedCloseTemplateProvider" Value="{DynamicResource {dxt:RibbonHeaderItemsThemeKey ResourceKey=RibbonHeaderItemControlCloseTemplateProvider}}"/>
    </Style>

</ResourceDictionary>