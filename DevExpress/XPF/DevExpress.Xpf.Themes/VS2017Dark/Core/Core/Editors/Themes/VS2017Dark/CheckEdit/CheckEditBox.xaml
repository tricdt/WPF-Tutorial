<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.VS2017Dark.v24.1;component/Core/Core/Editors/Themes/Generic/CheckEdit.xaml" />
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.VS2017Dark.v24.1;component/Core/Core/Editors/Themes/VS2017Dark/UICore.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <!-- General -->
  <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=CheckEditBoxTemplate}" TargetType="{x:Type dxe:CheckEditBox}">
    <Grid x:Name="Root" Background="Transparent" cs:id="Grid_0000">
      <Grid Margin="{TemplateBinding Padding}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid x:Name="Field" Grid.Column="0" Height="14" Margin="0,3" Width="14">
          <Border x:Name="IsDefault" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding  dxi:AppearanceOptions.CornerRadius}" cs:id="Border_0001" />
          <Border x:Name="IsFocused" BorderBrush="#FF007ACC" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding  dxi:AppearanceOptions.CornerRadius}" Opacity="0" cs:id="Border_0000" x:Uid="@BorderBrush=Focused" />
          <Border x:Name="Indeterminate" Background="#FFF1F1F1" BorderThickness="3" Margin="0" Opacity="0" cs:id="Border_0002" x:Uid="@Background=Foreground" />
          <Path x:Name="Checked" Fill="#FFF1F1F1" Opacity="0" Style="{StaticResource UIShape.Checked}" cs:id="Path_0001" x:Uid="@Fill=Foreground" />
        </Grid>
        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="4,0,0,0" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding HasContent, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
      </Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CheckStates">
          <VisualState x:Name="Unchecked" />
          <VisualState x:Name="Checked">
            <Storyboard>
              <DoubleAnimation Duration="0" Storyboard.TargetName="Checked" Storyboard.TargetProperty="Opacity" To="1" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Indeterminate">
            <Storyboard>
              <DoubleAnimation Duration="0" Storyboard.TargetName="Indeterminate" Storyboard.TargetProperty="Opacity" To="1" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
        <VisualStateGroup x:Name="InternalFocusStates">
          <VisualState x:Name="InternalFocused">
            <Storyboard>
              <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocused" Storyboard.TargetProperty="Opacity" To="1" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="InternalUnfocused" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Fill" TargetName="Checked" Value="#FFFFFFFF" cs:id="Setter_0000" x:Uid="@Value=HoverForeground" />
        <Setter Property="Background" TargetName="Indeterminate" Value="#FFFFFFFF" cs:id="Setter_0001" x:Uid="@Value=HoverForeground" />
        <Setter Property="Background" Value="#FF3E3E40" cs:id="Setter_0002" x:Uid="@Value=HoverBackground" />
        <Setter Property="BorderBrush" Value="#FF007ACC" cs:id="Setter_0003" x:Uid="@Value=SelectionBorder" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Fill" TargetName="Checked" Value="#FFFFFFFF" cs:id="Setter_0004" x:Uid="@Value=SelectionForeground" />
        <Setter Property="Background" TargetName="Indeterminate" Value="#FFFFFFFF" cs:id="Setter_0005" x:Uid="@Value=SelectionForeground" />
        <Setter Property="Background" Value="#FF007ACC" cs:id="Setter_0006" x:Uid="@Value=SelectionBackground" />
        <Setter Property="BorderBrush" Value="#FF007ACC" cs:id="Setter_0007" x:Uid="@Value=SelectionBorder" />
      </Trigger>
      <Trigger Property="dxe:EditorAppearanceProperties.HasCheckEditGlyphBrush" Value="True">
        <Setter Property="Fill" TargetName="Checked" Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckEditGlyphBrush), RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
          <Condition Property="IsFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" TargetName="IsFocused" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
          <Condition Property="IsFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" TargetName="IsFocused" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
      </MultiTrigger>
      <Trigger Property="FlowDirection" Value="RightToLeft">
        <Setter Property="LayoutTransform" TargetName="Field">
          <Setter.Value>
            <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="-1" ScaleY="1" />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" TargetName="Root" Value="0.38" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Height" TargetName="Checked" Value="20" />
        <Setter Property="Width" TargetName="Checked" Value="20" />
        <Setter Property="Height" TargetName="Field" Value="32" />
        <Setter Property="Width" TargetName="Field" Value="32" />
        <Setter Property="Margin" TargetName="Field" Value="0" />
        <Setter Property="Height" TargetName="Indeterminate" Value="20" />
        <Setter Property="Width" TargetName="Indeterminate" Value="20" />
        <Setter Property="BorderThickness" TargetName="Indeterminate" Value="0" />
      </Trigger>
      <Trigger Property="dxei:BaseEditAppearanceOptions.HasCheckBoxWidth" Value="True">
        <Setter Property="Width" TargetName="Field" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.CheckBoxWidth), RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
      <Trigger Property="dxei:BaseEditAppearanceOptions.HasCheckBoxHeight" Value="True">
        <Setter Property="Height" TargetName="Field" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.CheckBoxHeight), RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>