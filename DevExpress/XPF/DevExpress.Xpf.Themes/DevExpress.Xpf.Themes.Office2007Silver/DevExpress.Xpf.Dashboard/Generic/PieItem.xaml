<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxdash="http://schemas.devexpress.com/winfx/2008/xaml/dashboard" xmlns:dxdashi="http://schemas.devexpress.com/winfx/2008/xaml/dashboard/internal" xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts" xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" xmlns:dxct="http://schemas.devexpress.com/winfx/2008/xaml/charts/themekeys" xmlns:dxdasht="http://schemas.devexpress.com/winfx/2008/xaml/dashboard/themekeys" xmlns:dasboardthemes="http://schemas.devexpress.com/winfx/2008/xaml/dashboard/themekeys" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <dxc:BrushOverlayConverter x:Key="brushOverlayConverter" />
  <dxdashi:EventToCommandConverter x:Key="EventToCommandConverter" />
  <Style x:Key="{dxdasht:PieItemThemeKey ResourceKey=ChartStyle}" TargetType="{x:Type dxc:ChartControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Padding" Value="0,0,0,8" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="SelectionMode" Value="None" />
    <Setter Property="AutoLayout" Value="False" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="CrosshairOptions" Value="{Binding CrosshairOptions}" />
    <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
      <Setter.Value>
        <DataTemplate>
          <ItemsControl>
            <dxmvvm:EventToCommand EventName="CustomDrawSeriesPoint" Command="{Binding OnCustomDrawSeriesPointCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
            <dxmvvm:EventToCommand EventName="BoundDataChanged" Command="{Binding OnBoundDataChangedCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
            <dxmvvm:EventToCommand EventName="SizeChanged" Command="{Binding OnSizeChangedCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
            <dxdashi:ChartItemBehavior DiagramTemplate="{DynamicResource {dxdasht:PieItemThemeKey ResourceKey=ChartDiagramTemplate}}" />
          </ItemsControl>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <!-- //TODO: check theming -->
      <ControlTemplate x:Key="{dxct:ChartControlThemeKey ResourceKey=ChartWrapperTemplate}" TargetType="ContentControl">
        <Border x:Name="OutsideBorder" CornerRadius="4" Background="{TemplateBinding BorderBrush}" Padding="{TemplateBinding BorderThickness}">
          <Border x:Name="InsideBorder" CornerRadius="3" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
            <Grid>
              <Border Background="{DynamicResource {dasboardthemes:PieItemThemeKey ResourceKey=PieHighlightedBackgroundBrush}}" BorderBrush="{DynamicResource {dasboardthemes:PieItemThemeKey ResourceKey=PieHighlightedBorderBrush}}" BorderThickness="1" CornerRadius="{DynamicResource {dxdasht:PieItemThemeKey ResourceKey=PieBackgroundCornerRadius}}" x:Name="highlight" Visibility="{Binding HasHighlightedBackground, Converter={dxmvvm:BooleanToVisibilityConverter}}" IsHitTestVisible="False" />
              <dxc:ChartContentPresenter Content="{TemplateBinding Content}" />
            </Grid>
          </Border>
        </Border>
        <ControlTemplate.Triggers>
          <DataTrigger Binding="{Binding IsSelected}" Value="True">
            <Setter Property="Background" TargetName="highlight" Value="{DynamicResource {dxdasht:DashboardControlThemeKey ResourceKey=SelectedItemBackground}}" />
            <Setter Property="BorderBrush" TargetName="highlight" Value="{DynamicResource {dxdasht:DashboardControlThemeKey ResourceKey=SelectedItemBorder}}" />
          </DataTrigger>
          <Trigger Property="Background" Value="{x:Null}">
            <Setter Property="Background" TargetName="OutsideBorder" Value="{x:Null}" />
            <Setter Property="Background" TargetName="InsideBorder" Value="{x:Null}" />
            <Setter Property="CornerRadius" TargetName="OutsideBorder" Value="0,0,0,0" />
            <Setter Property="Padding" TargetName="OutsideBorder" Value="0,0,0,0" />
            <Setter Property="CornerRadius" TargetName="InsideBorder" Value="0,0,0,0" />
          </Trigger>
          <Trigger Property="BorderThickness" Value="0,0,0,0">
            <Setter Property="CornerRadius" TargetName="OutsideBorder" Value="0,0,0,0" />
            <Setter Property="Padding" TargetName="OutsideBorder" Value="0,0,0,0" />
            <Setter Property="CornerRadius" TargetName="InsideBorder" Value="0,0,0,0" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
    </Style.Resources>
  </Style>
  <DataTemplate x:Key="{dxdasht:PieItemThemeKey ResourceKey=ChartDiagramTemplate}">
    <dxc:SimpleDiagram2D SeriesItemsSource="{Binding Series}">
      <dxc:SimpleDiagram2D.SeriesItemTemplate>
        <DataTemplate>
          <dxc:PieSeries2D DataSource="{Binding DataSource}" ValueDataMember="{Binding ValueDataMember}" ArgumentDataMember="{Binding ArgumentDataMember}" ColorDataMember="{Binding ColorDataMember}" HoleRadiusPercent="{Binding HoleRadiusPercent}">
            <dxc:PieSeries2D.Label>
              <dxc:SeriesLabel dxc:PieSeries.LabelPosition="{Binding LabelPosition}" Visible="True" ResolveOverlappingMode="Default" RenderMode="RectangleConnectedToCenter" Indent="0" MaxWidth="{Binding MaxLabelWidth}" MaxHeight="60" />
            </dxc:PieSeries2D.Label>
            <dxc:PieSeries2D.Model>
              <dxc:CustomPie2DModel>
                <dxc:CustomPie2DModel.PointTemplate>
                  <ControlTemplate>
                    <dxdashi:PiePointPresenter />
                  </ControlTemplate>
                </dxc:CustomPie2DModel.PointTemplate>
              </dxc:CustomPie2DModel>
            </dxc:PieSeries2D.Model>
          </dxc:PieSeries2D>
        </DataTemplate>
      </dxc:SimpleDiagram2D.SeriesItemTemplate>
    </dxc:SimpleDiagram2D>
  </DataTemplate>
  <Style x:Key="{dxdasht:PieItemThemeKey ResourceKey=ViewStyle}" TargetType="{x:Type ItemsControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="ItemsSource" Value="{Binding ItemsSource}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <dxdashi:PiesPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <dxc:ChartControl Style="{Binding Path=(dxdash:PieDashboardLayoutItem.ChartStyle), RelativeSource={RelativeSource Self}}">
              <dxc:ChartControl.ToolTipController>
                <dxc:ChartToolTipController>
                  <dxmvvm:Interaction.Behaviors>
                    <dxmvvm:EventToCommand EventName="ToolTipOpening" Command="{Binding Path=DataContext.OnToolTipOpeningCommand, RelativeSource={RelativeSource TemplatedParent}}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                  </dxmvvm:Interaction.Behaviors>
                </dxc:ChartToolTipController>
              </dxc:ChartControl.ToolTipController>
              <dxc:ChartControl.Titles>
                <dxc:Title Dock="Top" FontSize="16" HorizontalAlignment="Center" Content="{Binding Title}" Visible="{Binding ShowTitle}" />
              </dxc:ChartControl.Titles>
            </dxc:ChartControl>
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ItemsControl">
          <ScrollViewer CanContentScroll="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
            <ItemsPresenter />
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.DashboardWpf.Internal.PieItemContainer}" TargetType="{x:Type dxdashi:PieItemContainer}">
          <Setter Property="Focusable" Value="False" />
          <Setter Property="FocusVisualStyle" Value="{x:Null}" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="dxdashi:PieItemContainer">
                <ContentPresenter />
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
              <DataTemplate>
                <ItemsControl>
                  <dxmvvm:FocusBehavior EventName="MouseDown" />
                  <dxmvvm:EventToCommand EventName="MouseDown" Command="{Binding MouseDownCommand}" PassEventArgsToCommand="True" MarkRoutedEventsAsHandled="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                  <dxmvvm:EventToCommand EventName="MouseUp" Command="{Binding MouseUpCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                  <dxmvvm:EventToCommand EventName="MouseMove" Command="{Binding MouseMoveCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                  <dxmvvm:EventToCommand EventName="MouseDoubleClick" Command="{Binding MouseDoubleClickCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                  <dxmvvm:EventToCommand EventName="MouseLeave" Command="{Binding MouseLeaveCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                </ItemsControl>
              </DataTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="{dxdasht:PieItemThemeKey ResourceKey=Template}">
    <dxdashi:PieItemsControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
  </DataTemplate>
  <ControlTemplate x:Key="{dxdasht:PieItemThemeKey ResourceKey=PiePointPresenterTemplate}" TargetType="dxdashi:PiePointPresenter">
    <ControlTemplate.Resources>
      <LinearGradientBrush x:Key="selectedMask" SpreadMethod="Repeat" EndPoint="8,8" MappingMode="Absolute">
        <LinearGradientBrush.GradientStops>
          <GradientStop Color="#B5000000" Offset="0.5" />
          <GradientStop Color="Black" Offset="0.5" />
        </LinearGradientBrush.GradientStops>
      </LinearGradientBrush>
      <LinearGradientBrush x:Key="highlightedMask" SpreadMethod="Repeat" EndPoint="8,8" MappingMode="Absolute">
        <LinearGradientBrush.GradientStops>
          <GradientStop Color="#E5000000" Offset="0.5" />
          <GradientStop Color="Black" Offset="0.5" />
        </LinearGradientBrush.GradientStops>
      </LinearGradientBrush>
    </ControlTemplate.Resources>
    <Grid x:Name="model" Background="Transparent">
      <Ellipse x:Name="fill" Fill="{Binding Path=PointColor, ConverterParameter=Gray, Converter={StaticResource brushOverlayConverter}}" />
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=IsHighlighted}" Value="True">
        <Setter Property="OpacityMask" TargetName="fill" Value="{StaticResource ResourceKey=highlightedMask}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
        <Setter Property="OpacityMask" TargetName="fill" Value="{StaticResource ResourceKey=selectedMask}" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.DashboardWpf.Internal.PiePointPresenter}" TargetType="dxdashi:PiePointPresenter">
    <Setter Property="Template" Value="{DynamicResource {dxdasht:PieItemThemeKey ResourceKey=PiePointPresenterTemplate}}" />
    <Setter Property="Focusable" Value="False" />
  </Style>
</ResourceDictionary>