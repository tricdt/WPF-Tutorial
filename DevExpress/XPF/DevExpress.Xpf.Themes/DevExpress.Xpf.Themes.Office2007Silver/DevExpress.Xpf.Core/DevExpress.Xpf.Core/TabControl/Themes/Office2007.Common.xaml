<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Generic.xaml"/>
        <ResourceDictionary Source="Generic.Window.xaml"/>
        <ResourceDictionary Source="Colors.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- Tab Button Background Templates -->

    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonNormalBackground}">
        <Border Background="{StaticResource Button.Normal.Background}"/>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonHoverBackground}">
        <Border Background="{StaticResource Button.Hover.BorderBrush1}" CornerRadius="2">
            <Border Background="{StaticResource Button.Hover.BorderBrush2}"
                    CornerRadius="1"
                    Margin="1">
                <Border Background="{StaticResource Button.Hover.Background}"
                        CornerRadius="1"
                        Margin="1"/>
            </Border>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonPressedBackground}">
        <Border Background="{StaticResource Button.Pressed.BorderBrush1}" CornerRadius="2">
            <Border Background="{StaticResource Button.Pressed.BorderBrush2}"
                    CornerRadius="1"
                    Margin="1">
                <Border Background="{StaticResource Button.Pressed.Background}"
                        CornerRadius="1"
                        Margin="1"/>
            </Border>
        </Border>
    </DataTemplate>

    <!-- Tab Button Styles -->

    <Style x:Key="HeaderPanelButtonStyle"
           BasedOn="{StaticResource ButtonDefaultStyle}"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{StaticResource ScrollButton.Normal.Foreground}"/>
        <Setter Property="Height" Value="17"/>
        <Setter Property="Width" Value="17"/>
        <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="2,0,2,0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource ScrollButton.Hover.Foreground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource ScrollButton.Pressed.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CloseButtonStyle"
           BasedOn="{StaticResource ButtonDefaultStyle}"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{StaticResource CloseButton.Normal.Foreground}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource CloseButton.Hover.Foreground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource CloseButton.Pressed.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:DXTabItemThemeKey ResourceKey=CloseButtonStyle}"
           BasedOn="{StaticResource CloseButtonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}"/>
        <Setter Property="Height" Value="14"/>
        <Setter Property="Margin" Value="7,1,-4,0"/>
        <Setter Property="Width" Value="14"/>
    </Style>

    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=CloseButtonStyle}"
           BasedOn="{StaticResource HeaderPanelButtonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>

    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PanelNewButtonStyle}"
           BasedOn="{StaticResource HeaderPanelButtonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
        <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="5,0,4,0"/>
    </Style>

    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=MainNewButtonStyle}"
           BasedOn="{StaticResource HeaderPanelButtonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>

    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PrevButtonStyle}"
           BasedOn="{StaticResource HeaderPanelButtonStyle}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0, GlyphLeftPadding='0,0,1,0'}"/>
    </Style>

    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=NextButtonStyle}"
           BasedOn="{StaticResource HeaderPanelButtonStyle}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0, GlyphRightPadding='1,0,0,0'}"/>
    </Style>

    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=MenuButtonStyle}"
           BasedOn="{StaticResource HeaderPanelButtonStyle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>

    <!-- TabControl and TabItem Background Templates -->

    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=Background}">
        <dxcn:TabBorder BorderBackground="{StaticResource TabControl.Background}"
                        BorderBrush="{StaticResource TabControl.BorderBrush}"
                        BorderMode="BorderBrush"
                        BorderThickness="1"
                        ViewInfo="{Binding}"/>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=NormalBackground}">
        <dxcn:TabBorder BackgroundMode="BorderBackground"
                        BorderBackground="{StaticResource TabItem.Normal.BorderBrush}"
                        BorderBrush="{StaticResource TabControl.BorderBrush}"
                        BorderMargin="0,0,-1,0"
                        BorderMode="BorderBrush"
                        BorderThickness="1,1,1,0"
                        CustomBackgroundBrightness="0.45"
                        HoldBorderMargin="0,0,1,1"
                        HoldBorderThickness="1"
                        ViewInfo="{Binding}">
            <dxcn:TabBorder BackgroundMode="BorderBackground"
                            BorderBackground="{StaticResource TabItem.Normal.Background}"
                            BorderMargin="1"
                            CustomBackgroundBrightness="-0.1"/>
        </dxcn:TabBorder>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=HoverBackground}">
        <dxcn:TabBorder BackgroundMode="BorderBackground"
                        BorderBackground="{StaticResource TabItem.Hover.BorderBrush}"
                        BorderBrush="{StaticResource TabControl.BorderBrush}"
                        BorderMargin="0,0,-1,0"
                        BorderMode="BorderBrush"
                        BorderThickness="1,1,1,0"
                        CustomBackgroundBrightness="0.45"
                        HoldBorderMargin="0,0,1,1"
                        HoldBorderThickness="1"
                        ViewInfo="{Binding}">
            <dxcn:TabBorder BackgroundMode="BorderBackground"
                            BorderBackground="{StaticResource TabItem.Hover.Background}"
                            BorderMargin="1"
                            CustomBackgroundBrightness="0.4"
                            LeaveOriginBackgroundColor="False"/>
        </dxcn:TabBorder>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=SelectedBackground}">
        <dxcn:TabBorder BorderBackground="{StaticResource TabControl.Background}"
                        BorderBrush="{StaticResource TabControl.BorderBrush}"
                        BorderMargin="0,-2,-1,-1"
                        BorderMode="BorderBrush"
                        BorderThickness="1,1,1,0"
                        HoldBorderMargin="0,0,1,1"
                        HoldBorderThickness="1"
                        ViewInfo="{Binding}"/>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=FocusedBackground}">
        <dxcn:TabBorder BackgroundMode="BorderBackground"
                        BorderBackground="{StaticResource TabItem.Focused.Background}"
                        BorderMargin="2,0,1,0"
                        HoldBorderMargin="1,1,2,2"
                        LeaveOriginBackgroundColor="False"
                        ViewInfo="{Binding}">
            <dxcn:TabBorder.BorderOpacityMask>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0"/>
                    <GradientStop Color="Transparent" Offset="0.95"/>
                </LinearGradientBrush>
            </dxcn:TabBorder.BorderOpacityMask>
        </dxcn:TabBorder>
    </DataTemplate>

    <!-- TabControl and TabItem Styles -->

    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PanelContainerStyle}"
           BasedOn="{StaticResource PanelContainerDefaultStyle}"
           TargetType="{x:Type dxcn:TabPanelContainer}">
        <Setter Property="HoldMargin" Value="-1,0,-1,0"/>
        <Setter Property="HoldPadding" Value="1,0,0,0"/>
        <Setter Property="NormalMargin" Value="4,0,2,-1"/>
        <Setter Property="NormalPadding" Value="0,2,1,1"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabControl}"
           BasedOn="{StaticResource TabControlDefaultStyle}"
           TargetType="{x:Type dx:DXTabControl}">
        <Setter Property="Foreground" Value="{StaticResource TabControl.Foreground}"/>
        <Setter Property="Padding" Value="12"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabItem}"
           BasedOn="{StaticResource TabItemDefaultStyle}"
           TargetType="{x:Type dx:DXTabItem}">
        <Setter Property="Foreground" Value="{StaticResource TabControl.Foreground}"/>
        <Setter Property="Padding" Value="9,3,9,3"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ViewInfo.IsHeaderOrientationDifferent, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Padding" Value="8,4,8,4"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:DXTabItemThemeKey ResourceKey=SeparatorStyle}" TargetType="{x:Type ContentPresenter}">
        <Setter Property="Visibility" Value="Collapsed"/>
    </Style>

    <Style x:Key="{dxdst:DXTabControlThemeKey ResourceKey=ContentStyle}"/>

    <!-- TabbedWindow -->

    <DataTemplate x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=HeaderTemplate}">
        <Border x:Name="border" Background="{StaticResource Window.Header.Active.Background}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                <Setter Property="Background"
                        TargetName="border"
                        Value="{StaticResource Window.Header.InActive.Background}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=BorderTemplate}">
        <Border x:Name="border"
                Background="{StaticResource Window.Border.Active.Background}"
                BorderBrush="{StaticResource Window.Border.Active.BorderBrush}"
                BorderThickness="1"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                <Setter Property="Background"
                        TargetName="border"
                        Value="{StaticResource Window.Border.InActive.Background}"/>
                <Setter Property="BorderBrush"
                        TargetName="border"
                        Value="{StaticResource Window.Border.InActive.BorderBrush}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MainContainerStyle}" TargetType="Panel">
        <Setter Property="Margin" Value="1"/>
    </Style>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=CaptionPresenterStyle}" TargetType="ContentPresenter">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=ContentBorderStyle}" TargetType="Border">
        <Setter Property="Margin" Value="4,0,4,4"/>
    </Style>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=ControlContainerStyle}"
           BasedOn="{StaticResource DefaultButtonContainerStyle}"
           TargetType="ItemsControl">
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=ButtonContainerStyle}"
           BasedOn="{StaticResource DefaultButtonContainerStyle}"
           TargetType="ItemsControl">
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="WindowButtonStyle"
           BasedOn="{StaticResource WindowButtonDefaultStyle}"
           TargetType="Button">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="22"/>
    </Style>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MinimizeButtonStyle}"
           BasedOn="{StaticResource WindowButtonStyle}"
           TargetType="{x:Type Button}"/>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=RestoreButtonStyle}"
           BasedOn="{StaticResource WindowButtonStyle}"
           TargetType="{x:Type Button}"/>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MaximizeButtonStyle}"
           BasedOn="{StaticResource WindowButtonStyle}"
           TargetType="{x:Type Button}"/>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=CloseButtonStyle}"
           BasedOn="{StaticResource WindowButtonStyle}"
           TargetType="{x:Type Button}"/>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabbedWindow}"
           BasedOn="{StaticResource WindowDefaultStyle}"
           TargetType="{x:Type dx:DXTabbedWindow}">
        <Setter Property="Foreground" Value="{StaticResource Window.Foreground}"/>
    </Style>

</ResourceDictionary>