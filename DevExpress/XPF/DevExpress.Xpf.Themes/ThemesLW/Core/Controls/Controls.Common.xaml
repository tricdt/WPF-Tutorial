<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:data="clr-namespace:DevExpress.Xpf.Core;assembly=DevExpress.Data.Desktop.v24.1"
    xmlns:dx="clr-namespace:DevExpress.Xpf.Core;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxb="clr-namespace:DevExpress.Xpf.Bars;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxcf="clr-namespace:DevExpress.Xpf.Core.ConditionalFormatting;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxcfi="clr-namespace:DevExpress.Xpf.Core.ConditionalFormatting.Native;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxcft="clr-namespace:DevExpress.Xpf.Core.ConditionalFormatting.Themes;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxe="clr-namespace:DevExpress.Xpf.Editors;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxec="clr-namespace:DevExpress.Xpf.Editors.Controls;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxeh="clr-namespace:DevExpress.Xpf.Editors.Helpers;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxet="clr-namespace:DevExpress.Xpf.Editors.Themes;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxev="clr-namespace:DevExpress.Xpf.Editors.Validation;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxi="clr-namespace:DevExpress.Xpf.Core.Native;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxmvvm="clr-namespace:DevExpress.Mvvm.UI;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxt="clr-namespace:DevExpress.Xpf.Utils.Themes;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxwf="clr-namespace:DevExpress.Xpf.Core.WizardFramework;assembly=DevExpress.Xpf.Core.v24.1">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Core/Controls/Controls.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--#region Themes\Generic\Buttons.xaml-->
    <!-- DropDownButton -->
    <dxi:RenderTemplate x:Key="{dxt:LWKey DropDownButton.RenderDropDownButtonTemplate}">
        <dxi:RenderPanel Name="PART_GlyphContentAndArrow">
            <dxi:RenderButtonBorder Name="PART_GlyphContentAndArrowBorder" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.BorderTemplate}}" Visibility="Visible" />
            <dxi:RenderBorder Name="PART_OffsetThicknessBorder">
                <dxi:RenderPanel Name="PART_RootPanel" LayoutProvider="{dxi:DockPanelLayoutProvider LastChildFill=True}">
                    <dxi:RenderPanel Name="PART_Arrow">
                        <dxi:RenderButtonBorder Name="PART_ArrowBorder" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.BorderTemplate}}" Visibility="Collapsed" />
                        <dxi:RenderBorder Name="PART_ArrowPaddingBorder">
                            <dxi:RenderPanel Name="PART_ArrowRenderPanel">
                                <dxi:RenderImage
                                    Name="PART_ArrowGlyph"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Stretch="None"
                                    Visibility="Visible" />
                                <dxi:RenderControl
                                    Name="PART_DefaultArrowGlyph"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    RenderTemplateSelector="{dxi:RenderDropDownArrowTemplateSelector}"
                                    Visibility="Collapsed" />
                            </dxi:RenderPanel>
                        </dxi:RenderBorder>
                    </dxi:RenderPanel>
                    <dxi:RenderPanel Name="PART_GlyphAndContent" ShouldCalcDpiAwareThickness="False">
                        <dxi:RenderButtonBorder Name="PART_GlyphAndContentBorder" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.BorderTemplate}}" Visibility="Collapsed" />
                        <dxi:RenderBorder Name="PART_ContentPaddingBorder">
                            <dxi:RenderPanel Name="PART_ContentRenderPanel" HorizontalAlignment="Stretch" LayoutProvider="{dxi:DockPanelLayoutProvider LastChildFill=True}">
                                <dxi:RenderImage
                                    Name="PART_Glyph"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Dock="Left"
                                    Stretch="Uniform"
                                    StretchDirection="DownOnly" />
                                <dxi:RenderBorder Name="PART_Offset" Dock="Left" />
                                <dxi:RenderContentPresenter Name="PART_ContentPresenter" />
                            </dxi:RenderPanel>
                        </dxi:RenderBorder>
                    </dxi:RenderPanel>
                </dxi:RenderPanel>
            </dxi:RenderBorder>
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.ForegroundProperty}"
                TargetProperty="Foreground"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentPresenter" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphProperty}"
                TargetProperty="Source"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowGlyphProperty}"
                TargetProperty="Source"
                ValueSource="TemplatedParent"
                TargetName="PART_ArrowGlyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphToContentOffsetProperty}"
                TargetProperty="Width"
                ValueSource="TemplatedParent"
                TargetName="PART_Offset" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphToContentOffsetProperty}"
                TargetProperty="Height"
                ValueSource="TemplatedParent"
                TargetName="PART_Offset" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphAlignmentProperty}"
                TargetProperty="Dock"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphWidthProperty}"
                TargetProperty="Width"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphHeightProperty}"
                TargetProperty="Height"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowAlignmentProperty}"
                TargetProperty="Dock"
                ValueSource="TemplatedParent"
                TargetName="PART_Arrow" />
            <dxi:RenderBinding DependencyProperty="{x:Static dx:DropDownButtonBase.ContentProperty}" ValueSource="TemplatedParent" TargetName="PART_ContentPresenter" />
            <dxi:RenderBinding DependencyProperty="{x:Static dx:DropDownButtonBase.ContentTemplateProperty}" ValueSource="TemplatedParent" TargetName="PART_ContentPresenter" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.VerticalContentAlignmentProperty}"
                TargetProperty="VerticalAlignment"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentRenderPanel" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.HorizontalContentAlignmentProperty}"
                TargetProperty="HorizontalAlignment"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentRenderPanel" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowPaddingProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_ArrowPaddingBorder" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static ContentControl.PaddingProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentPaddingBorder" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.BorderThicknessProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_OffsetThicknessBorder" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowGlyphProperty}" ValueSource="TemplatedParent" Value="{x:Null}">
                <dxi:RenderSetter TargetName="PART_ArrowGlyph" Property="Visibility" Value="Collapsed" />
                <dxi:RenderSetter TargetName="PART_DefaultArrowGlyph" Property="Visibility" Value="Visible" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Left">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Right" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Right">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Left" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Top">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="HorizontalAlignment" Value="Center" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Bottom">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="HorizontalAlignment" Value="Center" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowAlignmentProperty}" ValueSource="TemplatedParent" Value="Left">
                <dxi:RenderSetter TargetName="PART_GlyphAndContent" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_GlyphAndContentBorder" Property="Placement" Value="Right" />
                <dxi:RenderSetter TargetName="PART_Arrow" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_ArrowBorder" Property="Placement" Value="Left" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowAlignmentProperty}" ValueSource="TemplatedParent" Value="Right">
                <dxi:RenderSetter TargetName="PART_GlyphAndContent" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_GlyphAndContentBorder" Property="Placement" Value="Left" />
                <dxi:RenderSetter TargetName="PART_Arrow" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_ArrowBorder" Property="Placement" Value="Right" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowAlignmentProperty}" ValueSource="TemplatedParent" Value="Top">
                <dxi:RenderSetter TargetName="PART_GlyphAndContent" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_GlyphAndContentBorder" Property="Placement" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_Arrow" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_ArrowBorder" Property="Placement" Value="Top" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowAlignmentProperty}" ValueSource="TemplatedParent" Value="Bottom">
                <dxi:RenderSetter TargetName="PART_GlyphAndContent" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_GlyphAndContentBorder" Property="Placement" Value="Top" />
                <dxi:RenderSetter TargetName="PART_Arrow" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_ArrowBorder" Property="Placement" Value="Bottom" />
            </dxi:RenderTrigger>
            <dxi:RenderBinding
                Converter="{dx:BooleanToVisibilityConverter Invert=True}"
                ConverterParamenter="HiddenOnFalse"
                DependencyProperty="{x:Static dx:SimpleButton.IsAsyncOperationInProgressProperty}"
                TargetProperty="Visibility"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentPresenter" />
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <!-- SimpleButton -->
    <dxi:RenderTemplate x:Key="{dxt:LWKey Button.RenderTemplate}">
        <dxi:RenderPanel Name="PART_GlyphAndContent" LayoutProvider="{x:Static dxi:LayoutProvider.GridInstance}">
            <dxi:RenderButtonBorder Name="PART_GlyphAndContentBorder" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.BorderTemplate}}" />
            <dxi:RenderBorder Name="PART_OffsetThicknessBorder">
                <dxi:RenderPanel Name="PART_RootPanel" HorizontalAlignment="Stretch" ShouldCalcDpiAwareThickness="False">

                    <dxi:RenderBorder Name="PART_PaddingBorder">
                        <dxi:RenderPanel Name="PART_ContentRenderPanel" LayoutProvider="{dxi:DockPanelLayoutProvider LastChildFill=True}">
                            <dxi:RenderImage
                                Name="PART_Glyph"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Dock="Left"
                                Stretch="Uniform"
                                StretchDirection="DownOnly" />
                            <dxi:RenderBorder Name="PART_Offset" Dock="Left" />
                            <dxi:RenderContentPresenter Name="PART_ContentPresenter" />
                        </dxi:RenderPanel>
                    </dxi:RenderBorder>

                </dxi:RenderPanel>
            </dxi:RenderBorder>
        </dxi:RenderPanel>

        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphProperty}"
                TargetProperty="Source"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphAlignmentProperty}"
                TargetProperty="Dock"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphToContentOffsetProperty}"
                TargetProperty="Width"
                ValueSource="TemplatedParent"
                TargetName="PART_Offset" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphToContentOffsetProperty}"
                TargetProperty="Height"
                ValueSource="TemplatedParent"
                TargetName="PART_Offset" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphWidthProperty}"
                TargetProperty="Width"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphHeightProperty}"
                TargetProperty="Height"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding DependencyProperty="{x:Static ContentControl.ContentProperty}" ValueSource="TemplatedParent" TargetName="PART_ContentPresenter" />
            <dxi:RenderBinding DependencyProperty="{x:Static ContentControl.ContentTemplateProperty}" ValueSource="TemplatedParent" TargetName="PART_ContentPresenter" />
            <dxi:RenderBinding DependencyProperty="{x:Static ContentControl.ContentTemplateSelectorProperty}" ValueSource="TemplatedParent" TargetName="PART_ContentPresenter" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.VerticalContentAlignmentProperty}"
                TargetProperty="VerticalAlignment"
                ValueSource="TemplatedParent"
                TargetName="PART_RootPanel" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.HorizontalContentAlignmentProperty}"
                TargetProperty="HorizontalAlignment"
                ValueSource="TemplatedParent"
                TargetName="PART_RootPanel" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static ContentControl.PaddingProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_PaddingBorder" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.BorderThicknessProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_OffsetThicknessBorder" />
            <dxi:RenderBinding
                Converter="{dx:BooleanToVisibilityConverter Invert=True}"
                ConverterParamenter="HiddenOnFalse"
                DependencyProperty="{x:Static dx:SimpleButton.IsAsyncOperationInProgressProperty}"
                TargetProperty="Visibility"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentPresenter" />

            <dxi:RenderTrigger DependencyProperty="{x:Static dx:SimpleButton.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Left">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Right" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:SimpleButton.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Right">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Left" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:SimpleButton.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Top">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="HorizontalAlignment" Value="Center" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:SimpleButton.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Bottom">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="HorizontalAlignment" Value="Center" />
            </dxi:RenderTrigger>

            <dxi:MultiRenderTrigger>
                <dxi:MultiRenderTrigger.Conditions>
                    <dxi:RenderConditionGroup Operator="Or">
                        <dxi:RenderCondition DependencyProperty="{x:Static dx:SimpleButton.GlyphProperty}" ValueSource="TemplatedParent" Value="{x:Null}" />
                        <dxi:RenderCondition DependencyProperty="{x:Static dx:SimpleButton.ContentProperty}" ValueSource="TemplatedParent" Value="{x:Null}" />
                    </dxi:RenderConditionGroup>
                </dxi:MultiRenderTrigger.Conditions>
                <dxi:RenderSetter TargetName="PART_Offset" Property="Visibility" Value="Collapsed" />
            </dxi:MultiRenderTrigger>

            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.ForegroundProperty}"
                TargetProperty="Foreground"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentRenderPanel">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasForegroundProperty}" ValueSource="TemplatedParent" Value="True" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>


    <ControlTemplate x:Key="{dxt:LWKey Button.ButtonBaseControlTemplate}" TargetType="{x:Type ButtonBase}">
        <dxi:ButtonChrome x:Name="PART_Owner" RenderTemplate="{StaticResource {dxt:LWKey Button.RenderTemplate}}" />
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Owner" Property="Opacity" Value="{StaticResource {dxt:LWKey DropDownButton.ButtonOpacity}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Button.ButtonControlTemplate}" TargetType="{x:Type Button}">
        <dxi:ButtonChrome x:Name="PART_Owner" IsDefaulted="{TemplateBinding IsDefaulted}" RenderTemplate="{StaticResource {dxt:LWKey Button.RenderTemplate}}" />
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Owner" Property="Opacity" Value="{StaticResource {dxt:LWKey DropDownButton.ButtonOpacity}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DropDownButton.DropDownButtonTemplate}" TargetType="{x:Type ButtonBase}">
        <dxi:DropDownButtonChrome x:Name="PART_Owner" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.RenderDropDownButtonTemplate}}" />
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Owner" Property="Opacity" Value="{StaticResource {dxt:LWKey DropDownButton.ButtonOpacity}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DropDownButton.AsyncDropDownButtonTemplate}" TargetType="{x:Type dx:DropDownButton}">
        <Grid>
            <dxi:DropDownButtonChrome x:Name="PART_Owner" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.RenderDropDownButtonTemplate}}" />
            <dxi:AsyncButtonContentControl
                x:Name="PART_AsyncIndicator"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                CancelCommand="{Binding Command.CancelCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Owner" Property="Opacity" Value="{StaticResource {dxt:LWKey DropDownButton.ButtonOpacity}}" />
            </Trigger>
            <Trigger Property="IsAsyncOperationInProgress" Value="True">
                <Setter TargetName="PART_AsyncIndicator" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="AsyncDisplayMode" Value="WaitCancel">
                <Setter TargetName="PART_AsyncIndicator" Property="ShouldShowCancelButton" Value="True" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DropDownButton.AsyncSplitButtonTemplate}" TargetType="{x:Type dx:SplitButton}">
        <Grid>
            <dxi:DropDownButtonChrome x:Name="PART_Owner" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.RenderSplitButtonTemplate}}" />
            <dxi:AsyncButtonContentControl
                x:Name="PART_AsyncIndicator"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                CancelCommand="{Binding Command.CancelCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Owner" Property="Opacity" Value="{StaticResource {dxt:LWKey DropDownButton.ButtonOpacity}}" />
            </Trigger>
            <Trigger Property="IsAsyncOperationInProgress" Value="True">
                <Setter TargetName="PART_AsyncIndicator" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="AsyncDisplayMode" Value="WaitCancel">
                <Setter TargetName="PART_AsyncIndicator" Property="ShouldShowCancelButton" Value="True" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Button.AsyncButtonTemplate}" TargetType="{x:Type dx:SimpleButton}">
        <Grid>
            <dxi:ButtonChrome x:Name="PART_Owner" IsDefaulted="{TemplateBinding IsDefaulted}" RenderTemplate="{StaticResource {dxt:LWKey Button.RenderTemplate}}" />
            <dxi:AsyncButtonContentControl
                x:Name="PART_AsyncIndicator"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                CancelCommand="{Binding Command.CancelCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Owner" Property="Opacity" Value="{StaticResource {dxt:LWKey DropDownButton.ButtonOpacity}}" />
            </Trigger>
            <Trigger Property="IsAsyncOperationInProgress" Value="True">
                <Setter TargetName="PART_AsyncIndicator" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="AsyncDisplayMode" Value="WaitCancel">
                <Setter TargetName="PART_AsyncIndicator" Property="ShouldShowCancelButton" Value="True" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Themes\Generic\Buttons.xaml-->

    <!--#region Themes\Generic\ConditionalFormatting.xaml-->
    <SolidColorBrush x:Key="{dxt:LWKey Format.DataBarNegativeBrush_Solid}" Color="{StaticResource {dxt:LWKey Format.DataBarNegativeColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey Format.DataBarBlueBrush_Solid}" Color="{StaticResource {dxt:LWKey Format.DataBarBlueColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey Format.DataBarGreenBrush_Solid}" Color="{StaticResource {dxt:LWKey Format.DataBarGreenColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey Format.DataBarRedBrush_Solid}" Color="{StaticResource {dxt:LWKey Format.DataBarRedColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey Format.DataBarOrangeBrush_Solid}" Color="{StaticResource {dxt:LWKey Format.DataBarOrangeColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey Format.DataBarLightBlueBrush_Solid}" Color="{StaticResource {dxt:LWKey Format.DataBarLightBlueColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey Format.DataBarPurpleBrush_Solid}" Color="{StaticResource {dxt:LWKey Format.DataBarPurpleColor}}" />

    <dxcf:Format x:Key="{dxt:LWKey Format.LightRedFillWithDarkRedText}" Background="{StaticResource {dxt:LWKey Format.FormatRedFillBrush}}" Foreground="{StaticResource {dxt:LWKey Format.FormatRedTextBrush}}" />
    <dxcf:Format x:Key="{dxt:LWKey Format.YellowFillWithDarkYellowText}" Background="{StaticResource {dxt:LWKey Format.FormatYellowFillBrush}}" Foreground="{StaticResource {dxt:LWKey Format.FormatYellowTextBrush}}" />
    <dxcf:Format x:Key="{dxt:LWKey Format.GreenFillWithDarkGreenText}" Background="{StaticResource {dxt:LWKey Format.FormatGreenFillBrush}}" Foreground="{StaticResource {dxt:LWKey Format.FormatGreenTextBrush}}" />
    <dxcf:Format x:Key="{dxt:LWKey Format.LightRedFill}" Background="{StaticResource {dxt:LWKey Format.FormatRedFillBrush}}" />
    <dxcf:Format x:Key="{dxt:LWKey Format.LightGreenFill}" Background="{StaticResource {dxt:LWKey Format.FormatGreenFillBrush}}" />
    <dxcf:Format x:Key="{dxt:LWKey Format.RedText}" Foreground="{StaticResource {dxt:LWKey Format.FormatRedTextBrush}}" />
    <dxcf:Format x:Key="{dxt:LWKey Format.GreenText}" Foreground="{StaticResource {dxt:LWKey Format.FormatGreenTextBrush}}" />
    <dxcf:Format x:Key="{dxt:LWKey Format.BoldText}" FontWeight="Bold" />
    <dxcf:Format x:Key="{dxt:LWKey Format.ItalicText}" FontStyle="Italic" />
    <dxcf:Format x:Key="{dxt:LWKey Format.StrikethroughText}" TextDecorations="Strikethrough" />

    <dxcf:FormatInfoCollection x:Key="{dxt:LWKey ConditionalFormatting.PredefinedFormats}">
        <dxcft:StandardFormatInfoExtension FormatName="LightRedFillWithDarkRedText" />
        <dxcft:StandardFormatInfoExtension FormatName="YellowFillWithDarkYellowText" />
        <dxcft:StandardFormatInfoExtension FormatName="GreenFillWithDarkGreenText" />
        <dxcft:StandardFormatInfoExtension FormatName="LightRedFill" />
        <dxcft:StandardFormatInfoExtension FormatName="LightGreenFill" />
        <dxcft:StandardFormatInfoExtension FormatName="RedText" />
        <dxcft:StandardFormatInfoExtension FormatName="GreenText" />
        <dxcft:StandardFormatInfoExtension FormatName="BoldText" />
        <dxcft:StandardFormatInfoExtension FormatName="ItalicText" />
        <dxcft:StandardFormatInfoExtension FormatName="StrikethroughText" />
    </dxcf:FormatInfoCollection>

    <dxcf:ColorScaleFormat
        x:Key="{dxt:LWKey Format.GreenYellowRedColorScale}"
        ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleGreen}}"
        ColorMiddle="{StaticResource {dxt:LWKey Format.ColorScaleYellow}}"
        ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleRed}}" />
    <dxcf:ColorScaleFormat
        x:Key="{dxt:LWKey Format.RedYellowGreenColorScale}"
        ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleRed}}"
        ColorMiddle="{StaticResource {dxt:LWKey Format.ColorScaleYellow}}"
        ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleGreen}}" />
    <dxcf:ColorScaleFormat
        x:Key="{dxt:LWKey Format.GreenWhiteRedColorScale}"
        ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleGreen}}"
        ColorMiddle="{StaticResource {dxt:LWKey Format.ColorScaleWhite}}"
        ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleRed}}" />
    <dxcf:ColorScaleFormat
        x:Key="{dxt:LWKey Format.RedWhiteGreenColorScale}"
        ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleRed}}"
        ColorMiddle="{StaticResource {dxt:LWKey Format.ColorScaleWhite}}"
        ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleGreen}}" />
    <dxcf:ColorScaleFormat
        x:Key="{dxt:LWKey Format.BlueWhiteRedColorScale}"
        ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleBlue}}"
        ColorMiddle="{StaticResource {dxt:LWKey Format.ColorScaleWhite}}"
        ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleRed}}" />
    <dxcf:ColorScaleFormat
        x:Key="{dxt:LWKey Format.RedWhiteBlueColorScale}"
        ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleRed}}"
        ColorMiddle="{StaticResource {dxt:LWKey Format.ColorScaleWhite}}"
        ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleBlue}}" />
    <dxcf:ColorScaleFormat x:Key="{dxt:LWKey Format.WhiteRedColorScale}" ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleWhite}}" ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleRed}}" />
    <dxcf:ColorScaleFormat x:Key="{dxt:LWKey Format.RedWhiteColorScale}" ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleRed}}" ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleWhite}}" />
    <dxcf:ColorScaleFormat x:Key="{dxt:LWKey Format.GreenWhiteColorScale}" ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleGreen}}" ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleWhite}}" />
    <dxcf:ColorScaleFormat x:Key="{dxt:LWKey Format.WhiteGreenColorScale}" ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleWhite}}" ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleGreen}}" />
    <dxcf:ColorScaleFormat x:Key="{dxt:LWKey Format.GreenYellowColorScale}" ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleGreen}}" ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleYellow}}" />
    <dxcf:ColorScaleFormat x:Key="{dxt:LWKey Format.YellowGreenColorScale}" ColorMax="{StaticResource {dxt:LWKey Format.ColorScaleYellow}}" ColorMin="{StaticResource {dxt:LWKey Format.ColorScaleGreen}}" />

    <dxcf:FormatInfoCollection x:Key="{dxt:LWKey ConditionalFormatting.PredefinedColorScaleFormats}">
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="GreenYellowRedColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon GreenYellowRed_32x32.png, SvgIconName=GreenYellowRed.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="RedYellowGreenColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon RedYellowGreen_32x32.png, SvgIconName=RedYellowGreen.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="GreenWhiteRedColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon GreenWhiteRed_32x32.png, SvgIconName=GreenWhiteRed.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="RedWhiteGreenColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon RedWhiteGreen_32x32.png, SvgIconName=RedWhiteGreen.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="BlueWhiteRedColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon BlueWhiteRed_32x32.png, SvgIconName=BlueWhiteRed.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="RedWhiteBlueColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon RedWhiteBlue_32x32.png, SvgIconName=RedWhiteBlue.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="WhiteRedColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon WhiteRed_32x32.png, SvgIconName=WhiteRed.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="RedWhiteColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon RedWhite_32x32.png, SvgIconName=RedWhite.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="GreenWhiteColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon GreenWhite_32x32.png, SvgIconName=GreenWhite.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="WhiteGreenColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon WhiteGreen_32x32.png, SvgIconName=WhiteGreen.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="GreenYellowColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon GreenYellow_32x32.png, SvgIconName=GreenYellow.svg}" />
        <dxcft:StandardColorScaleFormatInfoExtension FormatName="YellowGreenColorScale" Icon="{dxcft:ConditionalFormattingMenuIcon YellowGreen_32x32.png, SvgIconName=YellowGreen.svg}" />
    </dxcf:FormatInfoCollection>

    <DrawingBrush
        x:Key="{dxt:LWKey Format.DataBarZeroLineBrush}"
        TileMode="Tile"
        Viewport="0 0 1001 4"
        ViewportUnits="Absolute">
        <DrawingBrush.Drawing>
            <GeometryDrawing Brush="{StaticResource {dxt:LWKey Format.DataBarZeroLineColor}}">
                <GeometryDrawing.Geometry>
                    <GeometryGroup>
                        <RectangleGeometry Rect="0 0 1000 3" />
                        <RectangleGeometry Rect="1000 3 1 1" />
                    </GeometryGroup>
                </GeometryDrawing.Geometry>
            </GeometryDrawing>
        </DrawingBrush.Drawing>
    </DrawingBrush>

    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.BlueSolidDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarBlueBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarBlueBrush_Solid}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />
    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.GreenSolidDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarGreenBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarGreenBrush_Solid}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />
    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.RedSolidDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarRedBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarRedBrush_Solid}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />
    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.OrangeSolidDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarOrangeBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarOrangeBrush_Solid}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />
    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.LightBlueSolidDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarLightBlueBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarLightBlueBrush_Solid}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />
    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.PurpleSolidDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarPurpleBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarPurpleBrush_Solid}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />

    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.BlueGradientDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarBlueBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarBlueBrush_Gradient}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Gradient}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />
    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.GreenGradientDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarGreenBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarGreenBrush_Gradient}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Gradient}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />
    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.RedGradientDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarRedBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarRedBrush_Gradient}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Gradient}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />
    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.OrangeGradientDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarOrangeBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarOrangeBrush_Gradient}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Gradient}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />
    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.LightBlueGradientDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarLightBlueBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarLightBlueBrush_Gradient}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Gradient}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />
    <dxcf:DataBarFormat
        x:Key="{dxt:LWKey Format.PurpleGradientDataBar}"
        BorderBrush="{StaticResource {dxt:LWKey Format.DataBarPurpleBrush_Solid}}"
        BorderBrushNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Solid}}"
        Fill="{StaticResource {dxt:LWKey Format.DataBarPurpleBrush_Gradient}}"
        FillNegative="{StaticResource {dxt:LWKey Format.DataBarNegativeBrush_Gradient}}"
        ZeroLineBrush="{StaticResource {dxt:LWKey Format.DataBarZeroLineBrush}}" />

    <dxcf:FormatInfoCollection x:Key="{dxt:LWKey ConditionalFormatting.PredefinedDataBarFormats}">
        <dxcft:StandardDataBarFormatInfoExtension FormatName="BlueGradientDataBar" Group="GradientFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon GradientBlueDataBar_32x32.png, SvgIconName=GradientBlueDataBar.svg}" />
        <dxcft:StandardDataBarFormatInfoExtension FormatName="GreenGradientDataBar" Group="GradientFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon GradientGreenDataBar_32x32.png, SvgIconName=GradientGreenDataBar.svg}" />
        <dxcft:StandardDataBarFormatInfoExtension FormatName="RedGradientDataBar" Group="GradientFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon GradientRedDataBar_32x32.png, SvgIconName=GradientRedDataBar.svg}" />
        <dxcft:StandardDataBarFormatInfoExtension FormatName="OrangeGradientDataBar" Group="GradientFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon GradientOrangeDataBar_32x32.png, SvgIconName=GradientOrangeDataBar.svg}" />
        <dxcft:StandardDataBarFormatInfoExtension FormatName="LightBlueGradientDataBar" Group="GradientFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon GradientLightBlueDataBar_32x32.png, SvgIconName=GradientLightBlueDataBar.svg}" />
        <dxcft:StandardDataBarFormatInfoExtension FormatName="PurpleGradientDataBar" Group="GradientFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon GradientPurpleDataBar_32x32.png, SvgIconName=GradientPurpleDataBar.svg}" />

        <dxcft:StandardDataBarFormatInfoExtension FormatName="BlueSolidDataBar" Group="SolidFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon SolidBlueDataBar_32x32.png, SvgIconName=SolidBlueDataBar.svg}" />
        <dxcft:StandardDataBarFormatInfoExtension FormatName="GreenSolidDataBar" Group="SolidFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon SolidGreenDataBar_32x32.png, SvgIconName=SolidGreenDataBar.svg}" />
        <dxcft:StandardDataBarFormatInfoExtension FormatName="RedSolidDataBar" Group="SolidFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon SolidRedDataBar_32x32.png, SvgIconName=SolidRedDataBar.svg}" />
        <dxcft:StandardDataBarFormatInfoExtension FormatName="OrangeSolidDataBar" Group="SolidFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon SolidOrangeDataBar_32x32.png, SvgIconName=SolidOrangeDataBar.svg}" />
        <dxcft:StandardDataBarFormatInfoExtension FormatName="LightBlueSolidDataBar" Group="SolidFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon SolidLightBlueDataBar_32x32.png, SvgIconName=SolidLightBlueDataBar.svg}" />
        <dxcft:StandardDataBarFormatInfoExtension FormatName="PurpleSolidDataBar" Group="SolidFillGroup" Icon="{dxcft:ConditionalFormattingMenuIcon SolidPurpleDataBar_32x32.png, SvgIconName=SolidPurpleDataBar.svg}" />
    </dxcf:FormatInfoCollection>

    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Arrows3ColoredIconSet}"
        Name="Arrows3_"
        ElementCount="3"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Arrows3" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Arrows3GrayIconSet}"
        Name="ArrowsGrey3_"
        ElementCount="3"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="ArrowsGray3" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Triangles3IconSet}"
        Name="Triangles3_"
        ElementCount="3"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Triangles3" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Arrows4ColoredIconSet}"
        Name="Arrows4_"
        ElementCount="4"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Arrows4" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Arrows4GrayIconSet}"
        Name="ArrowsGrey4_"
        ElementCount="4"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="ArrowsGray4" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Arrows5ColoredIconSet}"
        Name="Arrows5_"
        ElementCount="5"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Arrows5" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Arrows5GrayIconSet}"
        Name="ArrowsGrey5_"
        ElementCount="5"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="ArrowsGray5" />

    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.TrafficLights3UnrimmedIconSet}"
        Name="TrafficLights3_"
        ElementCount="3"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="TrafficLights3" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.TrafficLights3RimmedIconSet}"
        Name="TrafficLights23_"
        ElementCount="3"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="TrafficLights3Black" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Signs3IconSet}"
        Name="Signs3_"
        ElementCount="3"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Signs3" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.TrafficLights4IconSet}"
        Name="TrafficLights4_"
        ElementCount="4"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="TrafficLights4" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.RedToBlackIconSet}"
        Name="RedToBlack4_"
        ElementCount="4"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="RedToBlack4" />

    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Symbols3CircledIconSet}"
        Name="Symbols3_"
        ElementCount="3"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Symbols3Circled" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Symbols3UncircledIconSet}"
        Name="Symbols23_"
        ElementCount="3"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Symbols3" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Flags3IconSet}"
        Name="Flags3_"
        ElementCount="3"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Flags3" />

    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Stars3IconSet}"
        Name="Stars3_"
        ElementCount="3"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Stars3" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Ratings4IconSet}"
        Name="Rating4_"
        ElementCount="4"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Rating4" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Quarters5IconSet}"
        Name="Quarters5_"
        ElementCount="5"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Quarters5" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Ratings5IconSet}"
        Name="Rating5_"
        ElementCount="5"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Rating5" />
    <dxcft:QuickIconSetFormatExtension
        x:Key="{dxt:LWKey Format.Boxes5IconSet}"
        Name="Boxes5_"
        ElementCount="5"
        Path="{x:Static dxcft:QuickIconSetFormatExtension.DefaultPath}"
        SvgPath="{x:Static dxcft:QuickIconSetFormatExtension.SvgDefaultPath}"
        XlIconSetType="Boxes5" />

    <dxcf:IconSetFormat x:Key="{dxt:LWKey Format.PositiveNegativeTrianglesIconSet}" ElementThresholdType="Number" IconSetType="Triangles3">
        <dxcf:IconSetElement Icon="{dxcft:ConditionalFormattingIconSetIcon Triangles3_3.png, SvgIconName=Triangles3_3.svg}" Threshold="{x:Static sys:Double.NegativeInfinity}" />
        <dxcf:IconSetElement Icon="{x:Null}" Threshold="0" />
        <dxcf:IconSetElement Icon="{dxcft:ConditionalFormattingIconSetIcon Triangles3_1.png, SvgIconName=Triangles3_1.svg}" Threshold="0" ThresholdComparisonType="Greater" />
    </dxcf:IconSetFormat>
    <dxcf:IconSetFormat x:Key="{dxt:LWKey Format.PositiveNegativeArrowsGrayIconSet}" ElementThresholdType="Number" IconSetType="ArrowsGray3">
        <dxcf:IconSetElement Icon="{dxcft:ConditionalFormattingIconSetIcon ArrowsGrey3_3.png, SvgIconName=ArrowsGrey3_3.svg}" Threshold="{x:Static sys:Double.NegativeInfinity}" />
        <dxcf:IconSetElement Icon="{x:Null}" Threshold="0" />
        <dxcf:IconSetElement Icon="{dxcft:ConditionalFormattingIconSetIcon ArrowsGrey3_1.png, SvgIconName=ArrowsGrey3_1.svg}" Threshold="0" ThresholdComparisonType="Greater" />
    </dxcf:IconSetFormat>
    <dxcf:IconSetFormat x:Key="{dxt:LWKey Format.PositiveNegativeArrowsColoredIconSet}" ElementThresholdType="Number" IconSetType="Arrows3">
        <dxcf:IconSetElement Icon="{dxcft:ConditionalFormattingIconSetIcon Arrows3_3.png, SvgIconName=Arrows3_3.svg}" Threshold="{x:Static sys:Double.NegativeInfinity}" />
        <dxcf:IconSetElement Icon="{x:Null}" Threshold="0" />
        <dxcf:IconSetElement Icon="{dxcft:ConditionalFormattingIconSetIcon Arrows3_1.png, SvgIconName=Arrows3_1.svg}" Threshold="0" ThresholdComparisonType="Greater" />
    </dxcf:IconSetFormat>


    <dxcf:FormatInfoCollection x:Key="{dxt:LWKey ConditionalFormatting.PredefinedIconSetFormats}">
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Arrows3ColoredIconSet" Group="DirectionalGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Arrows3GrayIconSet" Group="DirectionalGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Triangles3IconSet" Group="DirectionalGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Arrows4GrayIconSet" Group="DirectionalGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Arrows4ColoredIconSet" Group="DirectionalGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Arrows5GrayIconSet" Group="DirectionalGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Arrows5ColoredIconSet" Group="DirectionalGroup" />

        <dxcft:StandardIconSetFormatInfoExtension FormatName="TrafficLights3UnrimmedIconSet" Group="ShapesGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="TrafficLights3RimmedIconSet" Group="ShapesGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Signs3IconSet" Group="ShapesGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="TrafficLights4IconSet" Group="ShapesGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="RedToBlackIconSet" Group="ShapesGroup" />

        <dxcft:StandardIconSetFormatInfoExtension FormatName="Symbols3CircledIconSet" Group="IndicatorsGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Symbols3UncircledIconSet" Group="IndicatorsGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Flags3IconSet" Group="IndicatorsGroup" />

        <dxcft:StandardIconSetFormatInfoExtension FormatName="Stars3IconSet" Group="RatingsGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Ratings4IconSet" Group="RatingsGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Quarters5IconSet" Group="RatingsGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Ratings5IconSet" Group="RatingsGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="Boxes5IconSet" Group="RatingsGroup" />

        <dxcft:StandardIconSetFormatInfoExtension FormatName="PositiveNegativeArrowsColoredIconSet" Group="PositiveNegativeGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="PositiveNegativeArrowsGrayIconSet" Group="PositiveNegativeGroup" />
        <dxcft:StandardIconSetFormatInfoExtension FormatName="PositiveNegativeTrianglesIconSet" Group="PositiveNegativeGroup" />
    </dxcf:FormatInfoCollection>
    <!--#endregion Themes\Generic\ConditionalFormatting.xaml-->

    <!--#region Themes\Generic\ThemedWindow.xaml-->
    <dx:CommonHeaderItemControlTemplateProvider
        x:Key="{dxt:LWKey ThemedWindow.HeaderItemControlCommonTemplateProvider}"
        HeaderItemControlStyle="{StaticResource {dxt:LWKey ThemedWindowHeaderItems.HeaderButtonStyle}}"
        MaximizeGlyphTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerMaximizeButtonGlyph}}"
        MinimizeGlyphTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerMinimizeButtonGlyph}}"
        MouseOverBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonBackgroundMouseOverState}}"
        MouseOverForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonForegroundMouseOverState}}"
        NormalBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonBackgroundNormalState}}"
        NormalForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonForegroundNormalState}}"
        PressedBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonBackgroundPressedState}}"
        PressedForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonForegroundPressedState}}"
        RestoreGlyphTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerRestoreButtonGlyph}}" />
    <dx:CloseHeaderItemControlTemplateProvider
        x:Key="{dxt:LWKey ThemedWindow.HeaderItemControlCloseTemplateProvider}"
        CloseGlyphTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonGlyph}}"
        HeaderItemControlStyle="{StaticResource {dxt:LWKey ThemedWindowHeaderItems.HeaderCloseButtonStyle}}"
        MouseOverBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonBackgroundMouseOverState}}"
        MouseOverForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonForegroundMouseOverState}}"
        NormalBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonBackgroundNormalState}}"
        NormalForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonForegroundNormalState}}"
        PressedBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonBackgroundPressedState}}"
        PressedForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonForegroundPressedState}}" />
    <!--#endregion Themes\Generic\ThemedWindow.xaml-->

    <!--#region Themes\Generic\Window.xaml-->
    <dx:CommonHeaderItemControlTemplateProvider
        x:Key="{dxt:LWKey DXWindow.HeaderItemControlCommonTemplateProvider}"
        MaximizeGlyphTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerMaximizeButtonGlyph}}"
        MinimizeGlyphTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerMinimizeButtonGlyph}}"
        MouseOverBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonBackgroundMouseOverState}}"
        MouseOverForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonForegroundMouseOverState}}"
        NormalBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonBackgroundNormalState}}"
        NormalForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonForegroundNormalState}}"
        PressedBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonBackgroundPressedState}}"
        PressedForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonForegroundPressedState}}"
        RestoreGlyphTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerRestoreButtonGlyph}}" />
    <dx:CloseHeaderItemControlTemplateProvider
        x:Key="{dxt:LWKey DXWindow.HeaderItemControlCloseTemplateProvider}"
        CloseGlyphTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonGlyph}}"
        MouseOverBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonBackgroundMouseOverState}}"
        MouseOverForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonForegroundMouseOverState}}"
        NormalBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonBackgroundNormalState}}"
        NormalForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonForegroundNormalState}}"
        PressedBackgroundTemplate="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonBackgroundPressedState}}"
        PressedForeground="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerCloseButtonForegroundPressedState}}" />
    <!--#endregion Themes\Generic\Window.xaml-->

</ResourceDictionary>