<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:dxbi="http://schemas.devexpress.com/winfx/2008/xaml/bars/internal"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Core/Controls/_Base.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <sys:Boolean x:Key="{dxt:LWKey ThemedWindow.RoundWindowCorners}">False</sys:Boolean>
    <dxi:SplitButtonsSeparatorThicknessConverter x:Key="separatorThicknessConverter" />
    <SolidColorBrush x:Key="{dxt:LWKey SuperTip.Foreground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey FloatingContainer.FloatingContainerBackground}" Color="{StaticResource Color.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.AeroWindowContainerBackground}" Color="{StaticResource Color.Backstage.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey SearchPanel.ButtonBorderBrush}" Color="{StaticResource Color.Delimiter}" />
    <SolidColorBrush x:Key="{dxt:LWKey SearchPanel.SearchPanelBorderBrush}" Color="{StaticResource Color.Delimiter}" />
    <SolidColorBrush x:Key="{dxt:LWKey SearchPanel.SearchPanelBackgroundBrush}" Color="{StaticResource Color.Delimiter}" />
    <SolidColorBrush x:Key="{dxt:LWKey SearchPanel.SearchPanelTextBrush}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey SearchPanel.SearchPanelGlyphBrush}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.BorderEffectActiveColor}" Color="{StaticResource Color.Backstage.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.BorderEffectInactiveColor}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.FloatingContainerActiveBodyBorder}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.FloatingContainerInactiveBodyBorder}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.FloatingContainerInactiveBackground}" Color="{dx:LWColor 'VS2019Blue=Color.ControlDark.Background, VS2019Dark=Color.Window.Background, VS2019Light=Color.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.FloatingContainerBorder}" Color="{StaticResource Color.Backstage.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.FloatingContainerInactiveBorder}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.FloatingContainerBackground}" Color="{StaticResource Color.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.ActiveHeaderBackground}" Color="{dx:LWColor 'VS2019Blue=Color.ControlDark.Background, VS2019Dark=Color.Window.Background, VS2019Light=Color.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey DXWindow.InactiveHeaderBackground}" Color="{dx:LWColor 'VS2019Blue=Color.ControlDark.Background, VS2019Dark=Color.Window.Background, VS2019Light=Color.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonForegroundNormalState}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonForegroundMouseOverState}" Color="{dx:LWColor 'VS2019Blue=Color.Foreground, VS2019Dark=Color.Foreground, VS2019Light=Color.Focused'}" />
    <SolidColorBrush x:Key="{dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonForegroundPressedState}" Color="{dx:LWColor 'VS2019Blue=Color.Foreground, VS2019Dark=Color.Foreground, VS2019Light=Color.Backstage.Foreground'}" />
    <SolidColorBrush x:Key="{dxt:LWKey FloatingContainer.FloatingContainerCloseButtonForegroundNormalState}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey FloatingContainer.FloatingContainerCloseButtonForegroundMouseOverState}" Color="{dx:LWColor 'VS2019Blue=Color.Foreground, VS2019Dark=Color.Foreground, VS2019Light=Color.Focused'}" />
    <SolidColorBrush x:Key="{dxt:LWKey FloatingContainer.FloatingContainerCloseButtonForegroundPressedState}" Color="{dx:LWColor 'VS2019Blue=Color.Foreground, VS2019Dark=Color.Foreground, VS2019Light=Color.Backstage.Foreground'}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey AcrylicThemedWindow.AcrylicColor}" Color="{StaticResource Color.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowActiveBackground}" Color="{StaticResource Color.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowActiveBorderBrush}" Color="{StaticResource Color.Backstage.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowActiveContentBackground}" Color="{StaticResource Color.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowActiveContentBorderBrush}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowInactiveBackground}" Color="{StaticResource Color.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowInactiveBorderBrush}" Color="{StaticResource Color.Backstage.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowInactiveContentBackground}" Color="{StaticResource Color.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowInactiveContentBorderBrush}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowTitleForeground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowRibbonTitleForeground}" Color="{StaticResource Color.Backstage.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowContentForeground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.HeaderControlBoxBackground}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.HeaderControlBoxBorderBrush}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowActiveHeaderBackground}" Color="{dx:LWColor 'VS2019Blue=Color.ControlDark.Background, VS2019Dark=Color.Window.Background, VS2019Light=Color.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowInactiveHeaderBackground}" Color="{dx:LWColor 'VS2019Blue=Color.ControlDark.Background, VS2019Dark=Color.Window.Background, VS2019Light=Color.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowRibbonActiveHeaderBackground}" Color="{dx:LWColor 'VS2019Blue=Color.Backstage.Window.Background, VS2019Dark=Color.Window.Background, VS2019Light=Color.Backstage.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.WindowRibbonInactiveHeaderBackground}" Color="{dx:LWColor 'VS2019Blue=Color.Backstage.Window.Background, VS2019Dark=Color.Window.Background, VS2019Light=Color.Backstage.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.BackButtonForegroundNormalState}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.BackButtonForegroundMouseoverState}" Color="{StaticResource Color.HoverForeground}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedWindow.BackButtonForegroundPressedState}" Color="{StaticResource Color.SelectionForeground}" />
    <SolidColorBrush x:Key="{dxt:LWKey DragDrop.DropMarkerBackground}" Color="{StaticResource Color.Editor.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey DragDrop.DropMarkerBorderBrush}" Color="{StaticResource Color.Focused}" />
    <SolidColorBrush x:Key="{dxt:LWKey DragDrop.DragHintBackground}" Color="{StaticResource Color.Control.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey DragDrop.DragHintBorderBrush}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey DragDrop.DragHintCaptionForeground}" Color="{dx:LWColor 'VS2019Blue=Color.SelectionBorder, VS2019Dark=Color.Focused, VS2019Light=Color.Focused'}" />
    <SolidColorBrush x:Key="{dxt:LWKey DragDrop.DragHintDescriptionForeground}" Color="{StaticResource Color.Foreground}" />
    <dx:BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <CornerRadius x:Key="{dxt:LWKey DragDrop.DragHintCornerRadius}">0</CornerRadius>
    <sys:Double x:Key="{dxt:LWKey DXWindow.InactiveHeaderOpacity}">0.38</sys:Double>
    <Thickness x:Key="{dxt:LWKey DXWindow.ResizeBorderThickness}">5</Thickness>
    <Thickness x:Key="{dxt:LWKey DXWindow.FloatingContainerBodyMargin}">5,0,5,5</Thickness>
    <sys:Double x:Key="{dxt:LWKey DXWindow.FloatingContainerClipCornerRadius}">0</sys:Double>
    <Thickness x:Key="{dxt:LWKey DXWindow.FloatingContainerBorderPadding}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey DXWindow.BorderEffectOffset}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey DXWindow.BorderEffectLeftMargins}">0,10,0,10</Thickness>
    <Thickness x:Key="{dxt:LWKey DXWindow.BorderEffectRightMargins}">0,10,0,10</Thickness>
    <Thickness x:Key="{dxt:LWKey DXWindow.BorderEffectTopMargins}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey DXWindow.BorderEffectBottomMargins}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey FloatingContainer.FloatingContainerHeaderDockMargin}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey FloatingContainer.HeaderItemsControlMargin}">0</Thickness>
    <sys:Double x:Key="{dxt:LWKey DXWindow.AeroWindowBorderSize}">8</sys:Double>
    <Thickness x:Key="{dxt:LWKey DXWindow.AeroWindowResizeBorderThickness}">9</Thickness>
    <sys:Double x:Key="{dxt:LWKey ThemedWindow.WindowInactiveHeaderOpacity}">0.62</sys:Double>
    <sys:Double x:Key="{dxt:LWKey ThemedWindow.WindowIconHeight}">16</sys:Double>
    <sys:Double x:Key="{dxt:LWKey ThemedWindow.WindowIconWidth}">16</sys:Double>
    <sys:Double x:Key="{dxt:LWKey ThemedWindow.WindowTitleFontSize}">12</sys:Double>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.WindowBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.WindowContentBorderThickness}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.WindowRibbonContentBorderThickness}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.HeaderNormalPadding}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.WindowNormalPadding}">5,0,5,5</Thickness>
    <sys:Double x:Key="{dxt:LWKey ThemedWindow.TabbedModeDefaultTopMargin}">5</sys:Double>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.HeaderRibbonPadding}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.WindowRibbonPadding}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.SizeGripMargin}">0,0,5,5</Thickness>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.WindowIconMargin}">8,0,3,0</Thickness>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.WindowTitleControlMargin}">5,0,5,0</Thickness>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.WindowToolbarMargin}">5,0,0,0</Thickness>
    <Thickness x:Key="{dxt:LWKey ThemedWindow.HeaderControlBoxBorderThickness}">0</Thickness>
    <FontWeight x:Key="{dxt:LWKey ThemedWindow.WindowTitleFontWeight}">Normal</FontWeight>
    <FontWeight x:Key="{dxt:LWKey DragDrop.DragHintCaptionFontWeight}">Bold</FontWeight>
    <sys:Double x:Key="{dxt:LWKey DragDrop.DragHintCaptionFontSize}">12</sys:Double>
    <VerticalAlignment x:Key="{dxt:LWKey ThemedWindow.HeaderControlBoxVerticalAlignment}">Top</VerticalAlignment>
    <dx:WindowTitleAlignment x:Key="{dxt:LWKey ThemedWindow.WindowTitleAlignment}">Left</dx:WindowTitleAlignment>
    <sys:Double x:Key="{dxt:LWKey ThemedWindow.WindowHeaderHeight}">32</sys:Double>
    <SolidColorBrush x:Key="{dxt:LWKey ThemedBorder.BackgroundBrush}" Color="{dx:LWColor 'VS2019Blue=Color.Window.Background, VS2019Dark=Color.Window.Background, VS2019Light=Color.Control.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey ThemedBorder.BorderBrush}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.ErrorForeground}" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.ErrorBackground}" Color="{dx:LWColor 'VS2019Blue=#FFBB5237, VS2019Dark=#FFF26543, VS2019Light=#FFCF5031'}" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.ErrorBorderBrush}" Color="{dx:LWColor 'VS2019Blue=#FFBB5237, VS2019Dark=#FFF26543, VS2019Light=#FFCF5031'}" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.WarningForeground}" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.WarningBackground}" Color="{dx:LWColor 'VS2019Blue=#FFD68F53, VS2019Dark=#FFF09440, VS2019Light=#FFCF9930'}" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.WarningBorderBrush}" Color="{dx:LWColor 'VS2019Blue=#FFDA955B, VS2019Dark=#FFF89942, VS2019Light=#FFCF9930'}" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.SuccessForeground}" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.SuccessBackground}" Color="{dx:LWColor 'VS2019Blue=#FF638F66, VS2019Dark=#FF7AC142, VS2019Light=#FF2EB072'}" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.SuccessBorderBrush}" Color="{dx:LWColor 'VS2019Blue=#FF638F66, VS2019Dark=#FF7AC142, VS2019Light=#FF2EB072'}" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.InformationForeground}" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.InformationBackground}" Color="{dx:LWColor 'VS2019Blue=#FF5C90B9, VS2019Dark=#FF5680C0, VS2019Light=#FF3F72B8'}" />
    <SolidColorBrush x:Key="{dxt:LWKey Badges.InformationBorderBrush}" Color="{dx:LWColor 'VS2019Blue=#FF5C90B9, VS2019Dark=#FF5680C0, VS2019Light=#FF3F72B8'}" />

    <SolidColorBrush x:Key="{dxt:LWKey Format.FormatRedTextBrush}" Color="{dx:LWColor '#D9A61200, VS2019Dark=#FFE56464'}"/>
    <SolidColorBrush x:Key="{dxt:LWKey Format.FormatRedFillBrush}" Color="{dx:LWColor '#B2FFD9D9, VS2019Dark=#3FDC5E55'}"/>
    <SolidColorBrush x:Key="{dxt:LWKey Format.FormatYellowTextBrush}" Color="{dx:LWColor '#D99C6500, VS2019Dark=#FFE5B264'}"/>
    <SolidColorBrush x:Key="{dxt:LWKey Format.FormatYellowFillBrush}" Color="{dx:LWColor '#B2FFF5D9, VS2019Dark=#3FDC9A2C'}"/>
    <SolidColorBrush x:Key="{dxt:LWKey Format.FormatGreenTextBrush}" Color="{dx:LWColor '#D9158800, VS2019Dark=#FF64E564'}"/>
    <SolidColorBrush x:Key="{dxt:LWKey Format.FormatGreenFillBrush}" Color="{dx:LWColor '#B2D9FFD9, VS2019Dark=#3F6EB664'}"/>

    <dx:ColorStaticResource x:Key="{dxt:LWKey Format.ColorScaleWhite}" Color="{StaticResource Color.Editor.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey Format.DataBarZeroLineColor}" Color="{StaticResource Color.Focused}" />
    <DataTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerCloseButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.WindowClose}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerRestoreButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.WindowRestore}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerMinimizeButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.WindowMinimize}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerMaximizeButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.WindowMaximize}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerCaptionTemplate}">
        <dx:DXWindowSmartCenteringPanel HorizontalAlignment="Stretch">
            <TextBlock
                x:Name="PART_Text"
                FontWeight="Bold"
                Foreground="{StaticResource Brush.Foreground}"
                IsHitTestVisible="False"
                Margin="5"
                Text="{Binding Path=(dx:FloatingContainer.FloatingContainer).Caption, RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                TextTrimming="WordEllipsis" />
        </dx:DXWindowSmartCenteringPanel>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <Style x:Key="{dxt:LWKey FloatingContainer.DXWindowIconStyle}" TargetType="{x:Type Image}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Stretch" Value="None" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TabControlGlyphDefaultStyle" TargetType="{x:Type dxi:GlyphControl}">
        <Setter Property="GlyphCloseTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="dxi:GlyphControl">
                    <Path x:Name="PART_Path" Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.Plus}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="PART_Path" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="GlyphDownTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="dxi:GlyphControl">
                    <Path x:Name="PART_Path" Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Down}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="PART_Path" Value="{dx:LWBrush 'VS2019Blue=Brush.HoverForeground, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="GlyphLeftTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="dxi:GlyphControl">
                    <Path x:Name="PART_Path" Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Left}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="PART_Path" Value="{dx:LWBrush 'VS2019Blue=Brush.HoverForeground, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="GlyphPlusTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="dxi:GlyphControl">
                    <Path x:Name="PART_Path" Fill="{StaticResource Brush.Foreground}" Style="{StaticResource UIShape.Navigation.Plus}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="PART_Path" Value="{dx:LWBrush 'VS2019Blue=Brush.HoverForeground, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="GlyphRightTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="dxi:GlyphControl">
                    <Path x:Name="PART_Path" Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Right}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="PART_Path" Value="{dx:LWBrush 'VS2019Blue=Brush.HoverForeground, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="GlyphUpTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="dxi:GlyphControl">
                    <Path x:Name="PART_Path" Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Up}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="PART_Path" Value="{dx:LWBrush 'VS2019Blue=Brush.HoverForeground, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <dxi:RenderTemplate x:Key="{dxt:LWKey DropDownButton.ArrowBorderTemplate}">
        <dxi:RenderPanel>
            <dxi:RenderBorder
                Name="IsDefault"
                Background="{StaticResource Brush.Button.Background}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1" />
            <dxi:RenderBorder
                Name="IsFocused"
                BorderBrush="{StaticResource Brush.Focused}"
                BorderThickness="1"
                Visibility="Collapsed" />
            <dxi:RenderBorder
                Name="IsDefaulted"
                BorderBrush="{StaticResource Brush.Focused}"
                BorderThickness="1"
                Visibility="Collapsed" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="IsDefault" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="IsDefault" Value="44" />
            </dxi:RenderTrigger>
            <dxi:RenderStateGroup Name="FocusStates">
                <dxi:RenderStateTrigger Name="Unfocused">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsFocused" Value="Collapsed" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Focused">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsFocused" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="DefaultedStates">
                <dxi:RenderStateTrigger Name="NotDefaulted">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsDefaulted" Value="Collapsed" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="IsDefaulted">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsDefaulted" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="VisualStates">
                <dxi:RenderStateTrigger Name="Normal">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Button.Background}" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Border}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.HoverBackground}" />
                    <dxi:RenderSetter Property="BorderThickness" TargetName="IsDefault" Value="1" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.Border, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ArrowBackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.HasArrowBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dx:SplitButton.IsMouseOverArrowProperty}" Value="False" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ArrowBackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dx:SimpleButton.IsMouseOverProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:SimpleButtonsAppearanceHelper.IsArrowBackgroundSetStyleTriggerProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ArrowBorderBrushProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.HasArrowBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ArrowBorderThicknessProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.HasArrowBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ArrowBorderThicknessProperty}"
                TargetName="IsFocused"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.HasArrowBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ArrowCornerRadiusProperty}"
                TargetName="IsDefault"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.HasArrowCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ArrowCornerRadiusProperty}"
                TargetName="IsDefaulted"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.HasArrowCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ArrowCornerRadiusProperty}"
                TargetName="IsFocused"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.HasArrowCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey DropDownButton.SeparatorBorderTemplate}">
        <dxi:RenderPanel>
            <dxi:RenderBorder
                Name="IsDefault"
                Background="{StaticResource Brush.Button.Background}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1,0,0,0" />
            <dxi:RenderBorder
                Name="IsFocused"
                BorderBrush="{StaticResource Brush.Focused}"
                BorderThickness="1,0,0,0"
                Visibility="Collapsed" />
            <dxi:RenderBorder
                Name="IsDefaulted"
                BorderBrush="{StaticResource Brush.Focused}"
                BorderThickness="1,0,0,0"
                Visibility="Collapsed" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="FocusStates">
                <dxi:RenderStateTrigger Name="Unfocused">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsFocused" Value="Collapsed" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Focused">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsFocused" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="DefaultedStates">
                <dxi:RenderStateTrigger Name="NotDefaulted">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsDefaulted" Value="Collapsed" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="IsDefaulted">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsDefaulted" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="VisualStates">
                <dxi:RenderStateTrigger Name="Normal">
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Border}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.Border, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderBrushProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:SplitButtonAppearanceOptions.SeparatorThicknessProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:SplitButtonAppearanceOptions.HasSeparatorThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:SplitButtonAppearanceOptions.SeparatorThicknessProperty}"
                TargetName="IsFocused"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:SplitButtonAppearanceOptions.HasSeparatorThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey DropDownButton.ContentBorderTemplate}">
        <dxi:RenderPanel>
            <dxi:RenderBorder
                Name="IsDefault"
                Background="{StaticResource Brush.Button.Background}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1" />
            <dxi:RenderBorder
                Name="IsFocused"
                BorderBrush="{StaticResource Brush.Focused}"
                BorderThickness="1"
                Visibility="Collapsed" />
            <dxi:RenderBorder
                Name="IsDefaulted"
                BorderBrush="{StaticResource Brush.Focused}"
                BorderThickness="1"
                Visibility="Collapsed" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="IsDefault" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="IsDefault" Value="44" />
            </dxi:RenderTrigger>
            <dxi:RenderStateGroup Name="FocusStates">
                <dxi:RenderStateTrigger Name="Unfocused">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsFocused" Value="Collapsed" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Focused">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsFocused" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="DefaultedStates">
                <dxi:RenderStateTrigger Name="NotDefaulted">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsDefaulted" Value="Collapsed" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="IsDefaulted">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsDefaulted" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="VisualStates">
                <dxi:RenderStateTrigger Name="Normal">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Button.Background}" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Border}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.HoverBackground}" />
                    <dxi:RenderSetter Property="BorderThickness" TargetName="IsDefault" Value="1" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.Border, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dx:SimpleButton.IsMouseOverProperty}" Value="False" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dx:SimpleButton.IsMouseOverProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:SimpleButtonsAppearanceHelper.IsBackgroundSetStyleTriggerProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dx:SplitButton.IsMouseOverArrowProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderBrushProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderThicknessProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderThicknessProperty}"
                TargetName="IsFocused"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ContentCornerRadiusProperty}"
                TargetName="IsDefault"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.HasContentCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ContentCornerRadiusProperty}"
                TargetName="IsDefaulted"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.HasContentCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.ContentCornerRadiusProperty}"
                TargetName="IsFocused"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxbi:BarItemAppearanceOptions.HasContentCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey DropDownButton.BorderTemplate}">
        <dxi:RenderPanel>
            <dxi:RenderBorder
                Name="IsDefault"
                Background="{StaticResource Brush.Button.Background}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1" />
            <dxi:RenderBorder
                Name="IsFocused"
                BorderBrush="{StaticResource Brush.Focused}"
                BorderThickness="1"
                Visibility="Collapsed" />
            <dxi:RenderBorder
                Name="IsDefaulted"
                BorderBrush="{StaticResource Brush.Focused}"
                BorderThickness="1"
                Visibility="Collapsed" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="IsDefault" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="IsDefault" Value="44" />
            </dxi:RenderTrigger>
            <dxi:RenderStateGroup Name="FocusStates">
                <dxi:RenderStateTrigger Name="Unfocused">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsFocused" Value="Collapsed" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Focused">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsFocused" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="DefaultedStates">
                <dxi:RenderStateTrigger Name="NotDefaulted">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsDefaulted" Value="Collapsed" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="IsDefaulted">
                    <dxi:RenderSetter Property="Visibility" TargetName="IsDefaulted" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="VisualStates">
                <dxi:RenderStateTrigger Name="Normal">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Button.Background}" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Border}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.HoverBackground}" />
                    <dxi:RenderSetter Property="BorderThickness" TargetName="IsDefault" Value="1" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.Border, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.Border, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dx:SimpleButton.IsMouseOverProperty}" Value="False" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dx:SimpleButton.IsMouseOverProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:SimpleButtonsAppearanceHelper.IsBackgroundSetStyleTriggerProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderBrushProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderThicknessProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderThicknessProperty}"
                TargetName="IsFocused"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="IsDefault"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="IsDefaulted"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="IsFocused"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey DropDownButton.RenderSplitButtonTemplate}">
        <dxi:RenderPanel Name="PART_GlyphContentAndArrow">
            <dxi:RenderButtonBorder Name="PART_GlyphContentAndArrowBorder" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.BorderTemplate}}" Visibility="Visible" />
            <dxi:RenderPanel Name="PART_RootPanel" LayoutProvider="{dxi:DockPanelLayoutProvider LastChildFill=True}">
                <dxi:RenderPanel Name="PART_Arrow">
                    <dxi:RenderButtonBorder Name="PART_ArrowBorder" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.ArrowBorderTemplate}}" />
                    <dxi:RenderBorder Name="PART_ArrowThicknessBorder">
                        <dxi:RenderPanel Name="PART_ArrowRenderPanel">
                            <dxi:RenderImage
                                Name="PART_ArrowGlyph"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                ShouldCalcDpiAwareThickness="False"
                                Stretch="None"
                                Visibility="Visible" />
                            <dxi:RenderControl
                                Name="PART_DefaultArrowGlyph"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RenderTemplateSelector="{dxi:RenderDropDownArrowTemplateSelector}"
                                ShouldCalcDpiAwareThickness="False"
                                Visibility="Collapsed" />
                        </dxi:RenderPanel>
                    </dxi:RenderBorder>
                </dxi:RenderPanel>
                <dxi:RenderButtonBorder Name="PART_SeparatorBorder" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.SeparatorBorderTemplate}}" />
                <dxi:RenderPanel Name="PART_GlyphAndContent" HorizontalAlignment="Stretch">
                    <dxi:RenderButtonBorder Name="PART_GlyphAndContentBorder" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.ContentBorderTemplate}}" />
                    <dxi:RenderBorder Name="PART_ContentThicknessBorder">
                        <dxi:RenderBorder Name="PART_ContentPaddingBorder">
                            <dxi:RenderPanel
                                Name="PART_ContentRenderPanel"
                                HorizontalAlignment="Stretch"
                                LayoutProvider="{dxi:DockPanelLayoutProvider LastChildFill=True}"
                                ShouldCalcDpiAwareThickness="False">
                                <dxi:RenderImage
                                    Name="PART_Glyph"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Dock="Left"
                                    Stretch="Uniform"
                                    StretchDirection="DownOnly" />
                                <dxi:RenderBorder Name="PART_Offset" Dock="Left" />
                                <dxi:RenderContentPresenter Name="PART_ContentPresenter" />
                            </dxi:RenderPanel>
                        </dxi:RenderBorder>
                    </dxi:RenderBorder>
                </dxi:RenderPanel>
            </dxi:RenderPanel>
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.ForegroundProperty}"
                TargetProperty="Foreground"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentPresenter" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphProperty}"
                TargetProperty="Source"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowGlyphProperty}"
                TargetProperty="Source"
                ValueSource="TemplatedParent"
                TargetName="PART_ArrowGlyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphToContentOffsetProperty}"
                TargetProperty="Width"
                ValueSource="TemplatedParent"
                TargetName="PART_Offset" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphToContentOffsetProperty}"
                TargetProperty="Height"
                ValueSource="TemplatedParent"
                TargetName="PART_Offset" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphAlignmentProperty}"
                TargetProperty="Dock"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphWidthProperty}"
                TargetProperty="Width"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.GlyphHeightProperty}"
                TargetProperty="Height"
                ValueSource="TemplatedParent"
                TargetName="PART_Glyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowAlignmentProperty}"
                TargetProperty="Dock"
                ValueSource="TemplatedParent"
                TargetName="PART_Arrow" />
            <dxi:RenderBinding DependencyProperty="{x:Static dx:DropDownButtonBase.ContentProperty}" ValueSource="TemplatedParent" TargetName="PART_ContentPresenter" />
            <dxi:RenderBinding DependencyProperty="{x:Static dx:DropDownButtonBase.ContentTemplateProperty}" ValueSource="TemplatedParent" TargetName="PART_ContentPresenter" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.VerticalContentAlignmentProperty}"
                TargetProperty="VerticalAlignment"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentRenderPanel" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SimpleButton.HorizontalContentAlignmentProperty}"
                TargetProperty="HorizontalAlignment"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentRenderPanel" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static ContentControl.PaddingProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentPaddingBorder" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.BorderThicknessProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentThicknessBorder" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowPaddingProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_DefaultArrowGlyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowPaddingProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_ArrowGlyph" />
            <dxi:RenderBinding
                DependencyProperty="{x:Static dx:SplitButton.ArrowBorderThicknessProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_ArrowThicknessBorder" />
            <dxi:RenderBinding
                Converter="{StaticResource separatorThicknessConverter}"
                DependencyProperty="{x:Static dx:SplitButton.SeparatorThicknessProperty}"
                TargetProperty="Margin"
                ValueSource="TemplatedParent"
                TargetName="PART_SeparatorBorder" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowGlyphProperty}" ValueSource="TemplatedParent" Value="{x:Null}">
                <dxi:RenderSetter TargetName="PART_ArrowGlyph" Property="Visibility" Value="Collapsed" />
                <dxi:RenderSetter TargetName="PART_DefaultArrowGlyph" Property="Visibility" Value="Visible" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Left">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Right" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Right">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Left" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Top">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="HorizontalAlignment" Value="Center" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.GlyphAlignmentProperty}" ValueSource="TemplatedParent" Value="Bottom">
                <dxi:RenderSetter TargetName="PART_Glyph" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_Offset" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_ContentPresenter" Property="HorizontalAlignment" Value="Center" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowAlignmentProperty}" ValueSource="TemplatedParent" Value="Left">
                <dxi:RenderSetter TargetName="PART_GlyphAndContent" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_GlyphAndContentBorder" Property="Placement" Value="Right" />
                <dxi:RenderSetter TargetName="PART_SeparatorBorder" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_Arrow" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_ArrowBorder" Property="Placement" Value="Left" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowAlignmentProperty}" ValueSource="TemplatedParent" Value="Right">
                <dxi:RenderSetter TargetName="PART_GlyphAndContent" Property="Dock" Value="Left" />
                <dxi:RenderSetter TargetName="PART_GlyphAndContentBorder" Property="Placement" Value="Left" />
                <dxi:RenderSetter TargetName="PART_SeparatorBorder" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_Arrow" Property="Dock" Value="Right" />
                <dxi:RenderSetter TargetName="PART_ArrowBorder" Property="Placement" Value="Right" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowAlignmentProperty}" ValueSource="TemplatedParent" Value="Top">
                <dxi:RenderSetter TargetName="PART_GlyphAndContent" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_GlyphAndContentBorder" Property="Placement" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_SeparatorBorder" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_Arrow" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_ArrowBorder" Property="Placement" Value="Top" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:DropDownButtonBase.ArrowAlignmentProperty}" ValueSource="TemplatedParent" Value="Bottom">
                <dxi:RenderSetter TargetName="PART_GlyphAndContent" Property="Dock" Value="Top" />
                <dxi:RenderSetter TargetName="PART_GlyphAndContentBorder" Property="Placement" Value="Top" />
                <dxi:RenderSetter TargetName="PART_SeparatorBorder" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_Arrow" Property="Dock" Value="Bottom" />
                <dxi:RenderSetter TargetName="PART_ArrowBorder" Property="Placement" Value="Bottom" />
            </dxi:RenderTrigger>
            <dxi:RenderBinding
                Converter="{dx:BooleanToVisibilityConverter Invert=True}"
                ConverterParamenter="HiddenOnFalse"
                DependencyProperty="{x:Static dx:SimpleButton.IsAsyncOperationInProgressProperty}"
                TargetProperty="Visibility"
                ValueSource="TemplatedParent"
                TargetName="PART_ContentPresenter" />
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DropDownButton.SplitButtonTemplate}" TargetType="{x:Type ButtonBase}">
        <dxi:DropDownButtonChrome x:Name="PART_Owner" RenderTemplate="{StaticResource {dxt:LWKey DropDownButton.RenderSplitButtonTemplate}}" />
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Owner" Property="Opacity" Value="{StaticResource {dxt:LWKey DropDownButton.ButtonOpacity}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="{dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonForegroundNormalState}" Color="{dx:LWColor 'VS2019Blue=Color.Window.Background, VS2019Dark=Color.Foreground, VS2019Light=Color.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonForegroundMouseOverState}" Color="{dx:LWColor 'VS2019Blue=Color.HoverForeground, VS2019Dark=Color.Foreground, VS2019Light=Color.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonForegroundPressedState}" Color="{dx:LWColor 'VS2019Blue=Color.SelectionForeground, VS2019Dark=Color.Foreground, VS2019Light=Color.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey RibbonHeaderItems.RibbonCloseButtonForegroundNormalState}" Color="{dx:LWColor 'VS2019Blue=Color.Window.Background, VS2019Dark=Color.Foreground, VS2019Light=Color.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey RibbonHeaderItems.RibbonCloseButtonForegroundMouseOverState}" Color="{dx:LWColor 'VS2019Blue=Color.HoverForeground, VS2019Dark=Color.Foreground, VS2019Light=Color.Window.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey RibbonHeaderItems.RibbonCloseButtonForegroundPressedState}" Color="{dx:LWColor 'VS2019Blue=Color.SelectionForeground, VS2019Dark=Color.Foreground, VS2019Light=Color.Window.Background'}" />
    <DataTemplate x:Key="{dxt:LWKey RibbonHeaderItems.RibbonCloseButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.Close}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey RibbonHeaderItems.RibbonRestoreButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.Restore}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey RibbonHeaderItems.RibbonMinimizeButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.Minimize}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey RibbonHeaderItems.RibbonMaximizeButtonGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.Maximize}" />
    </DataTemplate>
    <Style x:Key="{dxt:LWKey ThemedWindow.BackButtonStyle}" TargetType="{x:Type dx:ThemedWindowBackButton}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ThemedWindow.BackButtonTemplate}}" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Height" Value="26" />
        <Setter Property="Width" Value="34" />
        <Setter Property="dxi:WindowChrome.IsHitTestVisibleInChrome" Value="True" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey PopupBase.BorderTemplate}" TargetType="{x:Type dx:PopupBorderControl}">
        <Grid Name="Root">
            <dx:DXBorder Background="{StaticResource Brush.Editor.Background}" Margin="5">
                <dx:DXBorder.Effect>
                    <DropShadowEffect
                        x:Name="Shadow"
                        BlurRadius="4"
                        Direction="315"
                        Opacity="0.5"
                        ShadowDepth="3" />
                </dx:DXBorder.Effect>
            </dx:DXBorder>
            <dx:DXBorder
                Background="{dx:LWBrush 'VS2019Blue=Brush.Window.Background, VS2019Dark=Brush.Control.Background, VS2019Light=Brush.Control.Background'}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1"
                Height="{TemplateBinding ContentHeight}"
                Margin="0,0,5,5"
                MaxHeight="{TemplateBinding ContentMaxHeight}"
                MaxWidth="{TemplateBinding ContentMaxWidth}"
                MinHeight="{TemplateBinding ContentMinHeight}"
                MinWidth="{TemplateBinding ContentMinWidth}"
                Width="{TemplateBinding ContentWidth}">
                <ContentPresenter />
            </dx:DXBorder>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerCloseButtonBackgroundPressedState}">
        <dx:DXBorder x:Name="CloseButtonPressedState" Background="{StaticResource Brush.Window.HeaderButton.SelectionBackground}" />
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ActualRoundCorners, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dx:ThemedWindow}}, FallbackValue=False}" Value="true">
                <Setter Property="CornerRadius" TargetName="CloseButtonPressedState" Value="0,7,0,0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}" Value="Maximized">
                <Setter Property="CornerRadius" TargetName="CloseButtonPressedState" Value="0,0,0,0" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerCloseButtonBackgroundMouseOverState}">
        <dx:DXBorder x:Name="CloseButtonMouseOverState" Background="{StaticResource Brush.Window.HeaderButton.HoverBackground}" />
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ActualRoundCorners, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dx:ThemedWindow}}, FallbackValue=False}" Value="true">
                <Setter Property="CornerRadius" TargetName="CloseButtonMouseOverState" Value="0,7,0,0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}" Value="Maximized">
                <Setter Property="CornerRadius" TargetName="CloseButtonMouseOverState" Value="0,0,0,0" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>