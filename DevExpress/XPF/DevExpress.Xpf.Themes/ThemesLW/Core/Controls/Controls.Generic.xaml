<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:data="clr-namespace:DevExpress.Xpf.Core;assembly=DevExpress.Data.Desktop.v24.1"
    xmlns:dx="clr-namespace:DevExpress.Xpf.Core;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxb="clr-namespace:DevExpress.Xpf.Bars;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxcf="clr-namespace:DevExpress.Xpf.Core.ConditionalFormatting;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxcfi="clr-namespace:DevExpress.Xpf.Core.ConditionalFormatting.Native;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxcft="clr-namespace:DevExpress.Xpf.Core.ConditionalFormatting.Themes;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxe="clr-namespace:DevExpress.Xpf.Editors;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxec="clr-namespace:DevExpress.Xpf.Editors.Controls;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxeh="clr-namespace:DevExpress.Xpf.Editors.Helpers;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxet="clr-namespace:DevExpress.Xpf.Editors.Themes;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxev="clr-namespace:DevExpress.Xpf.Editors.Validation;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxi="clr-namespace:DevExpress.Xpf.Core.Native;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxmvvm="clr-namespace:DevExpress.Mvvm.UI;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxt="clr-namespace:DevExpress.Xpf.Utils.Themes;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxwf="clr-namespace:DevExpress.Xpf.Core.WizardFramework;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:native="http://schemas.devexpress.com/winfx/2008/xaml/bars/internal">

    <SolidColorBrush x:Key="BaseBrushBlack" Color="Black" />
    <Visibility x:Key="Visible">Visible</Visibility>
    <Visibility x:Key="Collapsed">Collapsed</Visibility>
    <dxi:ButtonAsyncIndicationSizeConverter x:Key="buttonAsyncIndicationSizeConverter" />
    <Color
        x:Key="nearbyTransparentColor"
        A="1"
        B="0"
        G="0"
        R="0" />
    <CornerRadius x:Key="win11CornerRadius">7</CornerRadius>
    <CornerRadius x:Key="win11HeaderCornerRadius">7,7,0,0</CornerRadius>
    <CornerRadius x:Key="win11ContentCornerRadius">7</CornerRadius>
    <CornerRadius x:Key="win11ContentCornerRadiusPartial">0,0,7,7</CornerRadius>
    <CornerRadius x:Key="win11ToolWindowCornerRadius">4</CornerRadius>
    <CornerRadius x:Key="win11ToolWindowHeaderCornerRadius">4,4,0,0</CornerRadius>
    <CornerRadius x:Key="win11ToolWindowContentCornerRadius">4</CornerRadius>
    <ItemsPanelTemplate x:Key="headerItemsControlPanelTemplate">
        <StackPanel x:Name="PART_ToolbarPanel" VerticalAlignment="Stretch" Orientation="Horizontal" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="dialogButtonsControlPanelTemplate">
        <Grid x:Name="PART_DialogButtonsGrid" Margin="12" />
    </ItemsPanelTemplate>
    <dxmvvm:NumericToVisibilityConverter x:Key="NumericToVisibilityConverter" />
    <Label x:Key="DefaultDXDialogContent" />
    <SolidColorBrush x:Key="BaseBrush#FFFFFFFF" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="BaseBrush#FF4A71AD" Color="#FF4A71AD" />
    <SolidColorBrush x:Key="BaseBrush#00FFFFFF" Color="#00FFFFFF" />
    <SolidColorBrush x:Key="BaseBrush#FF000000" Color="#FF000000" />
    <SolidColorBrush x:Key="BaseBrushTransparent" Color="Transparent" />
    <dx:BoolToVisibilityConverter x:Key="boolToVisibilityConverter" />
    <dx:GroupNameToCaptionConverter x:Key="GroupNameToCaptionConverter" />
    <dx:NullDisplayFormatToTextConverter x:Key="NullDisplayFormatToTextConverter" />

    <!--#region Themes\Generic\Badges.xaml-->
    <!--#endregion Themes\Generic\Badges.xaml-->

    <!--#region Themes\Generic\Buttons.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey Button.AsyncButtonCancelTemplate}" TargetType="{x:Type Button}">
        <dx:DXImage
            Width="{Binding ActualWidth, ElementName=PART_LoadingIndicator}"
            Height="{Binding ActualHeight, ElementName=PART_LoadingIndicator}"
            Source="{dx:SvgImageSource Uri={dx:UtilsResource Core/Images/Cancel.svg}}"
            Stretch="Uniform" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Button.AsyncButtonRetryTemplate}" TargetType="{x:Type Button}">
        <dx:DXImage
            Width="{Binding ActualWidth, ElementName=PART_LoadingIndicator}"
            Height="{Binding ActualHeight, ElementName=PART_LoadingIndicator}"
            Source="{dx:SvgImageSource Uri={dx:UtilsResource Core/Images/Reload.svg}}"
            Stretch="Uniform" />
    </ControlTemplate>
    <!--#endregion Themes\Generic\Buttons.xaml-->

    <!--#region Themes\Generic\ConditionalFormatting.xaml-->
    <Style x:Key="ConditionalFormattingDialogStyle" TargetType="{x:Type dx:ThemedWindow}">
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="WindowStyle" Value="ToolWindow" />
        <Setter Property="ShowIcon" Value="False" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <DataTemplate x:Key="{dxt:LWKey ConditionalFormatting.ApplyFormatConditionDialogTemplate}">
        <ContentControl>
            <dx:DialogService DialogStyle="{StaticResource ConditionalFormattingDialogStyle}" DialogWindowStartupLocation="CenterOwner">
                <dx:DialogService.ViewTemplate>
                    <DataTemplate>
                        <dxcf:ConditionalFormattingDialogView />
                    </DataTemplate>
                </dx:DialogService.ViewTemplate>
            </dx:DialogService>
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey ConditionalFormatting.ConditionalFormattingManagerTemplate}">
        <ContentControl>
            <dx:DialogService DialogStyle="{StaticResource ConditionalFormattingDialogStyle}" DialogWindowStartupLocation="CenterOwner">
                <dx:DialogService.ViewTemplate>
                    <DataTemplate>
                        <dxcf:ConditionalFormattingManagerView />
                    </DataTemplate>
                </dx:DialogService.ViewTemplate>
            </dx:DialogService>
        </ContentControl>
    </DataTemplate>

    <Style x:Key="{dxt:LWKey Format.GalleryStyle}" TargetType="dxb:Gallery">
        <Setter Property="GroupsSource" Value="{Binding FormatConditionGroups}" />
        <Setter Property="AllowFilter" Value="False" />
        <Setter Property="GroupTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl>
                        <dxb:GalleryItemGroup Caption="{Binding Header, Mode=OneTime}" ItemsSource="{Binding Items, Mode=OneTime}">
                            <dxb:GalleryItemGroup.ItemTemplate>
                                <DataTemplate>
                                    <ContentControl>
                                        <dxb:GalleryItem
                                            dxcfi:SuperTipHelper.SuperTipContent="{Binding Description, Mode=OneTime}"
                                            dxcfi:SuperTipHelper.SuperTipHeader="{Binding Name, Mode=OneTime}"
                                            Caption="{Binding Icons, Mode=OneTime}"
                                            Command="{Binding Command, Mode=OneTime}"
                                            CommandParameter="{Binding FormatCondition, Mode=OneTime}" />
                                    </ContentControl>
                                </DataTemplate>
                            </dxb:GalleryItemGroup.ItemTemplate>
                        </dxb:GalleryItemGroup>
                    </ContentControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemCaptionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl ItemsSource="{Binding Mode=OneTime}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Margin="0,0,-6,0" Orientation="Horizontal" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Image Margin="0,0,6,0" Source="{Binding Mode=OneTime}" Stretch="None" />
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate x:Key="{dxt:LWKey ConditionalFormatting.ColorScaleMenuItemContent}">
        <dxb:GalleryControl BorderBrush="Transparent">
            <dxb:GalleryControl.Gallery>
                <dxb:Gallery ColCount="4" IsGroupCaptionVisible="False" Style="{StaticResource {dxt:LWKey Format.GalleryStyle}}" />
            </dxb:GalleryControl.Gallery>
        </dxb:GalleryControl>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey ConditionalFormatting.DataBarMenuItemContent}">
        <dxb:GalleryControl BorderBrush="Transparent">
            <dxb:GalleryControl.Gallery>
                <dxb:Gallery ColCount="3" Style="{StaticResource {dxt:LWKey Format.GalleryStyle}}" />
            </dxb:GalleryControl.Gallery>
        </dxb:GalleryControl>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey ConditionalFormatting.IconSetMenuItemContent}">
        <dxb:GalleryControl BorderBrush="Transparent">
            <dxb:GalleryControl.Gallery>
                <dxb:Gallery ColCount="2" Style="{StaticResource {dxt:LWKey Format.GalleryStyle}}" />
            </dxb:GalleryControl.Gallery>
        </dxb:GalleryControl>
    </DataTemplate>

    <sys:Decimal x:Key="{dxt:LWKey ConditionalFormatting.MaxHoldDuration}">10000</sys:Decimal>
    <!--#endregion Themes\Generic\ConditionalFormatting.xaml-->

    <!--#region Themes\Generic\CustomTemplates.xaml-->

    <!-- richTextBox -->
    <!--#endregion Themes\Generic\CustomTemplates.xaml-->

    <!--#region Themes\Generic\DragDrop.xaml-->
    <DataTemplate x:Key="{dxt:LWKey DragDrop.DropMarker}">
        <dx:DropMarker Padding="{Binding Padding}" Orientation="{Binding Orientation}" Position="{Binding Position}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey DragDrop.DragDropHintDetail}">
        <TextBlock Text="{Binding}" TextTrimming="WordEllipsis" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey DragDrop.DragHintTargetInfo}">
        <ContentPresenter Content="{Binding}">
            <ContentPresenter.Style>
                <Style TargetType="ContentPresenter">
                    <Style.Setters>
                        <Setter Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <StackPanel>
                                        <TextBlock
                                            FontSize="{DynamicResource {dxt:LWKey DragDrop.DragHintCaptionFontSize}}"
                                            FontWeight="{DynamicResource {dxt:LWKey DragDrop.DragHintCaptionFontWeight}}"
                                            Foreground="{DynamicResource {dxt:LWKey DragDrop.DragHintCaptionForeground}}"
                                            Text="{Binding Path=DropPosition, Converter={dx:DropPositionConverter}}" />
                                        <ContentPresenter Margin="0,3,0,0" Content="{Binding TargetRecord}" ContentTemplate="{DynamicResource {dxt:LWKey DragDrop.DragDropHintDetail}}">
                                            <ContentPresenter.Style>
                                                <Style TargetType="ContentPresenter">
                                                    <Style.Setters>
                                                        <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxt:LWKey DragDrop.DragHintDescriptionForeground}}" />
                                                    </Style.Setters>
                                                    <Style.Triggers>
                                                        <Trigger Property="Content" Value="{x:Null}">
                                                            <Trigger.Setters>
                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                            </Trigger.Setters>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ContentPresenter.Style>
                                        </ContentPresenter>
                                    </StackPanel>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style.Setters>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Effects}" Value="None">
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock FontSize="{DynamicResource {dxt:LWKey DragDrop.DragHintCaptionFontSize}}" FontWeight="{DynamicResource {dxt:LWKey DragDrop.DragHintCaptionFontWeight}}" Foreground="{DynamicResource {dxt:LWKey DragDrop.DragHintCaptionForeground}}">
                                            <TextBlock.Text>
                                                <Binding ConverterParameter="DragDropCannotDrop" RelativeSource="{RelativeSource Self}">
                                                    <Binding.Converter>
                                                        <dx:EditorStringIdConverter />
                                                    </Binding.Converter>
                                                </Binding>
                                            </TextBlock.Text>
                                        </TextBlock>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ContentPresenter.Style>
        </ContentPresenter>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey DragDrop.DragDropHint}">
        <dx:DXBorder
            MinWidth="200"
            MaxWidth="300"
            Padding="12,8,24,10"
            Background="{DynamicResource {dxt:LWKey DragDrop.DragHintBackground}}"
            BorderBrush="{DynamicResource {dxt:LWKey DragDrop.DragHintBorderBrush}}"
            BorderThickness="1"
            CornerRadius="{DynamicResource {dxt:LWKey DragDrop.DragHintCornerRadius}}">
            <StackPanel>
                <TextBlock
                    x:Name="dragHeader"
                    FontSize="{DynamicResource {dxt:LWKey DragDrop.DragHintCaptionFontSize}}"
                    FontWeight="{DynamicResource {dxt:LWKey DragDrop.DragHintCaptionFontWeight}}"
                    Foreground="{DynamicResource {dxt:LWKey DragDrop.DragHintCaptionForeground}}"
                    Text="{Binding Path=Records, Converter={dx:DragHeaderConverter}}" />
                <ContentPresenter
                    x:Name="dragDetail"
                    Margin="0,3,0,0"
                    Content="{Binding Path=Records, Converter={dx:DragDetailConverter}}"
                    ContentTemplate="{DynamicResource {dxt:LWKey DragDrop.DragDropHintDetail}}">
                    <ContentPresenter.Style>
                        <Style TargetType="ContentPresenter">
                            <Style.Setters>
                                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxt:LWKey DragDrop.DragHintDescriptionForeground}}" />
                            </Style.Setters>
                            <Style.Triggers>
                                <Trigger Property="Content" Value="{x:Null}">
                                    <Trigger.Setters>
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </Trigger.Setters>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ContentPresenter.Style>
                </ContentPresenter>
                <ContentPresenter Margin="0,8,0,0" Content="{Binding}" ContentTemplate="{DynamicResource {dxt:LWKey DragDrop.DragHintTargetInfo}}">
                    <ContentPresenter.Visibility>
                        <Binding Path="ShowTargetInfoInDragDropHint">
                            <Binding.Converter>
                                <dx:BooleanToVisibilityConverter />
                            </Binding.Converter>
                        </Binding>
                    </ContentPresenter.Visibility>
                </ContentPresenter>
            </StackPanel>
        </dx:DXBorder>
    </DataTemplate>
    <!--#endregion Themes\Generic\DragDrop.xaml-->

    <!--#region Themes\Generic\DragIconControl.xaml-->
    <!--#endregion Themes\Generic\DragIconControl.xaml-->

    <!--#region Themes\Generic\MessageBox.xaml-->
    <ControlTemplate x:Key="DXMessageBoxTemplate" TargetType="{x:Type dx:DXMessageBox}">
        <Grid MinWidth="350">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid Margin="24,16,24,22">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <dx:DXImage
                    x:Name="PART_MessageBoxImage"
                    Width="48"
                    Height="48"
                    Margin="-6,-1,4,-4"
                    VerticalAlignment="Top"
                    SnapsToDevicePixels="True"
                    Source="{TemplateBinding ImageSource}"
                    Stretch="UniformToFill" />
                <TextBlock
                    Grid.Column="1"
                    MaxWidth="{x:Static SystemParameters.MaximizedPrimaryScreenWidth}"
                    VerticalAlignment="Center"
                    Background="Transparent"
                    Focusable="False"
                    Foreground="{DynamicResource {dxt:LWKey ThemeColors.DXMessageBoxForegroundColor}}"
                    Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}}"
                    TextWrapping="Wrap" />
            </Grid>
            <Grid Grid.Row="1" Margin="12,0,12,12" HorizontalAlignment="Right">
                <Grid x:Name="okGrid" Visibility="Collapsed">
                    <Button
                        x:Name="PART_OkButton"
                        MinWidth="65"
                        Margin="6,0,0,0"
                        Content="{dx:DXMessageBoxStringId StringId=Ok}" />
                </Grid>
                <Grid x:Name="okCancelGrid" Visibility="Collapsed">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Button
                        x:Name="PART_OkButton1"
                        MinWidth="65"
                        Margin="6,0,0,0"
                        Content="{dx:DXMessageBoxStringId StringId=Ok}" />
                    <Button
                        x:Name="PART_CancelButton"
                        Grid.Column="1"
                        MinWidth="65"
                        Margin="6,0,0,0"
                        Content="{dx:DXMessageBoxStringId StringId=Cancel}" />
                </Grid>
                <Grid x:Name="yesNoGrid" Visibility="Collapsed">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Button
                        x:Name="PART_YesButton"
                        MinWidth="65"
                        Margin="6,0,0,0"
                        Content="{dx:DXMessageBoxStringId StringId=Yes}" />
                    <Button
                        x:Name="PART_NoButton"
                        Grid.Column="1"
                        MinWidth="65"
                        Margin="6,0,0,0"
                        Content="{dx:DXMessageBoxStringId StringId=No}" />
                </Grid>
                <Grid x:Name="yesNoCancelGrid" Visibility="Collapsed">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Button
                        x:Name="PART_YesButton1"
                        MinWidth="65"
                        Margin="6,0,0,0"
                        Content="{dx:DXMessageBoxStringId StringId=Yes}" />
                    <Button
                        x:Name="PART_NoButton1"
                        Grid.Column="1"
                        MinWidth="65"
                        Margin="6,0,0,0"
                        Content="{dx:DXMessageBoxStringId StringId=No}" />
                    <Button
                        x:Name="PART_CancelButton1"
                        Grid.Column="2"
                        MinWidth="65"
                        Margin="6,0,0,0"
                        Content="{dx:DXMessageBoxStringId StringId=Cancel}" />
                </Grid>
            </Grid>
            <!--<StackPanel Orientation="Horizontal"></StackPanel>
            <Button >Yes</Button>
            <Button>No</Button>
            <Button>Cancel</Button>-->

            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="group1">
                    <VisualState x:Name="OK">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="okGrid" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="OKCancel">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="okCancelGrid" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="YesNo">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="yesNoGrid" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>

                    <VisualState x:Name="YesNoCancel">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="yesNoCancelGrid" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <!--#endregion Themes\Generic\MessageBox.xaml-->

    <!--#region Themes\Generic\PseudoWindow.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerResizeFrame}" TargetType="{x:Type Control}">
        <Grid x:Name="FloatPaneBorders" Panel.ZIndex="2" Opacity="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="10" />
                <RowDefinition Height="*" />
                <RowDefinition Height="10" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="100" />
                <ColumnDefinition Width="10" />
            </Grid.ColumnDefinitions>
            <Path
                x:Name="Part_TopLeft"
                Grid.Row="0"
                Grid.Column="0"
                Width="15"
                Height="15"
                Margin="0"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Cursor="SizeNWSE"
                Data="F1 M 414,287L 410,287L 410,281L 410,277L 414,277L 420,277L 420,281L 414,281L 414,287 Z "
                Fill="black"
                Stretch="Fill" />
            <Path
                x:Name="Part_TopRight"
                Grid.Row="0"
                Grid.Column="3"
                Width="15"
                Height="15"
                Margin="0"
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                Cursor="SizeNESW"
                Data="F1 M 430,294L 430,290L 436,290L 440,290L 440,294L 440,300L 436,300L 436,294L 430,294 Z "
                Fill="black"
                Stretch="Fill" />
            <Path
                x:Name="Part_BottomRight"
                Grid.Row="2"
                Grid.Column="3"
                Width="15"
                Height="15"
                Margin="0"
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                Cursor="SizeNWSE"
                Data="F1 M 393,279L 397,279L 397,285L 397,289L 393,289L 387,289L 387,285L 393,285L 393,279 Z "
                Fill="black"
                Stretch="Fill" />
            <Path
                x:Name="Part_BottomLeft"
                Grid.Row="2"
                Grid.RowSpan="1"
                Grid.Column="0"
                Width="15"
                Height="15"
                Margin="0"
                HorizontalAlignment="Left"
                VerticalAlignment="Bottom"
                Cursor="SizeNESW"
                Data="F1 M 416,312L 416,316L 410,316L 406,316L 406,312L 406,306L 410,306L 410,312L 416,312 Z "
                Fill="black"
                Stretch="Fill" />
            <Rectangle
                x:Name="Part_Bottom"
                Grid.Row="2"
                Grid.Column="1"
                Grid.ColumnSpan="2"
                Width="Auto"
                Height="6"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Bottom"
                Cursor="SizeNS"
                Fill="black"
                Stretch="Fill" />
            <Rectangle
                x:Name="Part_Top"
                Grid.Row="0"
                Grid.Column="1"
                Grid.ColumnSpan="2"
                Width="Auto"
                Height="6"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Top"
                Cursor="SizeNS"
                Fill="black"
                Stretch="Fill" />
            <Rectangle
                x:Name="Part_Left"
                Grid.Row="1"
                Grid.Column="0"
                Width="6"
                Height="Auto"
                HorizontalAlignment="Left"
                VerticalAlignment="Stretch"
                Cursor="SizeWE"
                Fill="black"
                Stretch="Fill" />
            <Rectangle
                x:Name="Part_Right"
                Grid.Row="1"
                Grid.Column="3"
                Width="6"
                Height="Auto"
                HorizontalAlignment="Right"
                VerticalAlignment="Stretch"
                Cursor="SizeWE"
                Fill="black"
                Stretch="Fill" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter TargetName="Part_TopLeft" Property="Cursor" Value="SizeNESW" />
                <Setter TargetName="Part_TopRight" Property="Cursor" Value="SizeNWSE" />
                <Setter TargetName="Part_BottomLeft" Property="Cursor" Value="SizeNWSE" />
                <Setter TargetName="Part_BottomRight" Property="Cursor" Value="SizeNESW" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--#endregion Themes\Generic\PseudoWindow.xaml-->

    <!--#region Themes\Generic\SearchPanel.xaml-->
    <!-- SearchPanel -->
    <!--#endregion Themes\Generic\SearchPanel.xaml-->

    <!--#region Themes\Generic\SuperTip.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey SuperTip.ItemTemplate}" TargetType="{x:Type dx:SuperTipItemControl}">
        <dx:Items2Panel Style="{TemplateBinding ActualLayoutStyle}">
            <dx:Items2Panel.Content1>
                <dx:PixelSnapper>
                    <Image x:Name="PART_Glyph" Source="{Binding Path=Item.Glyph, RelativeSource={RelativeSource TemplatedParent}}" />
                </dx:PixelSnapper>
            </dx:Items2Panel.Content1>
            <dx:Items2Panel.Content2>
                <ContentControl
                    x:Name="PART_Content"
                    Content="{Binding Path=Item.Content, RelativeSource={RelativeSource TemplatedParent}}"
                    ContentTemplate="{TemplateBinding ActualContentTemplate}"
                    Foreground="{TemplateBinding Foreground}"
                    Style="{TemplateBinding ContentStyle}" />
            </dx:Items2Panel.Content2>
        </dx:Items2Panel>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey SuperTip.SeparatorTemplate}" TargetType="dx:SuperTipItemControlSeparator">
        <Grid>
            <ContentControl ContentTemplate="{TemplateBinding ActualContentTemplate}" Style="{TemplateBinding ContentStyle}" />
        </Grid>
    </ControlTemplate>

    <ItemsPanelTemplate x:Key="{dxt:LWKey SuperTip.PanelTemplate}">
        <dx:SuperTipPanel />
    </ItemsPanelTemplate>
    <!--#endregion Themes\Generic\SuperTip.xaml-->

    <!--#region Themes\Generic\ThemedBorder.xaml-->
    <!--#endregion Themes\Generic\ThemedBorder.xaml-->

    <!--#region Themes\Generic\ThemedWindow.xaml-->
    <SolidColorBrush x:Key="{dxt:LWKey AcrylicThemedWindow.WindowActiveBackground}" Color="{StaticResource nearbyTransparentColor}" />
    <SolidColorBrush x:Key="{dxt:LWKey AcrylicThemedWindow.WindowInactiveBackground}" Color="{StaticResource nearbyTransparentColor}" />
    <SolidColorBrush x:Key="{dxt:LWKey AcrylicThemedWindow.WindowActiveContentBackground}" Color="{StaticResource nearbyTransparentColor}" />
    <SolidColorBrush x:Key="{dxt:LWKey AcrylicThemedWindow.WindowInactiveContentBackground}" Color="{StaticResource nearbyTransparentColor}" />
    <SolidColorBrush x:Key="{dxt:LWKey AcrylicThemedWindow.WindowActiveContentBorderBrush}" Color="{StaticResource nearbyTransparentColor}" />
    <SolidColorBrush x:Key="{dxt:LWKey AcrylicThemedWindow.WindowInactiveContentBorderBrush}" Color="{StaticResource nearbyTransparentColor}" />
    <SolidColorBrush x:Key="transparentHeaderBackground" Color="{StaticResource nearbyTransparentColor}" />
    <Thickness x:Key="{dxt:LWKey AcrylicThemedWindow.WindowContentBorderThickness}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey AcrylicThemedWindow.WindowNormalPadding}">0</Thickness>
    <Style x:Key="dialogFooterBorderStyle" TargetType="{x:Type dx:ThemedWindowBorder}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ShowDialogFooter, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="messageBoxImageStyle" TargetType="{x:Type dx:DXImage}">
        <Setter Property="Width" Value="48" />
        <Setter Property="Height" Value="48" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="DockPanel.Dock" Value="Left" />
        <Setter Property="Source" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Image), RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="messageBoxContentPresenterStyle" TargetType="{x:Type ContentPresenter}">
        <Setter Property="Margin" Value="12,0,0,0" />
    </Style>
    <Style x:Key="messageBoxTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Text" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Text), RelativeSource={RelativeSource Self}}" />
        <Setter Property="TextAlignment" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.TextAlignment), RelativeSource={RelativeSource Self}}" />
        <Setter Property="TextTrimming" Value="WordEllipsis" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Margin" Value="12,0,0,0" />
        <Setter Property="Padding" Value="2,2,4,2" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="messageBoxTextSelectionSupportStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Text" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Text), RelativeSource={RelativeSource Self}}" />
        <Setter Property="TextAlignment" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.TextAlignment), RelativeSource={RelativeSource Self}}" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Margin" Value="12,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Padding" Value="0,2,0,2" />
        <Setter Property="Foreground" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Foreground), RelativeSource={RelativeSource Self}}" />
    </Style>
    <ControlTemplate x:Key="themedWindowIconTemplate" TargetType="{x:Type dx:ThemedWindowIcon}">
        <dx:DXImage x:Name="PART_Image">
            <dx:DXImage.Source>
                <MultiBinding Converter="{dx:WindowIconConverter}">
                    <Binding Path="Icon" RelativeSource="{RelativeSource AncestorType={x:Type dx:ThemedWindow}}" />
                    <Binding Path="TemplatedParent" RelativeSource="{RelativeSource Mode=Self}" />
                </MultiBinding>
            </dx:DXImage.Source>
        </dx:DXImage>
    </ControlTemplate>
    <ControlTemplate x:Key="themedWindowHeaderTabbedTemplate" TargetType="{x:Type dx:ThemedWindowHeader}">
        <dx:DXBorder
            x:Name="PART_HeaderRoot"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            CornerRadius="{TemplateBinding CornerRadius}"
            Opacity="{TemplateBinding Opacity}">
            <DockPanel x:Name="PART_HeaderDock" LastChildFill="True">
                <dx:ThemedWindowIcon x:Name="PART_WindowIcon" DockPanel.Dock="Left" />
                <dx:ThemedWindowControlBoxBorder x:Name="PART_HeaderItemsAndButtons" DockPanel.Dock="Right" />
                <dx:ThemedWindowTitle x:Name="PART_WindowTitle" />
                <dx:ThemedWindowHiddenBorder x:Name="PART_TabControlHeaderHiddenBorder" DockPanel.Dock="Right" />
            </DockPanel>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowIcon), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_WindowIcon" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowTitle), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_WindowTitle" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="dialogButtonsControlGroupContainerTemplate">
        <StackPanel x:Name="PART_GroupItemStack">
            <ItemsPresenter />
        </StackPanel>
    </ControlTemplate>
    <DataTemplate x:Key="messageBoxContentTemplate">
        <dx:ThemedMessageBoxContent x:Name="PART_MessageBoxContent" />
    </DataTemplate>

    <!-- SizeGripStyle -->
    <Style x:Key="sizeGripStyle" TargetType="{x:Type dx:ThemedWindowSizeGrip}">
        <Setter Property="Cursor" Value="SizeNWSE" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerSizeGripTemplate}}" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Margin" Value="{Binding Path=Padding, RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ResizeMode}" Value="CanResizeWithGrip">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- ContentBackgroundBorderStyle -->
    <Style x:Key="contentBackgroundBorderStyle" TargetType="{x:Type dx:ThemedWindowContentBorder}">
        <Setter Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" />

        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowActiveContentBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowContentBorderThickness}}" />
        <Setter Property="Margin" Value="{Binding Path=Padding, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="IsHitTestVisible" Value="{Binding Path=(dxi:ThemedWindowsHelper.ActualHitTestVisible), RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveContentBorderBrush}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveContentBorderBrush}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11ContentCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowOptions.RoundOnlyBottomContentCorners), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11ContentCornerRadiusPartial}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource TemplatedParent}}" Value="ToolWindow" />
                    <Condition Binding="{Binding Path=(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowContentCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!-- AcrylicTriggers -->
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.WindowActiveContentBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.WindowActiveContentBorderBrush}}" />
                <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.WindowContentBorderThickness}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.WindowInactiveContentBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.WindowInactiveContentBorderBrush}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.WindowInactiveContentBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.WindowInactiveContentBorderBrush}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SizeToContent}" Value="WidthAndHeight" />
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsMessageBox), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="HorizontalAlignment" Value="Center" />
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SizeToContent}" Value="WidthAndHeight">
                <Setter Property="MinWidth">
                    <Setter.Value>
                        <MultiBinding Converter="{dx:ContentBorderMinWidthConverter}">
                            <Binding Path="MinWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWindowKind}" Value="Ribbon">
                <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowRibbonContentBorderThickness}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWindowKind}" Value="Tabbed">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- WindowBorderStyle -->
    <Style x:Key="windowBorderStyle" TargetType="{x:Type dx:ThemedWindowBorder}">
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowActiveBackground}}" />
        <Setter Property="BorderBrush" Value="{Binding Path=BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveBackground}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveBackground}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11CornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource TemplatedParent}}" Value="ToolWindow" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!-- AcrylicTriggers -->
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.WindowActiveBackground}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.WindowInactiveBackground}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.WindowInactiveBackground}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <!-- StatusPanelStyle -->
    <Style x:Key="statusPanelStyle" TargetType="{x:Type dx:ThemedWindowBorder}">
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="DockPanel.Dock" Value="Bottom" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowActiveBackground}}" />
    </Style>
    <!-- WindowTitleTextBlockStyle -->
    <Style x:Key="windowTitleTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Tag" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowIconMargin}}" />
        <Setter Property="FontSize" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowTitleFontSize}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowTitleFontWeight}}" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!-- HeaderItemsControlStyle -->
    <Style x:Key="headerItemsControlStyle" TargetType="{x:Type dx:ThemedWindowHeaderItemsControlBase}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="dxi:WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Margin" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowToolbarMargin}}" />
        <Setter Property="ItemsPanel" Value="{StaticResource headerItemsControlPanelTemplate}" />
    </Style>

    <!-- BackButtonTemplate -->
    <ControlTemplate x:Key="{dxt:LWKey ThemedWindow.BackButtonTemplate}" TargetType="{x:Type dx:ThemedWindowBackButton}">
        <Grid>
            <Control x:Name="PART_Background" Focusable="False" Template="{DynamicResource {dxt:LWKey ThemedWindow.BackButtonBackgroundNormalState}}" />
            <dx:DXBorder x:Name="MarginBorder" Margin="4,0" Background="Transparent">
                <ContentPresenter
                    x:Name="PART_ContentPresenter"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    ContentTemplate="{DynamicResource {dxt:LWKey ThemedWindow.BackButtonBackgroundGlyph}}"
                    Focusable="False"
                    RecognizesAccessKey="True" />
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_Background" Property="Template" Value="{DynamicResource {dxt:LWKey ThemedWindow.BackButtonBackgroundMouseoverState}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey ThemedWindow.BackButtonForegroundMouseoverState}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="PART_Background" Property="Template" Value="{DynamicResource {dxt:LWKey ThemedWindow.BackButtonBackgroundPressedState}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey ThemedWindow.BackButtonForegroundPressedState}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey ThemedWindow.BackButtonForegroundNormalState}}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- ThemedWindowTitleTemplate -->
    <ControlTemplate x:Key="themedWindowTitleTemplate" TargetType="{x:Type dx:ThemedWindowTitle}">
        <TextBlock x:Name="PART_TitleText" Style="{StaticResource windowTitleTextBlockStyle}" Text="{TemplateBinding Content}" />
    </ControlTemplate>
    <!-- ThemedWindowControlBoxTemplate -->
    <ControlTemplate x:Key="themedWindowControlBoxTemplate" TargetType="{x:Type dx:ThemedWindowControlBoxBorder}">
        <dx:DXBorder
            x:Name="PART_ControlBoxRootBorder"
            dxi:WindowChrome.IsHitTestVisibleInChrome="True"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid x:Name="PART_ControlBoxGrid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <!-- HeaderItems -->
                <dx:ThemedWindowHeaderItemsControl x:Name="PART_HeaderItems" Grid.Column="0" Style="{StaticResource headerItemsControlStyle}" />
                <ContentControl x:Name="PART_SearchItem" Grid.Column="1" Visibility="Collapsed" />
                <!-- Buttons -->
                <DockPanel x:Name="PART_Buttons" Grid.Column="2" dxev:MouseEventLockHelper.IsEnabled="false">
                    <!-- Minimize -->
                    <dx:HeaderItemControl
                        x:Name="PART_Minimize"
                        AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}"
                        Command="{x:Static dxi:WindowSystemCommands.MinimizeWindowCommand}"
                        Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self}}"
                        TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}"
                        ToolTip="{dxe:EditorStringId ThemedWindow_Minimize}"
                        ToolTipService.InitialShowDelay="1000">
                        <dx:HeaderItemControl.Visibility>
                            <Binding Converter="{dx:WindowControlBoxButtonsToVisibilityConverter}" Path="(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}">
                                <Binding.ConverterParameter>
                                    <dx:ControlBoxButtons>Minimize</dx:ControlBoxButtons>
                                </Binding.ConverterParameter>
                            </Binding>
                        </dx:HeaderItemControl.Visibility>
                    </dx:HeaderItemControl>
                    <dx:HeaderItemControl
                        x:Name="PART_MinimizeRestore"
                        AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}"
                        Command="{x:Static dxi:WindowSystemCommands.RestoreWindowCommand}"
                        Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self}}"
                        TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}"
                        ToolTip="{dxe:EditorStringId ThemedWindow_Restore}"
                        ToolTipService.InitialShowDelay="1000">
                        <dx:HeaderItemControl.Visibility>
                            <MultiBinding Converter="{dx:WindowControlBoxButtonsToVisibilityMultiValuesConverter}">
                                <Binding Path="(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}" />
                                <Binding ElementName="PART_Minimize" Path="Visibility" />
                                <MultiBinding.ConverterParameter>
                                    <dx:ControlBoxButtons>Restore</dx:ControlBoxButtons>
                                </MultiBinding.ConverterParameter>
                            </MultiBinding>
                        </dx:HeaderItemControl.Visibility>
                    </dx:HeaderItemControl>
                    <!-- Restore -->
                    <dx:HeaderItemControl
                        x:Name="PART_Restore"
                        dx:WindowChromeHelper.IsSnapLayoutsElement="True"
                        AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}"
                        Command="{x:Static dxi:WindowSystemCommands.RestoreWindowCommand}"
                        Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self}}"
                        TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}"
                        ToolTip="{dxe:EditorStringId ThemedWindow_Restore}"
                        ToolTipService.InitialShowDelay="1000">
                        <dx:HeaderItemControl.Visibility>
                            <MultiBinding Converter="{dx:WindowControlBoxButtonsToVisibilityMultiValuesConverter}">
                                <Binding Path="(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}" />
                                <Binding ElementName="PART_Maximize" Path="Visibility" />
                                <MultiBinding.ConverterParameter>
                                    <dx:ControlBoxButtons>MaximizeRestore</dx:ControlBoxButtons>
                                </MultiBinding.ConverterParameter>
                            </MultiBinding>
                        </dx:HeaderItemControl.Visibility>
                    </dx:HeaderItemControl>
                    <!-- Maximize -->
                    <dx:HeaderItemControl
                        x:Name="PART_Maximize"
                        dx:WindowChromeHelper.IsSnapLayoutsElement="True"
                        AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}"
                        Command="{x:Static dxi:WindowSystemCommands.MaximizeWindowCommand}"
                        Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self}}"
                        TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}"
                        ToolTip="{dxe:EditorStringId ThemedWindow_Maximize}"
                        ToolTipService.InitialShowDelay="1000">
                        <dx:HeaderItemControl.Visibility>
                            <Binding Converter="{dx:WindowControlBoxButtonsToVisibilityConverter}" Path="(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}">
                                <Binding.ConverterParameter>
                                    <dx:ControlBoxButtons>MaximizeRestore</dx:ControlBoxButtons>
                                </Binding.ConverterParameter>
                            </Binding>
                        </dx:HeaderItemControl.Visibility>
                    </dx:HeaderItemControl>
                    <!-- Close -->
                    <dx:HeaderItemControl
                        x:Name="PART_CloseButton"
                        AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}"
                        Command="{x:Static dxi:WindowSystemCommands.CloseWindowCommand}"
                        Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self}}"
                        TemplateProvider="{Binding Path=(dx:HeaderItemControl.CloseTemplateProvider), RelativeSource={RelativeSource Self}}"
                        ToolTip="{dxe:EditorStringId ThemedWindow_Close}"
                        ToolTipService.InitialShowDelay="1000">
                        <dx:HeaderItemControl.Visibility>
                            <Binding Converter="{dx:WindowControlBoxButtonsToVisibilityConverter}" Path="(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}">
                                <Binding.ConverterParameter>
                                    <dx:ControlBoxButtons>Close</dx:ControlBoxButtons>
                                </Binding.ConverterParameter>
                            </Binding>
                        </dx:HeaderItemControl.Visibility>
                    </dx:HeaderItemControl>
                </DockPanel>
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowButtonHelper.IsYesNoDialog), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="PART_CloseButton" Property="IsEnabled" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ResizeMode), RelativeSource={RelativeSource Self}}" Value="CanMinimize">
                <Setter TargetName="PART_Maximize" Property="IsEnabled" Value="False" />
                <Setter TargetName="PART_Restore" Property="IsEnabled" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" Value="Maximized">
                <Setter TargetName="PART_Maximize" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.SearchItemDisplayMode), RelativeSource={RelativeSource Self}}" Value="Right">
                <Setter TargetName="PART_SearchItem" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PART_SearchItem" Property="ContentTemplate"
                        Value="{Binding Path=(dxi:ThemedWindowsHelper.SearchItemTemplate), RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- ThemedWindowHeaderTemplate -->
    <ControlTemplate x:Key="themedWindowHeaderTemplate" TargetType="{x:Type dx:ThemedWindowHeader}">
        <dx:DXBorder
            x:Name="PART_HeaderRoot"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            CornerRadius="{TemplateBinding CornerRadius}"
            Opacity="{TemplateBinding Opacity}">
            <DockPanel x:Name="PART_HeaderDock" LastChildFill="True">
                <dx:ThemedWindowIcon x:Name="PART_WindowIcon" DockPanel.Dock="Left" />
                <dx:ThemedWindowBackButton
                    x:Name="PART_WindowBackButton"
                    DockPanel.Dock="Left"
                    Style="{DynamicResource {dxt:LWKey ThemedWindow.BackButtonStyle}}"
                    UseLayoutRounding="True" />
                <dx:ThemedWindowControlBoxBorder x:Name="PART_HeaderItemsAndButtons" DockPanel.Dock="Right" UseLayoutRounding="True" />
                <dx:ThemedWindowToolbarItemsControl x:Name="PART_ToolbarItems" DockPanel.Dock="Left" Style="{StaticResource headerItemsControlStyle}" />
                <dx:ThemedWindowTitle x:Name="PART_WindowTitle" />
            </DockPanel>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowIcon), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_WindowIcon" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowBackButton), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="PART_WindowBackButton" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowTitle), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_WindowTitle" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}" Value="Ribbon" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.IsRibbonControlAsContent), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.RibbonHeaderVisibility), RelativeSource={RelativeSource Self}}" Value="Visible" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.RibbonControlVisibility), RelativeSource={RelativeSource Self}}" Value="Visible" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_WindowTitle" Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_WindowIcon" Property="Opacity" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveHeaderOpacity}}" />
                    <Setter TargetName="PART_WindowTitle" Property="Opacity" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveHeaderOpacity}}" />
                    <Setter TargetName="PART_HeaderItemsAndButtons" Property="Opacity" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveHeaderOpacity}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_WindowIcon" Property="Opacity" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveHeaderOpacity}}" />
                <Setter TargetName="PART_WindowTitle" Property="Opacity" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveHeaderOpacity}}" />
                <Setter TargetName="PART_HeaderItemsAndButtons" Property="Opacity" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveHeaderOpacity}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.UseInactiveAppearanceForWholeHeader), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_ToolbarItems" Property="Opacity" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveHeaderOpacity}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.UseInactiveAppearanceForWholeHeader), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_ToolbarItems" Property="Opacity" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveHeaderOpacity}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- ThemedWindowTemplate -->
    <Style x:Key="windowClipBorderStyle" TargetType="{x:Type dx:ThemedWindowContentBorder}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True" Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Condition Value="Normal" Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Condition Value="False" Binding="{Binding Path=(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11CornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True" Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Condition Value="Normal" Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Condition Value="ToolWindow" Binding="{Binding Path=(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource TemplatedParent}}" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="themedWindowTemplate" TargetType="{x:Type dx:ThemedWindow}">
        <dx:ThemedWindowRoot x:Name="PART_WindowRoot">
            <Rectangle x:Name="PART_AcrylicBackground" Fill="Transparent" Visibility="Collapsed" />
            <AdornerDecorator x:Name="PART_WindowAdornerDecorator">
                <dx:ThemedWindowBorder x:Name="PART_WindowBorder" Style="{StaticResource windowBorderStyle}">
                    <dx:ThemedWindowContentBorder x:Name="PART_WindowContentClipBorder" Style="{StaticResource windowClipBorderStyle}">
                        <DockPanel x:Name="PART_WindowContentPanel">
                            <ContentPresenter x:Name="PART_LeftPanelContent"
                                              Content="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.LeftPanelContent), RelativeSource={RelativeSource Self}}"
                                              ContentTemplate="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.LeftPanelContentTemplate), RelativeSource={RelativeSource Self}}"
                                              ContentTemplateSelector="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.LeftPanelContentTemplateSelector), RelativeSource={RelativeSource Self}}"
                                              Visibility="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowLeftPanel), RelativeSource={RelativeSource Self}, Converter={dx:BooleanToVisibilityConverter}}"
                                              DockPanel.Dock="Left" />
                            <DockPanel x:Name="PART_WindowHeaderContentAndStatusPanel" LastChildFill="True" DockPanel.Dock="Right">
                                <dx:ThemedWindowBorder x:Name="PART_StatusPanel" Style="{StaticResource statusPanelStyle}" />
                                <DockPanel x:Name="PART_WindowHeaderAndContent">
                                    <dx:ThemedWindowHeader x:Name="PART_HeaderBorder" DockPanel.Dock="Top" />
                                    <dx:DXBorder DockPanel.Dock="Top" HorizontalAlignment="Stretch">
                                        <ContentPresenter x:Name="PART_HeaderContentPresenter"
                                                          Content="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.HeaderContent), RelativeSource={RelativeSource Self}}" />
                                    </dx:DXBorder>
                                    <dx:ThemedWindowContentBorder x:Name="PART_ContentBackgroundBorder" Style="{StaticResource contentBackgroundBorderStyle}" DockPanel.Dock="Bottom">
                                        <DockPanel x:Name="PART_ContentAndFooter" DockPanel.Dock="Top" LastChildFill="True">
                                            <dx:ThemedWindowBorder x:Name="PART_DialogFooter"
                                                                   Style="{StaticResource dialogFooterBorderStyle}"
                                                                   DockPanel.Dock="Bottom">
                                                <dx:ThemedWindowDialogButtonsControl x:Name="PART_DialogFooterButtonsControl" />
                                            </dx:ThemedWindowBorder>
                                            <ContentPresenter x:Name="PART_WindowContentPresenter"
                                                              IsEnabled="{Binding IsAsyncCommandExecuting, Converter={dx:BoolInverseConverter}, ElementName=PART_DialogFooterButtonsControl}"
                                                              DockPanel.Dock="Bottom" />
                                        </DockPanel>
                                    </dx:ThemedWindowContentBorder>
                                </DockPanel>
                            </DockPanel>
                        </DockPanel>
                    </dx:ThemedWindowContentBorder>
                </dx:ThemedWindowBorder>
            </AdornerDecorator>
            <dx:ThemedWindowSizeGrip x:Name="PART_SizeGrip" Style="{StaticResource sizeGripStyle}" />
        </dx:ThemedWindowRoot>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowStatusPanel" Value="True">
                <Setter TargetName="PART_StatusPanel" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter TargetName="PART_SizeGrip" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_WindowBorder" Property="BorderThickness" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="LeftPanelContent" Value="{x:Null}"/>
                    <Condition Property="LeftPanelContentTemplate" Value="{x:Null}"/>
                    <Condition Property="LeftPanelContentTemplateSelector" Value="{x:Null}"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter TargetName="PART_LeftPanelContent" Property="MinWidth" Value="50"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ThemedWindowStyle -->
    <Style x:Key="{dxt:LWKey ThemedWindow.WindowStyle}" TargetType="{x:Type dx:ThemedWindow}">
        <Setter Property="TabbedModeDefaultTopMargin" Value="{DynamicResource {dxt:LWKey ThemedWindow.TabbedModeDefaultTopMargin}}"/>
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Template" Value="{StaticResource themedWindowTemplate}" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowNormalPadding}}" />
        <Setter Property="TitleAlignment" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowTitleAlignment}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowContentForeground}}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowActiveContentBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowActiveBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowBorderThickness}}" />
        <Setter Property="ActiveGlowColor" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowActiveBorderBrush}}" />
        <Setter Property="InactiveGlowColor" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveBorderBrush}}" />
        <Setter Property="AcrylicColor" Value="{DynamicResource {dxt:LWKey AcrylicThemedWindow.AcrylicColor}}" />
        <Setter Property="MinWidth" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxi:ThemedWindowsHelper.MinWidth)}" />
        <Setter Property="dxi:WindowChrome.WindowChrome">
            <Setter.Value>
                <dxi:WindowChrome />
            </Setter.Value>
        </Setter>
        <Setter Property="dxi:WindowChrome.CaptionHeight" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowHeaderHeight}}" />
        <Setter Property="dxi:WindowChrome.ResizeBorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=ResizeBorderThickness}" />
        <Setter Property="dxi:WindowChrome.UseNullRegion" Value="{Binding RelativeSource={RelativeSource Self}, Path=ActualRoundCorners}" />
        <Setter Property="dxi:WindowChrome.IsTouchMode" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dx:ThemeManager.IsTouchEnabled)}" />
        <Setter Property="dxi:WindowGlowChrome.WindowGlowChrome">
            <Setter.Value>
                <dxi:WindowGlowChrome />
            </Setter.Value>
        </Setter>
        <Setter Property="dxi:WindowGlowChrome.ShowGlow" Value="{Binding RelativeSource={RelativeSource Self}, Path=ShowGlow}" />
        <Setter Property="dxi:WindowGlowChrome.UseGlowColors" Value="{Binding RelativeSource={RelativeSource Self}, Path=UseGlowColors}" />
        <Setter Property="dx:HeaderItemControl.CommonTemplateProvider" Value="{DynamicResource {dxt:LWKey ThemedWindow.HeaderItemControlCommonTemplateProvider}}" />
        <Setter Property="dx:HeaderItemControl.CloseTemplateProvider" Value="{DynamicResource {dxt:LWKey ThemedWindow.HeaderItemControlCloseTemplateProvider}}" />
        <Setter Property="HeaderForeground" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowTitleForeground}}" />
        <Setter Property="dx:ScrollBarExtensions.AllowMiddleMouseScrolling" Value="{x:Static data:CompatibilitySettings.UseMiddleMouseScrolling}" />
        <Setter Property="RoundWindowCorners" Value="{DynamicResource {dxt:LWKey ThemedWindow.RoundWindowCorners}}" />
        <Setter Property="SearchItemTemplate" Value="{DynamicResource {dxt:LWKey BarItemSearchControl.DefaultTemplate}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowChromeWorker.IsNCActive), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="dxi:ThemedWindowsHelper.IsMessageBoxNCActive" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowOptions.UseWindow10HeaderColor), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="HeaderBackground" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowActiveHeaderBackground}}" />
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsActive" Value="False" />
                    <Condition Property="dxi:WindowButtonHelper.IsActiveAppearance" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveContentBackground}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveBorderBrush}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="dxi:ThemedWindowsHelper.IsMessageBoxNCActive" Value="False">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveContentBackground}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowInTaskbar" Value="False" />
                    <Condition Property="WindowState" Value="Minimized" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="ControlBoxButtonSet" Value="Close,MaximizeRestore,Restore" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="WindowStyle" Value="ToolWindow">
                <Setter Property="ControlBoxButtonSet" Value="Close" />
                <Setter Property="ShowIcon" Value="False" />
                <Setter Property="ShowGlow" Value="False" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="NoResize">
                <Setter Property="dxi:WindowChrome.ResizeBorderThickness" Value="0" />
                <Setter Property="ControlBoxButtonSet" Value="Close" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="CanMinimize">
                <Setter Property="ControlBoxButtonSet" Value="Close,MaximizeRestore,Minimize" />
                <Setter Property="dxi:WindowChrome.ResizeBorderThickness" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="WindowStyle" Value="None" />
                    <Condition Property="EnableAcrylic" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="dxi:WindowChrome.CaptionHeight" Value="0" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=ActualWindowKind, RelativeSource={RelativeSource Self}}" Value="Ribbon">
                <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowRibbonPadding}}" />
                <Setter Property="HeaderForeground" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowRibbonTitleForeground}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ActualWindowKind, RelativeSource={RelativeSource Self}}" Value="Ribbon" />
                    <Condition Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsRibbonControlAsContent), RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="TitleAlignment" Value="Center" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <!-- DialogButtonsControlTemplate -->
    <ControlTemplate x:Key="{dxt:LWKey ThemedWindow.DialogButtonsControlTemplate}" TargetType="{x:Type dx:ThemedWindowDialogButtonsControl}">
        <dx:DXBorder x:Name="PART_DialogButtonsControlBorder">
            <ItemsPresenter />
        </dx:DXBorder>
    </ControlTemplate>
    <!-- ThemedWindowDialogButtonsControlItemsPanelTemplate -->
    <ItemsPanelTemplate x:Key="{dxt:LWKey ThemedWindow.DialogButtonsControlItemsPanelTemplate}">
        <StackPanel x:Name="PART_ItemsStackPanel" Orientation="Horizontal" />
    </ItemsPanelTemplate>
    <!-- DialogButtonsControlGroupContainerStyle -->
    <Style x:Key="dialogButtonsControlGroupContainerStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template" Value="{StaticResource dialogButtonsControlGroupContainerTemplate}" />
        <Setter Property="HorizontalAlignment" Value="{Binding Path=Name, Converter={dx:GroupItemNameToHorizontalAlignmentConverter}}" />
    </Style>

    <!-- DialogButtonsControlGroupStyle -->
    <GroupStyle x:Key="{dxt:LWKey ThemedWindow.DialogButtonsControlGroupStyle}" ContainerStyle="{StaticResource dialogButtonsControlGroupContainerStyle}" Panel="{StaticResource dialogButtonsControlPanelTemplate}" />

    <!-- MessageBoxContentTemplate -->
    <ControlTemplate x:Key="messageBoxContentControlTemplate" TargetType="{x:Type dx:ThemedMessageBoxContent}">
        <DockPanel x:Name="PART_MessageBoxContentDock" Margin="12" LastChildFill="True">
            <dx:DXImage x:Name="PART_MessageBoxImage" Style="{StaticResource messageBoxImageStyle}" />
            <TextBlock x:Name="PART_MessageBoxText" Style="{StaticResource messageBoxTextStyle}" />
            <TextBox x:Name="PART_MessageBoxTextSelectionSupport" Style="{StaticResource messageBoxTextSelectionSupportStyle}" />
            <!-- We should set binding to content here instead of style -->
            <!-- because of binding goes wrong with ContentPresenter in ContentControl -->
            <ContentPresenter x:Name="PART_MessageBoxContentPresenter" Content="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.MessageContent), RelativeSource={RelativeSource Self}}" Style="{StaticResource messageBoxContentPresenterStyle}" />
        </DockPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.MessageContent), RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter TargetName="PART_MessageBoxContentPresenter" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Image), RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter TargetName="PART_MessageBoxImage" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_MessageBoxText" Property="Margin" Value="0" />
                <Setter TargetName="PART_MessageBoxTextSelectionSupport" Property="Margin" Value="0" />
                <Setter TargetName="PART_MessageBoxContentPresenter" Property="Margin" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.AllowTextSelection), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="PART_MessageBoxText" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_MessageBoxTextSelectionSupport" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Value="Visible" SourceName="PART_MessageBoxContentPresenter" Property="Visibility">
                <Setter TargetName="PART_MessageBoxText" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_MessageBoxTextSelectionSupport" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Themes\Generic\ThemedWindow.xaml-->

    <!--#region Themes\Generic\Window.xaml-->
    <ControlTemplate x:Key="DXWindowTemplate" TargetType="{x:Type dx:DXWindow}">
        <Grid x:Name="Root_Grid">
            <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <AdornerDecorator x:Name="PART_WindowAdornerDecorator" ClipToBounds="True">
                    <ContentPresenter x:Name="PART_RootContentPresenter" ContentTemplate="{TemplateBinding ActualWindowTemplate}" DataContext="{TemplateBinding DataContext}">
                        <ContentPresenter.Content>
                            <dx:DXWindowBackgroundPanel DataContext="{TemplateBinding DataContext}" Focusable="False">
                                <dx:DXWindowBackgroundPanel.ContentTemplate>
                                    <Binding Path="ContentTemplate" RelativeSource="{RelativeSource TemplatedParent}" />
                                </dx:DXWindowBackgroundPanel.ContentTemplate>
                                <dx:DXWindowBackgroundPanel.Content>
                                    <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}" />
                                </dx:DXWindowBackgroundPanel.Content>
                            </dx:DXWindowBackgroundPanel>
                        </ContentPresenter.Content>
                    </ContentPresenter>
                </AdornerDecorator>
            </dx:DXBorder>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="DXWindowEmptyTemplate" TargetType="{x:Type dx:DXWindow}">
        <Grid
            x:Name="Root_Grid"
            Height="Auto"
            Margin="0,0,0,0"
            VerticalAlignment="Stretch">
            <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <AdornerDecorator x:Name="PART_WindowAdornerDecorator" ClipToBounds="True">
                    <ContentPresenter
                        x:Name="PART_RootContentPresenter"
                        Width="Auto"
                        Height="Auto"
                        ContentTemplate="{TemplateBinding ActualWindowTemplate}">
                        <ContentPresenter.Content>
                            <dx:DXBorder />
                        </ContentPresenter.Content>
                    </ContentPresenter>
                </AdornerDecorator>
            </dx:DXBorder>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="DXDialogTemplate" TargetType="{x:Type dx:DXDialog}">
        <Grid x:Name="Root_Grid">
            <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <AdornerDecorator x:Name="PART_WindowAdornerDecorator" ClipToBounds="True">
                    <ContentPresenter x:Name="PART_RootContentPresenter" ContentTemplate="{TemplateBinding ActualWindowTemplate}" DataContext="{TemplateBinding DataContext}">
                        <ContentPresenter.Content>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <dx:DXWindowBackgroundPanel DataContext="{TemplateBinding DataContext}">
                                    <dx:DXWindowBackgroundPanel.ContentTemplate>
                                        <Binding Path="ContentTemplate" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </dx:DXWindowBackgroundPanel.ContentTemplate>
                                    <dx:DXWindowBackgroundPanel.Content>
                                        <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </dx:DXWindowBackgroundPanel.Content>
                                </dx:DXWindowBackgroundPanel>
                                <StackPanel
                                    x:Name="Footer"
                                    Grid.Row="2"
                                    Margin="12"
                                    HorizontalAlignment="Right"
                                    Orientation="Horizontal">
                                    <Button
                                        x:Name="YesButton"
                                        MinWidth="65"
                                        MinHeight="22"
                                        Margin="6,0,0,0"
                                        Content="{dx:DXMessageBoxStringId StringId=Yes}"
                                        IsDefault="True" />
                                    <Button
                                        x:Name="NoButton"
                                        MinWidth="65"
                                        MinHeight="22"
                                        Margin="6,0,0,0"
                                        Content="{dx:DXMessageBoxStringId StringId=No}"
                                        IsCancel="True" />
                                    <Button
                                        x:Name="OkButton"
                                        MinWidth="65"
                                        MinHeight="22"
                                        Margin="6,0,0,0"
                                        Content="{dx:DXMessageBoxStringId StringId=Ok}"
                                        IsDefault="True" />
                                    <Button
                                        x:Name="CancelButton"
                                        MinWidth="65"
                                        MinHeight="22"
                                        Margin="6,0,0,0"
                                        Content="{dx:DXMessageBoxStringId StringId=Cancel}"
                                        IsCancel="True" />
                                </StackPanel>
                            </Grid>
                        </ContentPresenter.Content>
                    </ContentPresenter>
                </AdornerDecorator>
            </dx:DXBorder>
        </Grid>
    </ControlTemplate>
    <Style x:Key="DXDialogWindowCommandButtonStyle" TargetType="Button">
        <Setter Property="MinWidth" Value="65" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Margin" Value="6,0,0,0" />
        <Setter Property="ContentTemplate" Value="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ContentTemplateSelector" Value="{Binding ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>

    <!-- DXHeaderTemplate -->
    <ControlTemplate x:Key="{dxt:LWKey DXWindow.HeaderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXWindowHeader
            x:Name="PART_Header"
            Background="{DynamicResource {dxt:LWKey DXWindow.ActiveHeaderBackground}}"
            CornerRadius="0"
            Focusable="False">

            <Grid>
                <Thumb x:Name="PART_DragWidget" Template="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerDragWidgetTemplate}}" />
                <DockPanel Name="PART_HeaderDock" Margin="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerHeaderDockMargin}}" LastChildFill="True">
                    <Image
                        x:Name="PART_Icon"
                        DockPanel.Dock="Left"
                        Source="{Binding Path=(dx:FloatingContainer.FloatingContainer).Icon, RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                        Style="{DynamicResource {dxt:LWKey FloatingContainer.DXWindowIconStyle}}" />

                    <Grid
                        x:Name="PART_Grid"
                        DockPanel.Dock="Right"
                        Focusable="False"
                        UseLayoutRounding="True">
                        <ItemsControl Style="{DynamicResource {dxt:LWKey DXTabbedWindow.ButtonContainerStyle}}" Visibility="Hidden">
                            <dx:HeaderItemControl DockPanel.Dock="Right" Style="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerHeaderCloseButtonStyle}}" />
                        </ItemsControl>
                        <ItemsControl
                            x:Name="PART_HeaderButtons"
                            Focusable="False"
                            IsTabStop="False"
                            Style="{DynamicResource {dxt:LWKey DXTabbedWindow.ButtonContainerStyle}}">
                            <dx:HeaderItemControl
                                x:Name="PART_CloseButton"
                                DockPanel.Dock="Right"
                                Style="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerHeaderCloseButtonStyle}}"
                                Visibility="Collapsed" />
                            <dx:HeaderItemControl
                                x:Name="PART_Maximize"
                                DockPanel.Dock="Right"
                                Style="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerHeaderButtonStyle}}"
                                Visibility="{Binding Path=(dx:FloatingContainer.IsMaximized), Converter={dx:BooleanToVisibilityConverter Invert=True}, RelativeSource={RelativeSource Self}}" />
                            <dx:HeaderItemControl
                                x:Name="PART_Restore"
                                DockPanel.Dock="Right"
                                Style="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerHeaderButtonStyle}}"
                                Visibility="{Binding Path=(dx:FloatingContainer.IsMaximized), Converter={dx:BooleanToVisibilityConverter Invert=False}, RelativeSource={RelativeSource Self}}" />
                            <dx:HeaderItemControl x:Name="PART_Minimize" DockPanel.Dock="Right" Style="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerHeaderButtonStyle}}" />
                            <dx:ThemedWindowHeaderItemsControl
                                x:Name="PART_HeaderCustomItems"
                                Margin="{DynamicResource {dxt:LWKey FloatingContainer.HeaderItemsControlMargin}}"
                                DockPanel.Dock="Right"
                                Focusable="False"
                                IsTabStop="False"
                                Style="{DynamicResource {dxt:LWKey DXTabbedWindow.ControlContainerStyle}}" />
                        </ItemsControl>
                    </Grid>

                    <ContentPresenter
                        x:Name="PART_CaptionContentPresenter"
                        Content="{x:Null}"
                        ContentTemplate="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerCaptionTemplate}}"
                        DockPanel.Dock="Left" />
                </DockPanel>
            </Grid>
        </dx:DXWindowHeader>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=WindowStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, FallbackValue={x:Static sys:String.Empty}}" Value="None">
                <Setter TargetName="PART_Maximize" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_Restore" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_Minimize" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_HeaderCustomItems" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowButtonHelper.IsActiveAppearance)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_Header" Property="Background" Value="{DynamicResource {dxt:LWKey DXWindow.InactiveHeaderBackground}}" />
                    <Setter TargetName="PART_CaptionContentPresenter" Property="Opacity" Value="{DynamicResource {dxt:LWKey DXWindow.InactiveHeaderOpacity}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <Trigger SourceName="PART_Icon" Property="Source" Value="{x:Null}">
                <Setter TargetName="PART_Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- FloatingContainerTamplate -->
    <Thickness x:Key="{dxt:LWKey DXWindow.SizeGripMargin}">5,0,5,5</Thickness>
    <DataTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerTemplate}">
        <Grid TextElement.Foreground="{DynamicResource {dxt:LWKey ThemeColors.DXMessageBoxForegroundColor}}">
            <Control x:Name="PART_ActiveBorder" Focusable="False" Template="{DynamicResource {dxt:LWKey DXWindow.FloatingActiveBorder}}" />
            <Control
                x:Name="PART_InactiveBorder"
                Focusable="False"
                Template="{DynamicResource {dxt:LWKey DXWindow.FloatingInactiveBorder}}"
                Visibility="Collapsed" />

            <Grid Margin="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBorderPadding}}"
                  dx:FrameworkElementHelper.ClipCornerRadius="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerClipCornerRadius}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>

                <ContentControl
                    x:Name="Header"
                    dx:HeaderItemControl.CloseTemplateProvider="{DynamicResource {dxt:LWKey DXWindow.HeaderItemControlCloseTemplateProvider}}"
                    dx:HeaderItemControl.CommonTemplateProvider="{DynamicResource {dxt:LWKey DXWindow.HeaderItemControlCommonTemplateProvider}}"
                    dxi:WindowChrome.IsHitTestVisibleInChrome="True"
                    Focusable="False"
                    Template="{DynamicResource {dxt:LWKey DXWindow.HeaderTemplate}}" />
                <Grid x:Name="PART_ContentOffset" Grid.Row="1" Margin="{Binding Path=(dx:FloatingContainerControl.ContentOffset), RelativeSource={RelativeSource Self}}">
                    <Control x:Name="PART_ContentBackground" Focusable="False" Template="{DynamicResource {dxt:LWKey DXWindow.FloatingBackground}}" />
                    <Control
                        x:Name="PART_InactiveContentBackground"
                        Focusable="False"
                        Template="{DynamicResource {dxt:LWKey DXWindow.InactiveFloatingBackground}}"
                        Visibility="Collapsed" />
                    <Grid Margin="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ContentPresenter x:Name="PART_ContainerContent" Content="{Binding}" />
                    </Grid>
                </Grid>
            </Grid>
            <StackPanel
                x:Name="PART_StatusPanel"
                Grid.Row="0"
                VerticalAlignment="Bottom"
                Visibility="Collapsed"
                Margin="{StaticResource {dxt:LWKey DXWindow.SizeGripMargin}}">
                <Thumb
                    x:Name="PART_SizeGrip"
                    Width="16"
                    Height="16"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Bottom"
                    Cursor="SizeNWSE"
                    Template="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerSizeGripTemplate}}" />
            </StackPanel>
            <Control
                x:Name="PART_ResizeFrame"
                Focusable="False"
                Template="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerResizeFrame}}"
                Visibility="{Binding Path=(dx:FloatingContainer.IsMaximized), Converter={dx:BooleanToVisibilityConverter Invert=True}}" />
            <Thumb
                x:Name="AdditionalDragWidget"
                Height="1"
                VerticalAlignment="Top"
                Template="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerDragWidgetTemplate}}" />
        </Grid>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowButtonHelper.IsActiveAppearance)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_InactiveBorder" Property="Visibility" Value="Visible" />
                    <Setter TargetName="PART_ActiveBorder" Property="Visibility" Value="Collapsed" />
                    <Setter TargetName="PART_InactiveContentBackground" Property="Visibility" Value="Visible" />
                    <Setter TargetName="PART_ContentBackground" Property="Visibility" Value="Collapsed" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>


            <!--<DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False">
                <Setter Property="Visibility" TargetName="PART_InactiveBorder" Value="Visible"/>
                <Setter Property="Visibility" TargetName="PART_ActiveBorder" Value="Collapsed"/>
                <Setter Property="Visibility" TargetName="PART_InactiveContentBackground" Value="Visible"/>
                <Setter Property="Visibility" TargetName="PART_ContentBackground" Value="Collapsed"/>
            </DataTrigger>-->
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.FloatingContainer).AllowSizing, RelativeSource={RelativeSource Self}}" Value="false">
                <Setter TargetName="PART_StatusPanel" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_ResizeFrame" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=WindowStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, FallbackValue={x:Static sys:String.Empty}}" Value="None">
                <Setter TargetName="AdditionalDragWidget" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- DXDialogWindowTemplate -->
    <ControlTemplate x:Key="DXDialogWindowTemplate" TargetType="{x:Type dx:DXDialogWindow}">
        <Grid x:Name="Root_Grid">
            <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <AdornerDecorator x:Name="PART_WindowAdornerDecorator" ClipToBounds="True">
                    <ContentPresenter x:Name="PART_RootContentPresenter" ContentTemplate="{TemplateBinding ActualWindowTemplate}" DataContext="{TemplateBinding DataContext}">
                        <ContentPresenter.Content>
                            <Grid>
                                <Grid.Resources>
                                    <dxmvvm:BooleanToObjectConverter x:Key="DialogFooterMarginConverter">
                                        <dxmvvm:BooleanToObjectConverter.TrueValue>
                                            <Thickness>6,12,12,12</Thickness>
                                        </dxmvvm:BooleanToObjectConverter.TrueValue>
                                        <dxmvvm:BooleanToObjectConverter.FalseValue>
                                            <Thickness>0</Thickness>
                                        </dxmvvm:BooleanToObjectConverter.FalseValue>
                                    </dxmvvm:BooleanToObjectConverter>
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <dx:DXWindowBackgroundPanel>
                                    <dx:DXWindowBackgroundPanel.ContentTemplate>
                                        <Binding Path="ContentTemplate" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </dx:DXWindowBackgroundPanel.ContentTemplate>
                                    <dx:DXWindowBackgroundPanel.Content>
                                        <PriorityBinding>
                                            <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Source="{StaticResource DefaultDXDialogContent}" />
                                        </PriorityBinding>
                                    </dx:DXWindowBackgroundPanel.Content>
                                </dx:DXWindowBackgroundPanel>
                                <ItemsControl
                                    x:Name="Footer"
                                    Grid.Row="1"
                                    Focusable="False"
                                    ItemsPanel="{TemplateBinding CommandButtonsPanel}"
                                    ItemsSource="{Binding CommandButtons, RelativeSource={RelativeSource TemplatedParent}}"
                                    Visibility="{Binding Path=CommandButtons.Count, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NumericToVisibilityConverter}}" />
                                <ContentControl
                                    x:Name="FooterContainer"
                                    Grid.Row="1"
                                    HorizontalContentAlignment="Stretch"
                                    VerticalContentAlignment="Stretch"
                                    Focusable="False">
                                    <dx:NonLogicalDecorator x:Name="FooterPresenter" Margin="{Binding HasFooterButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DialogFooterMarginConverter}}" DataContext="{x:Null}" />
                                </ContentControl>
                            </Grid>
                        </ContentPresenter.Content>
                    </ContentPresenter>
                </AdornerDecorator>
            </dx:DXBorder>
        </Grid>
    </ControlTemplate>

    <!-- HeaderButtonTemplate -->
    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerHeaderButtonTemplate}" TargetType="{x:Type dx:HeaderItemControl}">
        <Grid>
            <Control Name="PART_Background" Focusable="False" Template="{Binding Path=TemplateProvider.NormalBackgroundTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
            <dx:DXBorder Name="MarginBorder" Margin="4,0" Background="Transparent">
                <ContentPresenter
                    x:Name="PART_ContentPresenter"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Focusable="False"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="Name" Value="PART_Minimize">
                <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{Binding Path=TemplateProvider.(dx:CommonHeaderItemControlTemplateProvider.MinimizeGlyphTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="MarginBorder" Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="Name" Value="PART_Maximize">
                <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{Binding Path=TemplateProvider.(dx:CommonHeaderItemControlTemplateProvider.MaximizeGlyphTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="MarginBorder" Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="Name" Value="PART_MinimizeRestore">
                <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{Binding Path=TemplateProvider.(dx:CommonHeaderItemControlTemplateProvider.RestoreGlyphTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="MarginBorder" Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="Name" Value="PART_Restore">
                <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{Binding Path=TemplateProvider.(dx:CommonHeaderItemControlTemplateProvider.RestoreGlyphTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="MarginBorder" Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="Name" Value="PART_CloseButton">
                <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{Binding Path=TemplateProvider.(dx:CloseHeaderItemControlTemplateProvider.CloseGlyphTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="MarginBorder" Property="Margin" Value="0" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ShowBorder" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Background" Property="Template" Value="{Binding Path=TemplateProvider.MouseOverBackgroundTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter Property="Foreground" Value="{Binding Path=TemplateProvider.MouseOverForeground, RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="ShowBorder" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Background" Property="Template" Value="{Binding Path=TemplateProvider.PressedBackgroundTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter Property="Foreground" Value="{Binding Path=TemplateProvider.PressedForeground, RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <Trigger Property="ShowBorder" Value="False">
                <Setter TargetName="PART_Background" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding Path=TemplateProvider.NormalForeground, RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>

            <!-- test isMouseOver -->
            <Trigger Property="dxi:WindowButtonHelper.IsMouseOver" Value="True">
                <Setter TargetName="PART_Background" Property="Template" Value="{Binding Path=TemplateProvider.MouseOverBackgroundTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter Property="Foreground" Value="{Binding Path=TemplateProvider.MouseOverForeground, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--#endregion Themes\Generic\Window.xaml-->
    <Style x:Key="{dxt:LWKey DisplayFormatTextControl.ComboBoxStyle}" TargetType="{x:Type dxe:ComboBoxEdit}">
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
    </Style>
    <DataTemplate x:Key="ItemTemplate1">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="135" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <TextBlock Text="{Binding Value, Converter={StaticResource NullDisplayFormatToTextConverter}}" FontWeight="SemiBold" />
            <TextBlock Grid.Column="1" Text="{Binding Example}" FontStyle="Italic" />
        </Grid>
    </DataTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DisplayFormatTextControl.Template}" TargetType="{x:Type dx:DisplayFormatTextControl}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="1.3*" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <TextBlock
                x:Name="PART_PrefixCaption"
                HorizontalAlignment="Left"
                VerticalAlignment="Bottom"
                Margin="0,0,0,3" />
            <TextBlock
                x:Name="PART_DisplayTextFormat"
                Grid.Column="1"
                HorizontalAlignment="Left"
                VerticalAlignment="Bottom"
                Margin="12,0,24,3" />
            <TextBlock
                x:Name="PART_SuffixCaption"
                Grid.Column="2"
                HorizontalAlignment="Left"
                VerticalAlignment="Bottom"
                Margin="0,0,0,3" />
            <dxe:TextEdit x:Name="PART_PrefixValue" Grid.Row="1" EditValue="{Binding Prefix, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <dxe:ComboBoxEdit
                x:Name="PART_DisplayFormatComboBox"
                Grid.Row="1"
                Grid.Column="1"
                Margin="12,0"
                ItemsSource="{TemplateBinding DisplayFormatSourceCollection}"
                DisplayMember="Value"
                ValueMember="Value"
                ValidateOnTextInput="False"
                ShowNullTextForEmptyValue="False"
                Style="{DynamicResource {dxt:LWKey DisplayFormatTextControl.ComboBoxStyle}}"
                AllowCollectionView="True"
                ItemTemplate="{StaticResource ItemTemplate1}">
                <dxe:ComboBoxEdit.GroupStyle>
                    <GroupStyle HidesIfEmpty="True">
                        <GroupStyle.ContainerStyle>
                            <Style TargetType="{x:Type GroupItem}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type GroupItem}">
                                            <StackPanel Margin="0,0,0,10">
                                                <TextBlock
                                                    Margin="5,0,0,0"
                                                    Text="{Binding Path=Name, Converter={StaticResource GroupNameToCaptionConverter}}"
                                                    FontStyle="Italic"
                                                    FontWeight="Bold" />
                                                <ItemsPresenter />
                                            </StackPanel>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </GroupStyle.ContainerStyle>
                    </GroupStyle>
                </dxe:ComboBoxEdit.GroupStyle>
            </dxe:ComboBoxEdit>
            <dxe:TextEdit
                x:Name="PART_SuffixValue"
                Grid.Row="1"
                Grid.Column="2"
                EditValue="{Binding Suffix, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <StackPanel
                Grid.Row="2"
                Grid.ColumnSpan="3"
                Orientation="Horizontal"
                Margin="0,10,0,0">
                <TextBlock x:Name="PART_ExampleCaption" />
                <TextBlock x:Name="PART_ExampleValue" Text="{TemplateBinding ExampleText}" />
            </StackPanel>
        </Grid>
    </ControlTemplate>

    <!--#region DEFAULT STYLES-->
    <Style x:Key="BadgeControl.DefaultStyleBase" TargetType="{x:Type dxi:BadgeControl}">
        <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey Badges.Padding}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxi:BadgeControl}">
                    <dxi:BadgeBorder
                        x:Name="PART_Border"
                        Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Badge.Width}"
                        Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Badge.Height}"
                        MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Badge.MinWidth}"
                        MinHeight="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Badge.MinHeight}"
                        MaxWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Badge.MaxWidth}"
                        MaxHeight="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Badge.MaxHeight}"
                        Margin="{TemplateBinding Margin}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={dxi:NullableCornerRadiusConverter}}"
                        Shape="{TemplateBinding Shape}">
                        <dxi:BadgeContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentFormatProvider="{TemplateBinding ContentFormatProvider}" />
                    </dxi:BadgeBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="CornerRadius" Value="{x:Null}">
                            <Setter TargetName="PART_Border" Property="IgnoreCornerRadius" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey Badges.TouchPadding}}" />
            </Trigger>
            <Trigger Property="Kind" Value="Error">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey Badges.ErrorBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey Badges.ErrorBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey Badges.ErrorForeground}}" />
                <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey Badges.ErrorBorderThickness}}" />
            </Trigger>

            <Trigger Property="Kind" Value="Warning">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey Badges.WarningBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey Badges.WarningBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey Badges.WarningForeground}}" />
                <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey Badges.WarningBorderThickness}}" />
            </Trigger>

            <Trigger Property="Kind" Value="Success">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey Badges.SuccessBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey Badges.SuccessBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey Badges.SuccessForeground}}" />
                <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey Badges.SuccessBorderThickness}}" />
            </Trigger>

            <Trigger Property="Kind" Value="Information">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey Badges.InformationBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey Badges.InformationBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey Badges.InformationForeground}}" />
                <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey Badges.InformationBorderThickness}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="AsyncButtonContentControl.DefaultStyleBase" TargetType="{x:Type dxi:AsyncButtonContentControl}">
        <Style.Setters>
            <Setter Property="Width">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource buttonAsyncIndicationSizeConverter}">
                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
            <Setter Property="Height">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource buttonAsyncIndicationSizeConverter}">
                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type dxi:AsyncButtonContentControl}">
                        <dx:DXBorder HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}">
                            <Grid>
                                <dx:WaitIndicator
                                    x:Name="PART_LoadingIndicator"
                                    Margin="1"
                                    DeferedVisibility="True"
                                    IsTabStop="False"
                                    Template="{DynamicResource {dxt:LWKey Button.ButtonWaitIndicatorTemplate}}" />
                                <Button
                                    x:Name="PART_LoadingIndicatorCancel"
                                    Margin="1"
                                    Command="{TemplateBinding CancelCommand}"
                                    CommandParameter="{TemplateBinding CancelCommandParameter}"
                                    Template="{DynamicResource {dxt:LWKey Button.AsyncButtonCancelTemplate}}"
                                    Visibility="Collapsed" />
                                <Button
                                    x:Name="PART_LoadingIndicatorRetry"
                                    Margin="1"
                                    Command="{TemplateBinding RetryCommand}"
                                    CommandParameter="{TemplateBinding RetryCommandParameter}"
                                    Template="{DynamicResource {dxt:LWKey Button.AsyncButtonRetryTemplate}}"
                                    Visibility="Collapsed" />
                            </Grid>
                        </dx:DXBorder>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True" />
                                    <Condition Property="ShouldShowCancelButton" Value="True" />
                                    <Condition Property="ShowRetryButton" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_LoadingIndicatorCancel" Property="Visibility" Value="Visible" />
                                <Setter TargetName="PART_LoadingIndicator" Property="DeferedVisibility" Value="False" />
                            </MultiTrigger>
                            <Trigger Property="ShowRetryButton" Value="True">
                                <Setter TargetName="PART_LoadingIndicatorRetry" Property="Visibility" Value="Visible" />
                                <Setter TargetName="PART_LoadingIndicator" Property="DeferedVisibility" Value="False" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="ButtonClose.DefaultStyleBase" TargetType="{x:Type dxe:ButtonClose}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="false" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SearchControl.ClearButtonTemplate}}" />
    </Style>
    <Style x:Key="DropMarker.DefaultStyleBase" TargetType="dx:DropMarker">
        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="dx:DropMarker">
                        <Grid Margin="{TemplateBinding Padding}">
                            <dx:DXBorder
                                x:Name="background"
                                Background="#FF2DB2FF"
                                Opacity="0.2"
                                Visibility="Collapsed" />
                            <Grid Margin="0,-2,0,-2">
                                <dx:DXBorder
                                    x:Name="marker"
                                    Height="4"
                                    Background="{DynamicResource {dxt:LWKey DragDrop.DropMarkerBackground}}"
                                    BorderBrush="{DynamicResource {dxt:LWKey DragDrop.DropMarkerBorderBrush}}"
                                    BorderThickness="1" />
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Position" Value="Before">
                                <Trigger.Setters>
                                    <Setter TargetName="marker" Property="VerticalAlignment" Value="Top" />
                                </Trigger.Setters>
                            </Trigger>
                            <Trigger Property="Position" Value="After">
                                <Trigger.Setters>
                                    <Setter TargetName="marker" Property="VerticalAlignment" Value="Bottom" />
                                </Trigger.Setters>
                            </Trigger>
                            <Trigger Property="Position" Value="Inside">
                                <Trigger.Setters>
                                    <Setter TargetName="marker" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="background" Property="Visibility" Value="Visible" />
                                </Trigger.Setters>
                            </Trigger>
                            <Trigger Property="Position" Value="Append">
                                <Trigger.Setters>
                                    <Setter TargetName="marker" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="background" Property="Background" Value="#FF89C841" />
                                    <Setter TargetName="background" Property="Visibility" Value="Visible" />
                                </Trigger.Setters>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="IsHitTestVisible" Value="False" />
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Trigger.Setters>
                    <Setter Property="LayoutTransform">
                        <Setter.Value>
                            <RotateTransform Angle="-90" />
                        </Setter.Value>
                    </Setter>
                </Trigger.Setters>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DragIconControl.DefaultStyleBase" TargetType="{x:Type dx:DragIconControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dx:DragIconControl">
                    <dx:DXImage x:Name="icon" Stretch="None" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="DragType" Value="Remove">
                            <Setter TargetName="icon" Property="Source">
                                <Setter.Value>
                                    <dx:SvgImageSource Uri="{dx:UtilsResource Core/Images/DragRemove.svg}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="DragType" Value="Copy">
                            <Setter TargetName="icon" Property="Source">
                                <Setter.Value>
                                    <Binding Source="{dx:SvgImageSource Uri={dx:UtilsResource Core/Images/DragCopy.svg}}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DXMessageBox.DefaultStyleBase" TargetType="{x:Type dx:DXMessageBox}">
        <Setter Property="Template" Value="{StaticResource DXMessageBoxTemplate}" />
        <Setter Property="FocusManager.IsFocusScope" Value="True" />
    </Style>
    <Style x:Key="SearchPanel.DefaultStyleBase" TargetType="{x:Type dxi:SearchPanel}">
        <Setter Property="AutomationProperties.AutomationId" Value="SearchPanel" />
        <Setter Property="AutomationProperties.Name" Value="SearchPanel" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxi:SearchPanel">
                    <ContentControl SnapsToDevicePixels="True" Template="{DynamicResource {dxt:LWKey SearchPanel.BorderControlTemplate}}" UseLayoutRounding="True">
                        <Grid HorizontalAlignment="Stretch" SnapsToDevicePixels="True" UseLayoutRounding="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <StackPanel
                                x:Name="FindBox"
                                Grid.Column="0"
                                Orientation="Horizontal"
                                SnapsToDevicePixels="True"
                                UseLayoutRounding="True">
                                <TextBlock
                                    SnapsToDevicePixels="True"
                                    Style="{DynamicResource {dxt:LWKey SearchPanel.PanelTextBlockStyle}}"
                                    Text="{TemplateBinding FindLabelText}"
                                    UseLayoutRounding="True" />

                                <dxe:ButtonEdit
                                    x:Name="tbSearchString"
                                    Width="150"
                                    AllowDefaultButton="False"
                                    AllowNullInput="False"
                                    AutomationProperties.AutomationId="SearchString"
                                    AutomationProperties.Name="SearchString"
                                    EditValue="{Binding SearchString, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    IsTextEditable="True"
                                    SnapsToDevicePixels="True"
                                    UseLayoutRounding="True" />
                            </StackPanel>
                            <StackPanel
                                x:Name="ReplaceBox"
                                Grid.Column="1"
                                Orientation="Horizontal"
                                SnapsToDevicePixels="True"
                                UseLayoutRounding="True"
                                Visibility="{Binding ReplaceMode, Converter={StaticResource boolToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">

                                <TextBlock
                                    Margin="4,0,4,0"
                                    SnapsToDevicePixels="True"
                                    Style="{DynamicResource {dxt:LWKey SearchPanel.PanelTextBlockStyle}}"
                                    Text="{TemplateBinding ReplaceLabelText}"
                                    UseLayoutRounding="True" />

                                <dxe:ButtonEdit
                                    x:Name="tbReplaceString"
                                    Width="150"
                                    AllowDefaultButton="False"
                                    AllowNullInput="False"
                                    AutomationProperties.AutomationId="ReplaceString"
                                    AutomationProperties.Name="ReplaceString"
                                    EditValue="{Binding ReplaceString, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    IsTextEditable="True"
                                    SnapsToDevicePixels="True"
                                    UseLayoutRounding="True" />
                            </StackPanel>
                            <ContentControl
                                Grid.Column="2"
                                SnapsToDevicePixels="True"
                                Template="{DynamicResource {dxt:LWKey SearchPanel.SeparatorControlTemplate}}"
                                UseLayoutRounding="True" />
                            <Button
                                x:Name="SearchOptionsButton"
                                Grid.Column="3"
                                Padding="0"
                                AutomationProperties.AutomationId="SearchOptions"
                                AutomationProperties.Name="SearchOptions"
                                Style="{DynamicResource {dxt:LWKey SearchPanel.OptionsButtonStyle}}">
                                <Button.ToolTip>
                                    <Binding Path="SearchOptionsButtonTooltip" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Button.ToolTip>
                                <ContentPresenter ContentTemplate="{DynamicResource {dxt:LWKey SearchPanel.OptionsButtonShape}}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
                            </Button>
                            <StackPanel
                                x:Name="ReplaceButtons"
                                Grid.Column="5"
                                Orientation="Horizontal"
                                SnapsToDevicePixels="True"
                                UseLayoutRounding="True"
                                Visibility="{Binding ReplaceMode, Converter={StaticResource boolToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">

                                <Button
                                    x:Name="ReplaceButton"
                                    AutomationProperties.AutomationId="Replace"
                                    AutomationProperties.Name="Replace"
                                    Command="{Binding ReplaceForwardCommand}"
                                    CommandParameter="{TemplateBinding CommandParameter}"
                                    SnapsToDevicePixels="True"
                                    Style="{DynamicResource {dxt:LWKey SearchPanel.ReplaceButtonStyle}}"
                                    UseLayoutRounding="True">
                                    <TextBlock
                                        SnapsToDevicePixels="True"
                                        Style="{DynamicResource {dxt:LWKey SearchPanel.ButtonTextBlockStyle}}"
                                        Text="{TemplateBinding ReplaceButtonText}"
                                        UseLayoutRounding="True" />
                                </Button>

                                <Button
                                    x:Name="ReplaceAllButton"
                                    AutomationProperties.AutomationId="ReplaceAll"
                                    AutomationProperties.Name="ReplaceAll"
                                    Command="{Binding ReplaceAllForwardCommand}"
                                    CommandParameter="{TemplateBinding CommandParameter}"
                                    SnapsToDevicePixels="True"
                                    Style="{DynamicResource {dxt:LWKey SearchPanel.ReplaceAllButtonStyle}}"
                                    UseLayoutRounding="True">
                                    <TextBlock
                                        SnapsToDevicePixels="True"
                                        Style="{DynamicResource {dxt:LWKey SearchPanel.ButtonTextBlockStyle}}"
                                        Text="{TemplateBinding ReplaceAllButtonText}"
                                        UseLayoutRounding="True" />
                                </Button>
                            </StackPanel>
                            <Button
                                x:Name="FindPrevButton"
                                Grid.Column="6"
                                Padding="0"
                                AutomationProperties.AutomationId="FindPrev"
                                AutomationProperties.Name="FindPrev"
                                Command="{Binding FindBackwardCommand}"
                                CommandParameter="{TemplateBinding CommandParameter}"
                                SnapsToDevicePixels="True"
                                Style="{DynamicResource {dxt:LWKey SearchPanel.FindPrevButtonStyle}}"
                                UseLayoutRounding="True">
                                <Button.ToolTip>
                                    <Binding Path="FindPrevButtonTooltip" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Button.ToolTip>
                                <ContentPresenter ContentTemplate="{DynamicResource {dxt:LWKey SearchPanel.FindPrevButtonShape}}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
                            </Button>
                            <Button
                                x:Name="FindNextButton"
                                Grid.Column="7"
                                Padding="0"
                                AutomationProperties.AutomationId="FindNext"
                                AutomationProperties.Name="FindNext"
                                Command="{Binding FindForwardCommand}"
                                CommandParameter="{TemplateBinding CommandParameter}"
                                SnapsToDevicePixels="True"
                                Style="{DynamicResource {dxt:LWKey SearchPanel.FindNextButtonStyle}}"
                                UseLayoutRounding="True">
                                <Button.ToolTip>
                                    <Binding Path="FindNextButtonTooltip" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Button.ToolTip>
                                <ContentPresenter ContentTemplate="{DynamicResource {dxt:LWKey SearchPanel.FindNextButtonShape}}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
                            </Button>
                            <ContentControl
                                Grid.Column="8"
                                SnapsToDevicePixels="True"
                                Template="{DynamicResource {dxt:LWKey SearchPanel.SeparatorControlTemplate}}"
                                UseLayoutRounding="True" />
                            <Button
                                x:Name="SearchClose"
                                Grid.Column="9"
                                Padding="0"
                                AutomationProperties.AutomationId="SearchClose"
                                AutomationProperties.Name="SearchClose"
                                Command="{Binding CloseCommand}"
                                SnapsToDevicePixels="True"
                                Style="{DynamicResource {dxt:LWKey SearchPanel.CloseButtonStyle}}"
                                UseLayoutRounding="True">
                                <Button.ToolTip>
                                    <Binding Path="CloseButtonTooltip" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Button.ToolTip>
                                <ContentPresenter ContentTemplate="{DynamicResource {dxt:LWKey SearchPanel.CloseButtonShape}}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
                            </Button>
                        </Grid>
                    </ContentControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SuperTipItemControl.DefaultStyleBase" TargetType="{x:Type dx:SuperTipItemControl}">
        <Setter Property="ContentStyle" Value="{DynamicResource {dxt:LWKey SuperTip.ItemContentStyle}}" />
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey SuperTip.ItemContentTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SuperTip.ItemTemplate}}" />
        <Setter Property="LayoutStyle" Value="{DynamicResource {dxt:LWKey SuperTip.ItemLayoutStyle}}" />
    </Style>
    <Style x:Key="SuperTipItemControlSeparator.DefaultStyleBase" TargetType="{x:Type dx:SuperTipItemControlSeparator}">
        <Setter Property="ContentStyle" Value="{DynamicResource {dxt:LWKey SuperTip.SeparatorContentStyle}}" />
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey SuperTip.SeparatorContentTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SuperTip.SeparatorTemplate}}" />
    </Style>
    <Style x:Key="SuperTipHeaderItemControl.DefaultStyleBase" TargetType="{x:Type dx:SuperTipHeaderItemControl}">
        <Setter Property="ContentStyle" Value="{DynamicResource {dxt:LWKey SuperTip.HeaderContentStyle}}" />
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey SuperTip.HeaderContentTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SuperTip.ItemTemplate}}" />
        <Setter Property="LayoutStyle" Value="{DynamicResource {dxt:LWKey SuperTip.HeaderLayoutStyle}}" />
    </Style>
    <Style x:Key="SuperTipControl.DefaultStyleBase" TargetType="{x:Type dx:SuperTipControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SuperTip.Template}}" />
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:LWKey SuperTip.PanelTemplate}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey SuperTip.Foreground}}" />
    </Style>
    <Style x:Key="ThemedBorder.DefaultStyleBase" TargetType="{x:Type dx:ThemedBorder}">
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedBorder.BackgroundBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey ThemedBorder.BorderBrush}}" />
    </Style>
    <Style x:Key="ThemedWindowIcon.DefaultStyleBase" TargetType="{x:Type dx:ThemedWindowIcon}">
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="Width" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowIconWidth}}" />
        <Setter Property="Height" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowIconHeight}}" />
        <Setter Property="Margin" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowIconMargin}}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template" Value="{StaticResource themedWindowIconTemplate}" />
        <Setter Property="dxi:WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>
    <Style x:Key="ThemedWindowControlBoxBorder.DefaultStyleBase" TargetType="{x:Type dx:ThemedWindowControlBoxBorder}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Template" Value="{StaticResource themedWindowControlBoxTemplate}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.HeaderControlBoxBackground}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey ThemedWindow.HeaderControlBoxBorderThickness}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey ThemedWindow.HeaderControlBoxBorderBrush}}" />
        <Setter Property="VerticalAlignment" Value="{DynamicResource {dxt:LWKey ThemedWindow.HeaderControlBoxVerticalAlignment}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
    </Style>
    <Style x:Key="ThemedWindowTitle.DefaultStyleBase" TargetType="{x:Type dx:ThemedWindowTitle}">
        <Setter Property="Template" Value="{StaticResource themedWindowTitleTemplate}" />
        <Setter Property="TitleAlignment" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.TitleAlignment), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Content" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.Title), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.HeaderForeground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Margin" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowTitleControlMargin}}" />
    </Style>
    <Style x:Key="ThemedWindowHeader.DefaultStyleBase" TargetType="{x:Type dx:ThemedWindowHeader}">
        <Setter Property="Height" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowChrome.CaptionHeight), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.HeaderBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Content" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.Title), RelativeSource={RelativeSource Self}}" />
        <Setter Property="TitleAlignment" Value="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.TitleAlignment), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey ThemedWindow.HeaderNormalPadding}}" />
        <Setter Property="Template" Value="{StaticResource themedWindowHeaderTemplate}" />
        <Setter Property="Focusable" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource Self}}" Value="None">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11HeaderCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" Value="Normal" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource Self}}" Value="ToolWindow" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowHeaderCornerRadius}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="EnableTransparency" Value="True" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveHeaderBackground}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowInactiveHeaderBackground}}" />
            </DataTrigger>
            <Trigger Property="EnableTransparency" Value="True">
                <Setter Property="Background" Value="{StaticResource transparentHeaderBackground}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}" Value="Tabbed">
                <Setter Property="Template" Value="{StaticResource themedWindowHeaderTabbedTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}" Value="Ribbon">
                <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey ThemedWindow.HeaderRibbonPadding}}" />
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowRibbonActiveHeaderBackground}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}" Value="Ribbon" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dxi:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxt:LWKey ThemedWindow.WindowRibbonInactiveHeaderBackground}}" />
                    <Setter Property="Opacity" Value="1" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" Value="Minimized" />
                    <Condition Binding="{Binding Path=(dxi:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowInTaskbar), RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="HorizontalAlignment" Value="Left" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ThemedWindowDialogButtonsControl.DefaultStyleBase" TargetType="{x:Type dx:ThemedWindowDialogButtonsControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ThemedWindow.DialogButtonsControlTemplate}}" />
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:LWKey ThemedWindow.DialogButtonsControlItemsPanelTemplate}}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="ThemedMessageBoxContent.DefaultStyleBase" TargetType="{x:Type dx:ThemedMessageBoxContent}">
        <Setter Property="Template" Value="{StaticResource messageBoxContentControlTemplate}" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="ThemedMessageBoxWindow.DefaultStyleBase" BasedOn="{StaticResource {dxt:LWKey ThemedWindow.WindowStyle}}" TargetType="{x:Type dx:ThemedMessageBoxWindow}">
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="ShowIcon" Value="False" />
        <Setter Property="MaxWidth" Value="500" />
        <Setter Property="MinWidth" Value="150" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="ContentTemplate" Value="{StaticResource messageBoxContentTemplate}" />
        <Setter Property="AutomationProperties.HelpText" Value="{Binding Text, RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="DXWindow.DefaultStyleBase" TargetType="{x:Type dx:DXWindow}">
        <Setter Property="MinHeight" Value="42" />
        <Setter Property="ResizeMode" Value="CanResize" />
        <Setter Property="ResizeBorderThicknessInAeroMode" Value="{DynamicResource {dxt:LWKey DXWindow.AeroWindowResizeBorderThickness}}" />
        <Setter Property="ResizeBorderThickness" Value="{DynamicResource {dxt:LWKey DXWindow.ResizeBorderThickness}}" />
        <Setter Property="BorderEffectOffset" Value="{DynamicResource {dxt:LWKey DXWindow.BorderEffectOffset}}" />
        <Setter Property="BorderEffectActiveColor" Value="{DynamicResource {dxt:LWKey DXWindow.BorderEffectActiveColor}}" />
        <Setter Property="BorderEffectInactiveColor" Value="{DynamicResource {dxt:LWKey DXWindow.BorderEffectInactiveColor}}" />
        <Setter Property="BorderEffectLeftMargins" Value="{DynamicResource {dxt:LWKey DXWindow.BorderEffectLeftMargins}}" />
        <Setter Property="BorderEffectRightMargins" Value="{DynamicResource {dxt:LWKey DXWindow.BorderEffectRightMargins}}" />
        <Setter Property="BorderEffectTopMargins" Value="{DynamicResource {dxt:LWKey DXWindow.BorderEffectTopMargins}}" />
        <Setter Property="BorderEffectBottomMargins" Value="{DynamicResource {dxt:LWKey DXWindow.BorderEffectBottomMargins}}" />
        <Setter Property="AeroWindowTemplate" Value="{DynamicResource {dxt:LWKey DXWindow.AeroWindowTemplate}}" />
        <Setter Property="AeroBorderSize" Value="{DynamicResource {dxt:LWKey DXWindow.AeroWindowBorderSize}}" />
        <Setter Property="WindowTemplate" Value="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerTemplate}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBodyMargin}}" />
        <Setter Property="Template" Value="{StaticResource DXWindowTemplate}" />
        <Style.Triggers>
            <Trigger Property="HasContent" Value="False">
                <Setter Property="Template" Value="{StaticResource DXWindowEmptyTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DXDialog.DefaultStyleBase" BasedOn="{StaticResource DXWindow.DefaultStyleBase}" TargetType="{x:Type dx:DXDialog}">
        <Setter Property="Template" Value="{StaticResource DXDialogTemplate}" />
    </Style>
    <Style x:Key="DXDialogWindow.DefaultStyleBase" BasedOn="{StaticResource DXWindow.DefaultStyleBase}" TargetType="{x:Type dx:DXDialogWindow}">
        <Setter Property="Template" Value="{StaticResource DXDialogWindowTemplate}" />
        <Setter Property="CommandButtonStyle" Value="{StaticResource DXDialogWindowCommandButtonStyle}" />
        <Setter Property="CommandButtonsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Margin="12" HorizontalAlignment="Right" Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="HasContent" Value="False">
                <Setter Property="Template" Value="{StaticResource DXDialogWindowTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DialogButton.DefaultStyleBase" TargetType="dx:DialogButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="CommandButtonStyle" Value="{StaticResource DXDialogWindowCommandButtonStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dx:DialogButton">
                    <Button
                        Command="{TemplateBinding ActualCommand}"
                        Content="{TemplateBinding ActualContent}"
                        IsCancel="{TemplateBinding ActualIsCancel}"
                        IsDefault="{TemplateBinding ActualIsDefault}"
                        Style="{TemplateBinding CommandButtonStyle}"
                        Visibility="{TemplateBinding CommandButtonVisibility}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DialogButtonsControl.DefaultStyleBase" TargetType="dx:DialogButtonsControl">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ItemsSource" Value="{Binding Path=(dx:DialogButtonsControl.CommandsSource), RelativeSource={RelativeSource Self}}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dx:DialogButtonsControl">
                    <ItemsPresenter Margin="{TemplateBinding Padding}" Visibility="{Binding HasItems, Converter={dxmvvm:BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RichTextBox.DefaultStyleBase" BasedOn="{StaticResource {x:Type RichTextBox}}" TargetType="{x:Type RichTextBox}">
        <Setter Property="dx:ScrollBarExtensions.ScrollBehavior" Value="{dx:TextBoxScrollBehavior}" />
    </Style>
    <Style x:Key="DisplayFormatTextControl.DefaultStyle" TargetType="{x:Type dx:DisplayFormatTextControl}">
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DisplayFormatTextControl.Template}}" />
    </Style>

    <Style x:Key="headerItemControlBaseStyle" TargetType="{x:Type dx:HeaderItemControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerHeaderButtonTemplate}}" />
        <Setter Property="TemplateProvider" Value="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="headerItemControlStyle"
       BasedOn="{StaticResource headerItemControlBaseStyle}"
       TargetType="{x:Type dx:HeaderItemControl}">
        <Setter Property="MinWidth" Value="{dx:LWDouble '46, VS2019=34'}" />
        <Setter Property="MinHeight" Value="{dx:LWDouble '32, VS2019=26'}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44"/>
                <Setter Property="MinHeight" Value="44"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HeaderItemControl.DefaultStyle" TargetType="{x:Type dx:HeaderItemControl}" BasedOn="{StaticResource headerItemControlStyle}"/>

    <Style x:Key="{dxt:LWKey FloatingContainer.FloatingContainerHeaderButtonStyle}" BasedOn="{StaticResource headerItemControlStyle}" TargetType="{x:Type dx:HeaderItemControl}">
        <Setter Property="Width" Value="46" />
        <Setter Property="Height" Value="32" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>
    <Style x:Key="{dxt:LWKey ThemedWindowHeaderItems.HeaderButtonStyle}" BasedOn="{StaticResource headerItemControlStyle}" TargetType="{x:Type dx:HeaderItemControl}">
        <Setter Property="Width" Value="{dx:LWDouble '46, VS2019=34'}" />
        <Setter Property="Height" Value="{dx:LWDouble '32, VS2019=26'}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>
    <Style x:Key="{dxt:LWKey RibbonHeaderItems.RibbonHeaderButtonStyle}" BasedOn="{StaticResource HeaderItemControl.DefaultStyle}" TargetType="{x:Type dx:HeaderItemControl}">
        <Setter Property="Width" Value="{dx:LWDouble '46, VS2019=34'}" />
        <Setter Property="Height" Value="{dx:LWDouble '32, VS2019=26'}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>
    <Style x:Key="{dxt:LWKey FloatingContainer.FloatingContainerHeaderCloseButtonStyle}" BasedOn="{StaticResource {dxt:LWKey FloatingContainer.FloatingContainerHeaderButtonStyle}}" TargetType="{x:Type dx:HeaderItemControl}">
        <Setter Property="TemplateProvider" Value="{Binding Path=(dx:HeaderItemControl.CloseTemplateProvider), RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="{dxt:LWKey ThemedWindowHeaderItems.HeaderCloseButtonStyle}" BasedOn="{StaticResource {dxt:LWKey ThemedWindowHeaderItems.HeaderButtonStyle}}" TargetType="{x:Type dx:HeaderItemControl}" />
    <Style x:Key="{dxt:LWKey RibbonHeaderItems.RibbonHeaderCloseButtonStyle}" BasedOn="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonHeaderButtonStyle}}" TargetType="{x:Type dx:HeaderItemControl}" />
    <!--#endregion DEFAULT STYLES-->
</ResourceDictionary>