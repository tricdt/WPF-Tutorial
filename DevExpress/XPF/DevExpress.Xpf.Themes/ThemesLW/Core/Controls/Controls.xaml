<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:cs="colorscheme_ignorable_uri"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxbi="http://schemas.devexpress.com/winfx/2008/xaml/bars/internal"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxec="clr-namespace:DevExpress.Xpf.Editors.Controls;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:native="clr-namespace:DevExpress.Mvvm.UI.Native;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
    mc:Ignorable="cs">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Core/Controls/_{ThemeCategory}.xaml" />
        <dxi:ThemeResourceDictionary Path="Core/Controls/Controls.Generic.xaml" />
        <!--<ResourceDictionary Source="/DevExpress.Xpf.Themes.Base.v24.1;component/Ribbon/Generic/RibbonControlBoxButton.xaml"/>-->
    </ResourceDictionary.MergedDictionaries>

    <dxi:WaitIndicatorSizeToPointSizeConverter x:Key="waitIndicatorSizeToPointSizeConverter" />
    <dxi:SimpleButtonsCornerRadiusConverter x:Key="cornerRadiusConverter" />

    <!--#region Base\\Core\Core\Themes\DXPanel.xaml-->
    <!-- General -->
    <!--#endregion Base\\Core\Core\Themes\DXPanel.xaml-->

    <!--#region Base\\Core\Core\Themes\TransferControl.xaml-->
    <!-- General -->
    <!--#endregion Base\\Core\Core\Themes\TransferControl.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\ThemedBorder.xaml-->
    <!--#endregion Base\\Core\Core\Themes\Base\ThemedBorder.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\WaitIndicators.xaml-->

    <!-- Column -->

    <!-- Container -->

    <!-- Indicator -->

    <ControlTemplate x:Key="{dxt:LWKey WaitIndicator.WaitIndicatorTemplate}" TargetType="{x:Type dx:WaitIndicator}">
        <Grid
            x:Name="Root"
            HorizontalAlignment="Center"
            Margin="{TemplateBinding ContentPadding}"
            VerticalAlignment="Center"
            Visibility="Collapsed">
            <dx:WaitIndicatorContainer>
                <Grid HorizontalAlignment="Center" Margin="24" VerticalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="6" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ProgressBar
                        x:Name="progressBar"
                        Height="26"
                        HorizontalAlignment="Center"
                        IsIndeterminate="True"
                        Template="{StaticResource DefaultWaitIndicator}"
                        VerticalAlignment="Center"
                        Width="26" />
                    <ContentPresenter
                        Grid.Column="2"
                        Content="{TemplateBinding ActualContent}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Margin="{TemplateBinding Padding}"
                        VerticalAlignment="Center" />
                </Grid>
            </dx:WaitIndicatorContainer>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="Visibility">
                    <VisualState x:Name="Visible">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <BooleanAnimationUsingKeyFrames Storyboard.TargetName="progressBar" Storyboard.TargetProperty="IsIndeterminate">
                                <DiscreteBooleanKeyFrame KeyTime="0:0:0.1" Value="True" />
                            </BooleanAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Collapsed">
                        <Storyboard>
                            <DoubleAnimation BeginTime="0:0:0.1" Duration="0:0:0.1" From="1" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0" />
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.2">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Collapsed</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <BooleanAnimationUsingKeyFrames Storyboard.TargetName="progressBar" Storyboard.TargetProperty="IsIndeterminate">
                                <DiscreteBooleanKeyFrame KeyTime="0:0:0.1" Value="False" />
                            </BooleanAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <DataTemplate x:Key="{dxt:LWKey WaitIndicator.WaitIndicatorContentTemplate}">
        <TextBlock Text="{Binding}" TextWrapping="Wrap" VerticalAlignment="Center" />
    </DataTemplate>

    <ControlTemplate x:Key="{dxt:LWKey Button.ButtonWaitIndicatorTemplate}" TargetType="{x:Type dx:WaitIndicator}">
        <Grid>
            <ContentPresenter x:Name="content" Content="{TemplateBinding Content}" />
            <Grid x:Name="root" Visibility="Collapsed">
                <ProgressBar
                    x:Name="progressBar"
                    IsEnabled="True"
                    Template="{StaticResource DefaultWaitIndicator}"
                    IsIndeterminate="True"
                    Padding="{dx:LWThickness '0, Win11=4'}"
                    MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource waitIndicatorSizeToPointSizeConverter}}"
                    MinHeight="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource waitIndicatorSizeToPointSizeConverter}}" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="DeferedVisibility" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="root" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="content" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Themes\Base\WaitIndicators.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\AeroWindow.xaml-->
    <!-- General -->

    <DataTemplate x:Key="{dxt:LWKey DXWindow.AeroWindowCaptionTemplate}">
        <Grid Height="26">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Image
                x:Name="PART_Icon"
                Grid.Column="0"
                Margin="3"
                Source="{Binding Path=(dx:FloatingContainer.FloatingContainer).Icon, RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                Stretch="None" />
            <dx:FloatingContainerHeaderPanel Grid.Column="1">
                <Grid IsHitTestVisible="False" Margin="3">
                    <TextBlock x:Name="PART_Text" Foreground="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" Text="{Binding Path=(dx:FloatingContainer.FloatingContainer).Caption, RelativeSource={RelativeSource AncestorType=ContentPresenter}}" />
                </Grid>
            </dx:FloatingContainerHeaderPanel>
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="Source" SourceName="PART_Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="PART_Icon" Value="Collapsed" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DXWindow.AeroWindowDragWidgetTemplate}" TargetType="{x:Type Thumb}">
        <dx:DXBorder Background="Transparent" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DXWindow.AeroWindowSizeGripTemplate}" TargetType="{x:Type Thumb}">
        <Grid x:Name="Root" Background="Transparent">
            <Path
                HorizontalAlignment="Right"
                Margin="3"
                Style="{StaticResource UIShape.SizeGrip}"
                VerticalAlignment="Bottom" />
        </Grid>
    </ControlTemplate>

    <DataTemplate x:Key="{dxt:LWKey DXWindow.AeroWindowTemplate}">
        <Grid x:Name="Root">
            <Grid x:Name="Containter">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <dx:DXWindowHeader
                    x:Name="PART_Header"
                    Grid.Row="0"
                    Background="Transparent"
                    CornerRadius="0">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter
                            x:Name="PART_CaptionContentPresenter"
                            Grid.Column="0"
                            Content="{x:Null}"
                            ContentTemplate="{DynamicResource {dxt:LWKey DXWindow.AeroWindowCaptionTemplate}}" />
                        <Thumb x:Name="PART_DragWidget" Grid.Column="0" Template="{DynamicResource {dxt:LWKey DXWindow.AeroWindowDragWidgetTemplate}}" />
                        <StackPanel
                            x:Name="stackPanel"
                            Grid.Column="1"
                            Height="{Binding Path=(dx:DXWindow.AeroControlBoxHeight), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dx:DXWindow}}"
                            Margin="{Binding Path=(dx:DXWindow.AeroControlBoxMargin), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dx:DXWindow}}"
                            Orientation="Horizontal"
                            VerticalAlignment="Top"
                            Width="{Binding Path=(dx:DXWindow.AeroControlBoxWidth), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dx:DXWindow}}">
                            <Button
                                x:Name="PART_Minimize"
                                Focusable="False"
                                Height="0"
                                Template="{x:Null}"
                                Width="0" />
                            <Button
                                x:Name="PART_Restore"
                                Focusable="False"
                                Height="0"
                                Template="{x:Null}"
                                Width="0" />
                            <Button
                                x:Name="PART_Maximize"
                                Focusable="False"
                                Height="0"
                                Template="{x:Null}"
                                Width="0" />
                            <Button
                                x:Name="PART_CloseButton"
                                Focusable="False"
                                Height="0"
                                Template="{x:Null}"
                                Width="0" />
                        </StackPanel>
                    </Grid>
                </dx:DXWindowHeader>
                <Grid x:Name="FloatingContainerBody" Grid.Row="1" Margin="5,0,5,5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0" Grid.RowSpan="2" Background="{DynamicResource {dxt:LWKey DXWindow.AeroWindowContainerBackground}}">
                        <dx:BackgroundPanel x:Name="PART_ContainerContent" Content="{Binding}" />
                    </Grid>
                    <StackPanel x:Name="PART_StatusPanel" Grid.Row="1" Visibility="Collapsed">
                        <Thumb
                            x:Name="PART_SizeGrip"
                            Cursor="SizeNWSE"
                            Height="16"
                            HorizontalAlignment="Right"
                            Template="{DynamicResource {dxt:LWKey DXWindow.AeroWindowSizeGripTemplate}}"
                            VerticalAlignment="Bottom"
                            Width="16" />
                    </StackPanel>
                </Grid>
            </Grid>
            <Control
                x:Name="PART_ResizeFrame"
                Focusable="False"
                Template="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerResizeFrame}}"
                Visibility="{Binding Path=(dx:FloatingContainer.IsMaximized), Converter={dx:BooleanToVisibilityConverter Invert=True}}" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.FloatingContainer).AllowSizing, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="PART_ResizeFrame" Value="Collapsed" />
                <Setter Property="Visibility" TargetName="PART_StatusPanel" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsMaximized)}" Value="True">
                <Setter Property="Margin" TargetName="FloatingContainerBody" Value="0" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!--#endregion Base\\Core\Core\Themes\Base\AeroWindow.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\Badges.xaml-->
    <Thickness x:Key="{dxt:LWKey Badges.ErrorBorderThickness}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Badges.WarningBorderThickness}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Badges.SuccessBorderThickness}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Badges.InformationBorderThickness}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Badges.Padding}">3,3,3,4</Thickness>
    <Thickness x:Key="{dxt:LWKey Badges.TouchPadding}">5,5,5,6</Thickness>
    <!--#endregion Base\\Core\Core\Themes\Base\Badges.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\Buttons.xaml-->


    <!-- <dxi:SimpleButtonsBorderThicknessConverter x:Key="thicknessConverter"/> -->

    <!--#endregion Base\\Core\Core\Themes\Base\Buttons.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\ConditionalFormatting.xaml-->
    <LinearGradientBrush x:Key="{dxt:LWKey Format.DataBarNegativeBrush_Gradient}" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#00DC5E55" Offset="0" />
        <GradientStop Color="{StaticResource {dxt:LWKey Format.DataBarNegativeColor}}" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{dxt:LWKey Format.DataBarBlueBrush_Gradient}" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="{StaticResource {dxt:LWKey Format.DataBarBlueColor}}" Offset="0" />
        <GradientStop Color="#005D79DE" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{dxt:LWKey Format.DataBarGreenBrush_Gradient}" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="{StaticResource {dxt:LWKey Format.DataBarGreenColor}}" Offset="0" />
        <GradientStop Color="#006EB664" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{dxt:LWKey Format.DataBarRedBrush_Gradient}" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="{StaticResource {dxt:LWKey Format.DataBarRedColor}}" Offset="0" />
        <GradientStop Color="#00DC5E55" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{dxt:LWKey Format.DataBarOrangeBrush_Gradient}" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="{StaticResource {dxt:LWKey Format.DataBarOrangeColor}}" Offset="0" />
        <GradientStop Color="#00DC9A2C" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{dxt:LWKey Format.DataBarLightBlueBrush_Gradient}" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="{StaticResource {dxt:LWKey Format.DataBarLightBlueColor}}" Offset="0" />
        <GradientStop Color="#0029AFC3" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{dxt:LWKey Format.DataBarPurpleBrush_Gradient}" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="{StaticResource {dxt:LWKey Format.DataBarPurpleColor}}" Offset="0" />
        <GradientStop Color="#00B16AC7" Offset="1" />
    </LinearGradientBrush>


    <!-- Format -->

    <!-- ColorScale -->

    <!-- DataBar -->

    <!-- DataBar -->
    <!--#endregion Base\\Core\Core\Themes\Base\ConditionalFormatting.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\CornerBox.xaml-->
    <!-- General -->
    <!--#endregion Base\\Core\Core\Themes\Base\CornerBox.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\CustomTemplates.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey SearchControl.ClearButtonTemplate}" TargetType="{x:Type dxe:ButtonClose}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                CornerRadius="16"
                HorizontalAlignment="Center"
                Opacity="0.62"
                VerticalAlignment="Center">
                <Path Fill="{StaticResource Brush.Editor.Background}" Margin="3" Style="{StaticResource UIShape.Editor.Cancel}" />
            </dx:DXBorder>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Root" Value="14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Themes\Base\CustomTemplates.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\PseudoWindow\PseudoWindowButtons.xaml-->

    <!-- Button States -->

    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonBackgroundNormalState}">
        <dx:DXBorder Background="Transparent" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerCloseButtonBackgroundNormalState}">
        <dx:DXBorder Background="Transparent" />
    </ControlTemplate>

    <!-- IsMouseOver -->

    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonBackgroundMouseOverState}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Window.HeaderButton.HoverBackground, Office2019Colorful=Brush.Window.HeaderButton.HoverBackground, Office2019HighContrast=Brush.Window.HeaderButton.HoverBackground, VS2019Blue=Brush.Window.HeaderButton.HoverBackground, VS2019Dark=Brush.Window.HeaderButton.HoverBackground, VS2019Light=Brush.Window.HeaderButton.HoverBackground, Win10Dark=Brush.Window.HeaderButton.HoverBackground, Win10Light=Brush.Window.HeaderButton.HoverBackground, Win11=Brush.Button.SimpleButtonBackground'}" />
    </ControlTemplate>

    

    <!-- IsPressed -->

    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerDefaultButtonBackgroundPressedState}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.Window.HeaderButton.SelectionBackground, Office2019Colorful=Brush.Window.HeaderButton.SelectionBackground, Office2019HighContrast=Brush.Window.HeaderButton.SelectionBackground, VS2019Blue=Brush.Window.HeaderButton.SelectionBackground, VS2019Dark=Brush.Window.HeaderButton.SelectionBackground, VS2019Light=Brush.Window.HeaderButton.SelectionBackground, Win10Dark=Brush.Window.HeaderButton.SelectionBackground, Win10Light=Brush.Window.HeaderButton.SelectionBackground, Win11=Brush.Button.PressedBackground'}" />
    </ControlTemplate>


    <!--#endregion Base\\Core\Core\Themes\Base\PseudoWindow\PseudoWindowButtons.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\PseudoWindow\PseudoWindowElements.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerDragWidgetTemplate}" TargetType="{x:Type Thumb}">
        <Grid Background="Transparent" />
    </ControlTemplate>

    <!-- SizeGrip -->

    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerSizeGripTemplate}" TargetType="{x:Type Thumb}">
        <Grid Background="Transparent">
            <Path HorizontalAlignment="Right" Style="{StaticResource UIShape.SizeGrip}" VerticalAlignment="Bottom" />
        </Grid>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Themes\Base\PseudoWindow\PseudoWindowElements.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\PseudoWindow\PseudoWindowBody.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DXWindow.FloatingActiveBorder}">
        <dx:DXBorder Background="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBorder}}"
                     CornerRadius="{dx:LWCornerRadius '0, Win11=7'}">
            <dx:DXBorder Background="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBackground}}"
                         Margin="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBorderPadding}}"
                         CornerRadius="{dx:LWCornerRadius '0, Win11=7'}"/>
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DXWindow.FloatingInactiveBorder}">
        <dx:DXBorder Background="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerInactiveBorder}}"
                     CornerRadius="{dx:LWCornerRadius '0, Win11=7'}">
            <dx:DXBorder Background="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerInactiveBackground}}"
                         Margin="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBorderPadding}}"
                         CornerRadius="{dx:LWCornerRadius '0, Win11=7'}"/>
        </dx:DXBorder>
    </ControlTemplate>

    <!-- Background -->

    <ControlTemplate x:Key="{dxt:LWKey DXWindow.FloatingBackground}">
        <dx:DXBorder Background="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBackground}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DXWindow.InactiveFloatingBackground}">
        <dx:DXBorder Background="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBackground}}" />
    </ControlTemplate>

    <!-- Container -->

    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerWindowTemplate}" TargetType="{x:Type dx:FloatingContainerControl}">
        <dx:FloatingWindowContainer Style="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey FloatingContainer.FloatingContainerAdornerTemplate}" TargetType="{x:Type dx:FloatingContainerControl}">
        <dx:FloatingAdornerContainer Style="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerStyle}}" />
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Themes\Base\PseudoWindow\PseudoWindowBody.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\SearchPanel.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey SearchPanel.BorderControlTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Window.Background, Win11=Brush.WindowBackground'}" Padding="12">
            <ContentPresenter Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey SearchPanel.SeparatorControlTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{StaticResource Brush.Delimiter}" Margin="3" Width="1" />
    </ControlTemplate>

    <!-- Button -->

    <ControlTemplate x:Key="{dxt:LWKey SearchPanel.ButtonControlTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" />
            <ContentPresenter
                x:Name="Content"
                Content="{TemplateBinding Content}"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                Margin="{TemplateBinding Padding}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Win11=Color.ListItem.SelectionBackground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <!-- Preset: Button -->

    <Style x:Key="{dxt:LWKey SearchPanel.OptionsButtonStyle}" BasedOn="{dx:TargetStaticResource Button.DefaultStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/StandardControls/StandardControls.xaml'}}" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey SearchPanel.ReplaceButtonStyle}" BasedOn="{dx:TargetStaticResource Button.DefaultStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/StandardControls/StandardControls.xaml'}}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Margin" Value="0,0,3,0" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="0,0,14,0" />
                <Setter Property="MinHeight" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey SearchPanel.ReplaceAllButtonStyle}" BasedOn="{dx:TargetStaticResource Button.DefaultStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/StandardControls/StandardControls.xaml'}}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Margin" Value="0,0,3,0" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="0,0,14,0" />
                <Setter Property="MinHeight" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey SearchPanel.FindPrevButtonStyle}" BasedOn="{dx:TargetStaticResource Button.DefaultStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/StandardControls/StandardControls.xaml'}}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Margin" Value="0,0,3,0" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="0,0,14,0" />
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey SearchPanel.FindNextButtonStyle}" BasedOn="{dx:TargetStaticResource Button.DefaultStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/StandardControls/StandardControls.xaml'}}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey SearchPanel.CloseButtonStyle}" BasedOn="{dx:TargetStaticResource Button.DefaultStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/StandardControls/StandardControls.xaml'}}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Preset: Text -->

    <Style x:Key="{dxt:LWKey SearchPanel.ButtonTextBlockStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Margin" Value="12,0,12,1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Width" Value="Auto" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey SearchPanel.PanelTextBlockStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey SearchPanel.SearchPanelTextBrush}}" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="0,0,4,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Width" Value="Auto" />
    </Style>

    <!-- Shapes -->

    <DataTemplate x:Key="{dxt:LWKey SearchPanel.FindPrevButtonShape}">
        <Path Style="{StaticResource UIShape.Left}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey SearchPanel.FindNextButtonShape}">
        <Path Style="{StaticResource UIShape.Right}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey SearchPanel.OptionsButtonShape}">
        <Path Style="{StaticResource UIShape.Down}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey SearchPanel.CloseButtonShape}">
        <Path Style="{StaticResource UIShape.Close}" />
    </DataTemplate>
    <!--#endregion Base\\Core\Core\Themes\Base\SearchPanel.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\SuperTip.xaml-->


    <!-- General -->

    <Style x:Key="{dxt:LWKey SuperTip.ItemContentStyle}">
        <Setter Property="TextElement.Foreground" Value="{StaticResource {dxt:LWKey SuperTip.Foreground}}" />
        <Setter Property="TextElement.FontSize" Value="12" />
        <Setter Property="TextElement.FontFamily" Value="Segoe UI" />
        <Setter Property="TextElement.FontStyle" Value="Normal" />
        <Setter Property="TextElement.FontWeight" Value="Normal" />
    </Style>

    <Style x:Key="{dxt:LWKey SuperTip.HeaderContentStyle}">
        <Setter Property="TextElement.Foreground" Value="{StaticResource {dxt:LWKey SuperTip.Foreground}}" />
        <Setter Property="TextElement.FontSize" Value="12" />
        <Setter Property="TextElement.FontFamily" Value="Segoe UI" />
        <Setter Property="TextElement.FontStyle" Value="Normal" />
        <Setter Property="TextElement.FontWeight" Value="Bold" />
    </Style>

    <Style x:Key="{dxt:LWKey SuperTip.SeparatorContentStyle}" />

    <Style x:Key="{dxt:LWKey SuperTip.ItemLayoutStyle}" TargetType="{x:Type dx:Items2Panel}">
        <Setter Property="HorizontalIndent" Value="3" />
    </Style>

    <Style x:Key="{dxt:LWKey SuperTip.HeaderLayoutStyle}" TargetType="{x:Type dx:Items2Panel}">
        <Setter Property="HorizontalIndent" Value="3" />
    </Style>

    <!-- Data -->

    <DataTemplate x:Key="{dxt:LWKey SuperTip.ItemContentTemplate}">
        <TextBlock Text="{Binding}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey SuperTip.HeaderContentTemplate}">
        <TextBlock FontWeight="Bold" Text="{Binding}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey SuperTip.SeparatorContentTemplate}">
        <dx:DXBorder Background="{StaticResource Brush.Delimiter}" Height="1" Margin="0,3,0,3" />
    </DataTemplate>

    <!-- Border -->
    <!--#endregion Base\\Core\Core\Themes\Base\SuperTip.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\ThemedWindow\ThemedWindowCommon.xaml-->
    <!-- WindowStyle -->
    <!--#endregion Base\\Core\Core\Themes\Base\ThemedWindow\ThemedWindowCommon.xaml-->

    <!--#region Base\\Core\Core\Themes\Base\ThemedWindow\ThemedWindowBackButton.xaml-->
    <!-- General -->

    <DataTemplate x:Key="{dxt:LWKey ThemedWindow.BackButtonBackgroundGlyph}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.WindowBack}" />
    </DataTemplate>

    <!-- States -->

    <ControlTemplate x:Key="{dxt:LWKey ThemedWindow.BackButtonBackgroundNormalState}">
        <dx:DXBorder Background="Transparent" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ThemedWindow.BackButtonBackgroundMouseoverState}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Window.HeaderButton.HoverBackground, Office2019Colorful=Brush.Window.HeaderButton.HoverBackground, Office2019HighContrast=Brush.Window.HeaderButton.HoverBackground, Win11=Brush.Button.HoverBackground'}" CornerRadius="{dx:LWCornerRadius '0, Win11=(7,0,0,0)'}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ThemedWindow.BackButtonBackgroundPressedState}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.Window.HeaderButton.SelectionBackground, Office2019Colorful=Brush.Window.HeaderButton.SelectionBackground, Office2019HighContrast=Brush.Window.HeaderButton.SelectionBackground, Win11=Brush.Button.PressedBackground'}" CornerRadius="{dx:LWCornerRadius '0, Win11=(7,0,0,0)'}" />
    </ControlTemplate>

    <!--#endregion Base\\Core\Core\Themes\Base\ThemedWindow\ThemedWindowBackButton.xaml-->
    <!--#region Base\\Core\Core\Themes\Generic.xaml-->

    <Style x:Key="{dxt:LWKey FloatingContainer.FloatingContainerStyle}" TargetType="{x:Type dx:FloatingContainer}">
        <Setter Property="ContainerTemplate" Value="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerTemplate}}" />
        <Setter Property="Content" Value="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="FloatLocation" Value="{Binding Path=FloatLocation, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="FloatSize" Value="{Binding Path=FloatSize, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="IsOpen" Value="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="MaxHeight" Value="{Binding Path=MaxHeight, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="MaxWidth" Value="{Binding Path=MaxWidth, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="MinHeight" Value="{Binding Path=MinHeight, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="MinWidth" Value="{Binding Path=MinWidth, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Owner" Value="{Binding Path=Owner, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="dx:FloatingContainerControl.ContentOffset" Value="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBodyMargin}}" />
    </Style>
    <!--#endregion Base\\Core\Core\Themes\Generic.xaml-->

    <!--#region RIBBON HEADER ITEMS STYLES-->
    <ControlTemplate x:Key="{dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonBackgroundNormalState}">
        <dx:DXBorder Background="Transparent" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RibbonHeaderItems.RibbonCloseButtonBackgroundNormalState}">
        <dx:DXBorder Background="Transparent" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonBackgroundMouseOverState}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Backstage.HoverBackground, Office2019=Brush.Window.HeaderButton.HoverBackground, Win10=Brush.Window.HeaderButton.HoverBackground, Win11=Brush.Button.HoverBackground'}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonBackgroundPressedState}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Backstage.SelectionBackground, Office2019=Brush.Window.HeaderButton.SelectionBackground, Win10=Brush.Window.HeaderButton.SelectionBackground, Win11=Brush.Button.PressedBackground'}" />
    </ControlTemplate>
    <dx:CommonHeaderItemControlTemplateProvider
        x:Key="{dxt:LWKey RibbonHeaderItems.RibbonHeaderItemControlCommonTemplateProvider}"
        HeaderItemControlStyle="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonHeaderButtonStyle}}"
        MaximizeGlyphTemplate="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonMaximizeButtonGlyph}}"
        MinimizeGlyphTemplate="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonMinimizeButtonGlyph}}"
        MouseOverBackgroundTemplate="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonBackgroundMouseOverState}}"
        MouseOverForeground="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonForegroundMouseOverState}}"
        NormalBackgroundTemplate="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonBackgroundNormalState}}"
        NormalForeground="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonForegroundNormalState}}"
        PressedBackgroundTemplate="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonBackgroundPressedState}}"
        PressedForeground="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonDefaultButtonForegroundPressedState}}"
        RestoreGlyphTemplate="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonRestoreButtonGlyph}}" />
    <dx:CloseHeaderItemControlTemplateProvider
        x:Key="{dxt:LWKey RibbonHeaderItems.RibbonHeaderItemControlCloseTemplateProvider}"
        CloseGlyphTemplate="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonCloseButtonGlyph}}"
        HeaderItemControlStyle="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonHeaderCloseButtonStyle}}"
        MouseOverBackgroundTemplate="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonCloseButtonBackgroundMouseOverState}}"
        MouseOverForeground="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonCloseButtonForegroundMouseOverState}}"
        NormalBackgroundTemplate="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonCloseButtonBackgroundNormalState}}"
        NormalForeground="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonCloseButtonForegroundNormalState}}"
        PressedBackgroundTemplate="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonCloseButtonBackgroundPressedState}}"
        PressedForeground="{StaticResource {dxt:LWKey RibbonHeaderItems.RibbonCloseButtonForegroundPressedState}}" />
    <!--#endregion RIBBON HEADER ITEMS STYLES-->

    <!--#region DEFAULT STYLES-->
    <Style x:Key="BackgroundPanel.DefaultStyle" TargetType="dx:BackgroundPanel">
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerBackground}}" />
        <Setter Property="Control.Foreground" Value="{DynamicResource {dxt:LWKey ThemeColors.WhiteForegroundColor}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dx:BackgroundPanel">
                    <dx:DXBorder Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <ContentPresenter x:Name="contentPresenter" />
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>
    <Style x:Key="TransferControl.DefaultStyle" TargetType="{x:Type dx:TransferControl}">
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="ControlTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter Name="PART_ContentPresenter" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PreviousControlTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter Name="PART_ContentPresenter" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dx:TransferControl}">
                    <Grid>
                        <dx:TransferContentControl
                            Name="PART_PreviousContentPresenter"
                            Content="{TemplateBinding PreviousContent}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            IsPreviousContent="True"
                            SpeedRatio="{TemplateBinding SpeedRatio}"
                            Template="{TemplateBinding PreviousControlTemplate}" />
                        <dx:TransferContentControl
                            Name="PART_ContentPresenter"
                            Content="{TemplateBinding CurrentContent}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            SpeedRatio="{TemplateBinding SpeedRatio}"
                            Template="{TemplateBinding ControlTemplate}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ColumnWaitIndicator.DefaultStyle" TargetType="{x:Type dx:ColumnWaitIndicator}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="IsHitTestVisible" Value="{Binding IsHitTestVisible, FallbackValue=true, TargetNullValue=true}" />
        <Setter Property="IsIndeterminate" Value="True" />
        <Setter Property="Template" Value="{StaticResource DefaultWaitIndicator}" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="WaitIndicatorContainer.DefaultStyle" TargetType="{x:Type dx:WaitIndicatorContainer}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background, VS2019Blue=Brush.Window.Background, Win11=Brush.FlyoutBackground'}" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Focused, Office2019Colorful=Brush.Backstage.Window.Background, Office2019HighContrast=Brush.Backstage.Button.Background, VS2019Blue=Brush.Backstage.Window.Background, VS2019Dark=Brush.Border, Win11=Brush.FlyoutBorder'}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey WaitIndicator.WaitIndicatorContainerTemplate}}" />
    </Style>
    <Style x:Key="WaitIndicator.DefaultStyle" TargetType="{x:Type dx:WaitIndicator}">
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="ContentPadding" Value="0" />
        <Setter Property="Padding" Value="{dx:LWThickness '0, Win11=(6,0,0,0)'}" />
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey WaitIndicator.WaitIndicatorContentTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey WaitIndicator.WaitIndicatorTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>
    <Style x:Key="CornerBox.DefaultStyle" TargetType="dx:CornerBox">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dx:CornerBox">
                    <dx:DXBorder Background="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Control.Background, Office2019Colorful=Brush.Window.Background, Office2019HighContrast=Brush.Window.Background, Win11=Brush.Button.SimpleButtonBackground'}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ThemedWindow.DefaultStyle" BasedOn="{StaticResource {dxt:LWKey ThemedWindow.WindowStyle}}" TargetType="{x:Type dx:ThemedWindow}">
        <Setter Property="dx:HeaderItemControl.ExtendedCommonTemplateProvider" Value="{DynamicResource {dxt:LWKey RibbonHeaderItems.RibbonHeaderItemControlCommonTemplateProvider}}" />
        <Setter Property="dx:HeaderItemControl.ExtendedCloseTemplateProvider" Value="{DynamicResource {dxt:LWKey RibbonHeaderItems.RibbonHeaderItemControlCloseTemplateProvider}}" />
    </Style>
    <Style x:Key="FloatingContainerControl.DefaultStyle" TargetType="{x:Type dx:FloatingContainerControl}">
        <Setter Property="AdornerTemplate" Value="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerAdornerTemplate}}" />
        <Setter Property="WindowTemplate" Value="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerWindowTemplate}}" />
        <Setter Property="dx:FloatingContainerControl.ContentOffset" Value="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBodyMargin}}" />
    </Style>
    <Style x:Key="FloatingWindowContainer.DefaultStyle" TargetType="{x:Type dx:FloatingWindowContainer}">
        <Setter Property="ContainerTemplate" Value="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerTemplate}}" />
        <Setter Property="dx:FloatingContainerControl.ContentOffset" Value="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBodyMargin}}" />
    </Style>
    <Style x:Key="FloatingAdornerContainer.DefaultStyle" TargetType="{x:Type dx:FloatingAdornerContainer}">
        <Setter Property="ContainerTemplate" Value="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerTemplate}}" />
        <Setter Property="dx:FloatingContainerControl.ContentOffset" Value="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBodyMargin}}" />
    </Style>
    <Style x:Key="PopupFloatingContainer.DefaultStyle" TargetType="{x:Type dx:PopupFloatingContainer}">
        <Setter Property="ContainerTemplate" Value="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerTemplate}}" />
        <Setter Property="dx:FloatingContainerControl.ContentOffset" Value="{DynamicResource {dxt:LWKey DXWindow.FloatingContainerBodyMargin}}" />
    </Style>
    <Style x:Key="PopupBase.DefaultStyle" TargetType="{x:Type dx:PopupBase}">
        <Setter Property="AllowsTransparency" Value="True" />
    </Style>
    <Style x:Key="PopupBorderControl.DefaultStyle" TargetType="{x:Type dx:PopupBorderControl}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {dxt:LWKey ThemeColors.BlackForegroundColor}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey PopupBase.BorderTemplate}}" />
    </Style>
    <Style x:Key="EnumMemberInfoPresenter.DefaultStyle" TargetType="{x:Type dxmvvm:EnumMemberInfoPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxmvvm:EnumMemberInfoPresenter}">
                    <StackPanel Orientation="Horizontal" ToolTip="{Binding Path=EnumMemberInfo.Description, RelativeSource={RelativeSource TemplatedParent}}">
                        <dx:DXImage x:Name="PART_Image" RenderOptions.BitmapScalingMode="NearestNeighbor" />
                        <TextBlock Text="{Binding Path=EnumMemberInfo.Name, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Margin="4,0,0,0" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=EnumMemberInfo.ImageWidth, RelativeSource={RelativeSource Self}}" Value="{x:Static sys:Double.NaN}" />
                                <Condition Binding="{Binding Path=EnumMemberInfo.ImageHeight, RelativeSource={RelativeSource Self}}" Value="{x:Static sys:Double.NaN}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Image" Property="Stretch" Value="None" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Path=EnumMemberInfo.ShowImage, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="PART_Image" Property="Source" Value="{Binding Path=EnumMemberInfo.Image, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="PART_Image" Property="Width" Value="{Binding Path=EnumMemberInfo.ImageWidth, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="PART_Image" Property="Height" Value="{Binding Path=EnumMemberInfo.ImageHeight, RelativeSource={RelativeSource TemplatedParent}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToastContentControl.DefaultStyle" TargetType="{x:Type native:ToastContentControl}">
        <Setter Property="Command" Value="{Binding Path=ActivateCommand, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Width" Value="385" />
        <Setter Property="Height" Value="90" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type native:ToastContentControl}">
                    <ControlTemplate.Resources>
                        <dxmvvm:ObjectToObjectConverter x:Key="ObjectToVisibilityConverter" DefaultTarget="Visible">
                            <dxmvvm:MapItem Source="{x:Null}" Target="Collapsed" />
                        </dxmvvm:ObjectToObjectConverter>
                        <ControlTemplate x:Key="CloseButtonTemplate" TargetType="{x:Type Button}">
                            <Grid>
                                <dx:DXBorder x:Name="background" Opacity="0" Background="#FFFDFDFD" />
                                <dx:DXBorder x:Name="border" SnapsToDevicePixels="true">
                                    <Canvas
                                        Width="10"
                                        Height="10"
                                        Margin="1,1,0,0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center">
                                        <Line
                                            x:Name="line1"
                                            X1="0"
                                            Y1="0"
                                            X2="9.5"
                                            Y2="9.5"
                                            Stroke="White"
                                            StrokeThickness="2" />
                                        <Line
                                            x:Name="line2"
                                            X1="0"
                                            Y1="9.5"
                                            X2="9.5"
                                            Y2="0"
                                            Stroke="White"
                                            StrokeThickness="2" />
                                    </Canvas>
                                </dx:DXBorder>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Opacity" TargetName="background" Value="0.13" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Opacity" TargetName="background" Value="1" />
                                    <Setter Property="Stroke" TargetName="line1" Value="Black" />
                                    <Setter Property="Stroke" TargetName="line2" Value="Black" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="root">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Appeared">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="PART_AppearedAnimation1" Storyboard.TargetName="root" Storyboard.TargetProperty="Opacity" From="0" To="1" />
                                        <DoubleAnimation x:Name="PART_AppearedAnimation2" Storyboard.TargetName="root" Storyboard.TargetProperty="RenderTransform.Children[1].X" From="385" To="0">
                                            <DoubleAnimation.EasingFunction>
                                                <ExponentialEase Exponent="5" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="dismissButton" Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.3" />
                                        <DoubleAnimation Storyboard.TargetName="root" Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX" To="1" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="root" Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY" To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="selfWrapper" Storyboard.TargetProperty="Tag.TimerPaused">
                                            <DiscreteBooleanKeyFrame Value="True" KeyTime="0" />
                                        </BooleanAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="dismissButton" Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.3" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="selfWrapper" Storyboard.TargetProperty="Tag.TimerPaused">
                                            <DiscreteBooleanKeyFrame Value="True" KeyTime="0" />
                                        </BooleanAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="root" Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX" To="0.9" Duration="0:0:0.15" />
                                        <DoubleAnimation Storyboard.TargetName="root" Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY" To="0.9" Duration="0:0:0.15" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Activated">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="root" Storyboard.TargetProperty="RenderTransform.Children[1].X" To="385" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <ExponentialEase Exponent="5" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Dismissed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="root" Storyboard.TargetProperty="RenderTransform.Children[1].X" To="385" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <ExponentialEase Exponent="5" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="TimedOut">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="PART_TimedOutAnimation" Storyboard.TargetName="root" Storyboard.TargetProperty="Opacity" To="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1" CenterX="192.5" CenterY="45" />
                                <TranslateTransform />
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <dx:DXBorder x:Name="selfWrapper" Tag="{Binding RelativeSource={RelativeSource TemplatedParent}}" />
                        <ContentPresenter />
                        <Button
                            x:Name="dismissButton"
                            Template="{StaticResource CloseButtonTemplate}"
                            Opacity="0"
                            Command="{Binding DismissCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Width="30"
                            Height="30" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion DEFAULT STYLES-->


    <!--#region Base\\Core\Core\Themes\TransferStyles.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey TransferControl.TransferControl_FadeStyle}" BasedOn="{StaticResource TransferControl.DefaultStyle}" TargetType="{x:Type dx:TransferControl}">
        <Setter Property="ControlTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter Name="PART_ContentPresenter" dx:DataObjectBase.NeedsResetEvent="True">
                        <ContentPresenter.Triggers>
                            <EventTrigger RoutedEvent="dx:TransferControl.ContentChanged">
                                <BeginStoryboard Name="opacityStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:1" From="0" SpeedRatio="{Binding SpeedRatio, RelativeSource={RelativeSource TemplatedParent}}" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger xmlns:dxdobj="http://schemas.devexpress.com/winfx/2008/xaml/core" RoutedEvent="dxdobj:DataObjectBase.Reset">
                                <SkipStoryboardToFill BeginStoryboardName="opacityStoryboard" />
                            </EventTrigger>
                        </ContentPresenter.Triggers>
                    </ContentPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PreviousControlTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter Name="PART_ContentPresenter" dx:DataObjectBase.NeedsResetEvent="True">
                        <ContentPresenter.Triggers>
                            <EventTrigger RoutedEvent="dx:TransferControl.ContentChanged">
                                <BeginStoryboard Name="opacityStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:1" From="1" SpeedRatio="{Binding SpeedRatio, RelativeSource={RelativeSource TemplatedParent}}" Storyboard.TargetProperty="Opacity" To="0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger xmlns:dxdobj="http://schemas.devexpress.com/winfx/2008/xaml/core" RoutedEvent="dxdobj:DataObjectBase.Reset">
                                <SkipStoryboardToFill BeginStoryboardName="opacityStoryboard" />
                            </EventTrigger>
                        </ContentPresenter.Triggers>
                    </ContentPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxt:LWKey TransferControl.TransferControl_TranslationFromLeftToRightStyle}" BasedOn="{StaticResource TransferControl.DefaultStyle}" TargetType="{x:Type dx:TransferControl}">
        <Setter Property="ControlTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter Name="PART_ContentPresenter">
                        <ContentPresenter.RenderTransform>
                            <TranslateTransform />
                        </ContentPresenter.RenderTransform>
                        <ContentPresenter.Triggers>
                            <EventTrigger RoutedEvent="dx:TransferControl.ContentChanged">
                                <BeginStoryboard>
                                    <Storyboard SpeedRatio="{Binding SpeedRatio, RelativeSource={RelativeSource TemplatedParent}}">
                                        <DoubleAnimation Duration="0:0:1" From="{Binding ActualWidth, ElementName=PART_ContentPresenter, Converter={dx:NegativeConverter}}" Storyboard.TargetProperty="RenderTransform.X" To="0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ContentPresenter.Triggers>
                    </ContentPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PreviousControlTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter Name="PART_ContentPresenter">
                        <ContentPresenter.RenderTransform>
                            <TranslateTransform />
                        </ContentPresenter.RenderTransform>
                        <ContentPresenter.Triggers>
                            <EventTrigger RoutedEvent="dx:TransferControl.ContentChanged">
                                <BeginStoryboard>
                                    <Storyboard SpeedRatio="{Binding SpeedRatio, RelativeSource={RelativeSource TemplatedParent}}">
                                        <DoubleAnimation Duration="0:0:1" From="0" Storyboard.TargetProperty="RenderTransform.X" To="{Binding ActualWidth, ElementName=PART_ContentPresenter}" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ContentPresenter.Triggers>
                    </ContentPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxt:LWKey TransferControl.TransferControl_Spin3DStyle}" BasedOn="{StaticResource TransferControl.DefaultStyle}" TargetType="{x:Type dx:TransferControl}">
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dx:TransferControl}">
                    <Grid>
                        <dx:DXBorder Visibility="Hidden">
                            <ContentPresenter
                                Name="previousContent"
                                Content="{TemplateBinding PreviousContent}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                        </dx:DXBorder>
                        <dx:DXBorder Name="contentBorder">
                            <ContentPresenter
                                Name="content"
                                Content="{TemplateBinding CurrentContent}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                        </dx:DXBorder>
                        <Viewport3D
                            Name="PART_ContentPresenter"
                            ClipToBounds="False"
                            dx:DataObjectBase.NeedsResetEvent="True"
                            IsHitTestVisible="False"
                            Opacity="0">
                            <Viewport3D.Triggers>
                                <EventTrigger RoutedEvent="dx:TransferControl.ContentChanged">
                                    <BeginStoryboard Name="rotateStoryboard">
                                        <Storyboard SpeedRatio="{Binding SpeedRatio, RelativeSource={RelativeSource TemplatedParent}}">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentPresenter" Storyboard.TargetProperty="Opacity">
                                                <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="contentBorder" Storyboard.TargetProperty="Opacity">
                                                <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CubeRotation" Storyboard.TargetProperty="Angle">
                                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                                <SplineDoubleKeyFrame KeySpline="0.257,0.008,0.304,0.998" KeyTime="00:00:01" Value="540" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames BeginTime="0:0:1" Storyboard.TargetName="PART_ContentPresenter" Storyboard.TargetProperty="Opacity">
                                                <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames BeginTime="0:0:1" Storyboard.TargetName="contentBorder" Storyboard.TargetProperty="Opacity">
                                                <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger xmlns:dxdobj="http://schemas.devexpress.com/winfx/2008/xaml/core" RoutedEvent="dxdobj:DataObjectBase.Reset">
                                    <SkipStoryboardToFill BeginStoryboardName="rotateStoryboard" />
                                </EventTrigger>
                            </Viewport3D.Triggers>
                            <Viewport3D.Camera>
                                <PerspectiveCamera FieldOfView="20" LookDirection="0,0,-1">
                                    <PerspectiveCamera.Position>
                                        <MultiBinding Converter="{dx:SpinStyleCameraPositionConverter}">
                                            <Binding ElementName="content" Path="ActualWidth" />
                                            <Binding Path="FieldOfView" RelativeSource="{RelativeSource Self}" />
                                        </MultiBinding>
                                    </PerspectiveCamera.Position>
                                </PerspectiveCamera>
                            </Viewport3D.Camera>
                            <Viewport3D.Children>
                                <ModelVisual3D>
                                    <ModelVisual3D.Content>
                                        <Model3DGroup>
                                            <AmbientLight Color="{StaticResource Color.Border}" />
                                            <DirectionalLight Direction="-0.3,-0.4,-0.5" />
                                        </Model3DGroup>
                                    </ModelVisual3D.Content>
                                </ModelVisual3D>
                                <ModelVisual3D x:Name="Cube">
                                    <ModelVisual3D.Transform>
                                        <Transform3DGroup>
                                            <ScaleTransform3D ScaleX="{Binding ActualWidth, ElementName=content}" ScaleY="{Binding ActualHeight, ElementName=content}" />
                                            <RotateTransform3D>
                                                <RotateTransform3D.Rotation>
                                                    <AxisAngleRotation3D x:Name="CubeRotation" Angle="0" Axis="0,1,0" />
                                                </RotateTransform3D.Rotation>
                                            </RotateTransform3D>
                                        </Transform3DGroup>
                                    </ModelVisual3D.Transform>
                                    <ModelVisual3D.Content>
                                        <GeometryModel3D x:Name="OB_Cube">
                                            <GeometryModel3D.BackMaterial>
                                                <DiffuseMaterial>
                                                    <DiffuseMaterial.Brush>
                                                        <VisualBrush Transform="1,0,0,-1,0,1" ViewportUnits="Absolute" Visual="{Binding ElementName=previousContent}" />
                                                    </DiffuseMaterial.Brush>
                                                </DiffuseMaterial>
                                            </GeometryModel3D.BackMaterial>
                                            <GeometryModel3D.Material>
                                                <DiffuseMaterial>
                                                    <DiffuseMaterial.Brush>
                                                        <VisualBrush ViewportUnits="Absolute" Visual="{Binding ElementName=content}">
                                                            <VisualBrush.Transform>
                                                                <TransformGroup>
                                                                    <MatrixTransform Matrix="1,0,0,-1,0,1" />
                                                                    <ScaleTransform CenterX="0.5" ScaleX="-1" />
                                                                </TransformGroup>
                                                            </VisualBrush.Transform>
                                                        </VisualBrush>
                                                    </DiffuseMaterial.Brush>
                                                </DiffuseMaterial>
                                            </GeometryModel3D.Material>
                                            <GeometryModel3D.Geometry>
                                                <MeshGeometry3D
                                                    x:Name="ME_Cube"
                                                    Positions="-0.5,-0.5,0 -0.5,0.5,0 0.5,0.5,0 0.5,-0.5,0"
                                                    TextureCoordinates="0,0 0,1 1,1 1,0"
                                                    TriangleIndices="0 1 2 0 2 3" />
                                            </GeometryModel3D.Geometry>
                                        </GeometryModel3D>
                                    </ModelVisual3D.Content>
                                </ModelVisual3D>
                            </Viewport3D.Children>
                        </Viewport3D>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion Base\\Core\Core\Themes\TransferStyles.xaml-->


</ResourceDictionary>