<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:aero="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxbi="http://schemas.devexpress.com/winfx/2008/xaml/bars/internal"
    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm">
    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Core/Win11.Common.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <dx:EnumToObjectConverter x:Key="ScrollBarModeToScrollBackVisibilityConverter" DefaultValue="Visible">
        <dx:EnumToObjectConverter.Values>
            <dx:EnumObjectProvider x:Key="TouchOverlap" Value="Collapsed" />
        </dx:EnumToObjectConverter.Values>
    </dx:EnumToObjectConverter>
    <dx:EnumToObjectConverter x:Key="ScrollBarModeToHardWidthScrollConverter" DefaultValue="Collapsed">
        <dx:EnumToObjectConverter.Values>
            <dx:EnumObjectProvider x:Key="Standard" Value="Visible" />
        </dx:EnumToObjectConverter.Values>
    </dx:EnumToObjectConverter>
    <SolidColorBrush x:Key="Menu_Background" Color="Transparent" />
    <SolidColorBrush x:Key="Menu_Border" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="Menu_Foreground" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="MenuItem_Foreground" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="MenuItem_HoverForeground" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="MenuItem_PressedForeground" Color="{StaticResource Color.Foreground.Muted}" />
    <SolidColorBrush x:Key="MenuItem_HoverBackground" Color="{StaticResource Color.ListItem.HoverBackground}" />
    <SolidColorBrush x:Key="MenuItem_HoverBorder" Color="{StaticResource Color.ListItem.HoverBorder}" />
    <SolidColorBrush x:Key="MenuItem_SelectionBackground" Color="{StaticResource Color.ListItem.SelectionBackground}" />
    <SolidColorBrush x:Key="MenuItem_SelectionBorder" Color="{StaticResource Color.ListItem.SelectionBorder}" />
    <SolidColorBrush x:Key="ContextMenu_Background" Color="{StaticResource Color.FlyoutBackground}" />
    <SolidColorBrush x:Key="ContextMenu_Border" Color="{StaticResource Color.FlyoutBorder}" />
    <SolidColorBrush x:Key="ContextMenuItem_Foreground" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="ContextMenuItem_HoverForeground" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="ContextMenuItem_PressedForeground" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="ContextMenuItem_HoverBackground" Color="{StaticResource Color.ListItem.HoverBackground}" />
    <SolidColorBrush x:Key="ContextMenuItem_HoverBorder" Color="{StaticResource Color.ListItem.HoverBorder}" />
    <SolidColorBrush x:Key="ContextMenuItem_SelectionBackground" Color="{StaticResource Color.ListItem.SelectionBackground}" />
    <SolidColorBrush x:Key="ContextMenuItem_SelectionBorder" Color="{StaticResource Color.ListItem.SelectionBorder}" />
    <ControlTemplate x:Key="{dxt:LWKey Common.HorizontalScrollBarPageButtonTemplate}" TargetType="{x:Type RepeatButton}">
        <dx:DXBorder Background="Transparent">
            <Rectangle Fill="{TemplateBinding Background}" Margin="{DynamicResource {dxt:LWKey Common.ScrollBarHorizontalThumbMargin}}" Opacity="0.38" />
        </dx:DXBorder>
    </ControlTemplate>
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="MinHeight" Value="6" />
        <Setter Property="MinWidth" Value="6" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{StaticResource Brush.Foreground.Muted}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Foreground.Secondary}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Foreground.Secondary}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Foreground.Muted}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Foreground.Muted}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey Common.VerticalScrollBarThumbStyle}" BasedOn="{StaticResource ScrollBarThumb}" TargetType="{x:Type Thumb}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.VerticalScrollBarThumbTemplate}}" />
        <Setter Property="Width" Value="10" />
    </Style>
    <Style x:Key="{dxt:LWKey Common.HorizontalScrollBarThumbStyle}" BasedOn="{StaticResource ScrollBarThumb}" TargetType="{x:Type Thumb}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.HorizontalScrollBarThumbTemplate}}" />
        <Setter Property="Height" Value="10" />
    </Style>
    <Thickness x:Key="{dxt:LWKey Common.ScrollBarVerticalThumbMargin}">3,0,3,0</Thickness>
    <Thickness x:Key="{dxt:LWKey Common.ScrollBarHorizontalThumbMargin}">0,3,0,3</Thickness>
    <Style x:Key="ExpandCollapseToggleStyle.Expanded.Path.Style" TargetType="{x:Type Path}" BasedOn="{StaticResource UIShape.Bold.RightDown}"/>

    <Style x:Key="{dxt:LWKey ScrollBar.ScrollingCornerStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.SimpleButtonBackground}" />
    </Style>
    <Style x:Key="Button.DefaultStyle" BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.SimpleButtonBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.Foreground}}" />
        <Setter Property="Padding" Value="11,4,11,4" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.LightweightTemplate}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey Brushes.ContrastSvgPalette}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14,12,14,12" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Button.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonHoverBorder}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.CheckedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.Button.CheckedBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.CheckedBorder}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.PressedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.Button.PressedBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonPressedBorder}" />
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Muted}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Disabled}" />
                <Setter Property="Background" Value="{StaticResource Brush.Button.DisableBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.DisableBorder}" />
            </Trigger>
            <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.ButtonControlTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButton.DefaultStyle" BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.SimpleButtonBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.Foreground}}" />
        <Setter Property="Padding" Value="11,4,11,4" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.LightweightTemplate}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey Brushes.ContrastSvgPalette}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14,12,14,12" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Button.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonHoverBorder}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.PressedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.Button.PressedBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonPressedBorder}" />
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Muted}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.CheckedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.Button.CheckedBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.CheckedBorder}" />
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Alt}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ToggleButton.IsChecked" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource Brush.Button.CheckedHoverBackground}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.CheckedHoverBorder}" />
                    <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Alt}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ToggleButton.IsChecked" Value="True" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource Brush.Button.CheckedPressedBackground}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.CheckedPressedBorder}" />
                    <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.AltMuted}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Disabled}" />
                <Setter Property="Background" Value="{StaticResource Brush.Button.DisableBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.DisableBorder}" />
            </Trigger>
            <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.ButtonBaseControlTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RepeatButton.DefaultStyle" BasedOn="{StaticResource {x:Type RepeatButton}}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.SimpleButtonBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.Foreground}}" />
        <Setter Property="Padding" Value="11,4,11,4" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.LightweightTemplate}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey Brushes.ContrastSvgPalette}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14,12,14,12" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Button.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonHoverBorder}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.PressedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.Button.PressedBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonPressedBorder}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.CheckedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.Button.CheckedBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.CheckedBorder}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Disabled}" />
                <Setter Property="Background" Value="{StaticResource Brush.Button.DisableBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.DisableBorder}" />
            </Trigger>
            <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.ButtonBaseControlTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="simpleButtonBaseStyle" TargetType="{x:Type dx:SimpleButton}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.Foreground}}" />
        <Setter Property="GlyphToContentOffset" Value="5" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey Brushes.ContrastSvgPalette}}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
    </Style>

    <Style x:Key="DropDownButton.DefaultStyle" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:DropDownButton}">
        <Setter Property="ArrowAlignment" Value="Right" />
        <Setter Property="ArrowPadding" Value="0,3,10,3" />
        <Setter Property="Padding" Value="10,3,10,3" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DropDownButton.AsyncDropDownButtonTemplate}}" />
        <Style.Triggers>
            <Trigger Property="AsyncDisplayMode" Value="None">
                <Setter Property="Template" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.DropDownButtonTemplate}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="ArrowPadding" Value="0,13,27,13" />
                <Setter Property="Padding" Value="14,13,14,13" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.CheckedForeground}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.PressedForeground}}" />
            </Trigger>
            <Trigger Property="ButtonKind" Value="Repeat">
                <Setter Property="ClickMode" Value="Press" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SplitButton.DefaultStyle" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:SplitButton}">
        <Setter Property="ArrowAlignment" Value="Right" />
        <Setter Property="ArrowPadding" Value="10,3,10,3" />
        <Setter Property="Padding" Value="10,3,10,3" />
        <Setter Property="ArrowBorderThickness" Value="1" />
        <Setter Property="SeparatorThickness" Value="1" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DropDownButton.AsyncSplitButtonTemplate}}" />
        <Style.Triggers>
            <Trigger Property="AsyncDisplayMode" Value="None">
                <Setter Property="Template" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.SplitButtonTemplate}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14,11,14,11" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                    <Condition Property="IsMouseOverArrow" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.CheckedForeground}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsMouseOverArrow" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.PressedForeground}}" />
            </MultiTrigger>
            <Trigger Property="ButtonKind" Value="Repeat">
                <Setter Property="ClickMode" Value="Press" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SimpleButton.DefaultStyle" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:SimpleButton}">
        <Setter Property="Padding" Value="10,3,10,3" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.AsyncButtonTemplate}}" />
        <Style.Triggers>
            <Trigger Property="AsyncDisplayMode" Value="None">
                <Setter Property="Template" Value="{DynamicResource ResourceKey={dxt:LWKey Button.ButtonControlTemplate}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14,13,14,13" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Padding" Value="0" />
                <Setter Property="GlyphToContentOffset" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.CheckedForeground}}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.CheckedForeground}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:LWKey DropDownButton.PressedForeground}}" />
            </MultiTrigger>
            <Trigger Property="ButtonKind" Value="Repeat">
                <Setter Property="ClickMode" Value="Press" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CheckBox.DefaultStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="Root" Background="Transparent" Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid
                            x:Name="Field"
                            Grid.Column="0"
                            Height="18"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="0,3,0,3"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Width="18">
                            <dx:DXBorder
                                x:Name="IsDefault"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3" />
                            <dx:DXBorder
                                x:Name="IsChecked"
                                Background="{StaticResource Brush.Accent}"
                                CornerRadius="3"
                                Opacity="0" />
                            <dx:DXBorder
                                x:Name="IsFocused"
                                BorderBrush="{StaticResource Brush.Accent}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                Opacity="0" />
                            <Path
                                x:Name="GlyphIndeterminate"
                                Fill="{StaticResource Brush.Foreground.Alt}"
                                Style="{StaticResource UIShape.Indeterminate}"
                                Visibility="Collapsed" />
                            <Path
                                x:Name="GlyphChecked"
                                Fill="{StaticResource Brush.Foreground.Alt}"
                                Opacity="0"
                                Style="{StaticResource UIShape.Checked}">
                                <Path.OpacityMask>
                                    <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop x:Name="GradientDirection1" Color="Black" Offset="0" />
                                            <GradientStop x:Name="GradientDirection2" Color="Transparent" Offset="1" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Path.OpacityMask>
                            </Path>
                        </Grid>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Grid.ColumnSpan="1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="6,0,0,0"
                            RecognizesAccessKey="True"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocused" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Editor.PressedBorder}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Border}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard Timeline.DesiredFrameRate="60">
                                        <DoubleAnimation Duration="0" From="0.0" Storyboard.TargetName="GradientDirection1" Storyboard.TargetProperty="Offset" To="1.0" />
                                        <DoubleAnimation Duration="0" From="0.0" Storyboard.TargetName="GradientDirection2" Storyboard.TargetProperty="Offset" To="1.0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Setter Property="Opacity" TargetName="GlyphChecked" Value="1" />
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0" />
                            <Setter Property="Opacity" TargetName="IsChecked" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="GlyphIndeterminate" Value="Visible" />
                            <Setter Property="Opacity" TargetName="IsChecked" Value="1" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="Height" TargetName="GlyphChecked" Value="16" />
                            <Setter Property="Width" TargetName="GlyphChecked" Value="16" />
                            <Setter Property="Height" TargetName="Field" Value="28" />
                            <Setter Property="Width" TargetName="Field" Value="28" />
                            <Setter Property="Height" TargetName="GlyphIndeterminate" Value="16" />
                            <Setter Property="Width" TargetName="GlyphIndeterminate" Value="16" />
                        </Trigger>
                        <Trigger Property="FlowDirection" Value="RightToLeft">
                            <Setter Property="LayoutTransform" TargetName="Field">
                                <Setter.Value>
                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="-1" ScaleY="1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxItem.DefaultStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="0,1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="8,5,3,6" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="dx:SvgImageHelper.State" Value="Normal" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid x:Name="Root">
                        <Rectangle
                            x:Name="IsFocus"
                            RadiusX="3"
                            RadiusY="3"
                            Stroke="{StaticResource Brush.Accent}"
                            StrokeDashArray="1 2"
                            StrokeThickness="1"
                            Visibility="Collapsed" />
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4" />
                        <dx:DXBorder
                            x:Name="SelectionIndicator"
                            Background="{StaticResource Brush.Accent}"
                            CornerRadius="2"
                            HorizontalAlignment="Left"
                            Margin="0,5"
                            Opacity="0"
                            Width="3" />
                        <ContentPresenter
                            x:Name="Content"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Visibility" TargetName="IsFocus" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" Value="{StaticResource Brush.ListItem.HoverBackground}" />
                            <Setter Property="BorderBrush" Value="{StaticResource Brush.ListItem.HoverBorder}" />
                            <Setter Property="dx:SvgImageHelper.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                            <Setter Property="BorderBrush" Value="{StaticResource Brush.ListItem.SelectionBorder}" />
                            <Setter Property="Visibility" TargetName="IsFocus" Value="Collapsed" />
                            <Setter Property="dx:SvgImageHelper.State" Value="Pressed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                            <Setter Property="BorderBrush" Value="{StaticResource Brush.ListItem.SelectionBorder}" />
                            <Setter Property="Opacity" TargetName="IsDefault" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                            <Setter Property="BorderBrush" Value="{StaticResource Brush.ListItem.SelectionBorder}" />
                            <Setter Property="Opacity" TargetName="SelectionIndicator" Value="1" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey Brushes.ContrastSvgPalette}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SliderRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <dx:DXBorder Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalSliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Root">
                        <dx:DXBorder
                            x:Name="outter"
                            Background="{dx:LWBrush 'Brush.Button.SimpleButtonBackground, Win11Dark=Brush.Control.Background'}"
                            BorderBrush="{StaticResource Brush.Border}"
                            BorderThickness="1"
                            CornerRadius="99"
                            Height="22"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="22" />
                        <dx:DXBorder
                            x:Name="Gradient"
                            BorderThickness="1"
                            CornerRadius="99"
                            Height="22"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="22">
                            <dx:DXBorder.BorderBrush>
                                <LinearGradientBrush EndPoint="0,1" Opacity="0.85" StartPoint="0,0">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Color="{StaticResource Color.Border}" Offset="0" />
                                        <GradientStop Color="{StaticResource Color.Border}" Offset="0.6" />
                                        <GradientStop Color="#88777777" Offset="1" />
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </dx:DXBorder.BorderBrush>
                        </dx:DXBorder>
                        <dx:DXBorder
                            x:Name="inner"
                            CornerRadius="99"
                            Height="14"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="14">
                            <dx:DXBorder.Background>
                                <RadialGradientBrush>
                                    <GradientStop x:Name="GradientStop1" Color="{StaticResource Color.Accent}" Offset="0.8" />
                                    <GradientStop x:Name="GradientStop2" Color="Transparent" Offset="0.8" />
                                    <GradientStop x:Name="GradientStop3" Color="Transparent" Offset="1" />
                                </RadialGradientBrush>
                            </dx:DXBorder.Background>
                        </dx:DXBorder>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="1" />
                                        <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.8" />
                                        <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.8" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.19" From="1" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.7" />
                                        <DoubleAnimation Duration="0:0:0.19" From="1" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.7" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.19" From="0.7" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.8" />
                                        <DoubleAnimation Duration="0:0:0.19" From="0.7" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.8" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="Margin" TargetName="Root" Value="-22" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalSliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Root">
                        <dx:DXBorder
                            x:Name="outter"
                            Background="{dx:LWBrush 'Brush.Button.SimpleButtonBackground, Win11Dark=Brush.Control.Background'}"
                            BorderBrush="{StaticResource Brush.Border}"
                            BorderThickness="1"
                            CornerRadius="99"
                            Height="22"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="22" />
                        <dx:DXBorder
                            x:Name="Gradient"
                            BorderThickness="1"
                            CornerRadius="99"
                            Height="22"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="22">
                            <dx:DXBorder.BorderBrush>
                                <LinearGradientBrush EndPoint="0,1" Opacity="0.85" StartPoint="0,0">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Color="{StaticResource Color.Border}" Offset="0" />
                                        <GradientStop Color="{StaticResource Color.Border}" Offset="0.6" />
                                        <GradientStop Color="#88777777" Offset="1" />
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </dx:DXBorder.BorderBrush>
                        </dx:DXBorder>
                        <dx:DXBorder
                            x:Name="inner"
                            CornerRadius="99"
                            Height="14"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="14">
                            <dx:DXBorder.Background>
                                <RadialGradientBrush>
                                    <GradientStop x:Name="GradientStop1" Color="{StaticResource Color.Accent}" Offset="0.8" />
                                    <GradientStop x:Name="GradientStop2" Color="Transparent" Offset="0.8" />
                                    <GradientStop x:Name="GradientStop3" Color="Transparent" Offset="1" />
                                </RadialGradientBrush>
                            </dx:DXBorder.Background>
                        </dx:DXBorder>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="1" />
                                        <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.8" />
                                        <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.8" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.19" From="1" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.7" />
                                        <DoubleAnimation Duration="0:0:0.19" From="1" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.7" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.19" From="0.7" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.8" />
                                        <DoubleAnimation Duration="0:0:0.19" From="0.7" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.8" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="Margin" TargetName="Root" Value="-22" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalSliderUpThumbStyle" BasedOn="{StaticResource HorizontalSliderThumbStyle}" TargetType="{x:Type Thumb}" />
    <Style x:Key="HorizontalSliderDownThumbStyle" BasedOn="{StaticResource HorizontalSliderThumbStyle}" TargetType="{x:Type Thumb}" />
    <Style x:Key="VerticalSliderLeftThumbStyle" BasedOn="{StaticResource VerticalSliderThumbStyle}" TargetType="{x:Type Thumb}" />
    <Style x:Key="VerticalSliderRightThumbStyle" BasedOn="{StaticResource VerticalSliderThumbStyle}" TargetType="{x:Type Thumb}" />
    <Style x:Key="Slider.DefaultStyle" TargetType="{x:Type Slider}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <dx:DXBorder
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    Width="{TemplateBinding Width}">
                        <Grid x:Name="Root" MinHeight="22">
                            <TickBar
                            x:Name="TopTick"
                            Fill="{StaticResource Brush.Foreground.Primary}"
                            Height="4"
                            Panel.ZIndex="1"
                            Placement="Top"
                            VerticalAlignment="Top"
                            Visibility="Collapsed" />
                            <Grid Margin="1,0,1,0" VerticalAlignment="Center">
                                <dx:DXBorder
                                x:Name="TrackBackground"
                                Background="{StaticResource Brush.Border}"
                                Height="2"
                                VerticalAlignment="Center" />
                                <dx:DXBorder x:Name="FocusState" Background="{StaticResource Brush.Accent}" Visibility="Collapsed" />
                                <Canvas>
                                    <Rectangle
                                    x:Name="PART_SelectionRange"
                                    Fill="{StaticResource Brush.Foreground.Primary}"
                                    Height="2"
                                    Opacity="0" />
                                </Canvas>
                            </Grid>
                            <Track x:Name="PART_Track" Panel.ZIndex="2" VerticalAlignment="Center">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb
                                    x:Name="Thumb"
                                    Background="{StaticResource Brush.Border}"
                                    Height="{TemplateBinding Height}"
                                    Style="{StaticResource HorizontalSliderThumbStyle}" />
                                </Track.Thumb>
                            </Track>
                            <TickBar
                            x:Name="BottomTick"
                            Fill="{StaticResource Brush.Foreground.Primary}"
                            Height="4"
                            Panel.ZIndex="1"
                            Placement="Bottom"
                            VerticalAlignment="Bottom"
                            Visibility="Collapsed" />
                        </Grid>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Style" TargetName="Thumb" Value="{StaticResource HorizontalSliderUpThumbStyle}" />
                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
                            <Setter Property="Style" TargetName="Thumb" Value="{StaticResource HorizontalSliderDownThumbStyle}" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelectionRangeEnabled" Value="True">
                            <Setter Property="Opacity" TargetName="PART_SelectionRange" Value="1" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="FocusState" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.35" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="MinHeight" TargetName="Root" Value="44" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Slider}">
                            <dx:DXBorder
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Height="{TemplateBinding Height}">
                                <Grid x:Name="Root" MinWidth="22">
                                    <TickBar
                                    x:Name="LeftTick"
                                    Fill="{StaticResource Brush.Foreground.Primary}"
                                    HorizontalAlignment="Left"
                                    Panel.ZIndex="1"
                                    Placement="Left"
                                    Visibility="Collapsed"
                                    Width="4" />
                                    <Grid HorizontalAlignment="Center" Margin="0,1,0,1">
                                        <dx:DXBorder Name="TrackBackground" Background="{StaticResource Brush.Border}" Width="2" />
                                        <dx:DXBorder x:Name="FocusState" Background="{StaticResource Brush.Accent}" Visibility="Collapsed" />
                                        <Canvas>
                                            <Rectangle
                                            x:Name="PART_SelectionRange"
                                            Fill="{StaticResource Brush.Foreground.Primary}"
                                            Opacity="0"
                                            Width="2" />
                                        </Canvas>
                                    </Grid>
                                    <Track x:Name="PART_Track" Panel.ZIndex="2">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}" />
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb
                                            x:Name="Thumb"
                                            Background="{StaticResource Brush.Border}"
                                            Style="{StaticResource VerticalSliderThumbStyle}"
                                            Width="{TemplateBinding Width}" />
                                        </Track.Thumb>
                                    </Track>
                                    <TickBar
                                    x:Name="RightTick"
                                    Fill="{StaticResource Brush.Foreground.Primary}"
                                    HorizontalAlignment="Right"
                                    Panel.ZIndex="1"
                                    Placement="Right"
                                    Visibility="Collapsed"
                                    Width="4" />
                                </Grid>
                            </dx:DXBorder>
                            <ControlTemplate.Triggers>
                                <Trigger Property="TickPlacement" Value="TopLeft">
                                    <Setter Property="Visibility" TargetName="LeftTick" Value="Visible" />
                                    <Setter Property="Style" TargetName="Thumb" Value="{StaticResource VerticalSliderLeftThumbStyle}" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="BottomRight">
                                    <Setter Property="Visibility" TargetName="RightTick" Value="Visible" />
                                    <Setter Property="Style" TargetName="Thumb" Value="{StaticResource VerticalSliderRightThumbStyle}" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="Both">
                                    <Setter Property="Visibility" TargetName="LeftTick" Value="Visible" />
                                    <Setter Property="Visibility" TargetName="RightTick" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsSelectionRangeEnabled" Value="True">
                                    <Setter Property="Opacity" TargetName="PART_SelectionRange" Value="1" />
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Visibility" TargetName="FocusState" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="Root" Value="0.35" />
                                </Trigger>
                                <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                    <Setter Property="MinWidth" TargetName="Root" Value="44" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MenuScrollViewer" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <dx:DXBorder Grid.Row="1" Grid.Column="0">
                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}" />
                        </dx:DXBorder>
                        <RepeatButton
                            Grid.Row="0"
                            Grid.Column="0"
                            Command="{x:Static ScrollBar.LineUpCommand}"
                            CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="false"
                            Style="{DynamicResource {dxt:LWKey SubMenuBarControl.ScrollUpButtonStyle}}">
                            <RepeatButton.Visibility>
                                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                        </RepeatButton>
                        <RepeatButton
                            Grid.Row="2"
                            Grid.Column="0"
                            Command="{x:Static ScrollBar.LineDownCommand}"
                            CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="false"
                            Style="{DynamicResource {dxt:LWKey SubMenuBarControl.ScrollDownButtonStyle}}">
                            <RepeatButton.Visibility>
                                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey Common.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <dx:DXBorder
                x:Name="Bg"
                BorderThickness="1"
                CornerRadius="4"
                Margin="1"
                SnapsToDevicePixels="true" />
            <DockPanel>
                <ContentPresenter
                    x:Name="Icon"
                    ContentSource="Icon"
                    Height="16"
                    HorizontalAlignment="Center"
                    Margin="4,0,2,0"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center"
                    Width="16" />
                <Path
                    x:Name="GlyphPanel"
                    Fill="{TemplateBinding MenuItem.Foreground}"
                    FlowDirection="LeftToRight"
                    Margin="6,0,0,0"
                    Style="{StaticResource UIShape.Checked}"
                    VerticalAlignment="Center"
                    Visibility="Collapsed" />
                <ContentPresenter
                    ContentSource="Header"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center" />
            </DockPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Foreground" Value="{StaticResource MenuItem_HoverForeground}" />
                <Setter Property="BorderBrush" TargetName="Bg" Value="{StaticResource MenuItem_HoverBorder}" />
                <Setter Property="Background" TargetName="Bg" Value="{StaticResource MenuItem_HoverBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Foreground" Value="{StaticResource MenuItem_PressedForeground}" />
                <Setter Property="Background" TargetName="Bg" Value="{StaticResource MenuItem_SelectionBackground}" />
                <Setter Property="BorderBrush" TargetName="Bg" Value="{StaticResource MenuItem_SelectionBorder}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" Value="{StaticResource MenuItem_Foreground}" />
                <Setter Property="BorderBrush" TargetName="Bg" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Background" TargetName="Bg" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="dx:SvgImageHelper.State" TargetName="Icon" Value="Hover" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="dx:SvgImageHelper.State" TargetName="Icon" Value="Pressed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Common.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <dx:DXBorder
                Name="Bg"
                BorderThickness="1"
                CornerRadius="4"
                Margin="1" />
            <DockPanel>
                <ContentPresenter
                    x:Name="Icon"
                    ContentSource="Icon"
                    Height="16"
                    HorizontalAlignment="Center"
                    Margin="4,0,2,0"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center"
                    Width="16" />
                <Path
                    x:Name="GlyphPanel"
                    Fill="{TemplateBinding MenuItem.Foreground}"
                    FlowDirection="LeftToRight"
                    Margin="6,0,0,0"
                    Style="{StaticResource UIShape.Checked}"
                    VerticalAlignment="Center"
                    Visibility="Collapsed" />
                <ContentPresenter
                    ContentSource="Header"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center" />
            </DockPanel>
            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="true"
                Focusable="false"
                HorizontalOffset="1"
                IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                VerticalOffset="-1">
                <aero:SystemDropShadowChrome Name="Shdw" Color="Transparent" CornerRadius="8">
                    <dx:DXBorder
                        Name="SubMenuBorder"
                        Background="{StaticResource ContextMenu_Background}"
                        BorderBrush="{StaticResource ContextMenu_Border}"
                        BorderThickness="1"
                        CornerRadius="8">
                        <ScrollViewer Name="SubMenuScrollViewer" Margin="2" Style="{StaticResource MenuScrollViewer}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top"
                                    Width="0">
                                    <Rectangle
                                        Name="OpaqueRect"
                                        Fill="{Binding ElementName=SubMenuBorder, Path=Background}"
                                        Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}"
                                        Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}" />
                                </Canvas>
                                <dx:DXBorder>
                                    <ItemsPresenter
                                        Name="ItemsPresenter"
                                        Grid.IsSharedSizeScope="true"
                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                        KeyboardNavigation.TabNavigation="Cycle"
                                        Margin="1"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </dx:DXBorder>
                            </Grid>
                        </ScrollViewer>
                    </dx:DXBorder>
                </aero:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Popup.HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5" />
                <Setter Property="Color" TargetName="Shdw" Value="#10000000" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Foreground" Value="{StaticResource MenuItem_HoverForeground}" />
                <Setter Property="Background" TargetName="Bg" Value="{StaticResource MenuItem_HoverBackground}" />
                <Setter Property="BorderBrush" TargetName="Bg" Value="{StaticResource MenuItem_HoverBorder}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Foreground" Value="{StaticResource MenuItem_PressedForeground}" />
                <Setter Property="Background" TargetName="Bg" Value="{StaticResource ContextMenuItem_SelectionBackground}" />
                <Setter Property="BorderBrush" TargetName="Bg" Value="{StaticResource ContextMenuItem_SelectionBorder}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" Value="{StaticResource MenuItem_Foreground}" />
                <Setter Property="BorderBrush" TargetName="Bg" Value="{StaticResource Brush.Accent}" />
                <Setter Property="Background" TargetName="Bg" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="Foreground" Value="{StaticResource MenuItem_PressedForeground}" />
                <Setter Property="BorderBrush" TargetName="Bg" Value="{StaticResource MenuItem_SelectionBorder}" />
                <Setter Property="Background" TargetName="Bg" Value="{StaticResource MenuItem_SelectionBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="dx:SvgImageHelper.State" TargetName="Icon" Value="Hover" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="dx:SvgImageHelper.State" TargetName="Icon" Value="Pressed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#region StandardControls-->
    <!-- ScrollBar.xaml -->
    <!-- General -->
    <!-- Button -->
    <!-- Thumb -->
    <ControlTemplate x:Key="{dxt:LWKey Common.VerticalScrollBarThumbTemplate}" TargetType="{x:Type Thumb}">
        <Grid Background="Transparent">
            <Grid.RowDefinitions>
                <RowDefinition x:Name="Row1" Height="4" />
                <RowDefinition x:Name="Row2" Height="*" />
                <RowDefinition x:Name="Row3" Height="4" />
            </Grid.RowDefinitions>
            <Rectangle
                x:Name="CornerSide1"
                Grid.Row="0"
                Fill="{TemplateBinding Background}"
                Height="4"
                Margin="2,-1,2,0"
                RadiusX="3"
                RadiusY="3"
                Width="{TemplateBinding Height}" />
            <Rectangle
                x:Name="IsDefault"
                Grid.Row="1"
                Fill="{TemplateBinding Background}"
                Height="{TemplateBinding Height}"
                Margin="2,-3,2,-3"
                MinHeight="{TemplateBinding MinHeight}"
                MinWidth="{TemplateBinding MinWidth}"
                Width="{TemplateBinding Width}" />
            <Rectangle
                x:Name="CornerSide2"
                Grid.Row="2"
                Fill="{TemplateBinding Background}"
                Height="4"
                Margin="2,0,2,-2"
                RadiusX="3"
                RadiusY="3"
                Width="{TemplateBinding Height}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="IsDefault" Value="{StaticResource Brush.Button.SimpleButtonBorder}" />
                <Setter Property="Fill" TargetName="CornerSide1" Value="{StaticResource Brush.Button.SimpleButtonBorder}" />
                <Setter Property="Fill" TargetName="CornerSide2" Value="{StaticResource Brush.Button.SimpleButtonBorder}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Common.HorizontalScrollBarThumbTemplate}" TargetType="{x:Type Thumb}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="Column1" Width="4" />
                <ColumnDefinition x:Name="Column2" Width="*" />
                <ColumnDefinition x:Name="Column3" Width="4" />
            </Grid.ColumnDefinitions>
            <Rectangle
                x:Name="CornerSide1"
                Grid.Column="0"
                Fill="{TemplateBinding Background}"
                Height="{TemplateBinding Width}"
                Margin="-1,2,0,2"
                RadiusX="3"
                RadiusY="3"
                Width="4" />
            <Rectangle
                x:Name="IsDefault"
                Grid.Column="1"
                Fill="{TemplateBinding Background}"
                Height="{TemplateBinding Height}"
                Margin="-3,2,-3,2"
                MinHeight="{TemplateBinding MinHeight}"
                MinWidth="{TemplateBinding MinWidth}"
                Width="{TemplateBinding Width}" />
            <Rectangle
                x:Name="CornerSide2"
                Grid.Column="2"
                Fill="{TemplateBinding Background}"
                Height="{TemplateBinding Width}"
                Margin="0,2,-2,2"
                RadiusX="3"
                RadiusY="3 "
                Width="4" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="IsDefault" Value="{StaticResource Brush.Button.SimpleButtonBorder}" />
                <Setter Property="Fill" TargetName="CornerSide1" Value="{StaticResource Brush.Button.SimpleButtonBorder}" />
                <Setter Property="Fill" TargetName="CornerSide2" Value="{StaticResource Brush.Button.SimpleButtonBorder}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- Thumb Size Keys -->
    <!-- Corner -->
    <!-- ScrollBar -->
    <Style x:Key="ScrollBarButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Secondary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle
                            x:Name="IsDefault"
                            Fill="{TemplateBinding Background}"
                            Stroke="{TemplateBinding BorderBrush}"
                            StrokeThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Muted}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Brush.Button.SimpleButtonBorder}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey Common.VerticalScrollBarPageButtonTemplate}" TargetType="{x:Type RepeatButton}">
        <dx:DXBorder Background="Transparent">
            <Rectangle Fill="{TemplateBinding Background}" Margin="{DynamicResource {dxt:LWKey Common.ScrollBarVerticalThumbMargin}}" Opacity="0.38" />
        </dx:DXBorder>
    </ControlTemplate>
    <Style x:Key="VerticalScrollBarPageButtonStyle" BasedOn="{StaticResource ScrollBarPageButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.VerticalScrollBarPageButtonTemplate}}" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey Common.VerticalScrollBarTemplate}" TargetType="{x:Type ScrollBar}">
        <Grid UseLayoutRounding="False">
            <dx:DXBorder Background="{TemplateBinding Background}" Opacity="0.87" />
            <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="0" />
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition x:Name="Row1" MaxHeight="12" />
                    <RowDefinition x:Name="Row2" Height="*" />
                    <RowDefinition x:Name="Row3" MaxHeight="12" />
                </Grid.RowDefinitions>
                <RepeatButton
                    x:Name="PART_LineUpButton"
                    Grid.Row="0"
                    Command="{x:Static ScrollBar.LineUpCommand}"
                    Style="{StaticResource ScrollBarButtonStyle}">
                    <Path
                        x:Name="LineUpButton_Arrow"
                        Fill="{Binding ElementName=PART_LineUpButton, Path=Foreground}"
                        Style="{StaticResource UIShape.Bold.Up}"
                        Width="8" />
                </RepeatButton>
                <Track
                    x:Name="PART_Track"
                    Grid.Row="1"
                    IsDirectionReversed="True"
                    Margin="0,1,0,1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButtonStyle}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButtonStyle}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Style="{DynamicResource {dxt:LWKey Common.VerticalScrollBarThumbStyle}}" />
                    </Track.Thumb>
                </Track>
                <RepeatButton
                    x:Name="PART_LineDownButton"
                    Grid.Row="2"
                    Command="{x:Static ScrollBar.LineDownCommand}"
                    Style="{StaticResource ScrollBarButtonStyle}">
                    <Path
                        x:Name="LineDownButton_Arrow"
                        Fill="{Binding ElementName=PART_LineDownButton, Path=Foreground}"
                        Style="{StaticResource UIShape.Bold.Down}"
                        Width="8" />
                </RepeatButton>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Row1" Value="22" />
                <Setter Property="MinHeight" TargetName="Row3" Value="22" />
                <Setter Property="Width" TargetName="LineUpButton_Arrow" Value="10" />
                <Setter Property="Height" TargetName="LineUpButton_Arrow" Value="5" />
                <Setter Property="Width" TargetName="LineDownButton_Arrow" Value="10" />
                <Setter Property="Height" TargetName="LineDownButton_Arrow" Value="5" />
            </Trigger>
            <DataTrigger Binding="{Binding ElementName=Thumb, Path=IsDragging}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_Track" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=PART_LineUpButton, Path=IsPressed}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_LineUpButton" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=PART_LineDownButton, Path=IsPressed}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_LineDownButton" Value="1" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="HorizontalScrollBarPageButtonStyle" BasedOn="{StaticResource ScrollBarPageButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.HorizontalScrollBarPageButtonTemplate}}" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey Common.HorizontalScrollBarTemplate}" TargetType="{x:Type ScrollBar}">
        <Grid UseLayoutRounding="False">
            <dx:DXBorder Background="{TemplateBinding Background}" Opacity="0.87" />
            <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="0" />
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="Column1" MaxWidth="12" />
                    <ColumnDefinition x:Name="Column2" Width="*" />
                    <ColumnDefinition x:Name="Column3" MaxWidth="12" />
                </Grid.ColumnDefinitions>
                <RepeatButton
                    x:Name="PART_LineLeftButton"
                    Grid.Column="0"
                    Command="{x:Static ScrollBar.LineLeftCommand}"
                    Style="{StaticResource ScrollBarButtonStyle}">
                    <Path
                        x:Name="LineLeftButton_Arrow"
                        Fill="{Binding ElementName=PART_LineLeftButton, Path=Foreground}"
                        Height="8"
                        Margin="0,1,0,0"
                        Style="{StaticResource UIShape.Bold.Left}" />
                </RepeatButton>
                <Track x:Name="PART_Track" Grid.Column="1" Margin="1,0,1,0">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButtonStyle}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButtonStyle}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Style="{DynamicResource {dxt:LWKey Common.HorizontalScrollBarThumbStyle}}" />
                    </Track.Thumb>
                </Track>
                <RepeatButton
                    x:Name="PART_LineRightButton"
                    Grid.Column="2"
                    Command="{x:Static ScrollBar.LineRightCommand}"
                    Style="{StaticResource ScrollBarButtonStyle}">
                    <Path
                        x:Name="LineRightButton_Arrow"
                        Fill="{Binding ElementName=PART_LineRightButton, Path=Foreground}"
                        Height="8"
                        Margin="0,1,0,0"
                        Style="{StaticResource UIShape.Bold.Right}" />
                </RepeatButton>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Column1" Value="22" />
                <Setter Property="MinWidth" TargetName="Column3" Value="22" />
                <Setter Property="Width" TargetName="LineLeftButton_Arrow" Value="5" />
                <Setter Property="Height" TargetName="LineLeftButton_Arrow" Value="10" />
                <Setter Property="Width" TargetName="LineRightButton_Arrow" Value="5" />
                <Setter Property="Height" TargetName="LineRightButton_Arrow" Value="10" />
            </Trigger>
            <DataTrigger Binding="{Binding ElementName=Thumb, Path=IsDragging}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_Track" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=PART_LineLeftButton, Path=IsPressed}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_LineLeftButton" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=PART_LineRightButton, Path=IsPressed}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_LineRightButton" Value="1" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion StandardControls-->
    <!-- CheckBox -->
    <!--#region ComboBox-->
    <Style x:Key="ComboBoxDropDownButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Root" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnContent" Width="*" />
                            <ColumnDefinition x:Name="ColumnButton" Width="30" />
                        </Grid.ColumnDefinitions>
                        <Grid Grid.Column="1">
                            <dx:DXBorder
                                x:Name="IsDefault"
                                Background="{TemplateBinding Background}"
                                CornerRadius="3"
                                Margin="3" />
                            <Path x:Name="Content" Fill="{StaticResource Brush.Foreground.Secondary}" Style="{StaticResource UIShape.Down}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Button.HoverBackground}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Content" Value="{StaticResource Brush.Foreground.Muted}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Button.PressedBackground}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="Content" Value="{StaticResource Brush.Foreground.Secondary}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="Width" TargetName="ColumnButton" Value="42" />
                            <Setter Property="Margin" TargetName="Content" Value="14" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboxBoxReadOnlyMode" TargetType="{x:Type ComboBox}">
        <Grid x:Name="Root">
            <Grid x:Name="PART_Editor" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <dx:DXBorder
                    x:Name="IsDefault"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="3" />
                <dx:DXBorder
                    x:Name="PART_BottomBorder"
                    BorderBrush="{StaticResource {dxt:LWKey Common.EditorBottomBorder}}"
                    BorderThickness="1"
                    CornerRadius="0,0,3,3"
                    Height="10"
                    VerticalAlignment="Bottom" />
                <dx:DXBorder Margin="2,0,2,0">
                    <ContentPresenter
                        x:Name="Content"
                        Content="{TemplateBinding SelectionBoxItem}"
                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        IsHitTestVisible="False"
                        Margin="{TemplateBinding Padding}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </dx:DXBorder>
                <ToggleButton
                    x:Name="DropDownButton"
                    Focusable="False"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxDropDownButton}" />
            </Grid>
            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="True"
                IsOpen="{TemplateBinding IsDropDownOpen}"
                Margin="1"
                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                Placement="Bottom"
                VerticalOffset="-1">
                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Root}">
                    <dx:DXBorder
                        x:Name="DropDownBorder"
                        Background="{StaticResource Brush.FlyoutBackground}"
                        BorderBrush="{StaticResource Brush.FlyoutBorder}"
                        BorderThickness="1"
                        CornerRadius="8">
                        <ScrollViewer x:Name="DropDownScrollViewer" Margin="2">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle
                                        x:Name="OpaqueRect"
                                        Fill="{Binding Background, ElementName=DropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                        Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" Margin="1" />
                            </Grid>
                        </ScrollViewer>
                    </dx:DXBorder>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <!--Trigger Property="IsFocused" Value="True">
                <Setter Property="Opacity"
                        TargetName="IsDefault"
                        Value="1"/>
            </Trigger-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Editor.DisableBorder}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Editor.DisableBackground}" />
                <Setter Property="Opacity" TargetName="PART_BottomBorder" Value="0" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Disabled}" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Opacity" TargetName="PART_BottomBorder" Value="0" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="DropDownButton" Value="42" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="8,4,3,5" />
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid x:Name="Root" Margin="{TemplateBinding Margin}">
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4" />
                        <ContentPresenter
                            x:Name="Content"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBorder}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBorder}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.SelectionBorder}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <SolidColorBrush x:Key="{dxt:LWKey Common.ReadOnlyBackgroundBrush}" Color="Transparent" Opacity="1" />
    <Style x:Key="TextBox.DefaultStyle" TargetType="{x:Type TextBox}">
        <Setter Property="dx:ScrollBarExtensions.ScrollBehavior" Value="{dx:TextBoxScrollBehavior}" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Editor.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CaretBrush" Value="{StaticResource Brush.Foreground.Primary}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Secondary}" />
        <Setter Property="Padding" Value="6,4,4,4" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="SelectionBrush" Value="{StaticResource Brush.Accent}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3" />
                        <dx:DXBorder
                            x:Name="PART_BottomBorder"
                            BorderBrush="{StaticResource {dxt:LWKey Common.EditorBottomBorder}}"
                            BorderThickness="1"
                            CornerRadius="0,0,3,3"
                            Height="10"
                            VerticalAlignment="Bottom" />
                        <dx:DXBorder
                            x:Name="PART_FocusedBorder"
                            Background="{StaticResource {dxt:LWKey Common.EditorFocusedBorder}}"
                            CornerRadius="4"
                            Height="10"
                            VerticalAlignment="Bottom"
                            Visibility="Collapsed" />
                        <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="{StaticResource Brush.Editor.DisableBorder}" />
                            <Setter Property="Background" Value="{StaticResource Brush.Editor.DisableBackground}" />
                            <Setter Property="Opacity" TargetName="PART_BottomBorder" Value="0" />
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Disabled}" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Opacity" TargetName="PART_BottomBorder" Value="0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True" />
                                <Condition Property="IsReadOnly" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_FocusedBorder" Value="Visible" />
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsFocused" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Background" Value="{StaticResource Brush.Editor.HoverBackground}" />
            </MultiTrigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Muted}" />
                <Setter Property="Background" Value="{StaticResource Brush.Editor.PressedBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Editor.PressedBorder}" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey Common.ReadOnlyBackgroundBrush}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="13" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ComboBox.DefaultStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Editor.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Secondary}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
        <Setter Property="Padding" Value="6,4,26,4" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="Root">
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Margin="1"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Placement="Bottom"
                            VerticalOffset="-1">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Root}">
                                <dx:DXBorder
                                    x:Name="DropDownBorder"
                                    Background="{StaticResource Brush.FlyoutBackground}"
                                    BorderBrush="{StaticResource Brush.FlyoutBorder}"
                                    BorderThickness="1"
                                    CornerRadius="8">
                                    <ScrollViewer x:Name="DropDownScrollViewer" Margin="2">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle
                                                    x:Name="OpaqueRect"
                                                    Fill="{Binding Background, ElementName=DropDownBorder}"
                                                    Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                                    Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" Margin="1" />
                                        </Grid>
                                    </ScrollViewer>
                                </dx:DXBorder>
                            </Grid>
                        </Popup>
                        <TextBox
                            x:Name="PART_EditableTextBox"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Padding="{TemplateBinding Padding}"
                            Style="{StaticResource TextBox.DefaultStyle}"
                            Text="{TemplateBinding SelectionBoxItem}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <ToggleButton
                            x:Name="DropDownButton"
                            Focusable="False"
                            HorizontalAlignment="Right"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxDropDownButton}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True" />
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="IsEnabled" TargetName="DropDownButton" Value="False" />
                            <Setter Property="IsEnabled" TargetName="PART_EditableTextBox" Value="False" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="MinWidth" TargetName="DropDownButton" Value="42" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Background" Value="{StaticResource Brush.Editor.HoverBackground}" />
            </Trigger>
            <Trigger Property="IsEditable" Value="False">
                <Setter Property="Template" Value="{StaticResource ComboxBoxReadOnlyMode}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="True" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="12,12,44,12" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="False" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="14" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion ComboBox-->
    <!-- Context Menu -->

        <ControlTemplate x:Key="MenuSeparatorTemplate" TargetType="{x:Type Separator}">
            <Grid Margin="0,6,0,4" SnapsToDevicePixels="true" UseLayoutRounding="False">
                <Rectangle Fill="{StaticResource Brush.Separator}" Height="1" Margin="30,0,1,1" />
            </Grid>
        </ControlTemplate>

        <Style x:Key="ContextMenu.DefaultStyle" TargetType="{x:Type ContextMenu}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="Template" Value="{StaticResource MenuSeparatorTemplate}" />
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="{StaticResource ContextMenu_Background}" />
        <Setter Property="Foreground" Value="{StaticResource ContextMenuItem_Foreground}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource ContextMenu_Border}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey BarSvgPalette.SvgPaletteInMenu}}" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <aero:SystemDropShadowChrome
                        Name="Shdw"
                        Color="Transparent"
                        CornerRadius="8"
                        SnapsToDevicePixels="true">
                        <dx:DXBorder
                            Name="ContextMenuBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="8">
                            <ScrollViewer Name="ContextMenuScrollViewer" Margin="2" Style="{StaticResource MenuScrollViewer}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas
                                        Height="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top"
                                        Width="0">
                                        <Rectangle
                                            Name="OpaqueRect"
                                            Fill="{Binding ElementName=ContextMenuBorder, Path=Background}"
                                            Height="{Binding ElementName=ContextMenuBorder, Path=ActualHeight}"
                                            Width="{Binding ElementName=ContextMenuBorder, Path=ActualWidth}" />
                                    </Canvas>
                                    <dx:DXBorder>
                                        <ItemsPresenter
                                            Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Margin="{TemplateBinding Padding}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </dx:DXBorder>
                                </Grid>
                            </ScrollViewer>
                        </dx:DXBorder>
                    </aero:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5" />
                            <Setter Property="Color" TargetName="Shdw" Value="#10000000" />
                        </Trigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="ContextMenuScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding ElementName=ContextMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding ElementName=ContextMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuItem.DefaultStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey BarSvgPalette.SvgPaletteInMenu}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.SubmenuItemTemplateKey}}" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="8,4,8,4" />
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.TopLevelHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="8,5,8,6" />
                <Setter Property="Margin" Value="1" />
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="2,5,2,6" />
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.SubmenuHeaderTemplateKey}}" />
                <Setter Property="Foreground" Value="{StaticResource ContextMenuItem_Foreground}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="2,5,2,6" />
                <Setter Property="Margin" Value="1" />
                <Setter Property="Foreground" Value="{StaticResource ContextMenuItem_Foreground}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                    <Condition Property="Role" Value="TopLevelHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="7,15,8,15" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                    <Condition Property="Role" Value="TopLevelItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="7,14,8,14" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                    <Condition Property="Role" Value="SubmenuHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="2,14" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                    <Condition Property="Role" Value="SubmenuItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="2,14" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="Menu.DefaultStyle" TargetType="{x:Type Menu}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="Template" Value="{StaticResource MenuSeparatorTemplate}" />
            </Style>
        </Style.Resources>
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey BarSvgPalette.SvgPaletteInMenu}}" />
        <Setter Property="Background" Value="{StaticResource Menu_Background}" />
        <Setter Property="Foreground" Value="{StaticResource Menu_Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <dx:DXBorder
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxt:LWKey ScrollBar.PageButtonTouchStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <dx:DXBorder Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxt:LWKey ScrollBar.ScrollThumbHorzTouchStyle}" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Background="#01FFFFFF" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{TemplateBinding Background}"
                            CornerRadius="2"
                            Margin="{TemplateBinding Margin}"
                            Opacity="0.55"
                            VerticalAlignment="Stretch" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxt:LWKey ScrollBar.ScrollThumbVertTouchStyle}" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Background="#01FFFFFF" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{TemplateBinding Background}"
                            CornerRadius="2"
                            HorizontalAlignment="Stretch"
                            Margin="{TemplateBinding Margin}"
                            Opacity="0.55" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollBar -->

    <ControlTemplate x:Key="{dxt:LWKey ScrollBar.ScrollBarVertTouchTemplate}" TargetType="{x:Type ScrollBar}">
        <Grid x:Name="Root" HorizontalAlignment="Right" Width="5">
            <dx:DXBorder
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Visibility="{Binding Path=(dx:ScrollBarExtensions.ScrollBarMode), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollBarModeToScrollBackVisibilityConverter}}" />
            <dx:DXBorder x:Name="IsHot" Background="{TemplateBinding Foreground}" Opacity="0">
                <dx:DXBorder.Visibility>
                    <Binding ElementName="Root" Path="Width">
                        <Binding.Converter>
                            <dxmvvm:ObjectToObjectConverter DefaultTarget="Visible">
                                <dxmvvm:MapItem Source="5" Target="Collapsed" />
                            </dxmvvm:ObjectToObjectConverter>
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.Visibility>
            </dx:DXBorder>
            <Track
                x:Name="PART_Track"
                HorizontalAlignment="Center"
                IsDirectionReversed="true"
                Visibility="{Binding Path=(dx:ScrollBarExtensions.ScrollBarMode), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollBarModeToHardWidthScrollConverter}}"
                Width="5">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{DynamicResource {dxt:LWKey ScrollBar.PageButtonTouchStyle}}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{DynamicResource {dxt:LWKey ScrollBar.PageButtonTouchStyle}}" />
                </Track.IncreaseRepeatButton>
                <Track.Thumb>
                    <Thumb
                        x:Name="Thumb"
                        Background="{StaticResource Brush.Foreground.Primary}"
                        Margin="0,0,1,0"
                        Style="{DynamicResource {dxt:LWKey ScrollBar.ScrollThumbVertTouchStyle}}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True" />
                    <Condition Property="dx:ScrollBarExtensions.ScrollViewerMouseMoved" Value="True" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:01.5" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="sb">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="Root" Storyboard.TargetProperty="(FrameworkElement.Width)" To="12" />
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(FrameworkElement.Width)" To="6" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="sb" />
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation BeginTime="0:0:0.5" Duration="0:0:0.38" Storyboard.TargetName="Root" Storyboard.TargetProperty="(FrameworkElement.Width)" To="5" />
                            <DoubleAnimation BeginTime="0:0:0.5" Duration="0:0:0.38" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(FrameworkElement.Width)" To="5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ScrollBarExtensions.ScrollViewerSizeChanged" Value="True" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard x:Name="sbSizeChanged">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="sbSizeChanged" />
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Thumb" Value="0" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ScrollBar.ScrollBarHorzTouchTemplate}" TargetType="{x:Type ScrollBar}">
        <Grid x:Name="Root" Height="5" VerticalAlignment="Bottom">
            <dx:DXBorder
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Visibility="{Binding Path=(dx:ScrollBarExtensions.ScrollBarMode), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollBarModeToScrollBackVisibilityConverter}}" />
            <dx:DXBorder x:Name="IsHot" Background="{TemplateBinding Foreground}" Opacity="0">
                <dx:DXBorder.Visibility>
                    <Binding ElementName="Root" Path="Height">
                        <Binding.Converter>
                            <dxmvvm:ObjectToObjectConverter DefaultTarget="Visible">
                                <dxmvvm:MapItem Source="5" Target="Collapsed" />
                            </dxmvvm:ObjectToObjectConverter>
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.Visibility>
            </dx:DXBorder>
            <Track
                x:Name="PART_Track"
                Height="5"
                IsEnabled="{TemplateBinding IsMouseOver}"
                VerticalAlignment="Center"
                Visibility="{Binding Path=(dx:ScrollBarExtensions.ScrollBarMode), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollBarModeToHardWidthScrollConverter}}">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{DynamicResource {dxt:LWKey ScrollBar.PageButtonTouchStyle}}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{DynamicResource {dxt:LWKey ScrollBar.PageButtonTouchStyle}}" />
                </Track.IncreaseRepeatButton>
                <Track.Thumb>
                    <Thumb
                        x:Name="Thumb"
                        Background="{StaticResource Brush.Foreground.Primary}"
                        Margin="0,0,0,1"
                        Style="{DynamicResource {dxt:LWKey ScrollBar.ScrollThumbHorzTouchStyle}}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True" />
                    <Condition Property="dx:ScrollBarExtensions.ScrollViewerMouseMoved" Value="True" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:01.5" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="sbMouseOver">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="Root" Storyboard.TargetProperty="(FrameworkElement.Height)" To="12" />
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(FrameworkElement.Height)" To="6" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="sbMouseOver" />
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation BeginTime="0:0:0.5" Duration="0:0:0.5" Storyboard.TargetName="Root" Storyboard.TargetProperty="(FrameworkElement.Height)" To="5" />
                            <DoubleAnimation BeginTime="0:0:0.5" Duration="0:0:0.5" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(FrameworkElement.Height)" To="5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ScrollBarExtensions.ScrollViewerSizeChanged" Value="True" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard x:Name="sbSizeChanged">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="sbSizeChanged" />
                </MultiTrigger.ExitActions>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="TabItem.DefaultStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Secondary}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="12,3,12,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Root">
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4,4,0,0" />
                        <ContentPresenter
                            x:Name="Content"
                            ContentSource="Header"
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True"
                            TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBackground}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Button.SimpleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.PanelBorder}" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Top">
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,1,0" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="0" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,0,1,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="0,1,0,1" />
                            <Setter Property="CornerRadius" TargetName="IsDefault" Value="0,0,4,4" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,0,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="1,0,1,0" />
                            <Setter Property="CornerRadius" TargetName="IsDefault" Value="4,0,0,4" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="0,1,1,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="1,0,1,0" />
                            <Setter Property="CornerRadius" TargetName="IsDefault" Value="0,4,4,0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Top" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,1,0" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="0,0,0,-1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Bottom" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,0,1,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="0,-1,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Left" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,0,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="0,0,-1,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Right" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="0,1,1,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="-1,0,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBackground}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#region Win11Base-->
    <ControlTemplate x:Key="{dxt:LWKey Button.LightweightTemplate}" TargetType="{x:Type ButtonBase}">
        <Grid>
            <dx:DXBorder
                x:Name="border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="4"
                SnapsToDevicePixels="true" />
            <dx:DXBorder
                BorderBrush="{StaticResource {dxt:LWKey Common.ButtonBottomBorder}}"
                BorderThickness="1"
                CornerRadius="0,0,4,4"
                Height="10"
                VerticalAlignment="Bottom" />
            <ContentPresenter
                x:Name="contentPresenter"
                Focusable="False"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                Margin="{TemplateBinding Padding}"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="true">
                <Setter Property="MinWidth" TargetName="border" Value="44" />
                <Setter Property="MinHeight" TargetName="border" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="RadioButton.DefaultStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualBorder}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="Root" Background="Transparent">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid
                                x:Name="Field"
                                Grid.Column="0"
                                Height="20"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="0,2,0,2"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Width="20">
                                <dx:DXBorder
                                    x:Name="IsDefault"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="14" />
                                <dx:DXBorder x:Name="Elipse" CornerRadius="8" Margin="1">
                                    <dx:DXBorder.Background>
                                        <RadialGradientBrush>
                                            <GradientStop x:Name="GradientStop1" Color="{StaticResource Color.Foreground.Alt}" Offset="0.6" />
                                            <GradientStop x:Name="GradientStop2" Color="Transparent" Offset="0.6" />
                                            <GradientStop x:Name="GradientStop3" Color="Transparent" Offset="1" />
                                        </RadialGradientBrush>
                                    </dx:DXBorder.Background>
                                </dx:DXBorder>
                            </Grid>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Grid.Column="1"
                                Grid.ColumnSpan="1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="6,0,0,0"
                                RecognizesAccessKey="True"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="InternalFocusStates">
                                <VisualState x:Name="InternalFocused" />
                                <VisualState x:Name="InternalUnfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Opacity" TargetName="Elipse" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Accent}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Accent}" />
                        </Trigger>
                        <!-- MouseOver Unchecked -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Editor.PressedBorder}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <!-- MouseOver Checked -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.12" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.7" />
                                        <DoubleAnimation Duration="0:0:0.12" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.7" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.25" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.6" />
                                        <DoubleAnimation Duration="0:0:0.25" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.6" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <!-- MouseOver Checked + Focused -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.12" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.7" />
                                        <DoubleAnimation Duration="0:0:0.12" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.7" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.25" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.6" />
                                        <DoubleAnimation Duration="0:0:0.25" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.6" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <!-- Pressed Unchecked -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="Elipse" Value="1" />
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.06" From="0.4" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.6" />
                                        <DoubleAnimation Duration="0:0:0.06" From="0.4" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.6" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.6" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.6" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <!-- Pressed Checked -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="Elipse" Value="1" />
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.12" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.5" />
                                        <DoubleAnimation Duration="0:0:0.12" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.12" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.6" />
                                        <DoubleAnimation Duration="0:0:0.12" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.6" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="Height" TargetName="Elipse" Value="16" />
                            <Setter Property="Width" TargetName="Elipse" Value="16" />
                            <Setter Property="Height" TargetName="Field" Value="28" />
                            <Setter Property="Width" TargetName="Field" Value="28" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="dxei:ControlHelper.ShowFocusedState" Value="{Binding IsFocused, RelativeSource={RelativeSource Self}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="0,13,0,13" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ProgressBar.DefaultStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="MinHeight" Value="24" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Accent}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="Root" MinHeight="{TemplateBinding MinHeight}">
                        <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid x:Name="PART_Track" Height="3">
                                <Rectangle
                                    x:Name="Background"
                                    Fill="{StaticResource Brush.Control.NeutralBackground}"
                                    Height="1"
                                    Opacity="1"
                                    RadiusX="1"
                                    RadiusY="1" />
                                <Grid x:Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left">
                                    <Rectangle
                                        x:Name="Indicator"
                                        Fill="{TemplateBinding Foreground}"
                                        RadiusX="1.5"
                                        RadiusY="1.5" />
                                    <Rectangle
                                        x:Name="Animation"
                                        Fill="{TemplateBinding Foreground}"
                                        RenderTransformOrigin="-0.5,0.5"
                                        Visibility="Collapsed">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="0.25" />
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                            </Grid>
                        </dx:DXBorder>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="Root">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Animation" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PasswordBox.DefaultStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="PasswordChar" Value="•" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Editor.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CaretBrush" Value="{StaticResource Brush.Foreground.Primary}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Secondary}" />
        <Setter Property="Padding" Value="6,4,4,4" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="SelectionBrush" Value="{StaticResource Brush.Accent}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid>
                        <dx:DXBorder
                    x:Name="IsDefault"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="3" />
                        <dx:DXBorder
                    x:Name="PART_BottomBorder"
                    BorderBrush="{StaticResource {dxt:LWKey Common.EditorBottomBorder}}"
                    BorderThickness="1"
                    CornerRadius="0,0,3,3"
                    Height="10"
                    VerticalAlignment="Bottom" />
                        <dx:DXBorder
                    x:Name="PART_FocusedBorder"
                    Background="{StaticResource {dxt:LWKey Common.EditorFocusedBorder}}"
                    CornerRadius="4"
                    Height="10"
                    VerticalAlignment="Bottom"
                    Visibility="Collapsed" />
                        <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="PART_FocusedBorder" Value="Visible" />
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="{StaticResource Brush.Editor.DisableBorder}" />
                            <Setter Property="Background" Value="{StaticResource Brush.Editor.DisableBackground}" />
                            <Setter Property="Opacity" TargetName="PART_BottomBorder" Value="0" />
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsFocused" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Background" Value="{StaticResource Brush.Editor.HoverBackground}" />
            </MultiTrigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Muted}" />
                <Setter Property="Background" Value="{StaticResource Brush.Editor.PressedBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Editor.PressedBorder}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="13" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Win11Base-->

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Height" Value="18" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Root" Background="Transparent">
                        <Path x:Name="Collapsed"
                            Fill="{StaticResource Brush.Foreground.Secondary}"
                            Style="{StaticResource UIShape.Bold.Right}" />
                        <Path x:Name="Expanded"
                            Fill="{StaticResource Brush.Foreground.Secondary}"
                            Opacity="0"
                            Style="{StaticResource UIShape.Bold.RightDown}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Collapsed" Value="{StaticResource Brush.Foreground.Primary}" />
                            <Setter Property="Fill" TargetName="Expanded" Value="{StaticResource Brush.Foreground.Primary}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="Collapsed" Value="0" />
                            <Setter Property="Opacity" TargetName="Expanded" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Collapsed" Value="{StaticResource Brush.Foreground.Disabled}" />
                            <Setter Property="Fill" TargetName="Expanded" Value="{StaticResource Brush.Foreground.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="18" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ScrollBar.DefaultStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.SimpleButtonBackground}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="dx:ScrollBarExtensions.ListeningScrollBarThumbDragDelta" Value="True" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.VerticalScrollBarTemplate}}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Vertical"/>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Width" Value="17"/>
                    <Setter Property="MinWidth" Value="17"/>
                    <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ScrollBar.ScrollBarVertTouchTemplate}}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Horizontal"/>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource Brush.Button.SimpleButtonBackground}"/>
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="12"/>
                    <Setter Property="BorderThickness" Value="0,1,0,0"/>
                    <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.HorizontalScrollBarTemplate}}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Horizontal"/>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource Brush.Button.SimpleButtonBackground}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="17"/>
                    <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ScrollBar.ScrollBarHorzTouchTemplate}}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="24"/>
                <Setter Property="MinWidth" Value="24"/>
            </Trigger>
            <Trigger Property="dx:ScrollBarExtensions.ScrollBarMode" Value="TouchOverlap">
                <Setter Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True"/>
                <Setter Property="dx:ScrollBarExtensions.ScrollViewerMouseMoved" Value="{Binding Path=(dx:ScrollBarExtensions.ScrollViewerMouseMoved), RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter Property="dx:ScrollBarExtensions.ScrollViewerSizeChanged" Value="{Binding Path=(dx:ScrollBarExtensions.ScrollViewerSizeChanged), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>