<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:aero="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm">
    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Core/StandardControls/_{ThemeName}.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <dx:EnumToObjectConverter x:Key="ScrollBarModeToScrollBackVisibilityConverter" DefaultValue="Visible">
        <dx:EnumToObjectConverter.Values>
            <dx:EnumObjectProvider x:Key="TouchOverlap" Value="Collapsed" />
        </dx:EnumToObjectConverter.Values>
    </dx:EnumToObjectConverter>
    <dx:EnumToObjectConverter x:Key="ScrollBarModeToHardWidthScrollConverter" DefaultValue="Collapsed">
        <dx:EnumToObjectConverter.Values>
            <dx:EnumObjectProvider x:Key="Standard" Value="Visible" />
        </dx:EnumToObjectConverter.Values>
    </dx:EnumToObjectConverter>

    <ControlTemplate x:Key="MenuSeparatorTemplate" TargetType="{x:Type Separator}">
        <Grid Margin="0,6,0,4" SnapsToDevicePixels="true" UseLayoutRounding="False">
            <Rectangle Fill="{StaticResource Brush.Delimiter}" Height="1" Margin="30,0,1,1" />
        </Grid>
    </ControlTemplate>
    <SolidColorBrush x:Key="Menu_Background" Color="{StaticResource Color.Window.Background}" />
    <SolidColorBrush x:Key="Menu_Border" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="Menu_Foreground" Color="{StaticResource Color.Foreground}" />
    <Style x:Key="ExpandCollapseToggleStyle.Expanded.Path.Style" TargetType="{x:Type Path}" BasedOn="{StaticResource UIShape.RightDown}"/>

    <Style x:Key="simpleButtonBaseStyle" TargetType="{x:Type dx:SimpleButton}">
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.Foreground}}" />
        <Setter Property="GlyphToContentOffset" Value="5" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{StaticResource {dxt:LWKey Brushes.ContrastSvgPalette}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey Button.LightweightTemplate}" TargetType="{x:Type ButtonBase}">
        <dx:DXBorder
            x:Name="border"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="true">
            <ContentPresenter
                x:Name="contentPresenter"
                Focusable="False"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                Margin="{TemplateBinding Padding}"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="{StaticResource {dxt:LWKey DropDownButton.ButtonOpacity}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="true">
                <Setter Property="MinWidth" TargetName="border" Value="44" />
                <Setter Property="MinHeight" TargetName="border" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="Button.DefaultStyle" BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.Background}" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.FocusedBorder'}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.Foreground}}" />
        <Setter Property="Padding" Value="11,2,11,2" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.LightweightTemplate}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{StaticResource {dxt:LWKey Brushes.ContrastSvgPalette}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14,12,14,12" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, VS2019Dark=Brush.SelectionBorder, VS2019Light=Brush.SelectionBorder, Win10Dark=Brush.FocusedBorder'}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.CheckedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.SelectionBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.PressedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.SelectionBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.ButtonControlTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ToggleButton.DefaultStyle" BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.Background}" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.FocusedBorder'}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.Foreground}}" />
        <Setter Property="Padding" Value="11,2,11,2" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.LightweightTemplate}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{StaticResource {dxt:LWKey Brushes.ContrastSvgPalette}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14,12,14,12" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, VS2019Dark=Brush.SelectionBorder, VS2019Light=Brush.SelectionBorder, Win10Dark=Brush.FocusedBorder'}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.CheckedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.SelectionBackground}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, VS2019Dark=Brush.SelectionBorder, VS2019Light=Brush.SelectionBorder, Win10Dark=Brush.FocusedBorder'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.PressedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.SelectionBackground}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.FocusedBorder'}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.ButtonBaseControlTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RepeatButton.DefaultStyle" BasedOn="{StaticResource {x:Type RepeatButton}}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.Background}" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.FocusedBorder'}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.Foreground}}" />
        <Setter Property="Padding" Value="11,2,11,2" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.LightweightTemplate}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{StaticResource {dxt:LWKey Brushes.ContrastSvgPalette}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14,12,14,12" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, VS2019Dark=Brush.SelectionBorder, VS2019Light=Brush.SelectionBorder, Win10Dark=Brush.FocusedBorder'}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.CheckedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.SelectionBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.PressedForeground}}" />
                <Setter Property="Background" Value="{StaticResource Brush.SelectionBackground}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.FocusedBorder'}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.ButtonBaseControlTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DropDownButton.DefaultStyle" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:DropDownButton}">
        <Setter Property="ArrowAlignment" Value="Right" />
        <Setter Property="ArrowPadding" Value="0,3,10,3" />
        <!-- <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.Foreground}}"/> -->
        <!-- <Setter Property="GlyphToContentOffset" Value="5"/> -->
        <!-- <Setter Property="HorizontalContentAlignment" Value="Center"/> -->
        <Setter Property="Padding" Value="10,3,10,3" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DropDownButton.AsyncDropDownButtonTemplate}}" />
        <!-- <Setter Property="dx:WpfSvgPalette.Palette" Value="{StaticResource {dxt:LWKey Brushes.ContrastSvgPalette}}"/> -->
        <!-- <Setter Property="VerticalContentAlignment" Value="Center"/> -->
        <!-- <Setter Property="FocusVisualStyle" Value="{x:Null}"/> -->
        <Style.Triggers>
            <Trigger Property="AsyncDisplayMode" Value="None">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DropDownButton.DropDownButtonTemplate}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="ArrowPadding" Value="0,13,27,13" />
                <Setter Property="Padding" Value="14,13,14,13" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.CheckedForeground}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.PressedForeground}}" />
            </Trigger>
            <Trigger Property="ButtonKind" Value="Repeat">
                <Setter Property="ClickMode" Value="Press" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SplitButton.DefaultStyle" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:SplitButton}">
        <Setter Property="ArrowAlignment" Value="Right" />
        <Setter Property="ArrowPadding" Value="10,3,10,3" />
        <!-- <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.Foreground}}"/> -->
        <!-- <Setter Property="GlyphToContentOffset" Value="5"/> -->
        <!-- <Setter Property="HorizontalContentAlignment" Value="Center"/> -->
        <Setter Property="Padding" Value="10,3,10,3" />
        <Setter Property="ArrowBorderThickness" Value="1" />
        <Setter Property="SeparatorThickness" Value="1" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DropDownButton.AsyncSplitButtonTemplate}}" />
        <!-- <Setter Property="dx:WpfSvgPalette.Palette" Value="{StaticResource {dxt:LWKey Brushes.ContrastSvgPalette}}"/> -->
        <!-- <Setter Property="VerticalContentAlignment" Value="Center"/> -->
        <!-- <Setter Property="FocusVisualStyle" Value="{x:Null}"/> -->
        <Style.Triggers>
            <Trigger Property="AsyncDisplayMode" Value="None">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DropDownButton.SplitButtonTemplate}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14,11,14,11" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                    <Condition Property="IsMouseOverArrow" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.CheckedForeground}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsMouseOverArrow" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.PressedForeground}}" />
            </MultiTrigger>
            <Trigger Property="ButtonKind" Value="Repeat">
                <Setter Property="ClickMode" Value="Press" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SimpleButton.DefaultStyle" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:SimpleButton}">
        <!-- <Setter Property="FocusVisualStyle" Value="{x:Null}"/> -->
        <!-- <Setter Property="BorderThickness" Value="1"/> -->
        <!-- <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.Foreground}}"/> -->
        <!-- <Setter Property="GlyphToContentOffset" Value="5"/> -->
        <!-- <Setter Property="HorizontalContentAlignment" Value="Center"/> -->
        <!-- <Setter Property="VerticalContentAlignment" Value="Center"/> -->
        <Setter Property="Padding" Value="10,3,10,3" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.AsyncButtonTemplate}}" />
        <!-- <Setter Property="dx:WpfSvgPalette.Palette" Value="{StaticResource {dxt:LWKey Brushes.ContrastSvgPalette}}"/> -->
        <Style.Triggers>
            <Trigger Property="AsyncDisplayMode" Value="None">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Button.ButtonControlTemplate}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14,13,14,13" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Padding" Value="0" />
                <Setter Property="GlyphToContentOffset" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.MouseOverForeground}}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.CheckedForeground}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DropDownButton.PressedForeground}}" />
            </Trigger>
            <Trigger Property="ButtonKind" Value="Repeat">
                <Setter Property="ClickMode" Value="Press" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RadioButton.DefaultStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.AltBorder'}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="Root" Background="Transparent">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid
                                x:Name="Field"
                                Grid.Column="0"
                                Grid.ColumnSpan="1"
                                Height="14"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="0,1,0,1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Width="14">
                                <dx:DXBorder
                                    x:Name="IsDefault"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="14" />
                                <dx:DXBorder
                                    x:Name="IsFocused"
                                    BorderBrush="{StaticResource Brush.Focused}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="14"
                                    Opacity="0" />
                                <dx:DXBorder
                                    x:Name="Checked"
                                    Background="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground'}"
                                    CornerRadius="8"
                                    Margin="3"
                                    Visibility="Collapsed" />
                            </Grid>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Grid.Column="1"
                                Grid.ColumnSpan="1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="4,0,0,0"
                                RecognizesAccessKey="True"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="InternalFocusStates">
                                <VisualState x:Name="InternalFocused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocused" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="InternalUnfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Checked" Value="{dx:LWBrush 'Brush.HoverForeground, Office2019Black=Brush.ControlLight.HoverForeground'}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, Office2019Colorful=Brush.HoverAltBackground'}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.Border, VS2019Blue=Brush.SelectionBorder, VS2019Dark=Brush.SelectionBorder, VS2019Light=Brush.SelectionBorder'}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Checked" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.ControlLight.SelectionForeground'}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBackground'}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.Border, VS2019Blue=Brush.SelectionBorder, VS2019Dark=Brush.SelectionBorder, VS2019Light=Brush.SelectionBorder, Win10Dark=Brush.Foreground, Win10Light=Brush.Foreground'}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="Checked" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.ControlLight.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, VS2019Blue=Brush.Foreground, VS2019Dark=Brush.Foreground, VS2019Light=Brush.Foreground'}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.Editor.Background, Office2019Colorful=Brush.Editor.Background, Office2019HighContrast=Brush.Editor.Background, VS2019Blue=Brush.Editor.Background, VS2019Dark=Brush.Editor.Background, VS2019Light=Brush.Editor.Background'}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Checked" Value="{dx:LWBrush 'Brush.HoverForeground, Office2019Black=Brush.ControlLight.HoverForeground'}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, Office2019Colorful=Brush.HoverAltBackground'}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Checked" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.ControlLight.SelectionForeground'}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBackground'}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="Checked" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="Height" TargetName="Checked" Value="16" />
                            <Setter Property="Width" TargetName="Checked" Value="16" />
                            <Setter Property="Height" TargetName="Field" Value="28" />
                            <Setter Property="Width" TargetName="Field" Value="28" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="dxei:ControlHelper.ShowFocusedState" Value="{Binding IsFocused, RelativeSource={RelativeSource Self}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="0,13,0,13" />
            </Trigger>
        </Style.Triggers>
    </Style>
   
    <Style x:Key="Menu.DefaultStyle" TargetType="{x:Type Menu}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="Template" Value="{StaticResource MenuSeparatorTemplate}" />
            </Style>
        </Style.Resources>
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{StaticResource {dxt:LWKey BarSvgPalette.SvgPaletteInMenu}}" />
        <Setter Property="Background" Value="{StaticResource Menu_Background}" />
        <Setter Property="Foreground" Value="{StaticResource Menu_Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <dx:DXBorder
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PasswordBox.DefaultStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="PasswordChar" Value="●" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.AltBorder'}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CaretBrush" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground'}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground'}" />
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="SelectionBrush" Value="{dx:LWBrush 'Brush.Focused, Office2019HighContrast=Brush.AltForeground'}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <dx:DXBorder
                        x:Name="IsDefault"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" />
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="13" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey ScrollBar.PageButtonTouchStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <dx:DXBorder Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxt:LWKey ScrollBar.ScrollThumbHorzTouchStyle}" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <dx:DXBorder
                        x:Name="IsDefault"
                        Background="{TemplateBinding Background}"
                        Height="{TemplateBinding Height}"
                        Opacity="0.38"
                        Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxt:LWKey ScrollBar.ScrollThumbVertTouchStyle}" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <dx:DXBorder
                        x:Name="IsDefault"
                        Background="{TemplateBinding Background}"
                        Height="{TemplateBinding Height}"
                        Opacity="0.38"
                        Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollBar -->

    <ControlTemplate x:Key="{dxt:LWKey ScrollBar.ScrollBarVertTouchTemplate}" TargetType="{x:Type ScrollBar}">
        <Grid x:Name="Root" HorizontalAlignment="Right" Width="5">
            <dx:DXBorder
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Visibility="{Binding Path=(dx:ScrollBarExtensions.ScrollBarMode), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollBarModeToScrollBackVisibilityConverter}}" />
            <dx:DXBorder x:Name="IsHot" Background="{TemplateBinding Foreground}" Opacity="0.1">
                <dx:DXBorder.Visibility>
                    <Binding ElementName="Root" Path="Width">
                        <Binding.Converter>
                            <dxmvvm:ObjectToObjectConverter DefaultTarget="Visible">
                                <dxmvvm:MapItem Source="5" Target="Collapsed" />
                            </dxmvvm:ObjectToObjectConverter>
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.Visibility>
            </dx:DXBorder>
            <Track
                x:Name="PART_Track"
                HorizontalAlignment="Center"
                IsDirectionReversed="true"
                Visibility="{Binding Path=(dx:ScrollBarExtensions.ScrollBarMode), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollBarModeToHardWidthScrollConverter}}"
                Width="4">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{DynamicResource {dxt:LWKey ScrollBar.PageButtonTouchStyle}}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{DynamicResource {dxt:LWKey ScrollBar.PageButtonTouchStyle}}" />
                </Track.IncreaseRepeatButton>
                <Track.Thumb>
                    <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource {dxt:LWKey ScrollBar.ScrollThumbVertTouchStyle}}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True" />
                    <Condition Property="dx:ScrollBarExtensions.ScrollViewerMouseMoved" Value="True" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:01.5" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="sb">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="Root" Storyboard.TargetProperty="(FrameworkElement.Width)" To="12" />
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(FrameworkElement.Width)" To="10" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="sb" />
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation BeginTime="0:0:0.5" Duration="0:0:0.38" Storyboard.TargetName="Root" Storyboard.TargetProperty="(FrameworkElement.Width)" To="5" />
                            <DoubleAnimation BeginTime="0:0:0.5" Duration="0:0:0.38" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(FrameworkElement.Width)" To="5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ScrollBarExtensions.ScrollViewerSizeChanged" Value="True" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard x:Name="sbSizeChanged">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="sbSizeChanged" />
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Thumb" Value="0" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ScrollBar.ScrollBarHorzTouchTemplate}" TargetType="{x:Type ScrollBar}">
        <Grid x:Name="Root" Height="5" VerticalAlignment="Bottom">
            <dx:DXBorder
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Visibility="{Binding Path=(dx:ScrollBarExtensions.ScrollBarMode), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollBarModeToScrollBackVisibilityConverter}}" />
            <dx:DXBorder x:Name="IsHot" Background="{TemplateBinding Foreground}" Opacity="0.1">
                <dx:DXBorder.Visibility>
                    <Binding ElementName="Root" Path="Height">
                        <Binding.Converter>
                            <dxmvvm:ObjectToObjectConverter DefaultTarget="Visible">
                                <dxmvvm:MapItem Source="5" Target="Collapsed" />
                            </dxmvvm:ObjectToObjectConverter>
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.Visibility>
            </dx:DXBorder>
            <Track
                x:Name="PART_Track"
                Height="5"
                IsEnabled="{TemplateBinding IsMouseOver}"
                VerticalAlignment="Center"
                Visibility="{Binding Path=(dx:ScrollBarExtensions.ScrollBarMode), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollBarModeToHardWidthScrollConverter}}">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{DynamicResource {dxt:LWKey ScrollBar.PageButtonTouchStyle}}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{DynamicResource {dxt:LWKey ScrollBar.PageButtonTouchStyle}}" />
                </Track.IncreaseRepeatButton>
                <Track.Thumb>
                    <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource {dxt:LWKey ScrollBar.ScrollThumbHorzTouchStyle}}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True" />
                    <Condition Property="dx:ScrollBarExtensions.ScrollViewerMouseMoved" Value="True" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:01.5" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="sbMouseOver">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="Root" Storyboard.TargetProperty="(FrameworkElement.Height)" To="12" />
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(FrameworkElement.Height)" To="10" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="sbMouseOver" />
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation BeginTime="0:0:0.5" Duration="0:0:0.5" Storyboard.TargetName="Root" Storyboard.TargetProperty="(FrameworkElement.Height)" To="5" />
                            <DoubleAnimation BeginTime="0:0:0.5" Duration="0:0:0.5" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(FrameworkElement.Height)" To="5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ScrollBarExtensions.ScrollViewerSizeChanged" Value="True" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard x:Name="sbSizeChanged">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="sbSizeChanged" />
                </MultiTrigger.ExitActions>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="TabItem.DefaultStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="12,3,12,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Root">
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                        <dx:DXBorder x:Name="IsFocused" Background="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Backstage.Window.Background, VS2019Blue=Brush.Backstage.Window.Background'}" Visibility="Collapsed" />
                        <ContentPresenter
                            x:Name="Content"
                            ContentSource="Header"
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True"
                            TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.HoverForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Backstage.HoverBackground, VS2019Blue=Brush.ControlLight.HoverBackground'}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.SelectionForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.Window.Background, Office2019Colorful=Brush.Window.Background, Office2019HighContrast=Brush.Window.Background'}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Border}" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Top">
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,1,0" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="0,1,0,1" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,0,1,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="0,1,0,1" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,0,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="1,0,1,0" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="0,1,1,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="1,0,1,0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Top" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, VS2019Blue=Brush.Foreground'}" />
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,1,0" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="0,0,0,-1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Bottom" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, VS2019Blue=Brush.Foreground'}" />
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,0,1,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="0,-1,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Left" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, VS2019Blue=Brush.Foreground'}" />
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,0,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="0,0,-1,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Right" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, VS2019Blue=Brush.Foreground'}" />
                            <Setter Property="BorderThickness" TargetName="IsDefault" Value="0,1,1,1" />
                            <Setter Property="Margin" TargetName="IsDefault" Value="-1,0,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.HoverForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Backstage.HoverBackground, VS2019Blue=Brush.Window.HeaderButton.HoverBackground, Win10Dark=Brush.Control.Background, Win10Light=Brush.Control.Background'}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Top" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, VS2019Blue=Brush.Foreground'}" />
                            <Setter Property="Height" TargetName="IsFocused" Value="2" />
                            <Setter Property="Visibility" TargetName="IsFocused" Value="Visible" />
                            <Setter Property="VerticalAlignment" TargetName="IsFocused" Value="Top" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Bottom" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, VS2019Blue=Brush.Foreground'}" />
                            <Setter Property="Height" TargetName="IsFocused" Value="2" />
                            <Setter Property="Visibility" TargetName="IsFocused" Value="Visible" />
                            <Setter Property="VerticalAlignment" TargetName="IsFocused" Value="Bottom" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Left" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, VS2019Blue=Brush.Foreground'}" />
                            <Setter Property="HorizontalAlignment" TargetName="IsFocused" Value="Left" />
                            <Setter Property="Visibility" TargetName="IsFocused" Value="Visible" />
                            <Setter Property="Width" TargetName="IsFocused" Value="2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Right" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, VS2019Blue=Brush.Foreground'}" />
                            <Setter Property="HorizontalAlignment" TargetName="IsFocused" Value="Right" />
                            <Setter Property="Visibility" TargetName="IsFocused" Value="Visible" />
                            <Setter Property="Width" TargetName="IsFocused" Value="2" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>