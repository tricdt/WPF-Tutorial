<?xml version="1.0" encoding="utf-8" ?>
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:aero="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxbi="http://schemas.devexpress.com/winfx/2008/xaml/bars/internal"
    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm">
    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Core/StandardControls/_Base.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <SolidColorBrush x:Key="MenuItem_HoverForeground" Color="{StaticResource Color.HoverForeground}" />
    <SolidColorBrush x:Key="ContextMenuItem_HoverForeground" Color="{StaticResource Color.HoverForeground}" />
    <SolidColorBrush x:Key="ContextMenuItem_PressedForeground" Color="{dx:LWColor 'VS2019Blue=Color.Foreground, VS2019Dark=Color.SelectionForeground, VS2019Light=Color.SelectionForeground'}" />
    <SolidColorBrush x:Key="ContextMenuItem_HoverBackground" Color="{dx:LWColor 'VS2019Blue=Color.ControlLight.HoverBackground, VS2019Dark=Color.HoverBackground, VS2019Light=Color.HoverBackground'}" />
    <SolidColorBrush x:Key="ContextMenuItem_HoverBorder" Color="{dx:LWColor 'VS2019Blue=Color.ControlLight.HoverBorder, VS2019Dark=Color.HoverBorder, VS2019Light=Color.HoverBorder'}" />
    <SolidColorBrush x:Key="{dxt:LWKey Common.ReadOnlyBackgroundBrush}" Color="Transparent" Opacity="1" />
    <Thickness x:Key="{dxt:LWKey Common.ScrollBarVerticalThumbMargin}">3,0,3,0</Thickness>
    <Thickness x:Key="{dxt:LWKey Common.ScrollBarHorizontalThumbMargin}">0,3,0,3</Thickness>
    <ControlTemplate x:Key="{dxt:LWKey Common.VerticalScrollBarPageButtonTemplate}" TargetType="{x:Type RepeatButton}">
        <dx:DXBorder Background="Transparent">
            <Rectangle Fill="{TemplateBinding Background}" Margin="{DynamicResource {dxt:LWKey Common.ScrollBarVerticalThumbMargin}}" Opacity="0.38" />
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Common.HorizontalScrollBarPageButtonTemplate}" TargetType="{x:Type RepeatButton}">
        <dx:DXBorder Background="Transparent">
            <Rectangle Fill="{TemplateBinding Background}" Margin="{DynamicResource {dxt:LWKey Common.ScrollBarHorizontalThumbMargin}}" Opacity="0.38" />
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Common.VerticalScrollBarThumbTemplate}" TargetType="{x:Type Thumb}">
        <dx:DXBorder Background="Transparent">
            <Rectangle
                x:Name="IsDefault"
                Fill="{TemplateBinding Background}"
                Height="{TemplateBinding Height}"
                Margin="{DynamicResource {dxt:LWKey Common.ScrollBarVerticalThumbMargin}}"
                MinHeight="{TemplateBinding MinHeight}"
                MinWidth="{TemplateBinding MinWidth}"
                Stroke="{TemplateBinding BorderBrush}"
                StrokeThickness="{TemplateBinding BorderThickness}"
                Width="{TemplateBinding Width}" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="IsDefault" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Common.HorizontalScrollBarThumbTemplate}" TargetType="{x:Type Thumb}">
        <dx:DXBorder Background="Transparent">
            <Rectangle
                x:Name="IsDefault"
                Fill="{TemplateBinding Background}"
                Height="{TemplateBinding Height}"
                Margin="{DynamicResource {dxt:LWKey Common.ScrollBarHorizontalThumbMargin}}"
                MinHeight="{TemplateBinding MinHeight}"
                MinWidth="{TemplateBinding MinWidth}"
                Stroke="{TemplateBinding BorderBrush}"
                StrokeThickness="{TemplateBinding BorderThickness}"
                Width="{TemplateBinding Width}" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="IsDefault" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="MinHeight" Value="6" />
        <Setter Property="MinWidth" Value="6" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{dx:LWBrush 'VS2019Blue=Brush.Border, VS2019Dark=Brush.ControlLight.Background, VS2019Light=Brush.Delimiter'}" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'VS2019Blue=Brush.Border, VS2019Dark=Brush.ControlLight.Background, VS2019Light=Brush.Delimiter'}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{dx:LWBrush 'VS2019Blue=Brush.Backstage.Delimiter, VS2019Dark=Brush.ControlLight.HoverBackground, VS2019Light=Brush.Border'}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'VS2019Blue=Brush.Backstage.Delimiter, VS2019Dark=Brush.ControlLight.HoverBackground, VS2019Light=Brush.Border'}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Background" Value="{dx:LWBrush 'VS2019Blue=Brush.Backstage.Delimiter, VS2019Dark=Brush.ControlLight.HoverBackground, VS2019Light=Brush.Delimiter'}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'VS2019Blue=Brush.Backstage.Delimiter, VS2019Dark=Brush.ControlLight.HoverBackground, VS2019Light=Brush.Delimiter'}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey Common.VerticalScrollBarThumbStyle}" BasedOn="{StaticResource ScrollBarThumb}" TargetType="{x:Type Thumb}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.VerticalScrollBarThumbTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey Common.HorizontalScrollBarThumbStyle}" BasedOn="{StaticResource ScrollBarThumb}" TargetType="{x:Type Thumb}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.HorizontalScrollBarThumbTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey ScrollBar.ScrollingCornerStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.Background}" />
    </Style>
    <Style x:Key="ScrollBarButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{dx:LWBrush 'VS2019Blue=Brush.Foreground, VS2019Dark=Brush.ControlLight.HoverBackground, VS2019Light=Brush.Foreground'}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle
                            x:Name="IsDefault"
                            Fill="{TemplateBinding Background}"
                            Stroke="{TemplateBinding BorderBrush}"
                            StrokeThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{dx:LWBrush 'VS2019Blue=Brush.HoverBackground, VS2019Dark=Brush.HoverBackground, VS2019Light=Brush.Button.Background'}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'VS2019Blue=Brush.HoverBackground, VS2019Dark=Brush.HoverBackground, VS2019Light=Brush.Button.Background'}" />
                <Setter Property="Foreground" Value="{dx:LWBrush 'VS2019Blue=Brush.HoverForeground, VS2019Dark=Brush.Foreground, VS2019Light=Brush.HoverForeground'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{dx:LWBrush 'VS2019Blue=Brush.SelectionBackground, VS2019Dark=Brush.SelectionBackground, VS2019Light=Brush.HoverBackground'}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'VS2019Blue=Brush.SelectionBackground, VS2019Dark=Brush.SelectionBackground, VS2019Light=Brush.HoverBackground'}" />
                <Setter Property="Foreground" Value="{dx:LWBrush 'VS2019Blue=Brush.SelectionForeground, VS2019Dark=Brush.Foreground, VS2019Light=Brush.Foreground'}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{dx:LWBrush 'VS2019Blue=Brush.SelectionBackground, VS2019Dark=Brush.HoverBackground, VS2019Light=Brush.HoverBackground'}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HorizontalScrollBarPageButtonStyle" BasedOn="{StaticResource ScrollBarPageButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.HorizontalScrollBarPageButtonTemplate}}" />
    </Style>
    <Style x:Key="VerticalScrollBarPageButtonStyle" BasedOn="{StaticResource ScrollBarPageButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.VerticalScrollBarPageButtonTemplate}}" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey Common.VerticalScrollBarTemplate}" TargetType="{x:Type ScrollBar}">
        <Grid>
            <dx:DXBorder Background="{TemplateBinding Background}" Opacity="1" />
            <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="0" />
            <Grid Margin="1,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition x:Name="Row1" MaxHeight="16" />
                    <RowDefinition x:Name="Row2" Height="*" />
                    <RowDefinition x:Name="Row3" MaxHeight="16" />
                </Grid.RowDefinitions>
                <RepeatButton
                    x:Name="PART_LineUpButton"
                    Grid.Row="0"
                    Command="{x:Static ScrollBar.LineUpCommand}"
                    Style="{StaticResource ScrollBarButtonStyle}">
                    <Path
                        x:Name="LineUpButton_Arrow"
                        Fill="{Binding ElementName=PART_LineUpButton, Path=Foreground}"
                        Style="{StaticResource UIShape.Up}"
                        Width="8" />
                </RepeatButton>
                <Track
                    x:Name="PART_Track"
                    Grid.Row="1"
                    IsDirectionReversed="True"
                    Margin="0,1,0,1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButtonStyle}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButtonStyle}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Style="{DynamicResource {dxt:LWKey Common.VerticalScrollBarThumbStyle}}" />
                    </Track.Thumb>
                </Track>
                <RepeatButton
                    x:Name="PART_LineDownButton"
                    Grid.Row="2"
                    Command="{x:Static ScrollBar.LineDownCommand}"
                    Style="{StaticResource ScrollBarButtonStyle}">
                    <Path
                        x:Name="LineDownButton_Arrow"
                        Fill="{Binding ElementName=PART_LineDownButton, Path=Foreground}"
                        Style="{StaticResource UIShape.Down}"
                        Width="8" />
                </RepeatButton>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Row1" Value="22" />
                <Setter Property="MinHeight" TargetName="Row3" Value="22" />
                <Setter Property="Width" TargetName="LineUpButton_Arrow" Value="10" />
                <Setter Property="Height" TargetName="LineUpButton_Arrow" Value="5" />
                <Setter Property="Width" TargetName="LineDownButton_Arrow" Value="10" />
                <Setter Property="Height" TargetName="LineDownButton_Arrow" Value="5" />
            </Trigger>
            <DataTrigger Binding="{Binding ElementName=Thumb, Path=IsDragging}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_Track" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=PART_LineUpButton, Path=IsPressed}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_LineUpButton" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=PART_LineDownButton, Path=IsPressed}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_LineDownButton" Value="1" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Common.HorizontalScrollBarTemplate}" TargetType="{x:Type ScrollBar}">
        <Grid>
            <dx:DXBorder Background="{TemplateBinding Background}" Opacity="1" />
            <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="0" />
            <Grid Margin="0,1,0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="Column1" MaxWidth="16" />
                    <ColumnDefinition x:Name="Column2" Width="*" />
                    <ColumnDefinition x:Name="Column3" MaxWidth="16" />
                </Grid.ColumnDefinitions>
                <RepeatButton
                    x:Name="PART_LineLeftButton"
                    Grid.Column="0"
                    Command="{x:Static ScrollBar.LineLeftCommand}"
                    Style="{StaticResource ScrollBarButtonStyle}">
                    <Path
                        x:Name="LineLeftButton_Arrow"
                        Fill="{Binding ElementName=PART_LineLeftButton, Path=Foreground}"
                        Height="8"
                        Style="{StaticResource UIShape.Left}" />
                </RepeatButton>
                <Track x:Name="PART_Track" Grid.Column="1" Margin="1,0,1,0">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButtonStyle}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButtonStyle}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Style="{DynamicResource {dxt:LWKey Common.HorizontalScrollBarThumbStyle}}" />
                    </Track.Thumb>
                </Track>
                <RepeatButton
                    x:Name="PART_LineRightButton"
                    Grid.Column="2"
                    Command="{x:Static ScrollBar.LineRightCommand}"
                    Style="{StaticResource ScrollBarButtonStyle}">
                    <Path
                        x:Name="LineRightButton_Arrow"
                        Fill="{Binding ElementName=PART_LineRightButton, Path=Foreground}"
                        Height="8"
                        Style="{StaticResource UIShape.Right}" />
                </RepeatButton>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Column1" Value="22" />
                <Setter Property="MinWidth" TargetName="Column3" Value="22" />
                <Setter Property="Width" TargetName="LineLeftButton_Arrow" Value="5" />
                <Setter Property="Height" TargetName="LineLeftButton_Arrow" Value="10" />
                <Setter Property="Width" TargetName="LineRightButton_Arrow" Value="5" />
                <Setter Property="Height" TargetName="LineRightButton_Arrow" Value="10" />
            </Trigger>
            <DataTrigger Binding="{Binding ElementName=Thumb, Path=IsDragging}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_Track" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=PART_LineLeftButton, Path=IsPressed}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_LineLeftButton" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=PART_LineRightButton, Path=IsPressed}" Value="True">
                <Setter Property="Panel.ZIndex" TargetName="PART_LineRightButton" Value="1" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="CheckBox.DefaultStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="Root" Background="Transparent" Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid
                            x:Name="Field"
                            Grid.Column="0"
                            Grid.ColumnSpan="1"
                            Height="14"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="0,1,0,1"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Width="14">
                            <dx:DXBorder
                                x:Name="IsDefault"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                            <dx:DXBorder
                                x:Name="IsFocused"
                                BorderBrush="{StaticResource Brush.Focused}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Opacity="0" />
                            <Path x:Name="Indeterminate" Style="{StaticResource UIShape.Indeterminate}" Visibility="Collapsed" />
                            <Path x:Name="Checked" Style="{StaticResource UIShape.Checked}" Visibility="Collapsed" />
                        </Grid>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Grid.ColumnSpan="1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="4,0,0,0"
                            RecognizesAccessKey="True"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocused" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Checked" Value="{StaticResource Brush.HoverForeground}" />
                            <Setter Property="Fill" TargetName="Indeterminate" Value="{StaticResource Brush.HoverForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.HoverBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Checked" Value="{StaticResource Brush.SelectionForeground}" />
                            <Setter Property="Fill" TargetName="Indeterminate" Value="{StaticResource Brush.SelectionForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.Border, VS2019Dark=Brush.Border, VS2019Light=Brush.SelectionBorder'}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="Height" TargetName="Checked" Value="16" />
                            <Setter Property="Width" TargetName="Checked" Value="16" />
                            <Setter Property="Height" TargetName="Field" Value="28" />
                            <Setter Property="Width" TargetName="Field" Value="28" />
                            <Setter Property="Height" TargetName="Indeterminate" Value="16" />
                            <Setter Property="Width" TargetName="Indeterminate" Value="16" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Checked" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Indeterminate" Value="Visible" />
                        </Trigger>
                        <Trigger Property="FlowDirection" Value="RightToLeft">
                            <Setter Property="LayoutTransform" TargetName="Field">
                                <Setter.Value>
                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="-1" ScaleY="1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TextBox.DefaultStyle" TargetType="{x:Type TextBox}">
        <Setter Property="dx:ScrollBarExtensions.ScrollBehavior" Value="{dx:TextBoxScrollBehavior}" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CaretBrush" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="SelectionBrush" Value="{StaticResource Brush.Focused}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <dx:DXBorder
                        x:Name="IsDefault"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" />
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey Common.ReadOnlyBackgroundBrush}}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="13" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ComboBoxDropDownButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Root" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnContent" Width="*" />
                            <ColumnDefinition x:Name="ColumnButton" Width="16" />
                        </Grid.ColumnDefinitions>
                        <Grid Grid.Column="1">
                            <dx:DXBorder x:Name="IsDefault" Background="{TemplateBinding Background}" Margin="1" />
                            <Path
                                x:Name="Content"
                                Fill="{StaticResource Brush.Foreground}"
                                Margin="3"
                                Style="{StaticResource UIShape.Down}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Content" Value="{StaticResource Brush.HoverForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.HoverBackground}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Content" Value="{StaticResource Brush.SelectionForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="Content" Value="{StaticResource Brush.SelectionForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="Width" TargetName="ColumnButton" Value="42" />
                            <Setter Property="Margin" TargetName="Content" Value="14" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboxBoxReadOnlyMode" TargetType="{x:Type ComboBox}">
        <Grid x:Name="Root">
            <Grid x:Name="PART_Editor">
                <dx:DXBorder
                    x:Name="IsDefault"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}" />
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="ColumnField" Width="*" />
                        <ColumnDefinition x:Name="ColumnButton" Width="16" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter
                        x:Name="Content"
                        Grid.Column="0"
                        Content="{TemplateBinding SelectionBoxItem}"
                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        IsHitTestVisible="False"
                        Margin="{TemplateBinding Padding}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>
                <ToggleButton
                    x:Name="DropDownButton"
                    Focusable="False"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxDropDownButton}" />
                <dx:DXBorder
                    x:Name="IsFocus"
                    BorderBrush="{dx:LWBrush 'VS2019Blue=Brush.HoverForeground, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused'}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Opacity="0" />
            </Grid>
            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="True"
                IsOpen="{TemplateBinding IsDropDownOpen}"
                Margin="1"
                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                Placement="Bottom"
                VerticalOffset="-1">
                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Root}">
                    <dx:DXBorder
                        x:Name="DropDownBorder"
                        Background="{dx:LWBrush 'VS2019Blue=Brush.Window.Background, VS2019Dark=Brush.Control.Background, VS2019Light=Brush.Editor.Background'}"
                        BorderBrush="{StaticResource Brush.Border}"
                        BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle
                                        x:Name="OpaqueRect"
                                        Fill="{Binding Background, ElementName=DropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                        Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" Margin="1" />
                            </Grid>
                        </ScrollViewer>
                    </dx:DXBorder>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Opacity" TargetName="IsDefault" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="ColumnButton" Value="42" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="3,2,3,2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid x:Name="Root">
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
                            x:Name="Content"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Foreground" Value="{dx:LWBrush 'VS2019Blue=Brush.SelectionForeground, VS2019Dark=Brush.Backstage.Focused, VS2019Light=Brush.Foreground'}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.ControlLight.HoverBackground, VS2019Dark=Brush.HoverBackground, VS2019Light=Brush.HoverBackground'}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.ControlLight.HoverBorder, VS2019Dark=Brush.HoverBorder, VS2019Light=Brush.HoverBorder'}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{dx:LWBrush 'VS2019Blue=Brush.HoverForeground, VS2019Dark=Brush.Foreground, VS2019Light=Brush.HoverForeground'}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.ControlLight.HoverBackground, VS2019Dark=Brush.HoverBackground, VS2019Light=Brush.HoverBackground'}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.ControlLight.HoverBorder, VS2019Dark=Brush.HoverBorder, VS2019Light=Brush.HoverBorder'}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{dx:LWBrush 'VS2019Blue=Brush.SelectionForeground, VS2019Dark=Brush.Backstage.Focused, VS2019Light=Brush.SelectionForeground'}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.ControlLight.SelectionBackground, VS2019Dark=Brush.SelectionBackground, VS2019Light=Brush.SelectionBackground'}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.ControlLight.SelectionBorder, VS2019Dark=Brush.SelectionBorder, VS2019Light=Brush.SelectionBorder'}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ComboBox.DefaultStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
        <Setter Property="Padding" Value="2,2,21,2" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="Root">
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Margin="1"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Placement="Bottom">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Root}">
                                <dx:DXBorder
                                    x:Name="DropDownBorder"
                                    Background="{StaticResource Brush.Button.Background}"
                                    BorderBrush="{StaticResource Brush.Border}"
                                    BorderThickness="1">
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle
                                                    x:Name="OpaqueRect"
                                                    Fill="{Binding Background, ElementName=DropDownBorder}"
                                                    Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                                    Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" Margin="1" />
                                        </Grid>
                                    </ScrollViewer>
                                </dx:DXBorder>
                            </Grid>
                        </Popup>
                        <TextBox
                            x:Name="PART_EditableTextBox"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            Style="{StaticResource TextBox.DefaultStyle}"
                            Text="{TemplateBinding SelectionBoxItem}" />
                        <ToggleButton
                            x:Name="DropDownButton"
                            Focusable="False"
                            HorizontalAlignment="Right"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxDropDownButton}"
                            Width="16" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True" />
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="IsEnabled" TargetName="DropDownButton" Value="False" />
                            <Setter Property="IsEnabled" TargetName="PART_EditableTextBox" Value="False" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="MinWidth" TargetName="DropDownButton" Value="42" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <Trigger Property="IsEditable" Value="False">
                <Setter Property="Template" Value="{StaticResource ComboxBoxReadOnlyMode}" />
                <Setter Property="Padding" Value="5,3,5,3" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="True" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="12,12,44,12" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="False" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="14" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ProgressBar.DefaultStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Focused}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="Root">
                        <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid x:Name="PART_Track" Margin="1">
                                <Grid x:Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left">
                                    <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
                                    <Rectangle
                                        x:Name="Animation"
                                        Fill="{TemplateBinding Foreground}"
                                        RenderTransformOrigin="-0.5,0.5"
                                        Visibility="Collapsed">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="0.25" />
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                            </Grid>
                        </dx:DXBorder>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="Root">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Animation" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <dx:DXBorder Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalSliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Root" Background="Transparent">
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{dx:LWBrush 'VS2019Blue=Brush.Backstage.Delimiter, VS2019Dark=Brush.Backstage.Foreground, VS2019Light=Brush.Foreground'}"
                            BorderBrush="{StaticResource Brush.Window.Background}"
                            BorderThickness="1"
                            Height="7"
                            Width="14" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.Backstage.Button.Background, VS2019Dark=Brush.Focused, VS2019Light=Brush.SelectionBackground'}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.Backstage.Button.Background, VS2019Dark=Brush.Focused, VS2019Light=Brush.SelectionBackground'}" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="Margin" TargetName="Root" Value="-22" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalSliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Root" Background="Transparent">
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{dx:LWBrush 'VS2019Blue=Brush.Backstage.Delimiter, VS2019Dark=Brush.Backstage.Foreground, VS2019Light=Brush.Foreground'}"
                            BorderBrush="{StaticResource Brush.Window.Background}"
                            BorderThickness="1"
                            Height="14"
                            Width="7" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.Backstage.Button.Background, VS2019Dark=Brush.Focused, VS2019Light=Brush.SelectionBackground'}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'VS2019Blue=Brush.Backstage.Button.Background, VS2019Dark=Brush.Focused, VS2019Light=Brush.SelectionBackground'}" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="Margin" TargetName="Root" Value="-22" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalSliderUpThumbStyle" BasedOn="{StaticResource HorizontalSliderThumbStyle}" TargetType="{x:Type Thumb}" />
    <Style x:Key="HorizontalSliderDownThumbStyle" BasedOn="{StaticResource HorizontalSliderThumbStyle}" TargetType="{x:Type Thumb}" />
    <Style x:Key="VerticalSliderLeftThumbStyle" BasedOn="{StaticResource VerticalSliderThumbStyle}" TargetType="{x:Type Thumb}" />
    <Style x:Key="VerticalSliderRightThumbStyle" BasedOn="{StaticResource VerticalSliderThumbStyle}" TargetType="{x:Type Thumb}" />
    <Style x:Key="Slider.DefaultStyle" TargetType="{x:Type Slider}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <dx:DXBorder
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        Width="{TemplateBinding Width}">
                        <Grid x:Name="Root" MinHeight="22">
                            <TickBar
                                x:Name="TopTick"
                                Fill="{StaticResource Brush.Foreground}"
                                Height="4"
                                Placement="Top"
                                VerticalAlignment="Top"
                                Visibility="Collapsed" />
                            <Grid Margin="1,0,1,0" VerticalAlignment="Center">
                                <dx:DXBorder
                                    x:Name="TrackBackground"
                                    Background="{StaticResource Brush.Border}"
                                    Height="2"
                                    VerticalAlignment="Center" />
                                <dx:DXBorder x:Name="FocusState" Background="{StaticResource Brush.Focused}" Visibility="Collapsed" />
                                <Canvas>
                                    <Rectangle
                                        x:Name="PART_SelectionRange"
                                        Fill="{StaticResource Brush.Foreground}"
                                        Height="2"
                                        Opacity="0" />
                                </Canvas>
                            </Grid>
                            <Track x:Name="PART_Track" VerticalAlignment="Center">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb
                                        x:Name="Thumb"
                                        Background="{StaticResource Brush.Border}"
                                        Height="{TemplateBinding Height}"
                                        Style="{StaticResource HorizontalSliderThumbStyle}" />
                                </Track.Thumb>
                            </Track>
                            <TickBar
                                x:Name="BottomTick"
                                Fill="{StaticResource Brush.Foreground}"
                                Height="4"
                                Placement="Bottom"
                                VerticalAlignment="Bottom"
                                Visibility="Collapsed" />
                        </Grid>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Style" TargetName="Thumb" Value="{StaticResource HorizontalSliderUpThumbStyle}" />
                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
                            <Setter Property="Style" TargetName="Thumb" Value="{StaticResource HorizontalSliderDownThumbStyle}" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelectionRangeEnabled" Value="True">
                            <Setter Property="Opacity" TargetName="PART_SelectionRange" Value="1" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="FocusState" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.35" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter Property="MinHeight" TargetName="Root" Value="44" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Slider}">
                            <dx:DXBorder
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Height="{TemplateBinding Height}">
                                <Grid x:Name="Root" MinWidth="22">
                                    <TickBar
                                        x:Name="LeftTick"
                                        Fill="{StaticResource Brush.Foreground}"
                                        HorizontalAlignment="Left"
                                        Placement="Left"
                                        Visibility="Collapsed"
                                        Width="4" />
                                    <Grid HorizontalAlignment="Center" Margin="0,1,0,1">
                                        <dx:DXBorder Name="TrackBackground" Background="{StaticResource Brush.Border}" Width="2" />
                                        <dx:DXBorder x:Name="FocusState" Background="{StaticResource Brush.Focused}" Visibility="Collapsed" />
                                        <Canvas>
                                            <Rectangle
                                                x:Name="PART_SelectionRange"
                                                Fill="{StaticResource Brush.Foreground}"
                                                Opacity="0"
                                                Width="2" />
                                        </Canvas>
                                    </Grid>
                                    <Track x:Name="PART_Track">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}" />
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb
                                                x:Name="Thumb"
                                                Background="{StaticResource Brush.Border}"
                                                Style="{StaticResource VerticalSliderThumbStyle}"
                                                Width="{TemplateBinding Width}" />
                                        </Track.Thumb>
                                    </Track>
                                    <TickBar
                                        x:Name="RightTick"
                                        Fill="{StaticResource Brush.Foreground}"
                                        HorizontalAlignment="Right"
                                        Placement="Right"
                                        Visibility="Collapsed"
                                        Width="4" />
                                </Grid>
                            </dx:DXBorder>
                            <ControlTemplate.Triggers>
                                <Trigger Property="TickPlacement" Value="TopLeft">
                                    <Setter Property="Visibility" TargetName="LeftTick" Value="Visible" />
                                    <Setter Property="Style" TargetName="Thumb" Value="{StaticResource VerticalSliderLeftThumbStyle}" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="BottomRight">
                                    <Setter Property="Visibility" TargetName="RightTick" Value="Visible" />
                                    <Setter Property="Style" TargetName="Thumb" Value="{StaticResource VerticalSliderRightThumbStyle}" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="Both">
                                    <Setter Property="Visibility" TargetName="LeftTick" Value="Visible" />
                                    <Setter Property="Visibility" TargetName="RightTick" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsSelectionRangeEnabled" Value="True">
                                    <Setter Property="Opacity" TargetName="PART_SelectionRange" Value="1" />
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Visibility" TargetName="FocusState" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="Root" Value="0.35" />
                                </Trigger>
                                <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                    <Setter Property="MinWidth" TargetName="Root" Value="44" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Root" Background="Transparent">
                        <Path x:Name="Collapsed" Fill="{StaticResource Brush.Foreground}" Style="{StaticResource UIShape.Right}" />
                        <Path x:Name="Expanded"
                           Fill="{StaticResource Brush.Foreground}" Opacity="0" Style="{StaticResource UIShape.RightDown}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Collapsed" Value="{dx:LWBrush 'Brush.Focused, VS2019Blue=Brush.HoverForeground'}"/>
                            <Setter Property="Fill" TargetName="Expanded" Value="{dx:LWBrush 'Brush.Focused, VS2019Blue=Brush.HoverForeground'}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="Collapsed" Value="0"/>
                            <Setter Property="Opacity" TargetName="Expanded" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="18"/>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44"/>
                <Setter Property="MinWidth" Value="44"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MenuItem.DefaultStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey BarSvgPalette.SvgPaletteInMenu}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.SubmenuItemTemplateKey}}" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="{dx:LWThickness '(7,4,8,4)'}" />
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.TopLevelHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="{dx:LWThickness '(7,3,8,3)'}" />
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="{dx:LWThickness '(2,3)'}" />
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.SubmenuHeaderTemplateKey}}" />
                <Setter Property="Foreground" Value="{StaticResource ContextMenuItem_Foreground}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="{dx:LWThickness '(2,3)'}" />
                <Setter Property="Foreground" Value="{StaticResource ContextMenuItem_Foreground}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                    <Condition Property="Role" Value="TopLevelHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="7,15,8,15" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                    <Condition Property="Role" Value="TopLevelItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="7,14,8,14" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                    <Condition Property="Role" Value="SubmenuHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="2,14" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                    <Condition Property="Role" Value="SubmenuItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="2,14" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ScrollBar.DefaultStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, VS2019Blue=Brush.Control.Background'}" />
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Width" Value="17" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="dx:ScrollBarExtensions.ListeningScrollBarThumbDragDelta" Value="True" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.VerticalScrollBarTemplate}}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Vertical"/>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Width" Value="17"/>
                    <Setter Property="MinWidth" Value="17"/>
                    <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ScrollBar.ScrollBarVertTouchTemplate}}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Horizontal"/>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, VS2019Blue=Brush.Control.Background'}"/>
                    <Setter Property="BorderThickness" Value="0,1,0,0"/>
                    <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}"/>
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="17"/>
                    <Setter Property="BorderThickness" Value="0,1,0,0"/>
                    <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Common.HorizontalScrollBarTemplate}}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Horizontal"/>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, VS2019Dark=Brush.Border'}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}"/>
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="17"/>
                    <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ScrollBar.ScrollBarHorzTouchTemplate}}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="24"/>
                <Setter Property="MinWidth" Value="24"/>
            </Trigger>
            <Trigger Property="dx:ScrollBarExtensions.ScrollBarMode" Value="TouchOverlap">
                <Setter Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True"/>
                <Setter Property="dx:ScrollBarExtensions.ScrollViewerMouseMoved" Value="{Binding Path=(dx:ScrollBarExtensions.ScrollViewerMouseMoved), RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter Property="dx:ScrollBarExtensions.ScrollViewerSizeChanged" Value="{Binding Path=(dx:ScrollBarExtensions.ScrollViewerSizeChanged), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>