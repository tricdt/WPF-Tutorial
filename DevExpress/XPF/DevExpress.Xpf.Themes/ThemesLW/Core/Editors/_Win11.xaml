<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:aero="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxbi="http://schemas.devexpress.com/winfx/2008/xaml/bars/internal"
    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Core/Win11.Common.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.Foreground}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.MouseOverForeground}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.PressedForeground}" Color="{StaticResource Color.Foreground.Muted}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.CheckedForeground}" Color="{StaticResource Color.Foreground.Alt}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey DropDownButton.ArrowForegroundColor}" Color="{StaticResource Color.Foreground.Secondary}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey DropDownButton.ArrowPressedForegroundColor}" Color="{StaticResource Color.Foreground.Muted}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey DropDownButton.ArrowMouseOverForegroundColor}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.ArrowForeground}" Color="{StaticResource {dxt:LWKey DropDownButton.ArrowForegroundColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.ArrowPressedForeground}" Color="{StaticResource {dxt:LWKey DropDownButton.ArrowPressedForegroundColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.ArrowMouseOverForeground}" Color="{StaticResource {dxt:LWKey DropDownButton.ArrowMouseOverForegroundColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.Brush}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.MaxPointBrush}" Color="#FFC30300" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.MinPointBrush}" Color="#FFFFC300" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.StartPointBrush}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.EndPointBrush}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.NegativePointBrush}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.MarkerBrush}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey HyperLinkEdit.Foreground}" Color="{dx:LWColor '#FF0078D4, Win11Dark=#FF99EBFF'}" />
    <SolidColorBrush x:Key="{dxt:LWKey HyperLinkEdit.InplaceForeground}" Color="{dx:LWColor '#FF0078D4, Win11Dark=#FF99EBFF'}" />
    <SolidColorBrush x:Key="{dxt:LWKey FlyoutControl.BorderBrush}" Color="{StaticResource Color.FlyoutBorder}" />
    <SolidColorBrush x:Key="{dxt:LWKey FlyoutControl.Background}" Color="{StaticResource Color.FlyoutBackground}" />
    <SolidColorBrush x:Key="{dxt:LWKey FlyoutControl.Foreground}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey ColorEdit.Background}" Color="{StaticResource Color.FlyoutBackground}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey SpinEdit.ArrowBrushColor}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey Buttons.Foreground}" Color="{StaticResource Color.Foreground.Secondary}" />
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.Background}" Color="{StaticResource Color.WindowBackground}" />
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.Foreground}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey DateEdit.PopupContentBackground}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey DateNavigator.BackgroundBrush}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey BaseEdit.ReadOnlyBackground}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey BaseEdit.ReadOnlyBorder}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.ReadOnlyBackground}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.ReadOnlyBorder}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.CaretBrush}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.SelectionBrush}" Color="{StaticResource Color.Accent}" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.NullTextForeground}" Color="{StaticResource Color.Foreground.Primary}" Opacity="0.62" />
    <SolidColorBrush x:Key="{dxt:LWKey CalendarClient.CalendarClientForegroundBrush}" Color="{StaticResource Color.Editor.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ProgressBarEdit.Foreground}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey ProgressBarEdit.AdditionalForeground}" Color="{StaticResource Color.Editor.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ImageEdit.ImageBackgroundBrush}" Color="{StaticResource Color.Editor.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ImageEdit.CropMenuForegroundBrush}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey ImageEdit.ImageEditToolSeparatorFillBrush}" Color="{dx:LWColor '#3FFFFFFF, Win11Light=Color.Foreground.Primary'}" />
    <SolidColorBrush x:Key="{dxt:LWKey PopupBrushEdit.ChipBorderBrush}" Color="{StaticResource Color.Custom.Red}" />
    <SolidColorBrush x:Key="{dxt:LWKey Brushes.EditorPopupListBoxBackground}" Color="{StaticResource Color.Editor.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey FilterControl.InplaceFilterEditorForeground}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey TokenEditor.TokenForeground}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey TimePicker.BackgroundBrush}" Color="{StaticResource Color.Button.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey TimePicker.ClockBorderBrush}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey TimePicker.ClockForeground}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey TimePicker.ClockFillBrush}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.TickForeground}" Color="{StaticResource Color.Foreground.Primary}" />
    <SolidColorBrush x:Key="{dxt:LWKey ImageEdit.InplaceMenuBackgroundBrush}" Color="{dx:LWColor 'Color.Editor.Background, Win11Dark=Color.Control.Background'}" />
    <Thickness x:Key="{dxt:LWKey EditorListBox.DefaultBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey ButtonEdit.ButtonEditPadding}">0,0,1,0</Thickness>
    <Thickness x:Key="{dxt:LWKey ButtonEdit.ButtonEditPaddingCorrection}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.LeftButtonMargin}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.LeftButtonMarginCorrection}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.RightButtonMargin}">0,1</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.RightButtonMarginCorrection}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey InplaceBaseEdit.CommonBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey InplaceBaseEdit.TextEditBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey InplaceBaseEdit.TextEditPadding}">6,4,4,4</Thickness>
    <Thickness x:Key="{dxt:LWKey InplaceBaseEdit.ValidationErrorPadding}">3,0,1,0</Thickness>
    <Thickness x:Key="{dxt:LWKey CheckEdit.Padding}">0,1,0,1</Thickness>
    <Thickness x:Key="{dxt:LWKey FlyoutControl.BorderThickness}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey FlyoutControl.Padding}">12</Thickness>
    <Thickness x:Key="{dxt:LWKey ImageEdit.CropMenuTextMargin}">0</Thickness>
    <sys:Double x:Key="{dxt:LWKey TrackBarEdit.LeftStepButtonSize}">16</sys:Double>
    <sys:Double x:Key="{dxt:LWKey TrackBarEdit.RightStepButtonSize}">16</sys:Double>
    <sys:Double x:Key="{dxt:LWKey ToggleSwitch.ToggleSwitchWidth}">40</sys:Double>
    <sys:Double x:Key="{dxt:LWKey ToggleSwitch.ToggleSwitchHeight}">22</sys:Double>
    <sys:Double x:Key="{dxt:LWKey ToggleSwitch.DisabledStateOpacity}">0.35</sys:Double>
    <Thickness x:Key="{dxt:LWKey DateNavigator.DateNavigatorCalendarPadding}">12</Thickness>
    <Thickness
        x:Key="{dxt:LWKey RangeControl.LeftLabelMargin}"
        Bottom="1"
        Left="0"
        Right="5"
        Top="1" />
    <Thickness
        x:Key="{dxt:LWKey RangeControl.RightLabelMargin}"
        Bottom="1"
        Left="5"
        Right="0"
        Top="1" />
    <sys:Double x:Key="{dxt:LWKey TextEdit.SelectionOpacity}">0.4</sys:Double>
    <Thickness x:Key="{dxt:LWKey Buttons.DefaultBorderThickness}">0,0,0,0</Thickness>
    <Thickness x:Key="{dxt:LWKey InplaceBaseEdit.CheckEditPadding}">0,3,0,3</Thickness>
    <sys:Double x:Key="{dxt:LWKey TrackBarEdit.TrackMinHeight}">16</sys:Double>
    <Thickness x:Key="{dxt:LWKey ProgressBarEdit.DisplayTemplateMargin}">0,2</Thickness>
    <Thickness x:Key="{dxt:LWKey ProgressBarEdit.DisplayInplaceTemplateMargin}">0,2</Thickness>
    <Style x:Key="{dxt:LWKey TokenEditor.DeleteButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Root" Background="{StaticResource Brush.Button.Background}" Opacity="0.62">
                        <Path Fill="{TemplateBinding TextElement.Foreground}" Margin="4" Style="{StaticResource UIShape.Clear}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="Root" Value="1" />
                            <Setter Property="Opacity" TargetName="Root" Value="1" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="Root" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="40" />
                <Setter Property="MinHeight" Value="40" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.CellButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource Brush.Button.Background}"
                BorderBrush="{StaticResource Brush.Button.Border}"
                BorderThickness="1" />
            <dx:DXBorder
                x:Name="IsSelection"
                Background="{StaticResource Brush.ListItem.SelectionBackground}"
                BorderBrush="{StaticResource Brush.ListItem.SelectionBorder}"
                BorderThickness="1"
                Opacity="0" />
            <dx:DXBorder
                x:Name="IsToday"
                Background="{StaticResource Brush.Border}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1"
                Opacity="0" />
            <dx:DXBorder
                x:Name="IsHot"
                Background="{StaticResource Brush.ListItem.HoverBackground}"
                BorderBrush="{StaticResource Brush.ListItem.HoverBorder}"
                BorderThickness="1"
                Opacity="0" />
            <dx:DXBorder
                x:Name="IsFocused"
                Background="{x:Null}"
                BorderBrush="{StaticResource Brush.Accent}"
                BorderThickness="1"
                Opacity="0" />
            <dx:ContentContainer
                x:Name="Content"
                Content="{TemplateBinding Content}"
                Foreground="{StaticResource Brush.Foreground.Primary}"
                HorizontalAlignment="Center"
                Margin="3"
                VerticalAlignment="Center" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsHot" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(dx:ContentContainer.Foreground).(SolidColorBrush.Color)" To="{StaticResource Color.Foreground.Primary}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed" />
                    <VisualState x:Name="Disabled" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesSpecial">
                    <VisualState x:Name="CellStateSpecial">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames dxi:ValueSetter.FontWeight="Bold" Storyboard.TargetName="Content" Storyboard.TargetProperty="FontWeight" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotSpecial" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesSelected">
                    <VisualState x:Name="CellStateSelected">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsSelection" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor2" To="{StaticResource Color.Foreground.Primary}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotSelected" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesToday">
                    <VisualState x:Name="CellStateToday">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsToday" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor6" To="{StaticResource Color.Foreground.Primary}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotToday" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesFocused">
                    <VisualState x:Name="CellStateNotFocused" />
                    <VisualState x:Name="CellStateFocused">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocused" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor5" To="{StaticResource Color.Foreground.Primary}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesHoliday">
                    <VisualState x:Name="CellStateHoliday">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor6" To="{StaticResource Color.Custom.Red}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotHoliday" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesInactive">
                    <VisualState x:Name="CellStateActive" />
                    <VisualState x:Name="CellStateInactive">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesDisabled">
                    <VisualState x:Name="CellStateEnabled" />
                    <VisualState x:Name="CellStateDisabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.2" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey RangeControl.RangeBarOutOfRangeBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Foreground.Secondary, Win11Dark=Brush.Accent'}" />
        <Setter Property="Opacity" Value="0.84" />
        <Setter Property="Margin" Value="0,2" />
        <Setter Property="CornerRadius" Value="4" />
    </Style>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.DropDownGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M9,6z M0,0z M0,1.125C0,1.02344 0.0371094,0.935547 0.111328,0.861328 0.185547,0.787109 0.273438,0.75 0.375,0.75 0.476562,0.75 0.564453,0.787109 0.638672,0.861328L4.5,4.7168 8.36133,0.861328C8.43555,0.787109 8.52344,0.75 8.625,0.75 8.72656,0.75 8.81445,0.787109 8.88867,0.861328 8.96289,0.935547 9,1.02344 9,1.125 9,1.22656 8.96289,1.31445 8.88867,1.38867L4.76367,5.51367C4.68945,5.58789 4.60156,5.625 4.5,5.625 4.39844,5.625 4.31055,5.58789 4.23633,5.51367L0.111328,1.38867C0.0371094,1.31445,0,1.22656,0,1.125z"
                Fill="{StaticResource {dxt:LWKey DropDownButton.ArrowForeground}}"
                Height="5"
                Stretch="Fill"
                Width="9" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="MouseStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Fill" TargetName="Path" Value="{StaticResource {dxt:LWKey DropDownButton.ArrowMouseOverForeground}}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Fill" TargetName="Path" Value="{StaticResource {dxt:LWKey DropDownButton.ArrowPressedForeground}}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.UpGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M10,6z M0,0z M9.5,5.25C9.5,5.35156 9.46289,5.43945 9.38867,5.51367 9.31445,5.58789 9.22656,5.625 9.125,5.625 9.02344,5.625 8.93555,5.58789 8.86133,5.51367L5,1.6582 1.13867,5.51367C1.06445,5.58789 0.976562,5.625 0.875,5.625 0.773437,5.625 0.685547,5.58789 0.611328,5.51367 0.537109,5.43945 0.5,5.35156 0.5,5.25 0.5,5.14844 0.537109,5.06055 0.611328,4.98633L4.73633,0.861328C4.81055,0.787109 4.89844,0.75 5,0.75 5.10156,0.75 5.18945,0.787109 5.26367,0.861328L9.38867,4.98633C9.46289,5.06055,9.5,5.14844,9.5,5.25z"
                Fill="{StaticResource Brush.Foreground.Muted}"
                Height="5"
                Stretch="Fill"
                Width="9" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.DownGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M9,6z M0,0z M0,1.125C0,1.02344 0.0371094,0.935547 0.111328,0.861328 0.185547,0.787109 0.273438,0.75 0.375,0.75 0.476562,0.75 0.564453,0.787109 0.638672,0.861328L4.5,4.7168 8.36133,0.861328C8.43555,0.787109 8.52344,0.75 8.625,0.75 8.72656,0.75 8.81445,0.787109 8.88867,0.861328 8.96289,0.935547 9,1.02344 9,1.125 9,1.22656 8.96289,1.31445 8.88867,1.38867L4.76367,5.51367C4.68945,5.58789 4.60156,5.625 4.5,5.625 4.39844,5.625 4.31055,5.58789 4.23633,5.51367L0.111328,1.38867C0.0371094,1.31445,0,1.22656,0,1.125z"
                Fill="{StaticResource Brush.Foreground.Muted}"
                Height="5"
                Stretch="Fill"
                Width="9" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.LeftGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M5,10z M0,0z M4.5625,0.6875C4.66406,0.6875 4.75195,0.724609 4.82617,0.798828 4.90039,0.873047 4.9375,0.960938 4.9375,1.0625 4.9375,1.16406 4.90039,1.25195 4.82617,1.32617L0.970703,5.1875 4.82617,9.04883C4.90039,9.12305 4.9375,9.21094 4.9375,9.3125 4.9375,9.41406 4.90039,9.50195 4.82617,9.57617 4.75195,9.65039 4.66406,9.6875 4.5625,9.6875 4.46094,9.6875 4.37305,9.65039 4.29883,9.57617L0.173828,5.45117C0.0996094,5.37695 0.0625,5.28906 0.0625,5.1875 0.0625,5.08594 0.0996094,4.99805 0.173828,4.92383L4.29883,0.798828C4.37305,0.724609,4.46094,0.6875,4.5625,0.6875z"
                Fill="{StaticResource Brush.Foreground.Secondary}"
                Height="9"
                Stretch="Fill"
                Width="5" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RightGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M5,10z M0,0z M0.4375,9.6875C0.335938,9.6875 0.248047,9.65039 0.173828,9.57617 0.0996097,9.50195 0.0625004,9.41406 0.0625004,9.3125 0.0625004,9.21094 0.0996097,9.12305 0.173828,9.04883L4.0293,5.1875 0.173828,1.32617C0.0996094,1.25195 0.0625,1.16406 0.0625,1.0625 0.0625,0.960938 0.0996094,0.873047 0.173828,0.798828 0.248047,0.724609 0.335937,0.6875 0.4375,0.6875 0.539062,0.6875 0.626953,0.724609 0.701172,0.798828L4.82617,4.92383C4.90039,4.99805 4.9375,5.08594 4.9375,5.1875 4.9375,5.28906 4.90039,5.37695 4.82617,5.45117L0.701172,9.57617C0.626953,9.65039,0.539063,9.6875,0.4375,9.6875z"
                Fill="{StaticResource Brush.Foreground.Secondary}"
                Height="9"
                Stretch="Fill"
                Width="5" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.SpinUpGlyph}">
        <dxi:RenderBorder Name="Root" Margin="4,2,4,2" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M9,5z M0,0z M9,4.5C9,4.60156 8.96289,4.68945 8.88867,4.76367 8.81445,4.83789 8.72656,4.875 8.625,4.875 8.52344,4.875 8.43555,4.83789 8.36133,4.76367L4.5,0.9082 0.63867,4.76367C0.56445,4.83789 0.476562,4.875 0.375,4.875 0.273437,4.875 0.185547,4.83789 0.111328,4.76367 0.037109,4.68945 0,4.60156 0,4.5 0,4.39844 0.037109,4.31055 0.111328,4.23633L4.23633,0.111328C4.31055,0.037109 4.39844,0 4.5,0 4.60156,0 4.68945,0.037109 4.76367,0.111328L8.88867,4.23633C8.96289,4.31055,9,4.39844,9,4.5z"
                Fill="{StaticResource Brush.Foreground.Muted}"
                Height="5"
                HorizontalAlignment="Center"
                Stretch="Uniform"
                VerticalAlignment="Center"
                Width="9" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="Path" TargetProperty="Fill" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.SpinDownGlyph}">
        <dxi:RenderBorder Name="Root" Margin="4,2,4,3" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M9,5z M0,0z M0,0.375C0,0.273438 0.0371094,0.185547 0.111328,0.111328 0.185547,0.0371094 0.273438,0 0.375,0 0.476562,0 0.564453,0.0371094 0.638672,0.111328L4.5,3.9668 8.36133,0.111328C8.43555,0.0371094 8.52344,0 8.625,0 8.72656,0 8.81445,0.0371094 8.88867,0.111328 8.96289,0.185547 9,0.273438 9,0.375 9,0.476562 8.96289,0.564453 8.88867,0.638672L4.76367,4.76367C4.68945,4.83789 4.60156,4.875 4.5,4.875 4.39844,4.875 4.31055,4.83789 4.23633,4.76367L0.111328,0.638672C0.0371094,0.564453,0,0.476562,0,0.375z"
                Fill="{StaticResource Brush.Foreground.Muted}"
                Height="5"
                HorizontalAlignment="Center"
                Stretch="Uniform"
                VerticalAlignment="Center"
                Width="9" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="Path" TargetProperty="Fill" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.SpinLeftGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,4 4,0 4,8 0,4 Z "
                Fill="{StaticResource Brush.Foreground.Primary}"
                Height="8"
                Stretch="Fill"
                Width="4" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="Path" TargetProperty="Fill" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.SpinRightGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,0 0,8 4,4 0,0 Z "
                Fill="{StaticResource Brush.Foreground.Primary}"
                Height="8"
                Stretch="Fill"
                Width="4" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="Path" TargetProperty="Fill" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.ApplyGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,7L 3,10L 10,3L 9,2L 3,8L 1,6L 0,7 Z "
                Fill="{StaticResource Brush.Foreground.Primary}"
                Height="8"
                Stretch="Fill"
                Width="10" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <Style x:Key="{dxt:LWKey Buttons.ImageButtonGlyphStyle}" TargetType="{x:Type Image}">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey GradientMultiSlider.ThumbTemplate}" TargetType="{x:Type dxei:GradientMultiSliderThumb}">
        <Grid Margin="0,1,0,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Path
                Grid.Row="0"
                Height="6"
                Style="{StaticResource UIShape.Up}"
                Width="12" />
            <Path
                Grid.Row="0"
                Height="6"
                Style="{StaticResource UIShape.Up}"
                Width="12" />
            <dx:DXBorder
                Grid.Row="1"
                Background="{StaticResource Brush.Foreground.Primary}"
                Height="12"
                Width="12" />
            <dx:DXBorder Grid.Row="1" Margin="1">
                <dx:DXBorder.Background>
                    <SolidColorBrush Color="{TemplateBinding Color}" />
                </dx:DXBorder.Background>
            </dx:DXBorder>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Buttons.SpinUpButtonTemplate}" TargetType="{x:Type ButtonBase}">
        <Grid x:Name="Root" Background="{StaticResource Brush.Button.Background}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{Binding Path=Background}"
                BorderBrush="{Binding Path=BorderBrush}"
                BorderThickness="{Binding Path=BorderThickness}"
                CornerRadius="{Binding Path=CornerRadius}"
                Padding="{Binding Path=Padding}" />
            <ContentPresenter
                x:Name="Content"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                HorizontalAlignment="Center"
                Margin="0,1,0,-1"
                VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBorder}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.SelectionBorder}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Panel.ZIndex" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Buttons.SpinDownButtonTemplate}" TargetType="{x:Type ButtonBase}">
        <Grid x:Name="Root" Background="{StaticResource Brush.Button.Background}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{Binding Path=Background}"
                BorderBrush="{Binding Path=BorderBrush}"
                BorderThickness="{Binding Path=BorderThickness}"
                CornerRadius="{Binding Path=CornerRadius}"
                Padding="{Binding Path=Padding}" />
            <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="0,-1,0,1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBorder}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.SelectionBorder}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RenderCheckBoxTemplate}">
        <dxi:RenderPanel Name="CheckBox" LayoutProvider="{dxi:DockPanelLayoutProvider LastChildFill=True}">
            <dxi:RenderPanel
                Name="Field"
                Height="18"
                Margin="0,3"
                ShouldCalcDpiAwareThickness="False"
                Width="18">
                <dxi:RenderBorder
                    Name="IsDefault"
                    Background="{StaticResource Brush.Editor.Background}"
                    BorderBrush="{StaticResource Brush.Border}"
                    BorderThickness="1"
                    CornerRadius="3" />
                <dxi:RenderBorder
                    Name="Indeterminate"
                    Background="{StaticResource Brush.Foreground.Primary}"
                    CornerRadius="3"
                    Height="8"
                    Visibility="Collapsed"
                    Width="8" />
                <dxi:RenderPath
                    Name="Checked"
                    Data="F1 M11,8z M0,0z M0.00195312,3.49805C0.00195312,3.36133 0.0507812,3.24414 0.148438,3.14648 0.246094,3.04883 0.363281,3 0.5,3 0.636719,3 0.753906,3.04883 0.851562,3.14648L3.5,5.79492 9.14844,0.146484C9.24609,0.0488281 9.36328,0 9.5,0 9.57031,0 9.63477,0.0136719 9.69336,0.0410156 9.75586,0.0644531 9.80859,0.0996094 9.85156,0.146484 9.89844,0.189453 9.93555,0.242188 9.96289,0.304688 9.99023,0.363281 10.0039,0.427734 10.0039,0.498047 10.0039,0.634766 9.95312,0.753906 9.85156,0.855469L3.85156,6.85547C3.75391,6.95312 3.63672,7.00195 3.5,7.00195 3.36328,7.00195 3.24609,6.95312 3.14844,6.85547L0.148438,3.85547C0.0507812,3.75781,0.00195312,3.63867,0.00195312,3.49805z"
                    Fill="{StaticResource Brush.Foreground.Alt}"
                    Height="8"
                    HorizontalAlignment="Center"
                    Stretch="Fill"
                    VerticalAlignment="Center"
                    Visibility="Collapsed"
                    Width="10" />
            </dxi:RenderPanel>
            <dxi:RenderContentPresenter Name="PART_ContentPresenter" Visibility="Collapsed" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="CommonStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Editor.PressedBorder}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Disabled">
                    <dxi:RenderSetter Property="Opacity" TargetName="CheckBox" Value="0.38" />
                    <dxi:RenderSetter Property="Opacity" TargetName="PART_ContentPresenter" Value="0.38" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="CheckStates">
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="Visibility" TargetName="Checked" Value="Visible" />
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Accent}" />
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Accent}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Unchecked" />
                <dxi:RenderStateTrigger Name="Indeterminate">
                    <dxi:RenderSetter Property="Visibility" TargetName="Indeterminate" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="FocusStates">
                <dxi:RenderStateTrigger Name="Unfocused" />
                <dxi:RenderStateTrigger Name="Focused">
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Accent}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="ContentStates">
                <dxi:RenderStateTrigger Name="HasNoContent" />
                <dxi:RenderStateTrigger Name="HasContent">
                    <dxi:RenderSetter Property="Visibility" TargetName="PART_ContentPresenter" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="Chrome">
                <dxi:RenderSetter Property="MinWidth" TargetName="Field" Value="32" />
                <dxi:RenderSetter Property="MinHeight" TargetName="Field" Value="32" />
                <dxi:RenderSetter Property="MinWidth" TargetName="Indeterminate" Value="20" />
                <dxi:RenderSetter Property="MinHeight" TargetName="Indeterminate" Value="20" />
                <dxi:RenderSetter Property="MinWidth" TargetName="Checked" Value="20" />
                <dxi:RenderSetter Property="MinHeight" TargetName="Checked" Value="20" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey ToggleSwitch.SwitchBorderTemplate}">
        <dxi:RenderBorder
            Name="IsDefault"
            Background="{StaticResource Brush.Editor.Background}"
            BorderBrush="{StaticResource Brush.Foreground.Muted}"
            BorderThickness="1"
            CornerRadius="10"
            Margin="0,1,0,1" />
        <dxi:RenderTemplate.Triggers>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderThicknessProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderBrushProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="IsDefault"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:RenderStateGroup Name="VisualStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver" />
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="True" ValueSource="TemplatedParent" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsCheckedProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Accent}" />
                <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Accent}" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsFocusedProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Accent}" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="IsDefault" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="IsDefault" Value="44" />
            </dxi:RenderTrigger>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.FocusedBorderBrushProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasFocusedBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition Property="IsFocused" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.CheckedStateBackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasCheckedStateBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition Property="IsChecked" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.CheckedStateBorderBrushProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasCheckedStateBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition Property="IsChecked" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey ToggleSwitch.SwitchThumbTemplate}">
        <dxi:RenderBorder
            Name="IsDefault"
            Background="{StaticResource Brush.Foreground.Muted}"
            BorderBrush="{StaticResource Brush.Foreground.Muted}"
            CornerRadius="10"
            Height="12"
            Margin="4,0,4,0"
            Width="12" />
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="VisualStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Accent}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsCheckedProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Foreground.Alt}" />
                <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Foreground.Alt}" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsCheckedProperty}" Value="{x:Null}" ValueSource="TemplatedParent" />
            <dxi:RenderTrigger DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="True" ValueSource="TemplatedParent" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="IsDefault" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="IsDefault" Value="44" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEditThumb.VerticalThumbTemplate}" TargetType="{x:Type Thumb}">
        <Canvas
            x:Name="canvas"
            ClipToBounds="False"
            Height="12"
            Width="16">
            <dx:DXBorder
                x:Name="Outer"
                Canvas.Left="-3"
                Canvas.Top="-5"
                Background="{StaticResource Brush.Editor.Background}"
                BorderThickness="1"
                CornerRadius="99"
                Height="22"
                Width="22">
                <dx:DXBorder.BorderBrush>
                    <LinearGradientBrush EndPoint="0,1" Opacity="0.85" StartPoint="0,0">
                        <LinearGradientBrush.GradientStops>
                            <GradientStop Color="{StaticResource Color.Border}" Offset="0" />
                            <GradientStop Color="{StaticResource Color.Border}" Offset="0.6" />
                            <GradientStop Color="#88777777" Offset="1" />
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </dx:DXBorder.BorderBrush>
                <dx:DXBorder
                    x:Name="Inner"
                    CornerRadius="99"
                    Height="14"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Width="14">
                    <dx:DXBorder.Background>
                        <RadialGradientBrush>
                            <GradientStop x:Name="GradientStop1" Color="{StaticResource Color.Accent}" Offset="0.8" />
                            <GradientStop x:Name="GradientStop2" Color="Transparent" Offset="0.8" />
                            <GradientStop x:Name="GradientStop3" Color="Transparent" Offset="1" />
                        </RadialGradientBrush>
                    </dx:DXBorder.Background>
                </dx:DXBorder>
            </dx:DXBorder>
        </Canvas>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="1" />
                            <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.8" />
                            <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.8" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="1" />
                            <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.8" />
                            <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.8" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.19" From="1" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.7" />
                            <DoubleAnimation Duration="0:0:0.19" From="1" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.7" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.19" From="0.7" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.8" />
                            <DoubleAnimation Duration="0:0:0.19" From="0.7" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.8" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Border.Background" TargetName="Inner" Value="{StaticResource Brush.Control.NeutralBackground}" />
                <Setter Property="Border.BorderBrush" TargetName="Outer" Value="{StaticResource Brush.Border}" />
                <Setter Property="Opacity" TargetName="Inner" Value="0.38" />
            </Trigger>
            <!--<Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight"
                        TargetName="IsDefault"
                        Value="16"/>
                <Setter Property="MinWidth"
                        TargetName="IsDefault"
                        Value="26"/>
                <Setter Property="MinHeight"
                        TargetName="Back"
                        Value="16"/>
                <Setter Property="MinWidth"
                        TargetName="Back"
                        Value="26"/>
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEditThumb.HorizontalThumbTemplate}" TargetType="{x:Type Thumb}">
        <Canvas
            x:Name="canvas"
            ClipToBounds="False"
            Height="16"
            Width="12">
            <dx:DXBorder
                x:Name="Outer"
                Canvas.Left="-5"
                Canvas.Top="-3"
                Background="{dx:LWBrush 'Brush.Button.SimpleButtonBackground, Win11Dark=Brush.Control.Background'}"
                BorderThickness="1"
                CornerRadius="99"
                Height="22"
                Width="22">
                <dx:DXBorder.BorderBrush>
                    <LinearGradientBrush EndPoint="0,1" Opacity="0.85" StartPoint="0,0">
                        <LinearGradientBrush.GradientStops>
                            <GradientStop Color="{StaticResource Color.Border}" Offset="0" />
                            <GradientStop Color="{StaticResource Color.Border}" Offset="0.6" />
                            <GradientStop Color="{dx:LWColor '#88777777, Win11Dark=#88FFFFFF'}" Offset="1" />
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </dx:DXBorder.BorderBrush>
                <dx:DXBorder
                    x:Name="Inner"
                    CornerRadius="99"
                    Height="14"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Width="14">
                    <dx:DXBorder.Background>
                        <RadialGradientBrush>
                            <GradientStop x:Name="GradientStop1" Color="{StaticResource Color.Accent}" Offset="0.8" />
                            <GradientStop x:Name="GradientStop2" Color="Transparent" Offset="0.8" />
                            <GradientStop x:Name="GradientStop3" Color="Transparent" Offset="1" />
                        </RadialGradientBrush>
                    </dx:DXBorder.Background>
                </dx:DXBorder>
            </dx:DXBorder>
        </Canvas>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="1" />
                            <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.8" />
                            <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.8" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="1" />
                            <DoubleAnimation Duration="0:0:0.09" From="0.8" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.8" />
                            <DoubleAnimation Duration="0:0:0.09" From="1" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.8" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.19" From="1" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.7" />
                            <DoubleAnimation Duration="0:0:0.19" From="1" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.7" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.19" From="0.7" Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Offset" To="0.8" />
                            <DoubleAnimation Duration="0:0:0.19" From="0.7" Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Offset" To="0.8" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Border.Background" TargetName="Inner" Value="{StaticResource Brush.Control.NeutralBackground}" />
                <Setter Property="Border.BorderBrush" TargetName="Outer" Value="{StaticResource Brush.Border}" />
                <Setter Property="Opacity" TargetName="Inner" Value="0.38" />
            </Trigger>
            <!--<Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight"
                        TargetName="IsDefault"
                        Value="16"/>
                <Setter Property="MinWidth"
                        TargetName="IsDefault"
                        Value="26"/>
                <Setter Property="MinHeight"
                        TargetName="Back"
                        Value="16"/>
                <Setter Property="MinWidth"
                        TargetName="Back"
                        Value="26"/>
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.VerticalBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder x:Name="background" Background="Transparent" />
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceInactive">
                <Setter Property="Background" TargetName="background" Value="Transparent" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceActive">
                <Setter Property="Background" TargetName="background" Value="Transparent" />
            </DataTrigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="background" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="background" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="background" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="background" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.HorizontalBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder x:Name="background" Background="Transparent" />
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceInactive">
                <Setter Property="Background" TargetName="background" Value="Transparent" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceActive">
                <Setter Property="Background" TargetName="background" Value="Transparent" />
            </DataTrigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="background" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="background" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="background" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="background" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="RatingItem.Template" TargetType="dxe:RatingItem">
        <dx:DXBorder x:Name="Root" Background="Transparent">
            <Grid HorizontalAlignment="Stretch" Margin="{TemplateBinding Margin}" VerticalAlignment="Stretch">
                <Path
                    x:Name="PathBackground"
                    Data="{TemplateBinding Geometry}"
                    Fill="{TemplateBinding Background}"
                    Style="{StaticResource UIShape.Rating}" />
                <Path
                    x:Name="PathSelectedBackground"
                    Data="{TemplateBinding Geometry}"
                    Fill="{TemplateBinding SelectedBackground}"
                    OpacityMask="{TemplateBinding VisualValue}"
                    Style="{StaticResource UIShape.Rating}" />
                <Path
                    x:Name="PathHoverBackground"
                    Data="{TemplateBinding Geometry}"
                    Fill="{TemplateBinding HoverBackground}"
                    OpacityMask="{TemplateBinding HoverVisualValue}"
                    Style="{StaticResource UIShape.Rating}" />
                <Path
                    x:Name="PART_Content"
                    Data="{TemplateBinding Geometry}"
                    Fill="Transparent"
                    Opacity="0.38"
                    Stroke="{TemplateBinding BorderBrush}"
                    StrokeThickness="{TemplateBinding BorderThickness}"
                    Style="{StaticResource UIShape.Rating}" />
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Width" TargetName="PathBackground" Value="32" />
                <Setter Property="Height" TargetName="PathBackground" Value="30" />
                <Setter Property="Width" TargetName="PathHoverBackground" Value="32" />
                <Setter Property="Height" TargetName="PathHoverBackground" Value="30" />
                <Setter Property="Width" TargetName="PathSelectedBackground" Value="32" />
                <Setter Property="Height" TargetName="PathSelectedBackground" Value="30" />
                <Setter Property="Width" TargetName="PART_Content" Value="32" />
                <Setter Property="Height" TargetName="PART_Content" Value="30" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ButtonStyleBase" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.SimpleButtonBackground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Secondary}" />
        <Setter Property="Padding" Value="22,10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <dx:DXBorder
                        x:Name="IsDefault"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        Opacity="{TemplateBinding Opacity}">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            TextElement.FontSize="{TemplateBinding FontSize}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="MemoryStates">
                                <VisualState x:Name="EmptyMemory" />
                                <VisualState x:Name="MemoryAssigned">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.Accent}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Background" Value="{StaticResource Brush.ListItem.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonHoverBorder}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Muted}" />
                <Setter Property="Background" Value="{StaticResource Brush.Button.PressedBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonPressedBorder}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.38" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey Calculator.ButtonDigitStyle}" BasedOn="{StaticResource ButtonStyleBase}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Secondary}" />
        <Setter Property="FontSize" Value="18" />
    </Style>
    <Style x:Key="{dxt:LWKey Calculator.ButtonOperationStyle}" BasedOn="{StaticResource ButtonStyleBase}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Secondary}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="23,12" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource Color.Button.SimpleButtonBackground}" Opacity="0.20" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxt:LWKey Calculator.ButtonCEStyle}" BasedOn="{StaticResource ButtonStyleBase}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Secondary}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="23,12" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource Color.Button.SimpleButtonBackground}" Opacity="0.20" />
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate x:Key="{dxt:LWKey Buttons.UpGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Up}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.DownGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Down}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.LeftGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Left}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RightGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Right}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinUpGlyph}">
        <Grid x:Name="Root" Margin="4,2,4,4" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Up}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinDownGlyph}">
        <Grid x:Name="Root" Margin="4,4,4,2" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Down}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinLeftGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Left}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinRightGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Right}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.DropDownGlyph}">
        <Grid x:Name="Root" MinWidth="18">
            <Path x:Name="Path" Style="{StaticResource UIShape.Down}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.ApplyGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Apply}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.CancelGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Cancel}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RegularGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Regular}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RefreshGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Refresh}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SearchGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Search}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.EditGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Edit}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.UndoGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Undo}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RedoGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Redo}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.PlusGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.Plus}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.MinusGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.Minus}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#region Editors-->
    <dxe:DateNavigatorStateAppearance
        x:Key="{dxt:LWKey DateNavigator.AppearanceFocusedState}"
        BorderBrush="{StaticResource Brush.Accent}"
        BorderThickness="1"
        PriorityIndex="5" />
    <dxe:DateNavigatorStateAppearance x:Key="{dxt:LWKey DateNavigator.AppearanceHolidayState}" Foreground="{StaticResource Brush.Custom.Red}" PriorityIndex="3" />
    <dxe:DateNavigatorStateAppearance
        x:Key="{dxt:LWKey DateNavigator.AppearanceDisabledState}"
        Background="Transparent"
        BorderBrush="Transparent"
        Opacity="0.2"
        PriorityIndex="8" />
    <dxe:DateNavigatorStateAppearance x:Key="{dxt:LWKey DateNavigator.AppearanceInactiveState}" Opacity="0.38" PriorityIndex="2" />
    <dxe:DateNavigatorStateAppearance
        x:Key="{dxt:LWKey DateNavigator.AppearanceMouseOverState}"
        Background="{StaticResource Brush.ListItem.HoverBackground}"
        BorderBrush="{StaticResource Brush.ListItem.HoverBorder}"
        BorderThickness="1"
        Foreground="{StaticResource Brush.Foreground.Primary}"
        Opacity="1"
        PriorityIndex="6" />
    <dxe:DateNavigatorStateAppearance x:Key="{dxt:LWKey DateNavigator.AppearanceNormalState}" Foreground="{StaticResource Brush.Foreground.Primary}" PriorityIndex="1" />
    <dxe:DateNavigatorStateAppearance
        x:Key="{dxt:LWKey DateNavigator.AppearanceSelectedState}"
        Background="Transparent"
        BorderBrush="{StaticResource Brush.Accent}"
        BorderThickness="1"
        Foreground="{StaticResource Brush.Accent}"
        PriorityIndex="7" />
    <dxe:DateNavigatorStateAppearance x:Key="{dxt:LWKey DateNavigator.AppearanceSpecialDateState}" FontWeight="Bold" PriorityIndex="10" />
    <dxe:DateNavigatorStateAppearance
        x:Key="{dxt:LWKey DateNavigator.AppearanceTodayState}"
        Background="{StaticResource Brush.Accent}"
        BorderBrush="{StaticResource Brush.Accent}"
        BorderThickness="1"
        Foreground="{StaticResource Brush.Foreground.Alt}"
        PriorityIndex="9" />
    <dxe:DateNavigatorCellAppearance
        x:Key="{dxt:LWKey DateNavigator.Appearance}"
        DisabledState="{StaticResource {dxt:LWKey DateNavigator.AppearanceDisabledState}}"
        FocusedState="{StaticResource {dxt:LWKey DateNavigator.AppearanceFocusedState}}"
        HolidayState="{StaticResource {dxt:LWKey DateNavigator.AppearanceHolidayState}}"
        InactiveState="{StaticResource {dxt:LWKey DateNavigator.AppearanceInactiveState}}"
        MouseOverState="{StaticResource {dxt:LWKey DateNavigator.AppearanceMouseOverState}}"
        NormalState="{StaticResource {dxt:LWKey DateNavigator.AppearanceNormalState}}"
        SelectedState="{StaticResource {dxt:LWKey DateNavigator.AppearanceSelectedState}}"
        SpecialDateState="{StaticResource {dxt:LWKey DateNavigator.AppearanceSpecialDateState}}"
        TodayState="{StaticResource {dxt:LWKey DateNavigator.AppearanceTodayState}}" />
    <Thickness x:Key="{dxt:LWKey ComboBoxEdit.SelectedItemImagePadding}">8,4,4,4</Thickness>
    <Thickness x:Key="{dxt:LWKey ComboBoxEdit.SelectedItemContentPadding}">8,4,4,4</Thickness>
    <ControlTemplate x:Key="{dxt:LWKey EditorListBox.ItemTemplate}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Grid x:Name="Root" Margin="0,0,0,1" MinHeight="20">
            <Rectangle
                x:Name="IsFocus"
                Opacity="0"
                Stroke="{StaticResource Brush.Accent}"
                StrokeDashArray="1 2"
                StrokeThickness="1" />
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="4" />
            <dx:DXBorder
                x:Name="SelectionIndicator"
                Background="{StaticResource Brush.Accent}"
                CornerRadius="2"
                HorizontalAlignment="Left"
                Margin="0,5"
                Opacity="0"
                Width="3" />
            <DockPanel
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                LastChildFill="True"
                Margin="0,2"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <dxei:ImagePresenter DockPanel.Dock="Left" Padding="{StaticResource {dxt:LWKey ComboBoxEdit.SelectedItemImagePadding}}" />
                <dx:ContentContainer x:Name="Content" Margin="{StaticResource {dxt:LWKey ComboBoxEdit.SelectedItemContentPadding}}">
                    <ContentPresenter />
                </dx:ContentContainer>
            </DockPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Opacity" TargetName="IsFocus" Value="1" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasPadding" Value="True">
                <Setter Property="Margin" TargetName="Content" Value="{Binding Path=Padding, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused" Value="True" />
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Stroke" TargetName="IsFocus" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.ListItem.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.ListItem.HoverBorder}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.ListItem.SelectionBorder}" />
                <Setter Property="Opacity" TargetName="IsFocus" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="IsFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Background" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.ListItem.SelectionBorder}" />
                <Setter Property="Opacity" TargetName="SelectionIndicator" Value="1" />
            </MultiTrigger>
            <!--MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="IsFocused" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground"
                        Value="{StaticResource Brush.Foreground.Primary}"/>
                <Setter Property="Background"
                        Value="{StaticResource Brush.ListItem.SelectionBackground}"/>
                <Setter Property="BorderBrush"
                        Value="{StaticResource Brush.ListItem.SelectionBorder}"/>
                <Setter Property="Opacity"
                        TargetName="IsDefault"
                        Value="1"/>
            </MultiTrigger-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowItemHighlighting, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Background" Value="{StaticResource Brush.ListItem.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.ListItem.HoverBorder}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Content" Value="14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Editors-->

    <!--#region Win11Base-->
    <ControlTemplate x:Key="{dxt:LWKey TokenEditor.TokenContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" Margin="0,1,1,1">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource Brush.Button.Background}"
                BorderBrush="{StaticResource Brush.Button.Border}"
                BorderThickness="1"
                CornerRadius="4" />
            <dx:DXBorder
                x:Name="PART_BottomBorder"
                BorderThickness="1"
                CornerRadius="0,0,3.5,3.5"
                Height="10"
                Opacity="0"
                VerticalAlignment="Bottom">
                <dx:DXBorder.BorderBrush>
                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                        <LinearGradientBrush.GradientStops>
                            <GradientStop Color="Transparent" Offset="0" />
                            <GradientStop Color="Transparent" Offset="0.70" />
                            <GradientStop Color="#33000000" Offset="0.85" />
                            <GradientStop Color="#33000000" Offset="1" />
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </dx:DXBorder.BorderBrush>
            </dx:DXBorder>
            <ContentPresenter x:Name="Content" TextElement.Foreground="{StaticResource Brush.Foreground.Secondary}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="40" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Button.HoverBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Button.HoverBorder}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground.Primary}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.SelectionBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.ListItem.HoverBackground}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsTokenFocused, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="Orange" />
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Button.HoverBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Button.HoverBorder}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsEditorActivated, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Editor.Background}" />
                <Setter Property="Opacity" TargetName="PART_BottomBorder" Value="1" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Buttons.ButtonTemplate}" TargetType="{x:Type ButtonBase}">
        <Grid x:Name="Root" Background="{StaticResource Brush.Button.Background}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding dxi:AppearanceOptions.CornerRadius}"
                Padding="{TemplateBinding Padding}">
                <ContentPresenter x:Name="Content" Style="{Binding Path=DataContext.(dxei:ButtonInfoPropertyProvider.GlyphContainerStyle), RelativeSource={RelativeSource TemplatedParent}}" />
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Button.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.HoverBorder}" />
                <Setter Property="TextElement.Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Button.PressedBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.PressedBorder}" />
                <Setter Property="TextElement.Foreground" Value="{StaticResource Brush.Foreground.Muted}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsChecked}" Value="True" />
                    <Condition Binding="{Binding Path=IsDefaultButton}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource Brush.Button.CheckedBackground}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.CheckedBorder}" />
                    <Setter Property="TextElement.Foreground" Value="{StaticResource Brush.Foreground.Alt}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsChecked}" Value="True" />
                    <Condition Binding="{Binding Path=IsDefaultButton}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource Brush.Button.PressedBackground}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Brush.Button.SimpleButtonPressedBorder}" />
                    <Setter Property="TextElement.Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey CheckEdit.CheckEditBoxTemplate}" TargetType="{x:Type dxe:CheckEditBox}">
        <Grid
            x:Name="Root"
            Background="Transparent"
            Margin="1,0"
            UseLayoutRounding="False">
            <Grid Margin="{TemplateBinding Padding}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid
                    x:Name="Field"
                    Grid.Column="0"
                    Height="18"
                    Margin="0,2"
                    Width="18">
                    <dx:DXBorder
                        x:Name="IsDefault"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="3" />
                    <dx:DXBorder
                        x:Name="IsCheckedBackground"
                        Background="{StaticResource Brush.Accent}"
                        CornerRadius="4"
                        Opacity="0" />
                    <dx:DXBorder
                        x:Name="IsCheckedBorder"
                        BorderBrush="Transparent"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="3"
                        Opacity="0" />
                    <dx:DXBorder
                        x:Name="IsFocused"
                        BorderBrush="Black"
                        BorderThickness="1"
                        CornerRadius="5"
                        Margin="-2"
                        Opacity="0" />
                    <Path
                        x:Name="IndeterminateGlyph"
                        Fill="{StaticResource Brush.Foreground.Alt}"
                        Opacity="0"
                        Style="{StaticResource UIShape.Indeterminate}" />
                    <Path
                        x:Name="CheckedGlyph"
                        Fill="{StaticResource Brush.Foreground.Alt}"
                        Margin="1,1,0,0"
                        Style="{StaticResource UIShape.Checked}">
                        <Path.OpacityMask>
                            <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop x:Name="GradientDirection1" Color="Black" Offset="0" />
                                    <GradientStop x:Name="GradientDirection2" Color="Transparent" Offset="1" />
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Path.OpacityMask>
                    </Path>
                </Grid>
                <ContentPresenter
                    x:Name="contentPresenter"
                    Grid.Column="1"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    Margin="6,0,0,0"
                    RecognizesAccessKey="True"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Visibility="{Binding HasContent, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Unchecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IsCheckedBackground"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"/>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IsCheckedBorder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"/>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IsDefault"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"/>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="CheckedGlyph"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"/>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IsDefault"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"/>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IsCheckedBackground"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"/>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IsCheckedBorder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"/>
                            <DoubleAnimation Duration="0"
                                             From="0.0"
                                             Storyboard.TargetName="GradientDirection1"
                                             Storyboard.TargetProperty="Offset"
                                             To="1.0"/>
                            <DoubleAnimation Duration="0"
                                             From="0.0"
                                             Storyboard.TargetName="GradientDirection2"
                                             Storyboard.TargetProperty="Offset"
                                             To="1.0"/>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Indeterminate">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IsCheckedBackground"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"/>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IsCheckedBorder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"/>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IndeterminateGlyph"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"/>
                            <DoubleAnimation Duration="0"
                                             From="0.0"
                                             Storyboard.TargetName="GradientDirection2"
                                             Storyboard.TargetProperty="Offset"
                                             To="0"/>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="InternalFocusStates">
                    <!--VisualState x:Name="InternalFocused">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="IsFocused"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"/>
                        </Storyboard>
                    </VisualState-->
                    <VisualState x:Name="InternalFocused"/>
                    <VisualState x:Name="InternalUnfocused"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background"
                        TargetName="IsDefault"
                        Value="{StaticResource Brush.Editor.Border}"
                        />
                <Setter Property="Background"
                        TargetName="IsCheckedBackground"
                        Value="{StaticResource Brush.Button.CheckedHoverBackground}"
                        />
                <Setter Property="BorderBrush"
                        TargetName="IsCheckedBorder"
                        Value="Transparent"
                        />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background"
                        TargetName="IsDefault"
                        Value="{StaticResource Brush.Button.PressedBackground}"
                        />
                <Setter Property="BorderBrush"
                        TargetName="IsDefault"
                        Value="{StaticResource Brush.Button.SimpleButtonBorder}"
                        />
                <Setter Property="Background"
                        TargetName="IsCheckedBackground"
                        Value="{StaticResource Brush.Button.CheckedPressedBackground}"
                        />
                <Setter Property="BorderBrush"
                        TargetName="IsCheckedBorder"
                        Value="{StaticResource Brush.Button.CheckedPressedBorder}"
                        />
            </Trigger>
            <!-- EditorAppearanceProperties -->
            <Trigger Property="dxe:EditorAppearanceProperties.HasCheckEditGlyphBrush" Value="True">
                <Setter Property="Fill"
                        TargetName="CheckedGlyph"
                        Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckEditGlyphBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <!--MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True"/>
                    <Condition Property="IsFocused" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                        TargetName="IsFocused"
                        Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
            </MultiTrigger-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxe:EditorAppearanceProperties.HasCheckedStateBackground" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="IsCheckedBackground"
                        Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckedStateBackground), RelativeSource={RelativeSource TemplatedParent}}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxe:EditorAppearanceProperties.HasCheckedStateBorderBrush" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                        TargetName="IsCheckedBorder"
                        Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckedStateBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
            </MultiTrigger>
            <!-- EditorAppearanceProperties -->
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter Property="LayoutTransform" TargetName="Field">
                    <Setter.Value>
                        <ScaleTransform CenterX="0.5"
                                        CenterY="0.5"
                                        ScaleX="-1"
                                        ScaleY="1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity"
                        TargetName="Root"
                        Value="0.38"/>
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Height"
                        TargetName="CheckedGlyph"
                        Value="20"/>
                <Setter Property="Width"
                        TargetName="CheckedGlyph"
                        Value="20"/>
                <Setter Property="Height"
                        TargetName="Field"
                        Value="32"/>
                <Setter Property="Width"
                        TargetName="Field"
                        Value="32"/>
                <Setter Property="Margin"
                        TargetName="Field"
                        Value="0"/>
                <Setter Property="Height"
                        TargetName="IndeterminateGlyph"
                        Value="20"/>
                <Setter Property="Width"
                        TargetName="IndeterminateGlyph"
                        Value="20"/>
            </Trigger>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasCheckBoxWidth" Value="True">
                <Setter Property="Width"
                        TargetName="Field"
                        Value="{Binding Path=(dxei:BaseEditAppearanceOptions.CheckBoxWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasCheckBoxHeight" Value="True">
                <Setter Property="Height"
                        TargetName="Field"
                        Value="{Binding Path=(dxei:BaseEditAppearanceOptions.CheckBoxHeight), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
      
    </ControlTemplate>
    <Style x:Key="InplaceFocusVisualBorder">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <dx:DXBorder
                        BorderBrush="Black"
                        BorderThickness="2"
                        CornerRadius="6"
                        Margin="-3,0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BaseCheckEditBoxInplaceStyle" TargetType="{x:Type dxe:CheckEditBox}">
        <Setter Property="Padding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding}" />
        <Setter Property="IsTabStop" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsTabStop}" />
        <Setter Property="Focusable" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Focusable}" />
        <Setter Property="Content" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.Content)}" />
        <Setter Property="ContentTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.ContentTemplate)}" />
        <Setter Property="IsThreeState" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.IsThreeState)}" />
        <Setter Property="Cursor" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Cursor}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment}" />
        <Setter Property="ContentTemplateSelector" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.ContentTemplateSelector)}" />
        <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground}" />
        <Setter Property="DisplayMode" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayMode, RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <Trigger Property="DisplayMode" Value="Image">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CheckEdit.ImageCheckEditBoxTemplate}}" />
                <Setter Property="GlyphTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).GlyphTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey CheckEdit.CheckEditBoxInplaceStyle}" BasedOn="{StaticResource BaseCheckEditBoxInplaceStyle}" TargetType="{x:Type dxe:CheckEditBox}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="0,1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource InplaceFocusVisualBorder}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CheckEdit.CheckEditBoxTemplate}}" />
    </Style>
    <dxe:DataPagerBoolToVisibilityInvertConverter x:Key="DataPagerBoolToVisibilityInvertConverter" />
    <ControlTemplate x:Key="{dxt:LWKey DataPagerButton.Template}" TargetType="{x:Type dxe:DataPagerButton}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource Brush.Button.Background}"
                BorderBrush="{StaticResource Brush.Button.Border}"
                BorderThickness="1"
                CornerRadius="4" />
            <dx:ContentContainer x:Name="Content">
                <ContentPresenter Content="{TemplateBinding PageNumber}" ContentTemplate="{TemplateBinding ContentTemplate}" Visibility="{Binding ShowEllipsis, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DataPagerBoolToVisibilityInvertConverter}}" />
            </dx:ContentContainer>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="Position">
                    <VisualState x:Name="FirstLeft" />
                    <VisualState x:Name="SecondLeft" />
                    <VisualState x:Name="FirstRight" />
                    <VisualState x:Name="SecondRight" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="IsDefault" Property="Background" Value="{StaticResource Brush.Button.HoverBackground}"/>
                <Setter TargetName="IsDefault" Property="BorderBrush" Value="{StaticResource Brush.Button.HoverBorder}"/>
                <Setter TargetName="Content" Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="IsDefault" Property="Background" Value="{StaticResource Brush.Button.PressedBackground}"/>
                <Setter TargetName="IsDefault" Property="BorderBrush" Value="{StaticResource Brush.Button.PressedBorder}"/>
                <Setter TargetName="Content" Property="Foreground" Value="{StaticResource Brush.Foreground.Muted}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Root" Property="Opacity" Value="0.38"/>
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="42" />
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DataPager.ButtonAreaBorderTemplate}" TargetType="ContentControl">
        <dx:DXBorder
            Background="{StaticResource Brush.Editor.Background}"
            BorderBrush="{StaticResource Brush.Border}"
            BorderThickness="1"
            CornerRadius="4">
            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="2" />
        </dx:DXBorder>
    </ControlTemplate>
    <Size x:Key="{dxt:LWKey DateNavigator.CalendarCellSize}">35,35</Size>
    <CornerRadius x:Key="{dxt:LWKey DateNavigator.CellButtonCornerRadius}">30</CornerRadius>
    <Style x:Key="{dxt:LWKey DateNavigator.OutlookHeaderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Editor.Border}" />
        <Setter Property="MinHeight" Value="40" />
    </Style>
    <Style x:Key="{dxt:LWKey DateNavigator.WeekdayAbbreviationStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
        <Setter Property="FontWeight" Value="Semibold" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <dx:BoolToVisibilityInverseConverter x:Key="inverseBoolToVisibilityConverter" />
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.HoverBorderTemplate}">
        <dxi:RenderBorder
            Name="PART_Focus"
            Background="{StaticResource {dxt:LWKey Common.EditorFocusedBorder}}"
            CornerRadius="4"
            Height="10"
            VerticalAlignment="Bottom"
            Visibility="Collapsed" />
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxei:ControlHelper.ShowFocusedStateProperty}" Value="True" ValueSource="Chrome">
                <dxi:RenderSetter Property="Visibility" TargetName="PART_Focus" Value="Visible" />
            </dxi:RenderTrigger>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.FocusedBorderBrushProperty}"
                TargetName="PART_Focus"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasFocusedBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BorderThicknessProperty}"
                TargetName="PART_Focus"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="PART_Focus"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.CommonBorderTemplate}">
        <dxi:RenderPanel>
            <dxi:RenderBorder
                Name="PART_Border"
                Background="{StaticResource Brush.Editor.Background}"
                BorderBrush="{StaticResource Brush.Editor.Border}"
                BorderThickness="1"
                CornerRadius="4" />
            <dxi:RenderBorder
                Name="PART_BottomBorder"
                BorderBrush="{StaticResource {dxt:LWKey Common.EditorBottomBorder}}"
                BorderThickness="1"
                CornerRadius="0,0,4,4"
                Height="10"
                VerticalAlignment="Bottom" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BorderThicknessProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="PART_Border"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" />
            </dxi:ConditionalRenderBinding>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="PART_Border" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="PART_Border" Value="44" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static FrameworkElement.IsEnabledProperty}" Value="False" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Opacity" TargetName="PART_Border" Value="0.35" />
            </dxi:RenderTrigger>
            <dxi:MultiRenderTrigger>
                <dxi:MultiRenderTrigger.Conditions>
                    <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
                    <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBorderBrushProperty}" Value="False" ValueSource="TemplatedParent" />
                </dxi:MultiRenderTrigger.Conditions>
                <dxi:RenderSetter Property="BorderBrush" TargetName="PART_Border" Value="{StaticResource {dxt:LWKey TextEdit.ReadOnlyBorder}}" />
            </dxi:MultiRenderTrigger>
            <dxi:MultiRenderTrigger>
                <dxi:MultiRenderTrigger.Conditions>
                    <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
                    <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBackgroundProperty}" Value="False" ValueSource="TemplatedParent" />
                </dxi:MultiRenderTrigger.Conditions>
                <dxi:RenderSetter Property="Background" TargetName="PART_Border" Value="{StaticResource {dxt:LWKey BaseEdit.ReadOnlyBackground}}" />
            </dxi:MultiRenderTrigger>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.ReadOnlyBorderBrushProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.ReadOnlyBackgroundProperty}"
                TargetName="PART_Border"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BackgroundProperty}"
                TargetName="PART_Border"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:BaseEdit.BackgroundProperty}" Operator="Not" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BorderBrushProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:BaseEdit.BorderBrushProperty}" Operator="Not" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.TextEditBorderTemplate}">
        <dxi:RenderPanel>
            <dxi:RenderBorder
                Name="PART_Border"
                Background="{StaticResource Brush.Editor.Background}"
                BorderBrush="{StaticResource Brush.Editor.Border}"
                BorderThickness="1"
                CornerRadius="3" />
            <dxi:RenderBorder
                Name="PART_BottomBorder"
                BorderBrush="{StaticResource {dxt:LWKey Common.EditorBottomBorder}}"
                BorderThickness="1"
                CornerRadius="0,0,3,3"
                Height="10"
                VerticalAlignment="Bottom" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BorderThicknessProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="PART_Border"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="PART_Border" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="PART_Border" Value="44" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static FrameworkElement.IsEnabledProperty}" Value="False" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Opacity" TargetName="PART_Border" Value="0.35" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="true" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="BorderBrush" TargetName="PART_Border" Value="{StaticResource {dxt:LWKey TextEdit.ReadOnlyBorder}}" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="true" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Background" TargetName="PART_Border" Value="{StaticResource {dxt:LWKey TextEdit.ReadOnlyBackground}}" />
            </dxi:RenderTrigger>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.ReadOnlyBorderBrushProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.ReadOnlyBackgroundProperty}"
                TargetName="PART_Border"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BackgroundProperty}"
                TargetName="PART_Border"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:BaseEdit.BackgroundProperty}" Operator="Not" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BorderBrushProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:BaseEdit.BorderBrushProperty}" Operator="Not" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <sys:String x:Key="PasswordBoxHelperMargin">6,3,2,3,0,3,2,3</sys:String>
    <sys:String x:Key="TextStyleHelperMargin">6,3,4,3,6,3,4,3</sys:String>
    <sys:String x:Key="TextInplaceStyleHelperMargin">4,4,2,4,4,4,6,4</sys:String>
    <sys:String x:Key="TextBlockInplaceHelperMargin">6,4,4,4,6,4,4,4</sys:String>
    <DataTemplate x:Key="{dxt:LWKey PasswordBoxEdit.ShowPasswordButtonTemplate}">
        <Image Source="{dx:SvgImageSource Uri={dx:EditorsResource Images/PasswordBoxEdit/ShowWin11.svg}}" Height="16" Width="16" />
    </DataTemplate>
    <Thickness x:Key="{dxt:LWKey ProgressBarEdit.PanelNoContentHorizontalMargin}">0, 8</Thickness>
    <Thickness x:Key="{dxt:LWKey ProgressBarEdit.PanelNoContentVerticalMargin}">8, 0</Thickness>
    <sys:Boolean x:Key="{dxt:LWKey ProgressBarEdit.ShowBorderDefault}">False</sys:Boolean>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEditStyle.PanelTemplateHorizontal}" TargetType="{x:Type dxe:RangeEditBasePanel}">
        <Grid x:Name="rootGrid">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <ContentControl
                Name="back"
                Grid.RowSpan="2"
                dxi:AppearanceOptions.Background="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.BorderBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.HasBackground="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.HasBorderBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderBrush), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource Self}}"
                Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelBackgroundHorizontalStyle}}" />
            <ContentControl Name="foreground" Grid.RowSpan="2" Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelForegroundStyle}}" />
            <Grid
                x:Name="progressLine"
                Grid.Row="1"
                Grid.RowSpan="2"
                UseLayoutRounding="False">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).LeftSidePosition, Converter={dxe:GridLengthConverter}}" />
                    <ColumnDefinition Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).RightSidePosition, Converter={dxe:GridLengthConverter}}" />
                </Grid.ColumnDefinitions>
                <ContentControl Name="right" Grid.ColumnSpan="2" Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelRightSideHorizontalStyle}}" />
                <ContentControl
                    Name="left"
                    dxei:BaseEditAppearanceOptions.HasProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasProgressBrush), RelativeSource={RelativeSource Self}}"
                    dxei:BaseEditAppearanceOptions.ProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource Self}}"
                    Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelLeftSideHorizontalStyle}}" />
            </Grid>
            <ContentControl
                x:Name="PART_InnerContent"
                Content="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayText}"
                ContentTemplate="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentTemplate}"
                HorizontalAlignment="Stretch"
                HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment}"
                Opacity="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, Converter={dx:BoolToVisibilityViaOpacityConverter}}"
                Style="{DynamicResource {dxt:LWKey ProgressBarEdit.ContentStyle}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" Value="Content">
                <Setter Property="Content" TargetName="PART_InnerContent" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Content}" />
                <Setter Property="Grid.Row" TargetName="progressLine" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" Value="None">
                <Setter Property="Content" TargetName="PART_InnerContent" Value="{x:Null}" />
                <Setter Property="Grid.Row" TargetName="progressLine" Value="0" />
                <Setter Property="Margin" TargetName="rootGrid" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelNoContentHorizontalMargin}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEditStyle.PanelTemplateVertical}" TargetType="{x:Type dxe:RangeEditBasePanel}">
        <Grid x:Name="rootGrid">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ContentControl
                Name="back"
                Grid.ColumnSpan="2"
                dxi:AppearanceOptions.Background="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.BorderBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.HasBackground="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.HasBorderBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderBrush), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource Self}}"
                Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelBackgroundVerticalStyle}}" />
            <ContentControl Name="foreground" Grid.ColumnSpan="2" Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelForegroundStyle}}" />
            <Grid
                x:Name="progressLine"
                Grid.Column="1"
                Grid.ColumnSpan="2"
                UseLayoutRounding="False">
                <Grid.RowDefinitions>
                    <RowDefinition Height="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).RightSidePosition, Converter={dxe:GridLengthConverter}}" />
                    <RowDefinition Height="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).LeftSidePosition, Converter={dxe:GridLengthConverter}}" />
                </Grid.RowDefinitions>
                <ContentControl Name="right" Grid.RowSpan="2" Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelRightSideVerticalStyle}}" />
                <ContentControl
                    Name="left"
                    Grid.Row="1"
                    dxei:BaseEditAppearanceOptions.HasProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasProgressBrush), RelativeSource={RelativeSource Self}}"
                    dxei:BaseEditAppearanceOptions.ProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource Self}}"
                    Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelLeftSideVerticalStyle}}" />
            </Grid>
            <ContentControl
                x:Name="PART_InnerContent"
                Content="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayText}"
                ContentTemplate="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentTemplate}"
                Opacity="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, Converter={dx:BoolToVisibilityViaOpacityConverter}}"
                RenderTransformOrigin="0.5, 0.5"
                Style="{DynamicResource {dxt:LWKey ProgressBarEdit.ContentStyle}}"
                VerticalAlignment="Stretch">
                <ContentControl.LayoutTransform>
                    <RotateTransform Angle="-90" />
                </ContentControl.LayoutTransform>
            </ContentControl>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" Value="Content">
                <Setter Property="Content" TargetName="PART_InnerContent" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Content}" />
                <Setter Property="Grid.Column" TargetName="progressLine" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" Value="None">
                <Setter Property="Content" TargetName="PART_InnerContent" Value="{x:Null}" />
                <Setter Property="Grid.Column" TargetName="progressLine" Value="0" />
                <Setter Property="Margin" TargetName="rootGrid" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelNoContentVerticalMargin}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <DataTemplate x:Key="{dxt:LWKey ProgressBarEdit.ContentTemplate}">
        <TextBlock
            HorizontalAlignment="Stretch"
            Text="{Binding}"
            TextAlignment="Center"
            VerticalAlignment="Center" />
    </DataTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelBackgroundHorizontalTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder x:Name="Root" Background="Transparent">
            <ContentPresenter x:Name="Content" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceInactive">
                <Setter Property="Background" TargetName="Root" Value="Transparent" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceActive">
                <Setter Property="Background" TargetName="Root" Value="Transparent" />
            </DataTrigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="Root" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="Root" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="Root" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="Root" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelBackgroundVerticalTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder x:Name="Root" Background="Transparent">
            <ContentPresenter x:Name="Content" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceInactive">
                <Setter Property="Background" TargetName="Root" Value="Transparent" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceActive">
                <Setter Property="Background" TargetName="Root" Value="Transparent" />
            </DataTrigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="Root" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="Root" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="Root" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="Root" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="ProgressBarEditTransparent" Color="Transparent" />
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelLeftSideHorizontalTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="border"
                Background="{StaticResource Brush.Accent}"
                CornerRadius="1"
                Height="3" />
            <Rectangle
                x:Name="Background"
                Height="3"
                Opacity="1"
                RadiusX="1"
                RadiusY="1">
                <Rectangle.Fill>
                    <MultiBinding>
                        <MultiBinding.Converter>
                            <dxe:ProgressBarHighlightConverter />
                        </MultiBinding.Converter>
                        <Binding Source="{StaticResource ProgressBarEditTransparent}" />
                        <Binding ElementName="Background" Path="ActualWidth" />
                        <Binding ElementName="Background" Path="ActualHeight" />
                        <Binding Path="(dxe:BaseEdit.OwnerEdit).StyleSettings.AccelerateRatio" />
                    </MultiBinding>
                </Rectangle.Fill>
            </Rectangle>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasProgressBrush" Value="True">
                <Setter Property="Background" TargetName="border" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelRightSideHorizontalTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{StaticResource Brush.Control.NeutralBackground}" CornerRadius="0.5" Height="1" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelLeftSideVerticalTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="border"
                Background="{StaticResource Brush.Accent}"
                CornerRadius="1"
                Width="3" />
            <Rectangle
                x:Name="Background"
                Height="3"
                Opacity="1"
                RadiusX="1"
                RadiusY="1">
                <Rectangle.Fill>
                    <MultiBinding>
                        <MultiBinding.Converter>
                            <dxe:ProgressBarHighlightConverter />
                        </MultiBinding.Converter>
                        <Binding Source="{StaticResource ProgressBarEditTransparent}" />
                        <Binding ElementName="Background" Path="ActualWidth" />
                        <Binding ElementName="Background" Path="ActualHeight" />
                        <Binding Path="(dxe:BaseEdit.OwnerEdit).StyleSettings.AccelerateRatio" />
                    </MultiBinding>
                </Rectangle.Fill>
                <Rectangle.LayoutTransform>
                    <RotateTransform Angle="-90" />
                </Rectangle.LayoutTransform>
            </Rectangle>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasProgressBrush" Value="True">
                <Setter Property="Background" TargetName="border" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelRightSideVerticalTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{StaticResource Brush.Control.NeutralBackground}" CornerRadius="0.5" Width="1" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RangeControl.LeftNavigationButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root" Margin="12,0,0,0" MinHeight="38">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource Brush.Button.SimpleButtonBackground}"
                BorderBrush="{StaticResource Brush.Button.SimpleButtonBorder}"
                BorderThickness="1"
                CornerRadius="96"
                Height="38"
                Width="38">
                <dx:DXBorder.Effect>
                    <DropShadowEffect BlurRadius="15" Color="{dx:LWColor '#05F0F0F0, Win11Dark=#0D000000'}" ShadowDepth="0" />
                </dx:DXBorder.Effect>
            </dx:DXBorder>
            <Path
                x:Name="Path"
                Fill="{StaticResource Brush.Foreground.Secondary}"
                Height="16"
                Style="{StaticResource UIShape.Left}"
                Width="8" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.Button.HoverBackground}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.Button.SimpleButtonHoverBorder}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Path" Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)" To="{StaticResource Color.Foreground.Primary}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.Button.PressedBackground}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.Button.SimpleButtonPressedBorder}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Path" Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)" To="{StaticResource Color.Foreground.Muted}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RangeControl.RightNavigationButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root" Margin="12,0,0,0" MinHeight="38">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource Brush.Button.SimpleButtonBackground}"
                BorderBrush="{StaticResource Brush.Button.SimpleButtonBorder}"
                BorderThickness="1"
                CornerRadius="96"
                Height="38"
                Width="38">
                <dx:DXBorder.Effect>
                    <DropShadowEffect BlurRadius="15" Color="{dx:LWColor '#05F0F0F0, Win11Dark=#0D000000'}" ShadowDepth="0" />
                </dx:DXBorder.Effect>
            </dx:DXBorder>
            <Path
                x:Name="Path"
                Fill="{StaticResource Brush.Foreground.Secondary}"
                Height="16"
                Style="{StaticResource UIShape.Right}"
                Width="8" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.Button.HoverBackground}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.Button.SimpleButtonHoverBorder}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Path" Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)" To="{StaticResource Color.Foreground.Primary}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.Button.PressedBackground}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.Button.SimpleButtonPressedBorder}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Path" Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)" To="{StaticResource Color.Foreground.Muted}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RangeControl.LeftSelectionThumbTemplate}" TargetType="{x:Type Thumb}">
        <dx:DXBorder
            x:Name="Root"
            Background="{dx:LWBrush 'Brush.Foreground.Secondary, Win11Dark=Brush.Accent'}"
            CornerRadius="4"
            HorizontalAlignment="Center"
            Margin="-9,0,0,0">
            <dx:DXBorder
                BorderBrush="{dx:LWBrush 'Brush.Editor.Background, Win11Dark=Brush.Foreground.Alt'}"
                BorderThickness="1,0,1,0"
                Height="12"
                Margin="3"
                Width="3" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Width" TargetName="Root" Value="30" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey RangeControl.RightSelectionThumbTemplate}" TargetType="{x:Type Thumb}">
        <dx:DXBorder
            x:Name="Root"
            Background="{dx:LWBrush 'Brush.Foreground.Secondary, Win11Dark=Brush.Accent'}"
            CornerRadius="4"
            HorizontalAlignment="Center"
            Margin="0,0,-9,0">
            <dx:DXBorder
                BorderBrush="{dx:LWBrush 'Brush.Editor.Background, Win11Dark=Brush.Foreground.Alt'}"
                BorderThickness="1,0,1,0"
                Height="12"
                Margin="3"
                Width="3" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Width" TargetName="Root" Value="30" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <CornerRadius x:Key="{dxt:LWKey DateRangeControl.CalendarButtonCornerRadius}">0,3,3,0</CornerRadius>
    <CornerRadius x:Key="{dxt:LWKey DateRangeControl.StartEditorBorderCornerRadius}">3,0,0,3</CornerRadius>
    <CornerRadius x:Key="{dxt:LWKey DateRangeControl.EndEditorBorderCornerRadius}">0,0,0,0</CornerRadius>
    <LinearGradientBrush x:Key="{dxt:LWKey DateRangeControl.EditorDecoratedBorderBrush}" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="Transparent" Offset="0" />
            <GradientStop Color="Transparent" Offset="0.70" />
            <GradientStop Color="{dx:LWColor '#29000000, Win11Dark=#80FFFFFF'}" Offset="0.85" />
            <GradientStop Color="{dx:LWColor '#29000000, Win11Dark=#80FFFFFF'}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{dxt:LWKey DateRangeControl.CurrentEditorDecoratedBorderBrush}" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="Transparent" Offset="0" />
        <GradientStop Color="Transparent" Offset="0.8" />
        <GradientStop Color="{StaticResource Color.Accent}" Offset="0.8" />
        <GradientStop Color="{StaticResource Color.Accent}" Offset="1" />
    </LinearGradientBrush>
    <DropShadowEffect x:Key="FlyoutControlEffect" BlurRadius="10" Opacity="0.14" />
    <Visibility x:Key="{dxt:LWKey TrackBarEdit.DisabledTicksVisibility}">Hidden</Visibility>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.PanelLeftSideTemplate}">
        <dx:DXBorder Background="Transparent">
            <dx:DXBorder
                x:Name="line"
                Background="{TemplateBinding Background}"
                CornerRadius="2,0,0,2"
                Height="4" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical">
                <Setter Property="Height" TargetName="line" Value="NaN" />
                <Setter Property="Width" TargetName="line" Value="4" />
                <Setter Property="CornerRadius" TargetName="line" Value="0,0,2,2" />
            </DataTrigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="line" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="line" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="line" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="line" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxei:ControlHelper.ShowFocusedState" Value="True" />
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="line" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxei:BaseEditAppearanceOptions.HasTrackWidth), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Width" TargetName="line" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.TrackWidth), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxei:BaseEditAppearanceOptions.HasTrackHeight), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Height" TargetName="line" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.TrackHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="line" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.PanelRightSideTemplate}">
        <dx:DXBorder Background="Transparent">
            <dx:DXBorder
                x:Name="line"
                Background="{TemplateBinding Background}"
                CornerRadius="0,2,2,0"
                Height="4" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical">
                <Setter Property="Height" TargetName="line" Value="NaN" />
                <Setter Property="Width" TargetName="line" Value="4" />
                <Setter Property="CornerRadius" TargetName="line" Value="2,2,0,0" />
            </DataTrigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="line" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="line" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="line" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="line" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxei:ControlHelper.ShowFocusedState" Value="True" />
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="line" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxei:BaseEditAppearanceOptions.HasTrackWidth), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Width" TargetName="line" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.TrackWidth), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxei:BaseEditAppearanceOptions.HasTrackHeight), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Height" TargetName="line" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.TrackHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="line" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.PanelLeftSideBackground}" Color="{StaticResource Color.Accent}" />
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.PanelLeftSideUnSelectedBackground}" Color="{StaticResource Color.Control.NeutralBackground}" />
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.PanelRightSideBackground}" Color="{StaticResource Color.Control.NeutralBackground}" />
    <CornerRadius x:Key="{dxt:LWKey FlyoutControl.CornerRadius}">5</CornerRadius>
    <sys:Char x:Key="{dxt:LWKey PasswordBoxEdit.PasswordChar}">•</sys:Char>
    <Thickness x:Key="{dxt:LWKey PopupColorEdit.InplaceMargin}">0,1</Thickness>
    <sys:Double x:Key="{dxt:LWKey ToggleSwitchEdit.InplaceToggleSwitchHeight}">22</sys:Double>
    <Thickness x:Key="{dxt:LWKey ToggleSwitchEdit.InplaceMargin}">6,1,2,1</Thickness>
    <Thickness x:Key="{dxt:LWKey MemoEdit.InplaceMargin}">0,4</Thickness>
    <CornerRadius x:Key="{dxt:LWKey Buttons.CornerRadius}">4</CornerRadius>
    <Thickness x:Key="{dxt:LWKey Buttons.Padding}">3,0</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.DateEditButtonPadding}">1,0</Thickness>
    <Style x:Key="{dxt:LWKey ImageEdit.ContentStyle}">
        <Setter Property="dx:FrameworkElementHelper.ClipCornerRadius" Value="3" />
    </Style>
    <Thickness x:Key="{dxt:LWKey EditorListBox.CheckBoxItemPadding}">3,2,0,2</Thickness>
    <!--#endregion Win11Base-->
    <Thickness x:Key="{dxt:LWKey EmbeddedEditorLabels.Margin}">8,3,0,0</Thickness>
    <Thickness x:Key="{dxt:LWKey EmbeddedEditorLabels.Padding}">0</Thickness>
    <sys:Double x:Key="{dxt:LWKey EmbeddedEditorLabels.FontSize}">12</sys:Double>
    <SolidColorBrush x:Key="{dxt:LWKey EmbeddedEditorLabels.Foreground}" Color="Gray"/>
    <Thickness x:Key="{dxt:LWKey EmbeddedEditorLabels.ContentMargin}">0,0,0,2</Thickness>
    <Style x:Key="RatingControlDefaultStyle" TargetType="dxe:RatingControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxe:RatingControl">
                    <dxei:RatingPanel ChildrenSource="{Binding Items, RelativeSource={RelativeSource TemplatedParent}}" Orientation="{TemplateBinding Orientation}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="2,2,2,2" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Margin" Value="2,2,2,2" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.35" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RatingControl.DefaultStyle" BasedOn="{StaticResource RatingControlDefaultStyle}" TargetType="dxe:RatingControl">
        <Setter Property="Margin" Value="2,4,2,4" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Margin" Value="4,2,4,2" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey CheckEdit.EmptyFocusVisualStyle}" >
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <dx:DXBorder x:Name="FocusedBorder" BorderBrush="Black" BorderThickness="2" CornerRadius="6" Margin="-4"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxt:LWKey DateNavigator.HeaderButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.HeaderButtonTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="MinHeight" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey DateEdit.HeaderButtonStyle}" BasedOn="{StaticResource {dxt:LWKey DateNavigator.HeaderButtonStyle}}" TargetType="{x:Type Button}" />
    <Style x:Key="{dxt:LWKey DateNavigator.CurrentDateButtonStyle}" BasedOn="{StaticResource {dxt:LWKey DateNavigator.HeaderButtonStyle}}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Primary}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.CurrentDateButtonTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="MinHeight" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>