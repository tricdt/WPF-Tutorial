<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Common/{ThemeName}/Common.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <dx:BoolToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <ControlTemplate x:Key="{dxt:LWKey TokenEditor.TokenContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" Margin="0,1,1,1">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Control.NeutralBackground, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Control.Background, VS2019Blue=Brush.ControlDark.Background, VS2019Dark=Brush.Window.Background, VS2019Light=Brush.Window.Background'}"
                BorderBrush="{dx:LWBrush 'Brush.Button.Background, VS2019Blue=Brush.ControlDark.Background, VS2019Dark=Brush.Window.Background'}"
                BorderThickness="1" />
            <ContentPresenter x:Name="Content" TextElement.Foreground="{StaticResource Brush.Foreground}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="40" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.HoverForeground}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, VS2019Dark=Brush.HoverBorder'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.SelectionForeground}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.HoverBackground}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsTokenFocused, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Focused}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, VS2019Light=Brush.HoverBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, VS2019Light=Brush.HoverBorder'}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsTokenFocused, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Focused}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsEditorActivated, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Focused}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Editor.Background}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Buttons.ButtonTemplate}" TargetType="{x:Type ButtonBase}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding dxi:AppearanceOptions.CornerRadius}"
                Padding="{TemplateBinding Padding}">
                <ContentPresenter x:Name="Content" Style="{Binding Path=DataContext.(dxei:ButtonInfoPropertyProvider.GlyphContainerStyle), RelativeSource={RelativeSource TemplatedParent}}" />
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, Office2019Colorful=Brush.HoverAltBackground'}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.HoverBorder, Office2019Black=Brush.ControlLight.HoverBackground, Office2019Colorful=Brush.HoverAltBorder'}" />
                <Setter Property="TextElement.Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.HoverForeground'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBackground'}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.SelectionBorder, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBorder'}" />
                <Setter Property="TextElement.Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, VS2019Blue=Brush.SelectionForeground, VS2019Light=Brush.SelectionForeground'}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsChecked}" Value="True">
                <Setter Property="Background" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBackground'}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.SelectionBorder, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBorder'}" />
                <Setter Property="TextElement.Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, VS2019Blue=Brush.SelectionForeground, VS2019Light=Brush.SelectionForeground'}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey CheckEdit.CheckEditBoxTemplate}" TargetType="{x:Type dxe:CheckEditBox}">
        <Grid x:Name="Root" Background="Transparent">
            <Grid Margin="{TemplateBinding Padding}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid
                    x:Name="Field"
                    Grid.Column="0"
                    Height="14"
                    Margin="0,3"
                    Width="14">
                    <dx:DXBorder
                        x:Name="IsDefault"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding dxi:AppearanceOptions.CornerRadius}" />
                    <dx:DXBorder
                        x:Name="IsFocused"
                        BorderBrush="{StaticResource Brush.Focused}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding dxi:AppearanceOptions.CornerRadius}"
                        Opacity="0" />
                    <dx:DXBorder
                        x:Name="Indeterminate"
                        Background="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground'}"
                        BorderThickness="3"
                        Margin="0"
                        Opacity="0" />
                    <Path
                        x:Name="Checked"
                        Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground'}"
                        Opacity="0"
                        Style="{StaticResource UIShape.Checked}" />
                </Grid>
                <ContentPresenter
                    x:Name="contentPresenter"
                    Grid.Column="1"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    Margin="4,0,0,0"
                    RecognizesAccessKey="True"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Visibility="{Binding HasContent, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Checked" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Indeterminate">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Indeterminate" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="InternalFocusStates">
                    <VisualState x:Name="InternalFocused">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocused" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="InternalUnfocused" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="Checked" Value="{dx:LWBrush 'Brush.HoverForeground, Office2019Black=Brush.ControlLight.HoverForeground'}" />
                <Setter Property="Background" TargetName="Indeterminate" Value="{dx:LWBrush 'Brush.HoverForeground, Office2019Black=Brush.ControlLight.HoverForeground'}" />
                <Setter Property="Background" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, Office2019Colorful=Brush.HoverAltBackground, VS2019Blue=Brush.ControlDark.SelectionBackground'}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, VS2019Blue=Brush.ControlDark.SelectionBorder, VS2019Dark=Brush.SelectionBorder, VS2019Light=Brush.SelectionBorder, Win10Dark=Brush.AltBorder'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Fill" TargetName="Checked" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.ControlLight.SelectionForeground'}" />
                <Setter Property="Background" TargetName="Indeterminate" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.ControlLight.SelectionForeground'}" />
                <Setter Property="Background" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBackground'}" />
                <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, VS2019Blue=Brush.SelectionBorder, VS2019Dark=Brush.SelectionBorder, VS2019Light=Brush.SelectionBorder'}" />
            </Trigger>
            <Trigger Property="dxe:EditorAppearanceProperties.HasCheckEditGlyphBrush" Value="True">
                <Setter Property="Fill" TargetName="Checked" Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckEditGlyphBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
                    <Condition Property="IsFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" TargetName="IsFocused" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
                    <Condition Property="IsFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" TargetName="IsFocused" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter Property="LayoutTransform" TargetName="Field">
                    <Setter.Value>
                        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="-1" ScaleY="1" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Height" TargetName="Checked" Value="20" />
                <Setter Property="Width" TargetName="Checked" Value="20" />
                <Setter Property="Height" TargetName="Field" Value="32" />
                <Setter Property="Width" TargetName="Field" Value="32" />
                <Setter Property="Margin" TargetName="Field" Value="0" />
                <Setter Property="Height" TargetName="Indeterminate" Value="20" />
                <Setter Property="Width" TargetName="Indeterminate" Value="20" />
                <Setter Property="BorderThickness" TargetName="Indeterminate" Value="0" />
            </Trigger>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasCheckBoxWidth" Value="True">
                <Setter Property="Width" TargetName="Field" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.CheckBoxWidth), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasCheckBoxHeight" Value="True">
                <Setter Property="Height" TargetName="Field" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.CheckBoxHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="BaseCheckEditBoxInplaceStyle" TargetType="{x:Type dxe:CheckEditBox}">
        <Setter Property="Padding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding}" />
        <Setter Property="IsTabStop" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsTabStop}" />
        <Setter Property="Focusable" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Focusable}" />
        <Setter Property="Content" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.Content)}" />
        <Setter Property="ContentTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.ContentTemplate)}" />
        <Setter Property="IsThreeState" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.IsThreeState)}" />
        <Setter Property="Cursor" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Cursor}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment}" />
        <Setter Property="ContentTemplateSelector" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.ContentTemplateSelector)}" />
        <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground}" />
        <Setter Property="DisplayMode" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayMode, RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <Trigger Property="DisplayMode" Value="Image">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CheckEdit.ImageCheckEditBoxTemplate}}" />
                <Setter Property="GlyphTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).GlyphTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey CheckEdit.CheckEditBoxInplaceStyle}" BasedOn="{StaticResource BaseCheckEditBoxInplaceStyle}" TargetType="{x:Type dxe:CheckEditBox}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.AltBorder'}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CheckEdit.CheckEditBoxTemplate}}" />
    </Style>
    <dxe:DataPagerBoolToVisibilityInvertConverter x:Key="DataPagerBoolToVisibilityInvertConverter" />
    <ControlTemplate x:Key="{dxt:LWKey DataPagerButton.Template}" TargetType="{x:Type dxe:DataPagerButton}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1" />
            <dx:ContentContainer x:Name="Content">
                <ContentPresenter Content="{TemplateBinding PageNumber}" ContentTemplate="{TemplateBinding ContentTemplate}" Visibility="{Binding ShowEllipsis, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DataPagerBoolToVisibilityInvertConverter}}" />
            </dx:ContentContainer>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Black=Color.ControlLight.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="Position">
                    <VisualState x:Name="FirstLeft" />
                    <VisualState x:Name="SecondLeft" />
                    <VisualState x:Name="FirstRight" />
                    <VisualState x:Name="SecondRight" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="42" />
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DataPager.ButtonAreaBorderTemplate}" TargetType="ContentControl">
        <dx:DXBorder Background="{StaticResource Brush.Editor.Background}" BorderBrush="{StaticResource Brush.Border}" BorderThickness="1">
            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
        </dx:DXBorder>
    </ControlTemplate>
    <Size x:Key="{dxt:LWKey DateNavigator.CalendarCellSize}">31,23</Size>
    <CornerRadius x:Key="{dxt:LWKey DateNavigator.CellButtonCornerRadius}">0</CornerRadius>
    <Style x:Key="{dxt:LWKey DateNavigator.OutlookHeaderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Control.Background, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Control.Background'}" />
        <Setter Property="MinHeight" Value="22" />
    </Style>
    <Style x:Key="{dxt:LWKey DateNavigator.WeekdayAbbreviationStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <dx:BoolToVisibilityInverseConverter x:Key="inverseBoolToVisibilityConverter" />
    <sys:String x:Key="PasswordBoxHelperMargin">2,2,2,2,0,2,2,2</sys:String>
    <sys:String x:Key="TextStyleHelperMargin">2,2,2,2,0,2,2,2</sys:String>
    <sys:String x:Key="TextInplaceStyleHelperMargin">2,2,2,2,0,2,2,2</sys:String>
    <sys:String x:Key="TextBlockInplaceHelperMargin">4,2,4,2,0,2,4,2</sys:String>
    <DataTemplate x:Key="{dxt:LWKey PasswordBoxEdit.ShowPasswordButtonTemplate}">
        <Image Source="{dx:SvgImageSource Uri={dx:EditorsResource Images/PasswordBoxEdit/Show.svg}}" Height="16" Width="16" />
    </DataTemplate>
    <Thickness x:Key="{dxt:LWKey ProgressBarEdit.PanelNoContentHorizontalMargin}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey ProgressBarEdit.PanelNoContentVerticalMargin}">0</Thickness>
    <sys:Boolean x:Key="{dxt:LWKey ProgressBarEdit.ShowBorderDefault}">True</sys:Boolean>
    <dx:BoolToVisibilityViaOpacityConverter x:Key="boolToHiddenConverter" />
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEditStyle.PanelTemplateHorizontal}" TargetType="{x:Type dxe:RangeEditBasePanel}">
        <Grid>
            <Grid x:Name="root">
                <Grid.Resources>
                    <dxe:GridLengthConverter x:Key="GridLengthConverter" />
                </Grid.Resources>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="leftColumn" Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).LeftSidePosition, Converter={StaticResource GridLengthConverter}}" />
                    <ColumnDefinition x:Name="rightColumn" Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).RightSidePosition, Converter={StaticResource GridLengthConverter}}" />
                </Grid.ColumnDefinitions>
                <ContentControl
                    x:Name="back"
                    Grid.ColumnSpan="2"
                    dxi:AppearanceOptions.Background="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"
                    dxi:AppearanceOptions.HasBackground="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}"
                    Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelBackgroundHorizontalStyle}}" />
                <ContentControl
                    x:Name="left"
                    Grid.Column="0"
                    dxei:BaseEditAppearanceOptions.HasProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasProgressBrush), RelativeSource={RelativeSource Self}}"
                    dxei:BaseEditAppearanceOptions.ProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource Self}}"
                    Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelLeftSideHorizontalStyle}}" />
                <ContentControl x:Name="right" Grid.Column="1" Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelRightSideHorizontalStyle}}" />
                <ContentControl x:Name="foreground" Grid.ColumnSpan="2" Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelForegroundStyle}}" />
            </Grid>
            <ContentControl
                x:Name="PART_InnerContent"
                Grid.ColumnSpan="2"
                HorizontalAlignment="Stretch"
                HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment}"
                Content="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayText}"
                ContentTemplate="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentTemplate}"
                Opacity="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, Converter={StaticResource boolToHiddenConverter}}"
                Style="{DynamicResource {dxt:LWKey ProgressBarEdit.ContentStyle}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" Value="Content">
                <Setter TargetName="PART_InnerContent" Property="Content" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Content}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" Value="None">
                <Setter TargetName="root" Property="Margin" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelNoContentHorizontalMargin}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEditStyle.PanelTemplateVertical}" TargetType="{x:Type dxe:RangeEditBasePanel}">
        <Grid>
            <Grid x:Name="root">
                <Grid.Resources>
                    <dxe:GridLengthConverter x:Key="GridLengthConverter" />
                </Grid.Resources>
                <Grid.RowDefinitions>
                    <RowDefinition x:Name="rightColumn" Height="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).RightSidePosition, Converter={StaticResource GridLengthConverter}}" />
                    <RowDefinition x:Name="leftColumn" Height="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).LeftSidePosition, Converter={StaticResource GridLengthConverter}}" />
                </Grid.RowDefinitions>
                <ContentControl
                    x:Name="back"
                    Grid.RowSpan="2"
                    dxi:AppearanceOptions.Background="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"
                    dxi:AppearanceOptions.HasBackground="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}"
                    Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelBackgroundVerticalStyle}}" />
                <ContentControl x:Name="right" Grid.Row="0" Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelRightSideVerticalStyle}}" />
                <ContentControl
                    x:Name="left"
                    Grid.Row="1"
                    dxei:BaseEditAppearanceOptions.HasProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasProgressBrush), RelativeSource={RelativeSource Self}}"
                    dxei:BaseEditAppearanceOptions.ProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource Self}}"
                    Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelLeftSideVerticalStyle}}" />
                <ContentControl x:Name="foreground" Grid.RowSpan="2" Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelForegroundStyle}}" />
            </Grid>
            <StackPanel Grid.RowSpan="2" HorizontalAlignment="Center" Orientation="Horizontal">
                <ContentControl
                    x:Name="PART_InnerContent"
                    VerticalAlignment="Stretch"
                    Content="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayText}"
                    ContentTemplate="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentTemplate}"
                    Opacity="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, Converter={StaticResource boolToHiddenConverter}}"
                    Style="{DynamicResource {dxt:LWKey ProgressBarEdit.ContentStyle}}">
                    <ContentControl.RenderTransformOrigin>0.5,0.5</ContentControl.RenderTransformOrigin>
                    <ContentControl.LayoutTransform>
                        <RotateTransform Angle="-90" />
                    </ContentControl.LayoutTransform>
                </ContentControl>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" Value="Content">
                <Setter TargetName="PART_InnerContent" Property="Content" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Content}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" Value="None">
                <Setter TargetName="root" Property="Margin" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelNoContentVerticalMargin}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <dxe:RectConverter x:Key="RectConverter" />
    <DataTemplate x:Key="{dxt:LWKey ProgressBarEdit.ContentTemplate}">
        <Grid>
            <Grid x:Name="root">
                <Grid.Resources>
                    <dxe:GridLengthConverter x:Key="GridLengthConverter" />
                </Grid.Resources>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="leftColumn" Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).LeftSidePosition, Converter={StaticResource GridLengthConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                    <ColumnDefinition x:Name="rightColumn" Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).RightSidePosition, Converter={StaticResource GridLengthConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                </Grid.ColumnDefinitions>
                <dxei:EmptySizePanel Grid.ColumnSpan="2" HorizontalAlignment="Stretch">
                    <TextBlock
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"
                        Text="{Binding}"
                        TextAlignment="Center" />
                </dxei:EmptySizePanel>
                <dxei:EmptySizePanel Grid.ColumnSpan="2" HorizontalAlignment="Stretch">
                    <TextBlock
                        x:Name="editor"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"
                        Foreground="{Binding Path=(dxe:BaseEdit.OwnerEdit).AdditionalForeground, RelativeSource={RelativeSource TemplatedParent}}"
                        Text="{Binding}"
                        TextAlignment="Center">
                        <dxmvvm:Interaction.Behaviors>
                            <dxe:ProgressBarAdditionalForegroundBehavior>
                                <dxe:ProgressBarAdditionalForegroundBehavior.ClipRect>
                                    <MultiBinding Converter="{StaticResource RectConverter}">
                                        <Binding ElementName="Indicator" Path="ActualWidth" UpdateSourceTrigger="PropertyChanged" />
                                        <Binding ElementName="editor" Path="ActualHeight" UpdateSourceTrigger="PropertyChanged" />
                                    </MultiBinding>
                                </dxe:ProgressBarAdditionalForegroundBehavior.ClipRect>
                            </dxe:ProgressBarAdditionalForegroundBehavior>
                        </dxmvvm:Interaction.Behaviors>
                    </TextBlock>
                </dxei:EmptySizePanel>
                <Rectangle
                    x:Name="Indicator"
                    Grid.Column="0"
                    Margin="0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Opacity="0" />
            </Grid>
        </Grid>
    </DataTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelBackgroundHorizontalTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" Background="{dx:LWBrush 'Brush.Editor.Background, Win10Dark=Brush.Backstage.Window.Background, Win10Light=Brush.Backstage.Window.Background'}">
            <ContentPresenter x:Name="Content" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceInactive">
                <Setter Property="Background" TargetName="Root" Value="{StaticResource Brush.Editor.Background}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceActive">
                <Setter Property="Background" TargetName="Root" Value="{StaticResource Brush.Editor.Background}" />
            </DataTrigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="Root" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelBackgroundVerticalTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" Background="{dx:LWBrush 'Brush.Editor.Background, Win10Dark=Brush.Backstage.Window.Background, Win10Light=Brush.Backstage.Window.Background'}">
            <ContentPresenter x:Name="Content" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceInactive">
                <Setter Property="Background" TargetName="Root" Value="{StaticResource Brush.Editor.Background}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceActive">
                <Setter Property="Background" TargetName="Root" Value="{StaticResource Brush.Editor.Background}" />
            </DataTrigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="Root" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="ProgressBarEditTransparent" Color="Transparent" />
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelLeftSideHorizontalTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <dx:DXBorder x:Name="border" Grid.RowSpan="2" Background="{dx:LWBrush 'Brush.Foreground, Office2019Colorful=Brush.Focused, Office2019HighContrast=Brush.Focused, VS2019Blue=Brush.Focused, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused, Win10Dark=Brush.Focused, Win10Light=Brush.Focused'}" />
            <Rectangle
                x:Name="Background"
                Grid.RowSpan="2"
                Grid.ColumnSpan="2"
                Opacity="1">
                <Rectangle.Fill>
                    <MultiBinding>
                        <MultiBinding.Converter>
                            <dxe:ProgressBarHighlightConverter />
                        </MultiBinding.Converter>
                        <Binding Source="{StaticResource ProgressBarEditTransparent}" />
                        <Binding ElementName="Background" Path="ActualWidth" />
                        <Binding ElementName="Background" Path="ActualHeight" />
                        <Binding Path="(dxe:BaseEdit.OwnerEdit).StyleSettings.AccelerateRatio" />
                    </MultiBinding>
                </Rectangle.Fill>
            </Rectangle>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasProgressBrush" Value="True">
                <Setter Property="Background" TargetName="border" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelRightSideHorizontalTemplate}" TargetType="{x:Type ContentControl}">
        <Rectangle Fill="Transparent" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelLeftSideVerticalTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <dx:DXBorder x:Name="border" Grid.ColumnSpan="2" Background="{dx:LWBrush 'Brush.Foreground, Office2019Colorful=Brush.Focused, Office2019HighContrast=Brush.Focused, VS2019Blue=Brush.Focused, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused, Win10Dark=Brush.Focused, Win10Light=Brush.Focused'}" />
            <Rectangle
                x:Name="Background"
                Grid.RowSpan="2"
                Grid.ColumnSpan="2"
                Opacity="1">
                <Rectangle.Fill>
                    <MultiBinding>
                        <MultiBinding.Converter>
                            <dxe:ProgressBarHighlightConverter />
                        </MultiBinding.Converter>
                        <Binding Source="{StaticResource ProgressBarEditTransparent}" />
                        <Binding ElementName="Background" Path="ActualWidth" />
                        <Binding ElementName="Background" Path="ActualHeight" />
                        <Binding Path="(dxe:BaseEdit.OwnerEdit).StyleSettings.AccelerateRatio" />
                    </MultiBinding>
                </Rectangle.Fill>
                <Rectangle.LayoutTransform>
                    <RotateTransform Angle="-90" />
                </Rectangle.LayoutTransform>
            </Rectangle>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasProgressBrush" Value="True">
                <Setter Property="Background" TargetName="border" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelRightSideVerticalTemplate}" TargetType="{x:Type ContentControl}">
        <Rectangle Fill="Transparent" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RangeControl.LeftNavigationButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root" Margin="12,0,0,0" MinHeight="38">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Backstage.Button.Background, Office2019Black=Brush.Border, Office2019Colorful=Brush.Border, Office2019HighContrast=Brush.Button.Background'}"
                CornerRadius="96"
                Height="38"
                Width="38" />
            <Path
                x:Name="Path"
                Fill="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.ForegroundDark, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground'}"
                Height="16"
                Style="{StaticResource UIShape.Left}"
                Width="8" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, Office2019Black=Color.HoverBackground, Office2019Colorful=Color.HoverBackground, Office2019HighContrast=Color.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Path" Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Foreground, Office2019Black=Color.ForegroundDark, Office2019HighContrast=Color.HoverForeground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.SelectionBackground, Office2019Black=Color.SelectionBackground, Office2019Colorful=Color.SelectionBackground, Office2019HighContrast=Color.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Path" Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Foreground, Office2019Black=Color.ForegroundDark, Office2019HighContrast=Color.SelectionForeground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RangeControl.RightNavigationButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root" Margin="12,0,0,0" MinHeight="38">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Backstage.Button.Background, Office2019Black=Brush.Border, Office2019Colorful=Brush.Border, Office2019HighContrast=Brush.Button.Background'}"
                CornerRadius="96"
                Height="38"
                Width="38" />
            <Path
                x:Name="Path"
                Fill="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.ForegroundDark, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground'}"
                Height="16"
                Style="{StaticResource UIShape.Right}"
                Width="8" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, Office2019Black=Color.HoverBackground, Office2019Colorful=Color.HoverBackground, Office2019HighContrast=Color.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Path" Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Foreground, Office2019Black=Color.ForegroundDark, Office2019HighContrast=Color.HoverForeground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.SelectionBackground, Office2019Black=Color.SelectionBackground, Office2019Colorful=Color.SelectionBackground, Office2019HighContrast=Color.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Path" Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Foreground, Office2019Black=Color.ForegroundDark, Office2019HighContrast=Color.SelectionForeground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RangeControl.LeftSelectionThumbTemplate}" TargetType="{x:Type Thumb}">
        <Grid
            x:Name="Root"
            Background="{StaticResource Brush.Border}"
            HorizontalAlignment="Center"
            Margin="-9,0,0,0">
            <dx:DXBorder
                BorderBrush="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Foreground, VS2019Dark=Brush.Foreground, Win10Dark=Brush.Foreground'}"
                BorderThickness="1,0,1,0"
                Height="12"
                Margin="3"
                Width="3" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Width" TargetName="Root" Value="30" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RangeControl.RightSelectionThumbTemplate}" TargetType="{x:Type Thumb}">
        <Grid
            x:Name="Root"
            Background="{StaticResource Brush.Border}"
            HorizontalAlignment="Center"
            Margin="0,0,-9,0">
            <dx:DXBorder
                BorderBrush="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Foreground, VS2019Dark=Brush.Foreground, Win10Dark=Brush.Foreground'}"
                BorderThickness="1,0,1,0"
                Height="12"
                Margin="3"
                Width="3" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Width" TargetName="Root" Value="30" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <CornerRadius x:Key="{dxt:LWKey DateRangeControl.CalendarButtonCornerRadius}">0</CornerRadius>
    <CornerRadius x:Key="{dxt:LWKey DateRangeControl.StartEditorBorderCornerRadius}">0</CornerRadius>
    <CornerRadius x:Key="{dxt:LWKey DateRangeControl.EndEditorBorderCornerRadius}">0</CornerRadius>
    <SolidColorBrush x:Key="{dxt:LWKey DateRangeControl.EditorDecoratedBorderBrush}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey DateRangeControl.CurrentEditorDecoratedBorderBrush}" Color="Transparent" />
    <x:Null x:Key="FlyoutControlEffect" />
    <Visibility x:Key="{dxt:LWKey TrackBarEdit.DisabledTicksVisibility}">Collapsed</Visibility>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.PanelLeftSideTemplate}">
        <dx:DXBorder Background="Transparent" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.PanelRightSideTemplate}">
        <dx:DXBorder Background="Transparent" />
    </ControlTemplate>
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.PanelLeftSideBackground}">Transparent</SolidColorBrush>
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.PanelLeftSideUnSelectedBackground}">Transparent</SolidColorBrush>
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.PanelRightSideBackground}">Transparent</SolidColorBrush>
    <CornerRadius x:Key="{dxt:LWKey FlyoutControl.CornerRadius}">0</CornerRadius>
    <sys:Char x:Key="{dxt:LWKey PasswordBoxEdit.PasswordChar}">●</sys:Char>
    <Thickness x:Key="{dxt:LWKey PopupColorEdit.InplaceMargin}">0</Thickness>
    <sys:Double x:Key="{dxt:LWKey ToggleSwitchEdit.InplaceToggleSwitchHeight}">18</sys:Double>
    <Thickness x:Key="{dxt:LWKey ToggleSwitchEdit.InplaceMargin}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey MemoEdit.InplaceMargin}">0</Thickness>
    <CornerRadius x:Key="{dxt:LWKey Buttons.CornerRadius}">0</CornerRadius>
    <Thickness x:Key="{dxt:LWKey Buttons.Padding}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.DateEditButtonPadding}">0</Thickness>
    <Style x:Key="{dxt:LWKey ImageEdit.ContentStyle}" />
    <Thickness x:Key="{dxt:LWKey EditorListBox.CheckBoxItemPadding}">3,0,0,0</Thickness>
</ResourceDictionary>