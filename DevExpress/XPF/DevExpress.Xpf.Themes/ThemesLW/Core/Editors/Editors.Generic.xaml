<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:data="clr-namespace:DevExpress.Xpf.Core;assembly=DevExpress.Data.Desktop.v24.1"
    xmlns:dx="clr-namespace:DevExpress.Xpf.Core;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxb="clr-namespace:DevExpress.Xpf.Bars;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxe="clr-namespace:DevExpress.Xpf.Editors;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxeFiltering="clr-namespace:DevExpress.Xpf.Editors.Filtering;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxec="clr-namespace:DevExpress.Xpf.Editors.Controls;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxedn="clr-namespace:DevExpress.Xpf.Editors.DateNavigator;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxednControls="clr-namespace:DevExpress.Xpf.Editors.DateNavigator.Controls;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxedp="clr-namespace:DevExpress.Xpf.Editors.DataPager;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxee="clr-namespace:DevExpress.Xpf.Editors.ExpressionEditor;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxef="clr-namespace:DevExpress.Xpf.Editors.Flyout;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxefi="clr-namespace:DevExpress.Xpf.Editors.Flyout.Native;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxeh="clr-namespace:DevExpress.Xpf.Editors.Helpers;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxei="clr-namespace:DevExpress.Xpf.Editors.Internal;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxep="clr-namespace:DevExpress.Xpf.Editors.Popups;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxepCalendar="clr-namespace:DevExpress.Xpf.Editors.Popups.Calendar;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxer="clr-namespace:DevExpress.Xpf.Editors.RangeControl;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxeri="clr-namespace:DevExpress.Xpf.Editors.RangeControl.Internal;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxet="clr-namespace:DevExpress.Xpf.Editors.Themes;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxi="clr-namespace:DevExpress.Xpf.Core.Native;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxmvvm="clr-namespace:DevExpress.Mvvm.UI;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxmvvmi="clr-namespace:DevExpress.Mvvm.UI.Interactivity;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxo="clr-namespace:DevExpress.Xpf.Office.UI;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxot="clr-namespace:DevExpress.Xpf.Office.Themes;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxt="clr-namespace:DevExpress.Xpf.Utils.Themes;assembly=DevExpress.Xpf.Core.v24.1">

    <ResourceDictionary.MergedDictionaries>
        <dxi:PaletteResourceDictionary />
    </ResourceDictionary.MergedDictionaries>

    <dx:ColorToBrushConverter x:Key="ColorToBrushConverter" />
    <dxe:ChipSizeToSizeConverter x:Key="ChipSizeToSizeConverter" />
    <dxe:HideBorderSideToThicknessConverter x:Key="HideBorderSideToThicknessConverter" />
    <dx:EditorStringIdConverter x:Key="EditorStringIdConverter" />
    <dxeh:HorizontalContentAlignmentToTextAlignmentConverter x:Key="HorizontalContentAlignmentToTextAlignmentConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <dxep:AutoSuggestListBoxDisplayMemberPathConverter x:Key="DisplayMemberPathConverter" />
    <dxei:BaseEditToBarCodeEditConverter x:Key="BaseEditToBarCodeEditConverter" />
    <dxo:MarginsStringToNameConverter x:Key="nameConverter" />
    <dxo:MarginsStringToTopCaptionConverter x:Key="topCaptionConverter" />
    <dxo:MarginsStringToTopValueConverter x:Key="topValueConverter" />
    <dxo:MarginsStringToBottomCaptionConverter x:Key="bottomCaptionConverter" />
    <dxo:MarginsStringToBottomValueConverter x:Key="bottomValueConverter" />
    <dxo:MarginsStringToLeftCaptionConverter x:Key="leftCaptionConverter" />
    <dxo:MarginsStringToLeftValueConverter x:Key="leftValueConverter" />
    <dxo:MarginsStringToRightCaptionConverter x:Key="rightCaptionConverter" />
    <dxo:MarginsStringToRightValueConverter x:Key="rightValueConverter" />
    <dxo:PaperKindStringToCaptionConverter x:Key="paperKindCaptionConverter" />
    <dxo:PaperKindStringToValueConverter x:Key="paperKindValueConverter" />
    <sys:Boolean x:Key="TrueBoolean">True</sys:Boolean>
    <sys:Boolean x:Key="FalseBoonean">False</sys:Boolean>
    <dxeh:BrushToSvgPaletteConverter x:Key="BrushToSvgPaletteConverter" />
    <dx:NegationConverterExtension x:Key="PopupCalcEditCalculatorEditorIsReadOnlyToIsEnabledConverter" />
    <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <dx:EmbeddedResourceImageConverter x:Key="EmbeddedResourceImageConverter" />
    <dxe:ColorToStringConverter x:Key="ColorToStringConverter" />
    <dx:NegationConverterExtension x:Key="IsReadOnlyToHitTestVisibleConverter" />
    <dxei:ColorConverter x:Key="ColorConverter" />
    <dxei:ColorWithoutAlphaConverter x:Key="ColorWithoutAlphaConverter" />
    <dxei:ColorPickerColorModeTemplateSelector x:Key="ColorModeTemplateSelector" />
    <dxei:ShowDefaultColorToGridLengthConverter x:Key="ShowDefaultColorToColumnWidthConverter" />
    <dxei:DecimalToIntConverter x:Key="DecimalToIntConverter" />
    <dxei:HColorToZColorConverter x:Key="HColorToZColorConverter" />
    <sys:Double x:Key="MinTextHeight">12</sys:Double>
    <dx:ListOfObjectToIEnumerableOfStringConverter x:Key="listConverter" />
    <dx:BoolInverseConverter x:Key="boolInverseConverter" />
    <dx:VisibilityToBoolInverseConverter x:Key="visibilityToBoolInverseConverter" />
    <dx:StringToVisibilityConverter x:Key="stringToVisibilityConverter" />
    <dx:SearchInfoConverter x:Key="searchInfoConverter" />
    <dx:BoolToObjectConverter x:Key="NullValueButtonPlacementConverter">
        <dx:BoolToObjectConverter.TrueValue>EditBox</dx:BoolToObjectConverter.TrueValue>
        <dx:BoolToObjectConverter.FalseValue>None</dx:BoolToObjectConverter.FalseValue>
    </dx:BoolToObjectConverter>
    <BooleanToVisibilityConverter x:Key="boolToVisibilityConverter" />
    <dxedp:DataPagerDisplayModeToButtonVisibilityConverter x:Key="DataPagerDisplayModeToButtonVisibilityConverter" />
    <dxedp:DataPagerPageIndexToPageNumberConverter x:Key="DataPagerPageIndexToPageNumberConverter" />
    <dxedp:DataPagerPageCountToTitleConverter x:Key="DataPagerPageCountToTitleConverter" />
    <dxe:EditorLocalizer x:Key="localizer" />
    <dxedp:DataPagerPageExtract x:Key="DataPagerPageExtract" />
    <dx:BoolToVisibilityViaOpacityConverter x:Key="BoolToVisibilityViaOpacityConverter" />
    <dxedp:DataPagerCurrentPageEditMaxValueConverter x:Key="DataPagerCurrentPageEditMaxValueConverter" />
    <dxedp:DataPagerCurrentPageEditMinValueConverter x:Key="DataPagerCurrentPageEditMinValueConverter" />
    <dxedp:FixedNumericButtonCountHorizontalAlignmentConverter x:Key="FixedNumericButtonCountHorizontalAlignmentConverter" />
    <dx:EnumToBoolConverter x:Key="EnumToBoolConverter" />
    <dxednControls:DateNavigatorCellButtonStateConverter x:Key="DateNavigatorCellButtonStateConverter" />
    <dx:BoolToDoubleConverter x:Key="InvertedBoolToDoubleConverter" FalseValue="1" TrueValue="0" />
    <dx:BoolToDoubleConverter x:Key="BoolToDoubleConverter" FalseValue="0" TrueValue="1" />
    <dxe:DateTimePickerDataCaptionConverter x:Key="DateTimePickerDataCaptionConverter" />
    <dx:BoolToVisibilityInverseConverter x:Key="BoolToVisibilityInverseConverter" />
    <dxeFiltering:CheckedUncheckedBoolToStringConverter x:Key="FilterControlBoolToStringConverter" />
    <dxeFiltering:FirstToCollapsedConverter x:Key="FilterControlFirstToCollapsedConverter" />
    <dxeFiltering:AdditionalOperandsCountToVisibilityConverter x:Key="AdditionalOperandsCountToVisibilityConverter" />
    <dxeFiltering:OperatorPropertyNameConverter x:Key="OperatorPropertyNameConverter" />
    <dx:ObjectToVisibilityConverter x:Key="ObjectToVisibilityConverter" HandleList="false" />
    <dx:BoolToVisibilityInverseConverter x:Key="inverseBoolToVisibilityConverter" />
    <SolidColorBrush x:Key="ImageEditToolSeparatorBackground" Color="#FFDADADA" />
    <dx:BoolToVisibilityInverseConverter x:Key="boolToVisiblityConverterInverse" />
    <dxe:ActualPageIndexConveter x:Key="pageIndexConverter" />
    <dx:NegationConverter x:Key="negationConverter" />
    <dx:StringEmptyToSpaceConverter x:Key="stringToSpaceConverter" />
    <dxeri:BoolToOpacityConverter x:Key="BoolToOpacityConverter" />
    <dxeri:BoolToGridLengthConverter x:Key="BoolToGridLengthConverter" />
    <dx:BoolToVisibilityConverter x:Key="boolToVisibility" />
    <dxe:GridLengthConverter x:Key="GridLengthConverter" />
    <dxei:TimePickerPartToMaskConverter x:Key="TimePickerPartToMaskConverter" />
    <dxei:TimePickerPartToVisibilityConverter x:Key="TimePickerPartToVisibilityConverter" />
    <dxednControls:DateNavigatorCalendarContentTemplateSelector x:Key="DateNavigatorCalendarContentTemplateSelector" />
    <dx:BoolToDoubleConverter x:Key="SelectedThumbZIndexConverter" FalseValue="1" TrueValue="2" />
    <dxe:DateTimePickerItemTemplateSelector x:Key="DateTimePicker_ItemTemplateSelector" />
    <dxeFiltering:GroupFilterControlNodeToListConverter x:Key="itemsSourceConverter" />
    <dxe:CalculatorMemoryIndicatorVisibilityConverter x:Key="MemoryIndicatorVisibilityConverter" />
    <dxei:StringIsNotNullOrEmptyConverter x:Key="StringIsNotNullOrEmptyConverter"/>

    <!--#region Editors\Themes\Generic\Common.xaml-->
    <Style x:Key="ButtonEditButtonGlyphStyle" TargetType="FrameworkElement">
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--#endregion Editors\Themes\Generic\Common.xaml-->

    <!--#region Editors\Themes\Generic\TextEditBase.xaml-->
    <Style x:Key="BaseTextBlockInplaceStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="UseLayoutRounding" Value="False" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.35" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <Style x:Key="BaseTextBlockStyleBase" TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="{Binding HorizontalContentAlignment, Converter={StaticResource HorizontalContentAlignmentToTextAlignmentConverter}}" />
        <Setter Property="VerticalAlignment" Value="{Binding VerticalContentAlignment}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="{Binding Padding}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{Binding Background}" />
        <Setter Property="Focusable" Value="{Binding Focusable}" />
        <Setter Property="TextTrimming" Value="{Binding TextTrimming}" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="{Binding IsTabStop}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsNullTextVisible}" Value="true">
                <Setter Property="Foreground" Value="{Binding Path=NullTextForeground}" />
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.35" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BaseTextBlockStyle" BasedOn="{StaticResource BaseTextBlockStyleBase}" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="{Binding TextWrapping}" />
        <Setter Property="TextDecorations" Value="{Binding TextDecorations}" />
    </Style>
    <Style x:Key="BaseWatermarkTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="Margin" Value="{DynamicResource {dxt:LWKey TextEdit.WatermarkTextBlockMargin}}" />
        <Setter Property="VerticalAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="HorizontalAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="IsHitTestVisible" Value="false" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Text" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).NullText, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).NullTextForeground, RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsNullTextVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowNullTextIfFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey TextEdit.TextBoxTemplate}" TargetType="{x:Type TextBox}">
        <Grid Background="{TemplateBinding Background}">
            <ScrollViewer
                x:Name="PART_ContentHost"
                Padding="{TemplateBinding Padding}"
                dx:FocusHelper2.Focusable="False"
                SnapsToDevicePixels="True"
                Template="{DynamicResource {dxt:LWKey EditorListBox.ScrollViewerTemplate}}" />
            <TextBlock x:Name="PART_Watermark" Style="{DynamicResource {dxt:LWKey TextEdit.WatermarkTextBlockStyle}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="PART_ContentHost" Property="Opacity" Value="0.35" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="BaseTextStyle" TargetType="{x:Type TextBox}">
        <Setter Property="MaxLength" Value="{Binding MaxLength}" />
        <Setter Property="IsTabStop" Value="{Binding IsTabStop}" />
        <Setter Property="Focusable" Value="{Binding Focusable}" />
        <Setter Property="TextWrapping" Value="{Binding TextWrapping}" />
        <Setter Property="Background" Value="{Binding Background}" />
        <Setter Property="CaretBrush" Value="{DynamicResource {dxt:LWKey TextEdit.CaretBrush}}" />
        <Setter Property="Padding" Value="{Binding Padding}" />
        <Setter Property="IsReadOnly" Value="{Binding IsReadOnly}" />
        <Setter Property="AcceptsReturn" Value="{Binding AcceptsReturn}" />
        <Setter Property="VerticalScrollBarVisibility" Value="{Binding VerticalScrollBarVisibility}" />
        <Setter Property="HorizontalScrollBarVisibility" Value="{Binding HorizontalScrollBarVisibility}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TextEdit.TextBoxTemplate}}" />
        <Setter Property="AcceptsTab" Value="{Binding AcceptsTab}" />
        <Setter Property="CharacterCasing" Value="{Binding CharacterCasing}" />
        <Setter Property="ContextMenu" Value="{Binding ContextMenu}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{Binding Foreground}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment}" />
        <Setter Property="TextDecorations" Value="{Binding TextDecorations}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment}" />
        <Setter Property="dxb:BarManager.DXContextMenu" Value="{Binding Path=(dxb:BarManager.DXContextMenu)}" />
        <Setter Property="AutomationProperties.LabeledBy" Value="{Binding Path=(AutomationProperties.LabeledBy)}" />
        <Setter Property="AutomationProperties.HelpText">
            <Setter.Value>
                <MultiBinding Converter="{dxei:BaseEditAutomationHelpTextConverter}">
                    <Binding Path="(AutomationProperties.HelpText)" />
                    <Binding Path="ToolTip.Content" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsNullTextVisible}" Value="true">
                <Setter Property="Foreground" Value="{Binding Path=NullTextForeground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BaseTextInplaceStyle" TargetType="{x:Type TextBox}">
        <Setter Property="MaxLength" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).MaxLength}" />
        <Setter Property="Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Background}" />
        <Setter Property="CaretBrush" Value="{DynamicResource {dxt:LWKey TextEdit.CaretBrush}}" />
        <Setter Property="Padding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding}" />
        <Setter Property="IsTabStop" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsTabStop}" />
        <Setter Property="Focusable" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Focusable}" />
        <Setter Property="IsReadOnly" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly}" />
        <Setter Property="AcceptsReturn" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).AcceptsReturn}" />
        <Setter Property="TextWrapping" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TextWrapping}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment}" />
        <Setter Property="VerticalScrollBarVisibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalScrollBarVisibility}" />
        <Setter Property="HorizontalScrollBarVisibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalScrollBarVisibility}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TextEdit.TextBoxTemplate}}" />
        <Setter Property="AcceptsTab" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).AcceptsTab}" />
        <Setter Property="CharacterCasing" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).CharacterCasing}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ContextMenu" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContextMenu}" />
        <Setter Property="dxb:BarManager.DXContextMenu" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxb:BarManager.DXContextMenu)}" />
        <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment}" />
        <Setter Property="TextDecorations" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TextDecorations}" />
        <Setter Property="AutomationProperties.LabeledBy" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(AutomationProperties.LabeledBy)}" />
        <Setter Property="AutomationProperties.HelpText" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(AutomationProperties.HelpText)}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsNullTextVisible}" Value="true">
                <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).NullTextForeground}" />
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <ControlTemplate x:Key="{dxt:LWKey TextEdit.DisplayInplaceTemplate}">
        <TextBlock x:Name="PART_Editor" dx:FocusHelper2.Focusable="False" Style="{DynamicResource {dxt:LWKey TextEdit.TextBlockInplaceStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey TextEdit.EditNonEditableTemplate}">
        <TextBlock x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey TextEdit.TextBlockStyle}}">
            <TextBlock.FocusVisualStyle>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate />
                        </Setter.Value>
                    </Setter>
                </Style>
            </TextBlock.FocusVisualStyle>
        </TextBlock>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey TextEdit.EditNonEditableInplaceTemplate}">
        <TextBlock x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey TextEdit.TextBlockInplaceStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey TextEdit.EditInplaceTemplate}">
        <TextBox x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey TextEdit.TextInplaceStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey TextEdit.EditTemplate}">
        <TextBox x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey TextEdit.TextStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey TextEdit.ErrorControlTemplate}" TargetType="{x:Type dxe:ErrorControl}">
        <ContentPresenter
            x:Name="content"
            Margin="3,0,3,0"
            Content="{TemplateBinding Content}"
            ContentStringFormat="{TemplateBinding ContentStringFormat}"
            ContentTemplate="{TemplateBinding ContentTemplate}"
            RenderTransformOrigin="0.5,0.5">
            <ContentPresenter.Resources>
                <Storyboard x:Key="showErrorStoryboard">
                    <DoubleAnimation BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="00:00:00.2000000" />
                    <DoubleAnimation BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="RenderTransform.ScaleX" From="1" To="1.2" Duration="00:00:00.1000000" />
                    <DoubleAnimation BeginTime="00:00:00.1000000" Storyboard.TargetName="content" Storyboard.TargetProperty="RenderTransform.ScaleX" From="1.2" To="1" Duration="00:00:00.1000000" />
                    <DoubleAnimation BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="RenderTransform.ScaleY" From="1" To="1.2" Duration="00:00:00.1000000" />
                    <DoubleAnimation BeginTime="00:00:00.1000000" Storyboard.TargetName="content" Storyboard.TargetProperty="RenderTransform.ScaleY" From="1.2" To="1" Duration="00:00:00.1000000" />
                </Storyboard>
                <Storyboard x:Key="hideErrorStoryboard">
                    <DoubleAnimation BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="Opacity" To="0" Duration="00:00:00" />
                </Storyboard>
            </ContentPresenter.Resources>
            <ContentPresenter.RenderTransform>
                <ScaleTransform />
            </ContentPresenter.RenderTransform>
        </ContentPresenter>
    </ControlTemplate>

    <!--  -->
    <!--#endregion Editors\Themes\Generic\TextEditBase.xaml-->

    <!--#region Editors\Themes\Generic\AutoCompleteBox.xaml-->
    <Thickness x:Key="{dxt:LWKey TokenEditor.TokenEditorMargin}">1,0,0,0</Thickness>



    <ControlTemplate x:Key="{dxt:LWKey TokenEditor.Template}" TargetType="{x:Type dxei:TokenEditor}">
        <Grid Background="{TemplateBinding Background}">
            <ScrollViewer
                x:Name="PART_ScrollViewer"
                CanContentScroll="True"
                Focusable="False"
                IsTabStop="False">
                <dxei:TokenEditorPanel x:Name="PART_Presenter" Background="Transparent" EnableTokenWrapping="{TemplateBinding EnableTokenWrapping}" />
            </ScrollViewer>
        </Grid>
    </ControlTemplate>
    <DataTemplate x:Key="{dxt:LWKey TokenEditor.DeleteButtonTemplate}">
        <Button
            Command="{Binding Command}"
            CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
            Focusable="False"
            Style="{DynamicResource {dxt:LWKey TokenEditor.DeleteButtonStyle}}"
            Visibility="{Binding Visibility}" />
    </DataTemplate>
    <Style x:Key="{dxt:LWKey TokenEditor.ActiveEditorStyle}" TargetType="{x:Type dxe:ButtonEdit}">
        <Setter Property="AllowDefaultButton" Value="False" />
        <Setter Property="ValidateOnEnterKeyPressed" Value="True" />
        <Setter Property="ValidateOnTextInput" Value="True" />
        <Setter Property="EditValuePostMode" Value="Immediate" />
        <Setter Property="TextTrimming" Value="None" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey TokenEditor.EmptyTokenContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid>
            <TextBlock
                x:Name="text"
                Margin="4,1"
                VerticalAlignment="Center"
                Opacity="0.62"
                Text="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).NewTokenText, RelativeSource={RelativeSource Self}}" />
            <TextBlock
                x:Name="nulltext"
                Margin="4,1"
                VerticalAlignment="Center"
                Foreground="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).NullTextForeground, RelativeSource={RelativeSource Self}}"
                Opacity="0"
                Text="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).NullText, RelativeSource={RelativeSource Self}}" />
            <ContentPresenter />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsEditorActivated, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="text" Property="Opacity" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).HasNullText, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="text" Property="Opacity" Value="0" />
                <Setter TargetName="nulltext" Property="Opacity" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsTokenEditorReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="text" Property="Opacity" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="text" Property="Opacity" Value="0" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey AutoSuggestListBox.Template}" TargetType="{x:Type dxep:AutoSuggestListBox}">
        <dx:DXBorder x:Name="Bd" Background="{TemplateBinding Background}">
            <Grid>
                <ScrollViewer
                    x:Name="ScrollViewer"
                    Padding="{TemplateBinding Padding}"
                    dx:FocusHelper2.Focusable="False"
                    BorderThickness="0">
                    <ItemsPresenter />
                    <dx:ScrollBarExtensions.AllowMouseScrolling>
                        <sys:Boolean>true</sys:Boolean>
                    </dx:ScrollBarExtensions.AllowMouseScrolling>
                </ScrollViewer>
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey AutoSuggestListBox.Style}" BasedOn="{StaticResource {x:Type ListBox}}" TargetType="{x:Type ListBox}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey AutoSuggestListBox.Template}}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey Brushes.EditorPopupListBoxBackground}}" />
        <Setter Property="TextSearch.TextPath" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(TextSearch.TextPath), RelativeSource={RelativeSource Self}}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(ScrollViewer.CanContentScroll), RelativeSource={RelativeSource Self}}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Contained" />
        <Setter Property="DisplayMemberPath" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayMember, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ItemsSource" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemsSource, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ItemTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ItemTemplateSelector" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ItemContainerStyle" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ItemContainerStyleSelector" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemContainerStyleSelector, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ItemStringFormat" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemStringFormat, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ItemsPanel" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemsPanel, RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceActive">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey ThemeColors.BlackForegroundColor}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone">
                <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowPopupTextHighlighting, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplate, Converter={dxe:AutoSuggestEditPropertyIsNullConverter}, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplateSelector, Converter={dxe:AutoSuggestEditPropertyIsNullConverter}, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemContainerStyle, Converter={dxe:AutoSuggestEditPropertyIsNullConverter}, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemContainerStyleSelector, Converter={dxe:AutoSuggestEditPropertyIsNullConverter}, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
                <Setter Property="dxeh:TextBlockService.HighlightedTextCriteria" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).PopupHighlightedTextCriteria, RelativeSource={RelativeSource Self}}" />
                <Setter Property="dxeh:TextBlockService.HighlightedText" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).PopupHighlightedText, RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey AutoSuggestEdit.PopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <dxep:AutoSuggestListBox x:Name="PART_Content" Style="{DynamicResource {dxt:LWKey AutoSuggestListBox.Style}}" />
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\AutoCompleteBox.xaml-->

    <!--#region Editors\Themes\Generic\BarCodeEdit.xaml-->
    <dxei:BaseEditStyleSettingsToBarCodeStyleSettingsConverter x:Key="BaseEditStyleSettingsToBarCodeStyleSettingsConverter" />


    <ControlTemplate x:Key="{dxt:LWKey BarCodeEdit.Template}" TargetType="dxe:BarCodeEdit">
        <dxe:EditorControl x:Name="PART_Content" Template="{TemplateBinding ActualEditorControlTemplate}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey BarCodeEdit.EditTemplate}">
        <Grid Name="Part_RootGrid" Background="{Binding Path=(dxe:BaseEdit.OwnerEdit).Background}">
            <dxei:BarCodePainter
                Name="Part_BarCodePainter"
                Margin="2"
                BarCodeEdit="{Binding Path=(dxe:BaseEdit.OwnerEdit), Converter={StaticResource BaseEditToBarCodeEditConverter}}"
                Symbology="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).StyleSettings, Converter={StaticResource BaseEditStyleSettingsToBarCodeStyleSettingsConverter}}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey BarCodeEdit.DisplayTemplate}">
        <Grid Name="Part_RootGrid" Background="{Binding Path=(dxe:BaseEdit.OwnerEdit).Background}">
            <dxei:BarCodePainter
                Name="Part_BarCodePainter"
                Margin="2"
                BarCodeEdit="{Binding Path=(dxe:BaseEdit.OwnerEdit), Converter={StaticResource BaseEditToBarCodeEditConverter}}"
                Symbology="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).StyleSettings, Converter={StaticResource BaseEditStyleSettingsToBarCodeStyleSettingsConverter}}" />
        </Grid>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\BarCodeEdit.xaml-->

    <!--#region Editors\Themes\Generic\BarItemTemplates.xaml-->



    <DataTemplate x:Key="{dxt:LWKey OfficeBarItem.MarginBarItemContentTemplate}">
        <Grid HorizontalAlignment="Stretch">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="50" />
                <ColumnDefinition MinWidth="50" />
                <ColumnDefinition MinWidth="50" />
                <ColumnDefinition MinWidth="50" />
            </Grid.ColumnDefinitions>
            <TextBlock
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="4"
                FontWeight="Bold"
                Text="{Binding Converter={StaticResource nameConverter}}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="0"
                Margin="0,0,15,0"
                Text="{Binding Converter={StaticResource topCaptionConverter}}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="1"
                Margin="0,0,0,0"
                HorizontalAlignment="Right"
                Text="{Binding Converter={StaticResource topValueConverter}}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="2"
                Margin="30,0,15,0"
                Text="{Binding Converter={StaticResource bottomCaptionConverter}}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="3"
                Margin="0,0,0,0"
                HorizontalAlignment="Right"
                Text="{Binding Converter={StaticResource bottomValueConverter}}" />
            <TextBlock
                Grid.Row="2"
                Grid.Column="0"
                Margin="0,0,15,0"
                Text="{Binding Converter={StaticResource leftCaptionConverter}}" />
            <TextBlock
                Grid.Row="2"
                Grid.Column="1"
                Margin="0,0,0,0"
                HorizontalAlignment="Right"
                Text="{Binding Converter={StaticResource leftValueConverter}}" />
            <TextBlock
                Grid.Row="2"
                Grid.Column="2"
                Margin="30,0,15,0"
                Text="{Binding Converter={StaticResource rightCaptionConverter}}" />
            <TextBlock
                Grid.Row="2"
                Grid.Column="3"
                Margin="0,0,0,0"
                HorizontalAlignment="Right"
                Text="{Binding Converter={StaticResource rightValueConverter}}" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey OfficeBarItem.PaperKindBarItemContentTemplate}">
        <Grid HorizontalAlignment="Stretch">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <TextBlock Grid.Row="0" FontWeight="Bold" Text="{Binding Converter={StaticResource paperKindCaptionConverter}}" />
            <TextBlock Grid.Row="1" Text="{Binding Converter={StaticResource paperKindValueConverter}}" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey OfficeBarItem.CheckEditTemplate}">
        <dxe:CheckEdit
            Content="{Binding}"
            EditValue="{Binding DataContext, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxb:IBarStaticItemLinkControl}}"
            Focusable="False"
            IsHitTestVisible="False" />
    </DataTemplate>
    <!--#endregion Editors\Themes\Generic\BarItemTemplates.xaml-->

    <!--#region Editors\Themes\Generic\BrushEdit.xaml-->


    <ControlTemplate x:Key="{dxt:LWKey BrushEdit.DisplayTemplate}">
        <dxei:BrushPicker x:Name="PART_Editor" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey BrushEdit.EditTemplate}">
        <dxei:BrushPicker x:Name="PART_Editor" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey BrushEdit.Template}" TargetType="dxe:BrushEditBase">
        <dxe:EditorControl x:Name="PART_Content" Template="{TemplateBinding ActualEditorControlTemplate}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey BrushEdit.BrushTypeSelectorControlTemplate}" TargetType="dxe:BrushTypeSelectorControl" />
    <ControlTemplate x:Key="{dxt:LWKey BrushEdit.BrushPickerNoneTemplate}" TargetType="{x:Type dxei:BrushPicker}">
        <Rectangle x:Name="PART_Content" Height="30" Fill="Red" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey BrushEdit.BrushPickerSolidTemplate}" TargetType="{x:Type dxei:BrushPicker}">
        <dxei:ColorPicker x:Name="PART_Content" Padding="12,3,12,12" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey BrushEdit.BrushPickerGradientTemplate}" TargetType="{x:Type dxei:BrushPicker}">
        <dxei:ColorPicker x:Name="PART_Content" />
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\BrushEdit.xaml-->

    <!--#region Editors\Themes\Generic\ButtonEdit.xaml-->

    <Thickness x:Key="{dxt:LWKey Buttons.ButtonMargin}">-1</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.ButtonMarginCorrection}">0</Thickness>


    <Style x:Key="{dxt:LWKey BrowsePath.IconStyle}" TargetType="{x:Type dx:DXImage}">
        <Setter Property="Margin" Value="4,0,0,0" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14,0,0,0" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter Property="Margin" Value="14,0,0,0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.35" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="{dxt:LWKey Buttons.ImageButtonContentTemplate}">
        <Grid Name="root">
            <dx:DXImage x:Name="image" Source="{Binding Path=Glyph}" Style="{Binding Path=GlyphStyle}" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ButtonBase}}" Value="True">
                <Setter TargetName="image" Property="dx:WpfSvgPalette.Palette" Value="{Binding Path=(TextElement.Foreground), Converter={StaticResource BrushToSvgPaletteConverter}, ConverterParameter=BlackColor, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="root" Property="MinWidth" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.DateEditButtonContentTemplate}">
        <Grid Name="root" Margin="{DynamicResource {dxt:LWKey Buttons.DateEditButtonPadding}}">
            <dx:DXImage x:Name="image" Source="{Binding Path=Glyph}" Style="{Binding Path=GlyphStyle}" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ButtonBase}}" Value="True">
                <Setter TargetName="image" Property="dx:WpfSvgPalette.Palette" Value="{Binding Path=(TextElement.Foreground), Converter={StaticResource BrushToSvgPaletteConverter}, ConverterParameter=BlackColor, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceInactive">
                <Setter TargetName="image" Property="dx:WpfSvgPalette.Palette" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, Converter={StaticResource BrushToSvgPaletteConverter}, ConverterParameter=BlackColor, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="root" Property="MinWidth" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey Buttons.ButtonInfoTemplate}">
        <dx:DXBorder Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <Button x:Name="PART_Item" Style="{Binding Path=ButtonStyle}" />
        </dx:DXBorder>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey Buttons.RepeatButtonInfoTemplate}">
        <dx:DXBorder Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <RepeatButton x:Name="PART_Item" Style="{Binding Path=ButtonStyle}" />
        </dx:DXBorder>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey Buttons.ToggleButtonInfoTemplate}">
        <dx:DXBorder Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <dx:ToggleStateButton
                x:Name="PART_Item"
                dxeh:SetIsCheckedToButtonInfoBehavior.IsEnabled="True"
                IsChecked="{Binding Path=IsChecked, Mode=TwoWay}"
                Style="{Binding Path=ButtonStyle}" />
        </dx:DXBorder>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsDefaultButton}" Value="True">
                <Setter TargetName="PART_Item" Property="IsChecked" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsPopupOpen, RelativeSource={RelativeSource Self}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsDefaultButton}" Value="False">
                <Setter TargetName="PART_Item" Property="HandleToggle" Value="False" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ButtonEdit.TemplateWithoutEditBox}" TargetType="{x:Type dxe:ButtonEdit}">
        <ContentControl
            HorizontalContentAlignment="Stretch"
            VerticalContentAlignment="Stretch"
            dxeh:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}"
            dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}"
            IsTabStop="False"
            Template="{TemplateBinding ActualBorderTemplate}">
            <Grid>
                <dxe:EditorControl
                    x:Name="PART_Content"
                    VerticalAlignment="Stretch"
                    IsEnabled="False"
                    Opacity="0"
                    Template="{TemplateBinding ActualEditorControlTemplate}" />
                <dxe:ButtonsControl x:Name="PART_Buttons" ItemsSource="{TemplateBinding SortedButtons}" Visibility="Collapsed">
                    <dxe:ButtonsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <dxe:ButtonsPanel />
                        </ItemsPanelTemplate>
                    </dxe:ButtonsControl.ItemsPanel>
                </dxe:ButtonsControl>
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowEditorButtons" Value="True">
                <Setter TargetName="PART_Buttons" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ButtonEdit.InplaceTemplateWithoutEditBox}" TargetType="{x:Type dxe:ButtonEdit}">
        <Grid>
            <dxe:EditorControl
                x:Name="PART_Content"
                VerticalAlignment="Stretch"
                IsEnabled="False"
                Opacity="0"
                Template="{TemplateBinding ActualEditorControlTemplate}" />
            <dxe:ButtonsControl x:Name="PART_Buttons" ItemsSource="{TemplateBinding SortedButtons}" Visibility="Collapsed">
                <dxe:ButtonsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <dxe:ButtonsPanel />
                    </ItemsPanelTemplate>
                </dxe:ButtonsControl.ItemsPanel>
            </dxe:ButtonsControl>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowEditorButtons" Value="True">
                <Setter TargetName="PART_Buttons" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ButtonEdit.Template}" TargetType="{x:Type dxe:ButtonEdit}">
        <ContentControl
            x:Name="PART_Root"
            HorizontalContentAlignment="Stretch"
            VerticalContentAlignment="Stretch"
            dx:FocusHelper2.Focusable="False"
            dxe:EditorAppearanceProperties.FocusedBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
            dxe:EditorAppearanceProperties.ReadOnlyBackground="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource TemplatedParent}}"
            dxe:EditorAppearanceProperties.ReadOnlyBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
            dxeh:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}"
            dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Template="{TemplateBinding ActualBorderTemplate}">
            <Grid x:Name="ButtonEditGrid" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" x:Name="PART_FirstRow"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Label Grid.Row="0" Grid.Column="2"
                       x:Name="PART_Label" Content="{TemplateBinding Label}" Visibility="Collapsed" VerticalAlignment="Bottom"
                       Margin="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.Margin}}"
                       Padding="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.Padding}}"
                       FontSize="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.FontSize}}"
                       Foreground="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.Foreground}}"/>
                <dxe:ErrorControl Grid.Row="0" Grid.RowSpan="2" x:Name="PART_ErrorPresenter" Grid.Column="0" />
                <dxe:ButtonsControl x:Name="PART_LeftButtons"
                                    Grid.Row="0" Grid.Column="1" Grid.RowSpan="2"
                                    ItemsSource="{TemplateBinding LeftButtons}"
                                    Visibility="{Binding Path=ActualShowLeftButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                <dxe:EditorControl x:Name="PART_Content" VerticalAlignment="Stretch" Grid.Row="1" Grid.Column="2" dx:FocusHelper2.Focusable="False" Template="{TemplateBinding ActualEditorControlTemplate}" />
                <dxe:ButtonsControl x:Name="PART_RightButtons"
                                    Grid.Row="0" Grid.Column="3" Grid.RowSpan="2"
                                    ItemsSource="{TemplateBinding RightButtons}"
                                    Visibility="{Binding Path=ActualShowRightButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_Content" Property="Template" Value="{Binding Path=EditTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="false" />
                    <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_Content" Property="Template" Value="{Binding Path=EditNonEditableTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=ShowBorder, RelativeSource={RelativeSource Self}}" Value="true">
                <Setter TargetName="PART_ErrorPresenter" Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey InplaceBaseEdit.ValidationErrorSvgPalette}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}"
                         Value="True">
                <Setter TargetName="PART_Label" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PART_Content" Property="Margin" Value="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.ContentMargin}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinButtonInfoVerticalTemplate}">
        <dx:DXBorder Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <Grid
                x:Name="MainGrid"
                Height="Auto"
                SnapsToDevicePixels="True"
                Style="{DynamicResource {dxt:LWKey Buttons.SpinButtonInfoVerticalStyle}}"
                Visibility="{Binding Path=Visibility}">
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <dxe:SpinButton
                    x:Name="PART_SpinUpButton"
                    Grid.Row="0"
                    dx:FocusHelper2.Focusable="False"
                    ClickMode="{Binding Path=ClickMode}"
                    Command="{Binding ActualSpinUpCommand}"
                    CommandParameter="{Binding SpinUpCommandParameter}"
                    ContentTemplate="{DynamicResource {dxt:LWKey Buttons.SpinUpGlyph}}"
                    Foreground="{Binding Path=Foreground}"
                    Interval="500"
                    IsEnabled="{Binding IsEnabled}"
                    Template="{DynamicResource {dxt:LWKey Buttons.SpinUpButtonTemplate}}">
                    <dxe:SpinButton.CommandTarget>
                        <Binding Path="SpinUpCommandTarget" />
                    </dxe:SpinButton.CommandTarget>
                </dxe:SpinButton>
                <dxe:SpinButton
                    x:Name="PART_SpinDownButton"
                    Grid.Row="1"
                    dx:FocusHelper2.Focusable="False"
                    ClickMode="{Binding Path=ClickMode}"
                    Command="{Binding ActualSpinDownCommand}"
                    CommandParameter="{Binding SpinDownCommandParameter}"
                    ContentTemplate="{DynamicResource {dxt:LWKey Buttons.SpinDownGlyph}}"
                    Foreground="{Binding Path=Foreground}"
                    Interval="500"
                    IsEnabled="{Binding IsEnabled}"
                    Template="{DynamicResource {dxt:LWKey Buttons.SpinDownButtonTemplate}}">
                    <dxe:SpinButton.CommandTarget>
                        <Binding Path="SpinDownCommandTarget" />
                    </dxe:SpinButton.CommandTarget>
                </dxe:SpinButton>
            </Grid>
        </dx:DXBorder>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinButtonInfoHorizontalTemplate}">
        <dx:DXBorder Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <Grid
                x:Name="MainGrid"
                Height="Auto"
                Style="{DynamicResource {dxt:LWKey Buttons.SpinButtonInfoHorizontalStyle}}"
                Visibility="{Binding Path=Visibility}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <dxe:SpinButton
                    x:Name="PART_SpinDownButton"
                    Grid.Column="0"
                    dx:FocusHelper2.Focusable="False"
                    ClickMode="{Binding Path=ClickMode}"
                    Command="{Binding ActualSpinDownCommand}"
                    CommandParameter="{Binding SpinDownCommandParameter}"
                    ContentTemplate="{DynamicResource {dxt:LWKey Buttons.SpinLeftGlyph}}"
                    Foreground="{Binding Path=Foreground}"
                    Interval="500"
                    IsEnabled="{Binding IsEnabled}"
                    Template="{DynamicResource {dxt:LWKey Buttons.SpinLeftButtonTemplate}}">
                    <dxe:SpinButton.CommandTarget>
                        <Binding Path="SpinDownCommandTarget" />
                    </dxe:SpinButton.CommandTarget>
                </dxe:SpinButton>
                <dxe:SpinButton
                    x:Name="PART_SpinUpButton"
                    Grid.Column="1"
                    dx:FocusHelper2.Focusable="False"
                    ClickMode="{Binding Path=ClickMode}"
                    Command="{Binding ActualSpinUpCommand}"
                    CommandParameter="{Binding SpinUpCommandParameter}"
                    ContentTemplate="{DynamicResource {dxt:LWKey Buttons.SpinRightGlyph}}"
                    Foreground="{Binding Path=Foreground}"
                    Interval="500"
                    IsEnabled="{Binding IsEnabled}"
                    Template="{DynamicResource {dxt:LWKey Buttons.SpinRightButtonTemplate}}">
                    <dxe:SpinButton.CommandTarget>
                        <Binding Path="SpinUpCommandTarget" />
                    </dxe:SpinButton.CommandTarget>
                </dxe:SpinButton>
            </Grid>
        </dx:DXBorder>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey Buttons.DeleteButtonInfoTemplate}">
        <dx:DXBorder Margin="{Binding Path=ActualMargin}">
            <dxe:ButtonClose x:Name="PART_Item" Style="{DynamicResource {dxt:LWKey Buttons.DeleteButtonStyle}}" />
        </dx:DXBorder>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey Buttons.LoadingButtonInfoTemplate}">
        <Button Style="{DynamicResource {dxt:LWKey ComboBoxEdit.LoadingButtonStyle}}" Visibility="{Binding Path=Visibility}" />
    </DataTemplate>

    <ControlTemplate x:Key="{dxt:LWKey BrowsePath.Template}" TargetType="{x:Type dxe:BrowsePathEdit}">
        <ContentControl
            x:Name="PART_Root"
            HorizontalContentAlignment="Stretch"
            VerticalContentAlignment="Stretch"
            dx:FocusHelper2.Focusable="False"
            dxe:EditorAppearanceProperties.FocusedBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
            dxe:EditorAppearanceProperties.ReadOnlyBackground="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource TemplatedParent}}"
            dxe:EditorAppearanceProperties.ReadOnlyBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
            dxeh:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}"
            dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Template="{TemplateBinding ActualBorderTemplate}">
            <Grid x:Name="ButtonEditGrid" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" x:Name="PART_FirstRow"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Label Grid.Row="0" Grid.Column="3"
                       x:Name="PART_Label" Content="{TemplateBinding Label}" Visibility="Collapsed" VerticalAlignment="Bottom"
                       Margin="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.Margin}}"
                       Padding="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.Padding}}"
                       FontSize="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.FontSize}}"
                       Foreground="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.Foreground}}"/>
                <dxe:ErrorControl Grid.Row="0" Grid.RowSpan="2" x:Name="PART_ErrorPresenter" />
                <dxe:ButtonsControl x:Name="PART_LeftButtons" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1"
                                    ItemsSource="{TemplateBinding LeftButtons}"
                                    Visibility="{Binding Path=ActualShowLeftButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                <dx:DXImage Grid.Row="0" Grid.RowSpan="2" Grid.Column="2"
                            Source="{TemplateBinding PathIcon}" Style="{DynamicResource {dxt:LWKey BrowsePath.IconStyle}}"
                            Visibility="{TemplateBinding ShowIcon, Converter={StaticResource BoolToVisibilityConverter}}" x:Name="PART_Icon" />
                <dxe:EditorControl x:Name="PART_Content" Grid.Row="1" Grid.Column="3"
                                   VerticalAlignment="Stretch" dx:FocusHelper2.Focusable="False" Template="{TemplateBinding ActualEditorControlTemplate}" />
                <dxe:ButtonsControl x:Name="PART_RightButtons" Grid.Row="0" Grid.RowSpan="2" Grid.Column="4"
                                    ItemsSource="{TemplateBinding RightButtons}"
                                    Visibility="{Binding Path=ActualShowRightButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_Content" Property="Template" Value="{Binding Path=EditTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="false" />
                    <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_Content" Property="Template" Value="{Binding Path=EditNonEditableTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=ShowBorder, RelativeSource={RelativeSource Self}}" Value="true">
                <Setter TargetName="PART_ErrorPresenter" Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey InplaceBaseEdit.ValidationErrorSvgPalette}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}"
                         Value="True">
                <Setter TargetName="PART_Label" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PART_Content" Property="Margin" Value="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.ContentMargin}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\ButtonEdit.xaml-->

    <!--#region Editors\Themes\Generic\CalcEdit.xaml-->


    <ControlTemplate x:Key="{dxt:LWKey Calculator.ButtonPanelTemplate}" TargetType="{x:Type ContentControl}">
        <Grid FlowDirection="LeftToRight">
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="28" />
                <ColumnDefinition Width="3" />
                <ColumnDefinition MinWidth="28" />
                <ColumnDefinition Width="3" />
                <ColumnDefinition MinWidth="28" />
                <ColumnDefinition Width="3" />
                <ColumnDefinition MinWidth="28" />
                <ColumnDefinition Width="3" />
                <ColumnDefinition MinWidth="28" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition MinHeight="26" />
                <RowDefinition Height="3" />
                <RowDefinition MinHeight="26" />
                <RowDefinition Height="3" />
                <RowDefinition MinHeight="26" />
                <RowDefinition Height="3" />
                <RowDefinition MinHeight="26" />
                <RowDefinition Height="3" />
                <RowDefinition MinHeight="26" />
                <RowDefinition Height="3" />
                <RowDefinition MinHeight="26" />
            </Grid.RowDefinitions>
            <Button
                Grid.Row="0"
                Grid.Column="0"
                dxe:CalculatorStandardView.ButtonType="MC"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="0"
                Grid.Column="2"
                dxe:CalculatorStandardView.ButtonType="MR"
                dxe:PopupCalcEditCalculator.IsMemoryIndicator="True"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="0"
                Grid.Column="4"
                dxe:CalculatorStandardView.ButtonType="Back"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="0"
                Grid.Column="6"
                dxe:CalculatorStandardView.ButtonType="Cancel"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.CEButtonStyle}" />
            <Button
                Grid.Row="0"
                Grid.Column="8"
                dxe:CalculatorStandardView.ButtonType="Clear"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.CEButtonStyle}" />
            <Button
                Grid.Row="2"
                Grid.Column="0"
                dxe:CalculatorStandardView.ButtonType="MS"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="2"
                Grid.Column="2"
                dxe:CalculatorStandardView.ButtonType="MAdd"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="2"
                Grid.Column="4"
                dxe:CalculatorStandardView.ButtonType="MSub"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="2"
                Grid.Column="6"
                dxe:CalculatorStandardView.ButtonType="Sign"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="2"
                Grid.Column="8"
                dxe:CalculatorStandardView.ButtonType="Sqrt"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="4"
                Grid.Column="0"
                dxe:CalculatorStandardView.ButtonType="Seven"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="4"
                Grid.Column="2"
                dxe:CalculatorStandardView.ButtonType="Eight"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="4"
                Grid.Column="4"
                dxe:CalculatorStandardView.ButtonType="Nine"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="4"
                Grid.Column="6"
                dxe:CalculatorStandardView.ButtonType="Div"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="4"
                Grid.Column="8"
                dxe:CalculatorStandardView.ButtonType="Percent"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="6"
                Grid.Column="0"
                dxe:CalculatorStandardView.ButtonType="Four"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="6"
                Grid.Column="2"
                dxe:CalculatorStandardView.ButtonType="Five"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="6"
                Grid.Column="4"
                dxe:CalculatorStandardView.ButtonType="Six"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="6"
                Grid.Column="6"
                dxe:CalculatorStandardView.ButtonType="Mul"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="6"
                Grid.Column="8"
                dxe:CalculatorStandardView.ButtonType="Fract"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="8"
                Grid.Column="0"
                dxe:CalculatorStandardView.ButtonType="One"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="8"
                Grid.Column="2"
                dxe:CalculatorStandardView.ButtonType="Two"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="8"
                Grid.Column="4"
                dxe:CalculatorStandardView.ButtonType="Three"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="8"
                Grid.Column="6"
                dxe:CalculatorStandardView.ButtonType="Sub"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="8"
                Grid.RowSpan="3"
                Grid.Column="8"
                dxe:CalculatorStandardView.ButtonType="Equal"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
            <Button
                Grid.Row="10"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                dxe:CalculatorStandardView.ButtonType="Zero"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="10"
                Grid.Column="4"
                dxe:CalculatorStandardView.ButtonType="Decimal"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.DigitButtonStyle}" />
            <Button
                Grid.Row="10"
                Grid.Column="6"
                dxe:CalculatorStandardView.ButtonType="Add"
                Style="{TemplateBinding dxei:BaseEditAppearanceOptions.OperationButtonStyle}" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey Calculator.PopupTemplate}" TargetType="{x:Type dxe:PopupCalcEditCalculator}">
        <ContentControl dx:FocusHelper2.Focusable="False" Template="{DynamicResource {dxt:LWKey Calculator.PopupContentContainerTemplate}}">
            <ContentControl
                dx:FocusHelper2.Focusable="False"
                dxei:BaseEditAppearanceOptions.CEButtonStyle="{TemplateBinding CEButtonStyle}"
                dxei:BaseEditAppearanceOptions.DigitButtonStyle="{TemplateBinding DigitButtonStyle}"
                dxei:BaseEditAppearanceOptions.OperationButtonStyle="{TemplateBinding OperationButtonStyle}"
                Template="{DynamicResource {dxt:LWKey Calculator.ButtonPanelTemplate}}" />
        </ContentControl>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey CalcEdit.PopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <dxe:PopupCalcEditCalculator FocusVisualStyle="{x:Null}" IsEnabled="{Binding Path=Tag.IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PopupCalcEditCalculatorEditorIsReadOnlyToIsEnabledConverter}}" Precision="{Binding Path=Tag.Precision, RelativeSource={RelativeSource TemplatedParent}}" />

    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Calculator.GaugeSegmentTemplate}" TargetType="{x:Type dxe:CalculatorGaugeSegment}">
        <StackPanel x:Name="ElementRoot" Orientation="Horizontal">
            <StackPanel.Resources>
                <Style x:Key="ElementStyleOff" TargetType="{x:Type Path}">
                    <Setter Property="Visibility" Value="Collapsed" />
                </Style>
                <Style x:Key="ElementStyleOn" TargetType="{x:Type Path}">
                    <Setter Property="Visibility" Value="Visible" />
                </Style>
            </StackPanel.Resources>
            <Grid Width="15" Height="22">
                <Path
                    x:Name="ElementSegmentLeftTop"
                    Width="2.729"
                    Height="8.5"
                    Margin="1.188,1.5,0,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Top"
                    Data="F1 M 515.591,391.5L 516.917,393L 516.295,398.5L 514.63,400L 514.188,399.5L 515.036,392L 515.591,391.5 Z "
                    Fill="{TemplateBinding Foreground}"
                    Stretch="Fill"
                    UseLayoutRounding="False" />
                <Path
                    x:Name="ElementSegmentTop"
                    Height="2"
                    Margin="3.701,0,2.326,0"
                    VerticalAlignment="Top"
                    Data="F1 M 516.701,390.5L 517.256,390L 525.232,390L 525.674,390.5L 524.009,392L 518.027,392L 516.701,390.5 Z "
                    Fill="{TemplateBinding Foreground}"
                    Stretch="Fill"
                    UseLayoutRounding="False" />
                <Path
                    x:Name="ElementSegmentLeftBottom"
                    Width="2.729"
                    Height="8.5"
                    Margin="0,0,0,1.5"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Bottom"
                    Data="F1 M 513.442,410.5L 513,410L 513.848,402.5L 514.403,402L 515.729,403.5L 515.107,409L 513.442,410.5 Z "
                    Fill="{TemplateBinding Foreground}"
                    Stretch="Fill"
                    UseLayoutRounding="False" />
                <Path
                    x:Name="ElementSegmentBottom"
                    Height="2"
                    Margin="1.326,0,4.701,0"
                    VerticalAlignment="Bottom"
                    Data="F1 M 514.326,411.5L 515.991,410L 521.974,410L 523.299,411.5L 522.744,412L 514.768,412L 514.326,411.5 Z "
                    Fill="{TemplateBinding Foreground}"
                    Stretch="Fill"
                    UseLayoutRounding="False" />
                <Path
                    x:Name="ElementSegmentMiddle"
                    Margin="2.513,10,3.513,10"
                    Data="F1 M 515.513,401L 516.624,400L 523.603,400L 524.487,401L 523.377,402L 516.397,402L 515.513,401 Z "
                    Fill="{TemplateBinding Foreground}"
                    Stretch="Fill"
                    UseLayoutRounding="False" />
                <Path
                    x:Name="ElementSegmentRightTop"
                    Width="2.729"
                    Height="8.5"
                    Margin="0,1.5,1,0"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Data="F1 M 526.558,391.5L 527,392L 526.152,399.5L 525.597,400L 524.271,398.5L 524.893,393L 526.558,391.5 Z "
                    Fill="{TemplateBinding Foreground}"
                    Stretch="Fill"
                    UseLayoutRounding="False" />
                <Path
                    x:Name="ElementSegmentRightBottom"
                    Width="2.729"
                    Height="8.5"
                    Margin="0,0,2.187,1.5"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Bottom"
                    Data="F1 M 524.41,410.5L 523.084,409L 523.706,403.5L 525.371,402L 525.813,402.5L 524.965,410L 524.41,410.5 Z "
                    Fill="{TemplateBinding Foreground}"
                    Stretch="Fill"
                    UseLayoutRounding="False" />
            </Grid>
            <Path
                x:Name="ElementDot"
                Width="2"
                Height="2"
                Margin="-2,0,2,0"
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                Data="F1 M 527,410C 527.552,410 528,410.448 528,411C 528,411.552 527.552,412 527,412C 526.448,412 526,411.552 526,411C 526,410.448 526.448,410 527,410 Z "
                Fill="{TemplateBinding Foreground}"
                Stretch="Fill"
                UseLayoutRounding="False" />
        </StackPanel>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Calculator.GaugeTemplate}" TargetType="{x:Type dxe:CalculatorGauge}">
        <StackPanel x:Name="ElementSegmentPanel" Orientation="Horizontal" SnapsToDevicePixels="False" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey Calculator.Template}" TargetType="{x:Type dxe:Calculator}">
        <Grid SnapsToDevicePixels="True">
            <ContentControl
                x:Name="PART_Border"
                HorizontalContentAlignment="Left"
                VerticalContentAlignment="Stretch"
                dx:FocusHelper2.Focusable="False"
                dxi:AppearanceOptions.Background="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.BorderBrush="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.HasBackground="{Binding Path=(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.HasBorderBrush="{Binding Path=(dxi:AppearanceOptions.HasBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.HasPadding="{Binding Path=(dxi:AppearanceOptions.HasPadding), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.Padding="{Binding Path=(dxi:AppearanceOptions.Padding), RelativeSource={RelativeSource TemplatedParent}}"
                Template="{DynamicResource {dxt:LWKey Calculator.BorderTemplate}}">
                <dxe:CalculatorPanel
                    x:Name="PART_CalculatorPanel"
                    dxei:BaseEditAppearanceOptions.CEButtonStyle="{TemplateBinding CEButtonStyle}"
                    dxei:BaseEditAppearanceOptions.DigitButtonStyle="{TemplateBinding DigitButtonStyle}"
                    dxei:BaseEditAppearanceOptions.OperationButtonStyle="{TemplateBinding OperationButtonStyle}">
                    <Button x:Name="ElementDisplay" IsEnabled="False" Style="{DynamicResource {dxt:LWKey Calculator.DisplayStyle}}" />
                    <ContentControl
                        dx:FocusHelper2.Focusable="False"
                        dxei:BaseEditAppearanceOptions.CEButtonStyle="{Binding Path=(dxei:BaseEditAppearanceOptions.CEButtonStyle), ElementName=PART_CalculatorPanel}"
                        dxei:BaseEditAppearanceOptions.DigitButtonStyle="{Binding Path=(dxei:BaseEditAppearanceOptions.DigitButtonStyle), ElementName=PART_CalculatorPanel}"
                        dxei:BaseEditAppearanceOptions.OperationButtonStyle="{Binding Path=(dxei:BaseEditAppearanceOptions.OperationButtonStyle), ElementName=PART_CalculatorPanel}"
                        Template="{DynamicResource {dxt:LWKey Calculator.ButtonPanelTemplate}}" />
                </dxe:CalculatorPanel>
            </ContentControl>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ElementDisplay" Storyboard.TargetProperty="IsEnabled" Duration="0">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <sys:Boolean>True</sys:Boolean>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey Calculator.MemoryIndicatorTemplate}" TargetType="{x:Type dxe:CalculatorMemoryIndicator}">
        <Path
            Width="9"
            Height="9"
            Margin="0,2,0,0"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Data="F1 M 508.172,390L 506.031,390L 504.612,393.385C 504.174,394.477 503.788,395.533 503.453,396.555L 503.417,396.555C 503.334,395.528 503.206,394.471 503.035,393.385L 502.454,390L 500.301,390L 498.637,399L 500.226,399L 500.807,395.537C 500.903,394.973 501,394.379 501.099,393.756C 501.198,393.133 501.287,392.534 501.367,391.957L 501.402,391.957C 501.444,392.514 501.499,393.08 501.567,393.655C 501.635,394.231 501.712,394.776 501.8,395.292L 502.382,398.871L 503.7,398.871L 505.231,395.233C 505.445,394.724 505.663,394.187 505.884,393.622C 506.105,393.057 506.313,392.502 506.508,391.957L 506.543,391.957C 506.411,393.11 506.304,394.292 506.223,395.502L 505.979,399L 507.637,399L 508.172,390 Z "
            Fill="{TemplateBinding Foreground}"
            Stretch="Fill"
            UseLayoutRounding="False" />
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\CalcEdit.xaml-->

    <!--#region Editors\Themes\Generic\CalcEditDisplay.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey Calculator.DisplayContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid FlowDirection="LeftToRight">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <!--<TextBlock x:Name="ElementTextBlock" Text=" " Opacity="0" Margin="4,5,4,1"/>-->
            <Grid
                Grid.Column="0"
                Width="15"
                Margin="4,3,6,0"
                Visibility="{Binding Memory, Converter={StaticResource MemoryIndicatorVisibilityConverter}}">
                <dxe:CalculatorMemoryIndicator />
            </Grid>
            <Viewbox
                x:Name="ElementViewBox"
                Grid.Column="1"
                MinHeight="37"
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                Stretch="Uniform"
                StretchDirection="DownOnly">
                <Grid>
                    <dxe:CalculatorGauge
                        x:Name="ElementDigitalDisplay"
                        Margin="4,11,4,4"
                        Text="{Binding DisplayText}"
                        Visibility="{Binding IsDigitalDisplay, Converter={StaticResource BoolToVisibilityConverter}}" />
                    <TextBlock
                        x:Name="ElementTextDisplay"
                        Margin="4,5,4,1"
                        Text="{Binding DisplayText}"
                        Visibility="{Binding IsDigitalDisplay, Converter={StaticResource BoolToVisibilityInverseConverter}}" />
                </Grid>
            </Viewbox>
        </Grid>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\CalcEditDisplay.xaml-->

    <!--#region Editors\Themes\Generic\CheckEdit.xaml-->
    <Thickness x:Key="{dxt:LWKey CheckEdit.ImagePadding}">0</Thickness>


    <DataTemplate x:Key="{dxt:LWKey CheckEdit.GlyphTemplate}">
        <dx:DXImage
            x:Name="image"
            Width="16"
            Height="16"
            Source="{Binding}" />
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="image" Property="MinWidth" Value="40" />
                <Setter TargetName="image" Property="MinHeight" Value="40" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="{dxt:LWKey CheckEdit.ImageCheckEditBoxTemplate}" TargetType="{x:Type dxe:CheckEditBox}">
        <Grid Margin="{TemplateBinding Padding}" Background="#00FFFFFF">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <ContentPresenter
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding Glyph}"
                ContentTemplate="{TemplateBinding GlyphTemplate}" />
            <ContentPresenter
                Name="contentPresenter"
                Grid.Column="1"
                Margin="4,0,0,0"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding Content}"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                RecognizesAccessKey="True"
                Visibility="{Binding HasContent, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.35" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="BaseCheckEditBoxStyle" TargetType="{x:Type dxe:CheckEditBox}">
        <Setter Property="IsTabStop" Value="{Binding DataContext.IsTabStop, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Focusable" Value="{Binding DataContext.Focusable, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Cursor" Value="{Binding DataContext.Cursor, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Padding" Value="{Binding DataContext.Padding, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Content" Value="{Binding DataContext.Content, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ContentTemplate" Value="{Binding DataContext.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="IsThreeState" Value="{Binding DataContext.IsThreeState, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding DataContext.VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding DataContext.HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ContentTemplateSelector" Value="{Binding DataContext.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Foreground" Value="{Binding DataContext.Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="DisplayMode" Value="{Binding Path=DataContext.DisplayMode, RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <Trigger Property="DisplayMode" Value="Image">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CheckEdit.ImageCheckEditBoxTemplate}}" />
                <Setter Property="GlyphTemplate" Value="{Binding Path=DataContext.GlyphTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <dxi:RenderTemplate x:Key="{dxt:LWKey CheckEdit.RenderTemplate}">
        <dxe:EditorRenderCheckBox Name="checkBox" />
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding DependencyProperty="{x:Static FrameworkElement.IsEnabledProperty}" TargetName="checkBox" />
            <dxi:RenderBinding DependencyProperty="{x:Static FrameworkElement.IsMouseOverProperty}" TargetName="checkBox" />
            <dxi:RenderBinding DependencyProperty="{x:Static FrameworkElement.IsFocusedProperty}" TargetName="checkBox" />
            <dxi:RenderBinding DependencyProperty="{x:Static ContentControl.ContentProperty}" TargetName="checkBox" />
            <dxi:RenderBinding DependencyProperty="{x:Static ContentControl.ContentTemplateProperty}" TargetName="checkBox" />
            <dxi:RenderBinding DependencyProperty="{x:Static ContentControl.ContentTemplateSelectorProperty}" TargetName="checkBox" />
            <dxi:RenderBinding DependencyProperty="{x:Static ContentControl.VerticalContentAlignmentProperty}" TargetName="checkBox" />
            <dxi:RenderBinding DependencyProperty="{x:Static ContentControl.HorizontalContentAlignmentProperty}" TargetName="checkBox" />
            <dxi:RenderBinding DependencyProperty="{x:Static ContentControl.PaddingProperty}" TargetName="checkBox" />
            <dxi:RenderBinding DependencyProperty="{x:Static ToggleButton.IsPressedProperty}" TargetName="checkBox" />
            <dxi:RenderBinding DependencyProperty="{x:Static ToggleButton.IsCheckedProperty}" TargetName="checkBox" />
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <!--#endregion Editors\Themes\Generic\CheckEdit.xaml-->

    <!--#region Editors\Themes\Generic\ColorEdit.xaml-->

    <SolidColorBrush x:Key="{dxt:LWKey ColorEdit.ChipBorderBrush}" Color="#FFC5C5C5" />
    <ControlTemplate x:Key="{dxt:LWKey ColorEdit.Template}" TargetType="{x:Type dxe:ColorEdit}">
        <Grid x:Name="PART_Root">
            <ContentControl
                x:Name="Border"
                HorizontalContentAlignment="Stretch"
                VerticalContentAlignment="Stretch"
                dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                Background="{TemplateBinding Background}"
                IsTabStop="False"
                Template="{TemplateBinding ActualBorderTemplate}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <dxe:ErrorControl x:Name="PART_ErrorPresenter" Grid.Column="0" />
                    <dxe:EditorControl
                        x:Name="PART_Content"
                        Grid.Column="1"
                        Padding="{TemplateBinding Padding}"
                        Foreground="{TemplateBinding Foreground}"
                        IsHitTestVisible="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, Converter={StaticResource IsReadOnlyToHitTestVisibleConverter}}"
                        Template="{TemplateBinding ActualEditorControlTemplate}" />
                </Grid>
            </ContentControl>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="EnabledStates">
                    <VisualState x:Name="Enabled" />
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames
                                BeginTime="0"
                                Storyboard.TargetName="PART_Content"
                                Storyboard.TargetProperty="(UIElement.Opacity)"
                                Duration="0">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.35" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="ReadOnlyStates">
                    <VisualState x:Name="Editable" />
                    <VisualState x:Name="ReadOnly" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey PopupColorEdit.PART_EditorStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsNullTextVisible}" Value="true">
                <Setter Property="Opacity" Value="0.35" />
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.35" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey PopupColorEdit.PopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid SnapsToDevicePixels="True">
            <dxe:ColorEdit
                x:Name="PART_PopupContent"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Focusable="False"
                Foreground="{Binding Path=Tag.Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                ShowBorder="False" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey PopupColorEdit.DisplayTemplate}">
        <Grid Margin="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource Self}}">
            <Grid x:Name="grid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <dx:DXBorder
                    x:Name="PART_Color"
                    Margin="3"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    BorderBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).ChipBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                    BorderThickness="1">
                    <Grid>
                        <dxei:TransparentBrushRectangle dx:FocusHelper2.Focusable="False" BlockHeight="4" BlockWidth="4" />
                        <Rectangle
                            Width="12"
                            Height="12"
                            Fill="{Binding Path=(dxe:BaseEdit.OwnerEdit).Color, Converter={StaticResource ColorToBrushConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="true"
                            Stretch="Fill" />
                    </Grid>
                </dx:DXBorder>
                <TextBlock x:Name="PART_Editor" Grid.Column="1" Style="{DynamicResource {dxt:LWKey PopupColorEdit.PART_EditorStyle}}" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Text">
                <Setter TargetName="PART_Color" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Color">
                <Setter TargetName="PART_Editor" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="grid" Property="Margin" Value="14,13" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceInactive">
                <Setter TargetName="grid" Property="Margin" Value="{DynamicResource {dxt:LWKey PopupColorEdit.InplaceMargin}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceActive">
                <Setter TargetName="grid" Property="Margin" Value="{DynamicResource {dxt:LWKey PopupColorEdit.InplaceMargin}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ColorEdit.EditTemplate}">
        <dxb:BarManager x:Name="PART_Editor" Margin="{TemplateBinding Padding}" CreateStandardLayout="False">
            <dxb:BarManager.Items>
                <dxb:BarButtonItem x:Name="PART_ResetButton" Content="{Binding Path=DataContext.DefaultColorButtonContent, RelativeSource={RelativeSource TemplatedParent}, Converter={dxe:ColorEditLocalizerConverter Id=ColorEdit_AutomaticButtonCaption}}" IsVisible="{Binding Path=DataContext.ShowDefaultColorButton, RelativeSource={RelativeSource TemplatedParent}}"
                                   CloseSubMenuOnClick="False"/>
                <dxei:GalleryBarItem x:Name="galleryItem">
                    <dxei:GalleryBarItem.Gallery>
                        <dxb:Gallery
                            x:Name="PART_Gallery"
                            AllowFilter="False"
                            ColCount="{Binding Path=DataContext.ColumnCount, RelativeSource={RelativeSource TemplatedParent}}"
                            GroupItemsMargin="0,3,0,3"
                            IsGroupCaptionVisible="True"
                            IsItemCaptionVisible="True"
                            IsItemDescriptionVisible="False"
                            IsItemGlyphVisible="False"
                            ItemCheckMode="Single"
                            ItemMargin="{Binding Path=DataContext.ChipMargin, RelativeSource={RelativeSource TemplatedParent}}"
                            MinColCount="{Binding Path=DataContext.ColumnCount, RelativeSource={RelativeSource TemplatedParent}}" />
                    </dxei:GalleryBarItem.Gallery>
                </dxei:GalleryBarItem>
                <dxb:BarButtonItem x:Name="PART_NoColorButton" Content="{Binding Path=DataContext.NoColorButtonContent, RelativeSource={RelativeSource TemplatedParent}, Converter={dxe:ColorEditLocalizerConverter Id=ColorEdit_NoColorButtonCaption}}" IsVisible="{Binding Path=DataContext.ShowNoColorButton, RelativeSource={RelativeSource TemplatedParent}}" />
                <dxb:BarButtonItem
                    x:Name="PART_MoreColorsButton"
                    CloseSubMenuOnClick="False"
                    Content="{Binding Path=DataContext.MoreColorsButtonContent, RelativeSource={RelativeSource TemplatedParent}, Converter={dxe:ColorEditLocalizerConverter Id=ColorEdit_MoreColorsButtonCaption}}"
                    Glyph="/DevExpress.Xpf.Core.v24.1;component/Editors/Images/ColorEdit/MoreColors.svg"
                    IsVisible="{Binding Path=DataContext.ShowMoreColorsButton, RelativeSource={RelativeSource TemplatedParent}}" />
            </dxb:BarManager.Items>
            <dxb:MenuBarControl Background="{DynamicResource {dxt:LWKey ColorEdit.Background}}">
                <dxb:MenuBarControl.Menu>
                    <dxb:PopupMenu x:Name="PART_Menu">
                        <dxb:BarButtonItemLink BarItemName="PART_ResetButton" />
                        <dxei:GalleryBarItemLink BarItemName="galleryItem" />
                        <dxb:BarButtonItemLink BarItemName="PART_NoColorButton" />
                        <dxb:BarButtonItemLink BarItemName="PART_MoreColorsButton" />
                    </dxb:PopupMenu>
                </dxb:MenuBarControl.Menu>
            </dxb:MenuBarControl>
        </dxb:BarManager>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ColorEdit.EditInplaceTemplate}">
        <dxb:BarManager x:Name="PART_Editor" CreateStandardLayout="False">
            <dxb:BarManager.Items>
                <dxb:BarButtonItem x:Name="PART_ResetButton" Content="{Binding ResetButtonContent, RelativeSource={RelativeSource TemplatedParent}}" IsVisible="{Binding ShowResetColorButton}" />
                <dxei:GalleryBarItem x:Name="galleryItem">
                    <dxei:GalleryBarItem.Gallery>
                        <dxb:Gallery
                            x:Name="PART_Gallery"
                            AllowFilter="False"
                            ColCount="{Binding Path=DataContext.ColumnCount, RelativeSource={RelativeSource TemplatedParent}}"
                            GroupItemsMargin="0,3,0,3"
                            IsGroupCaptionVisible="True"
                            IsItemCaptionVisible="True"
                            IsItemDescriptionVisible="False"
                            IsItemGlyphVisible="False"
                            ItemCheckMode="Single"
                            ItemMargin="{Binding Path=DataContext.ChipMargin, RelativeSource={RelativeSource TemplatedParent}}"
                            MinColCount="{Binding Path=DataContext.ColumnCount, RelativeSource={RelativeSource TemplatedParent}}" />
                    </dxei:GalleryBarItem.Gallery>
                </dxei:GalleryBarItem>
                <dxb:BarButtonItem x:Name="PART_NoColorButton" Content="{Binding NoColorButtonContent, RelativeSource={RelativeSource TemplatedParent}, Converter={dxe:ColorEditLocalizerConverter Id=ColorEdit_NoColorButtonCaption}}" IsVisible="{Binding ShowNoColorButton}" />
                <dxb:BarButtonItem
                    x:Name="PART_MoreColorsButton"
                    Content="{Binding MoreColorsButtonContent, RelativeSource={RelativeSource TemplatedParent}, Converter={dxe:ColorEditLocalizerConverter Id=ColorEdit_NoColorButtonCaption}}"
                    Glyph="/DevExpress.Xpf.Core.v24.1;component/Editors/Images/ColorEdit/MoreColors.svg"
                    IsVisible="{Binding ShowMoreColorsButton}" />
            </dxb:BarManager.Items>
            <dxb:MenuBarControl>
                <dxb:MenuBarControl.Menu>
                    <dxb:PopupMenu x:Name="PART_Menu">
                        <dxb:BarButtonItemLink BarItemName="PART_ResetButton" />
                        <dxei:GalleryBarItemLink BarItemName="galleryItem" />
                        <dxb:BarButtonItemLink BarItemName="PART_NoColorButton" />
                        <dxb:BarButtonItemLink BarItemName="PART_MoreColorsButton" />
                    </dxb:PopupMenu>
                </dxb:MenuBarControl.Menu>
            </dxb:MenuBarControl>
        </dxb:BarManager>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\ColorEdit.xaml-->

    <!--#region Editors\Themes\Generic\ColorPicker.xaml-->


    <DataTemplate x:Key="{dxt:LWKey ColorPicker.RGBDataTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <TextBlock
                x:Name="PART_RTextBlock"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="R:" />
            <dxe:SpinEdit
                Grid.Row="0"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=R, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="255"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_GTextBlock"
                Grid.Row="1"
                Grid.Column="0"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="G:" />
            <dxe:SpinEdit
                Grid.Row="1"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=G, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="255"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_BTextBlock"
                Grid.Row="2"
                Grid.Column="0"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="B:" />
            <dxe:SpinEdit
                Grid.Row="2"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=B, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="255"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_ATextBlock"
                Grid.Row="3"
                Grid.Column="0"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="A:"
                Visibility="{Binding Path=ShowAlphaChannel, RelativeSource={RelativeSource FindAncestor, AncestorType=dxei:ColorPicker}, Converter={StaticResource BoolToVisibilityConverter}}" />
            <dxe:SpinEdit
                Grid.Row="3"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=A, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="255"
                MinValue="0"
                SelectAllOnMouseUp="true"
                Visibility="{Binding Path=ShowAlphaChannel, RelativeSource={RelativeSource FindAncestor, AncestorType=dxei:ColorPicker}, Converter={StaticResource BoolToVisibilityConverter}}" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey ColorPicker.CMYKDataTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <TextBlock
                x:Name="PART_CTextBlock"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="C:" />
            <dxe:SpinEdit
                Grid.Row="0"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=C, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="100"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_MTextBlock"
                Grid.Row="1"
                Grid.Column="0"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="M:" />
            <dxe:SpinEdit
                Grid.Row="1"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=M, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="100"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_YTextBlock"
                Grid.Row="2"
                Grid.Column="0"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="Y:" />
            <dxe:SpinEdit
                Grid.Row="2"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=Y, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="100"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_KTextBlock"
                Grid.Row="3"
                Grid.Column="0"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="K:" />
            <dxe:SpinEdit
                Grid.Row="3"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=K, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="255"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_ATextBlock"
                Grid.Row="4"
                Grid.Column="0"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="A:"
                Visibility="{Binding Path=ShowAlphaChannel, RelativeSource={RelativeSource FindAncestor, AncestorType=dxei:ColorPicker}, Converter={StaticResource BoolToVisibilityConverter}}" />
            <dxe:SpinEdit
                Grid.Row="4"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=A, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="255"
                MinValue="0"
                SelectAllOnMouseUp="true"
                Visibility="{Binding Path=ShowAlphaChannel, RelativeSource={RelativeSource FindAncestor, AncestorType=dxei:ColorPicker}, Converter={StaticResource BoolToVisibilityConverter}}" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey ColorPicker.HLSDataTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <TextBlock
                x:Name="PART_HTextBlock"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="H:" />
            <dxe:SpinEdit
                Grid.Row="0"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=H, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="360"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_LTextBlock"
                Grid.Row="1"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="L:" />
            <dxe:SpinEdit
                Grid.Row="1"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=L, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="100"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_STextBlock"
                Grid.Row="2"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="S:" />
            <dxe:SpinEdit
                Grid.Row="2"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=S, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="100"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_ATextBlock"
                Grid.Row="3"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="A:"
                Visibility="{Binding Path=ShowAlphaChannel, RelativeSource={RelativeSource FindAncestor, AncestorType=dxei:ColorPicker}, Converter={StaticResource BoolToVisibilityConverter}}" />
            <dxe:SpinEdit
                Grid.Row="3"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=A, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="255"
                MinValue="0"
                SelectAllOnMouseUp="true"
                Visibility="{Binding Path=ShowAlphaChannel, RelativeSource={RelativeSource FindAncestor, AncestorType=dxei:ColorPicker}, Converter={StaticResource BoolToVisibilityConverter}}" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey ColorPicker.HSBDataTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <TextBlock
                x:Name="PART_HTextBlock"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="H:" />
            <dxe:SpinEdit
                Grid.Row="0"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=H, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="360"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_STextBlock"
                Grid.Row="1"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="S:" />
            <dxe:SpinEdit
                Grid.Row="1"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=S, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="100"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_BTextBlock"
                Grid.Row="2"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="B:" />
            <dxe:SpinEdit
                Grid.Row="2"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=B, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="100"
                MinValue="0"
                SelectAllOnMouseUp="true" />
            <TextBlock
                x:Name="PART_ATextBlock"
                Grid.Row="3"
                Margin="0,4,0,0"
                VerticalAlignment="Center"
                Text="A:"
                Visibility="{Binding Path=ShowAlphaChannel, RelativeSource={RelativeSource FindAncestor, AncestorType=dxei:ColorPicker}, Converter={StaticResource BoolToVisibilityConverter}}" />
            <dxe:SpinEdit
                Grid.Row="3"
                Grid.Column="1"
                Margin="0,4,0,0"
                HorizontalAlignment="Stretch"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                EditMode="{Binding Path=EditMode}"
                EditValue="{Binding Path=A, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalToIntConverter}}"
                IsFloatValue="False"
                MaxValue="255"
                MinValue="0"
                SelectAllOnMouseUp="true"
                Visibility="{Binding Path=ShowAlphaChannel, RelativeSource={RelativeSource FindAncestor, AncestorType=dxei:ColorPicker}, Converter={StaticResource BoolToVisibilityConverter}}" />
        </Grid>
    </DataTemplate>
    <Style x:Key="{dxt:LWKey ColorPicker.DefaultColorButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ColorPicker.DefaultColorButtonTemplate}}" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey ColorPicker.Template}" TargetType="{x:Type dxei:ColorPicker}">
        <Grid Margin="{TemplateBinding Padding}" Background="Transparent">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <dx:DXBorder BorderBrush="#7F3C3C3C" BorderThickness="1">
                <Grid>
                    <Rectangle>
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                <GradientStop Offset="1" Color="{Binding Path=HSBColor.H, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HColorToZColorConverter}}" />
                                <GradientStop Offset="0" Color="#FFFFFFFF" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle>
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                <GradientStop Offset="0" Color="Transparent" />
                                <GradientStop Offset="1" Color="Black" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Canvas
                        x:Name="PART_ColorArea"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        dx:FrameworkElementHelper.IsClipped="True"
                        Background="Transparent">
                        <Canvas
                            x:Name="ColorCanvas"
                            Canvas.Left="{Binding Path=ActualXYThumbXOffset, RelativeSource={RelativeSource TemplatedParent}}"
                            Canvas.Top="{Binding Path=ActualXYThumbYOffset, RelativeSource={RelativeSource TemplatedParent}}"
                            Width="22"
                            Height="22">
                            <Rectangle
                                x:Name="RectangleColorCanvas"
                                Width="22"
                                Height="22"
                                Fill="Transparent" />
                            <Path
                                Canvas.Left="0"
                                Canvas.Top="9"
                                Width="9"
                                Height="1"
                                Data="M0,9 L8,9"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FFFFFFFF" />
                            <Path
                                Canvas.Left="0"
                                Canvas.Top="10"
                                Width="9"
                                Height="1"
                                Data="M0,10 L8,10"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FF000000" />
                            <Path
                                Canvas.Left="0"
                                Canvas.Top="11"
                                Width="9"
                                Height="1"
                                Data="M0,11 L8,11"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FFFFFFFF" />
                            <Path
                                Canvas.Left="12"
                                Canvas.Top="9"
                                Width="9"
                                Height="1"
                                Data="M0,9 L8,9"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FFFFFFFF" />
                            <Path
                                Canvas.Left="12"
                                Canvas.Top="10"
                                Width="9"
                                Height="1"
                                Data="M0,10 L8,10"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FF000000" />
                            <Path
                                Canvas.Left="12"
                                Canvas.Top="11"
                                Width="9"
                                Height="1"
                                Data="M0,11 L8,11"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FFFFFFFF" />
                            <Path
                                Canvas.Left="9"
                                Canvas.Top="0"
                                Width="1"
                                Height="9"
                                Data="M9,0 L9,8"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FFFFFFFF" />
                            <Path
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="1"
                                Height="9"
                                Data="M10,0 L10,8"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FF000000" />
                            <Path
                                Canvas.Left="11"
                                Canvas.Top="0"
                                Width="1"
                                Height="9"
                                Data="M11,0 L11,8"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FFFFFFFF" />
                            <Path
                                Canvas.Left="9"
                                Canvas.Top="12"
                                Width="1"
                                Height="9"
                                Data="M9,0 L9,8"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FFFFFFFF" />
                            <Path
                                Canvas.Left="10"
                                Canvas.Top="12"
                                Width="1"
                                Height="9"
                                Data="M10,0 L10,8"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FF000000" />
                            <Path
                                Canvas.Left="11"
                                Canvas.Top="12"
                                Width="1"
                                Height="9"
                                Data="M11,0 L11,8"
                                Fill="#FF000000"
                                Stretch="Fill"
                                Stroke="#FFFFFFFF" />
                        </Canvas>
                    </Canvas>
                </Grid>
            </dx:DXBorder>
            <dx:DXBorder
                Grid.Row="1"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                Margin="0,3,0,0"
                Visibility="{Binding Path=ShowAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}">
                <Grid x:Name="PART_AlphaChannelRoot" Height="22">
                    <dxei:TransparentBrushRectangle
                        Grid.ColumnSpan="2"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        dx:FocusHelper2.Focusable="False"
                        BlockHeight="4"
                        BlockWidth="4" />
                    <Rectangle>
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                <GradientStop Offset="0" Color="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorWithoutAlphaConverter}}" />
                                <GradientStop Offset="1" Color="#00000000" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Canvas x:Name="PART_AlphaChannelArea" dx:FrameworkElementHelper.IsClipped="True" Background="Transparent">
                        <Path
                            x:Name="PART_AlphaThumbTop"
                            Canvas.Left="{Binding Path=ActualAlphaThumbOffset, RelativeSource={RelativeSource TemplatedParent}}"
                            Width="10"
                            Height="5"
                            Data="M0,0 L10,0 5,5 z"
                            Fill="#FF000000"
                            IsHitTestVisible="False" />
                        <Path
                            x:Name="PART_AlphaThumbBottom"
                            Canvas.Left="{Binding Path=ActualAlphaThumbOffset, RelativeSource={RelativeSource TemplatedParent}}"
                            Canvas.Top="17"
                            Width="10"
                            Height="5"
                            Data="M0,5 L5,0 10,5 z"
                            Fill="#FF000000"
                            IsHitTestVisible="False" />
                    </Canvas>
                </Grid>
            </dx:DXBorder>

            <dx:DXBorder
                x:Name="BorderRoot"
                Grid.Row="2"
                Grid.Column="0"
                Height="22"
                Margin="0,3,0,0"
                BorderBrush="#7F3C3C3C"
                BorderThickness="1">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding Path=ShowDefaultColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ShowDefaultColorToColumnWidthConverter}}" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <dxei:TransparentBrushRectangle
                        Grid.ColumnSpan="2"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        dx:FocusHelper2.Focusable="False"
                        BlockHeight="4"
                        BlockWidth="4" />
                    <Button
                        x:Name="PART_DefaultColorButton"
                        Grid.Column="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        BorderThickness="0"
                        Command="{Binding Path=SetDefaultColorCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{DynamicResource {dxt:LWKey ColorPicker.DefaultColorButtonStyle}}"
                        Visibility="{Binding Path=ShowDefaultColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}"
                        Background="{TemplateBinding DefaultBrush}" />
                    <Rectangle
                        x:Name="PART_ColorRect"
                        Grid.Column="1"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Fill="{TemplateBinding Color, Converter={StaticResource ColorToBrushConverter}}"
                        IsHitTestVisible="False" />
                </Grid>
            </dx:DXBorder>
            <dx:DXBorder
                x:Name="Y"
                Grid.Row="0"
                Grid.Column="1"
                Margin="4,0,0,0"
                VerticalAlignment="Stretch"
                BorderBrush="#7F3C3C3C"
                BorderThickness="1">
                <Grid x:Name="YRoot" Width="22">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="3" />
                    </Grid.RowDefinitions>
                    <Rectangle x:Name="PART_ZColorAreaRect" Grid.RowSpan="2" StrokeThickness="0">
                        <Rectangle.Fill>
                            <LinearGradientBrush x:Name="zColor" StartPoint="0.5,0" EndPoint="0.5,1">
                                <GradientStop x:Name="zColor1" Offset="0" Color="#FFFF0000" />
                                <GradientStop x:Name="zColor2" Offset="0.166666" Color="#FFFFFF00" />
                                <GradientStop x:Name="zColor3" Offset="0.333333" Color="#FF00FF00" />
                                <GradientStop x:Name="zColor4" Offset="0.5" Color="#FF00FFFF" />
                                <GradientStop x:Name="zColor5" Offset="0.666666" Color="#FF0000FF" />
                                <GradientStop x:Name="zColor6" Offset="0.833333" Color="#FFFF00FF" />
                                <GradientStop x:Name="zColor7" Offset="1" Color="#FFFF0000" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Canvas
                        x:Name="PART_ZColorArea"
                        Grid.Row="0"
                        Grid.RowSpan="2"
                        dx:FrameworkElementHelper.IsClipped="True"
                        Background="Transparent">
                        <Path
                            x:Name="PART_ZThumbLeft"
                            Canvas.Top="{Binding Path=ActualZThumbOffset, RelativeSource={RelativeSource TemplatedParent}}"
                            Width="5"
                            Height="10"
                            Data="M0,0 L5,5 0,10 z"
                            Fill="#FF000000"
                            IsHitTestVisible="False" />
                        <Path
                            x:Name="PART_ZThumbRight"
                            Canvas.Left="17"
                            Canvas.Top="{Binding Path=ActualZThumbOffset, RelativeSource={RelativeSource TemplatedParent}}"
                            Width="5"
                            Height="10"
                            Data="M 5,0 L0,5 5,10 z"
                            Fill="#FF000000"
                            IsHitTestVisible="False" />
                    </Canvas>
                </Grid>
            </dx:DXBorder>
            <Button
                Grid.Row="2"
                Grid.Column="1"
                Margin="4,4,0,1"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Command="{Binding Path=EnablePippetModeCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Template="{DynamicResource {dxt:LWKey ColorPicker.PipetButtonTemplate}}" />
            <StackPanel
                x:Name="PART_ColorProfile_Section"
                Grid.Row="0"
                Grid.Column="2"
                Width="85"
                Margin="5,0,0,0"
                Orientation="Vertical"
                Visibility="{Binding Path=ActualShowEditors, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}">
                <dxe:ComboBoxEdit
                    x:Name="PART_ColorModeComboBoxEdit"
                    HorizontalAlignment="Stretch"
                    DisplayMember="Text"
                    EditValue="{Binding Path=ColorMode, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    IsTextEditable="False"
                    ItemsSource="{dxei:ColorModeList}"
                    ValueMember="Value" />
                <dxei:ColorPickerDataContentPresenter
                    x:Name="PART_EditorsContentPresenter"
                    HorizontalAlignment="Stretch"
                    Content="{TemplateBinding ColorViewModel}"
                    ContentTemplateSelector="{StaticResource ColorModeTemplateSelector}" />
            </StackPanel>
            <dxe:TextEdit
                x:Name="PART_ResultColor"
                Grid.Row="2"
                Grid.Column="2"
                Width="85"
                Margin="5,5,0,0"
                VerticalAlignment="Bottom"
                ShowError="False"
                ValidateOnTextInput="False"
                Visibility="{Binding Path=ActualShowEditors, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}">
                <dxe:TextEdit.EditValue>
                    <MultiBinding Converter="{StaticResource ColorConverter}" UpdateSourceTrigger="PropertyChanged">
                        <Binding Mode="TwoWay" Path="Color" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Mode="OneWay" Path="ShowAlphaChannel" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                </dxe:TextEdit.EditValue>
            </dxe:TextEdit>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="ColorCanvas" Property="Width" Value="44" />
                <Setter TargetName="ColorCanvas" Property="Height" Value="44" />
                <Setter TargetName="BorderRoot" Property="Height" Value="44" />
                <Setter TargetName="YRoot" Property="Width" Value="44" />
                <Setter TargetName="PART_ZThumbLeft" Property="Width" Value="10" />
                <Setter TargetName="PART_ZThumbLeft" Property="Height" Value="20" />
                <Setter TargetName="PART_ZThumbRight" Property="Width" Value="10" />
                <Setter TargetName="PART_ZThumbRight" Property="Height" Value="20" />
                <Setter TargetName="PART_ZThumbRight" Property="Canvas.Left" Value="35" />
                <Setter TargetName="PART_ZThumbLeft" Property="Data" Value="M0,0 L10,7.5 0,15 z" />
                <Setter TargetName="PART_ZThumbRight" Property="Data" Value="M 10,0 L0,7.5 10,15 z" />
                <Setter TargetName="PART_AlphaChannelRoot" Property="Height" Value="44" />
                <Setter TargetName="PART_AlphaThumbTop" Property="Width" Value="20" />
                <Setter TargetName="PART_AlphaThumbTop" Property="Height" Value="10" />
                <Setter TargetName="PART_AlphaThumbBottom" Property="Width" Value="20" />
                <Setter TargetName="PART_AlphaThumbBottom" Property="Height" Value="10" />
                <Setter TargetName="PART_AlphaThumbBottom" Property="Canvas.Top" Value="35" />
                <Setter TargetName="PART_AlphaThumbTop" Property="Data" Value="M0,0 L20,0 10,10 z" />
                <Setter TargetName="PART_AlphaThumbBottom" Property="Data" Value="M0,10 L10,0 20,10 z" />
                <Setter TargetName="PART_ColorProfile_Section" Property="MinWidth" Value="102" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\ColorPicker.xaml-->

    <!--#region Editors\Themes\Generic\ComboBoxEdit.xaml-->


    <DataTemplate x:Key="{dxt:LWKey ComboBoxEdit.LoadingButtonTemplate}">
        <Button
            Command="{Binding Command}"
            CommandParameter="{Binding CommandParameter}"
            Opacity="{Binding Tag}"
            Style="{DynamicResource {dxt:LWKey ComboBoxEdit.LoadingButtonStyle}}" />
    </DataTemplate>
    <!-- REGEX REPLACE '12'34' SPECIFICTHEME 'TouchlineDark' -->
    <!-- END REGEX REPLACE '12'34' SPECIFICTHEME 'TouchlineDark' -->

    <Style x:Key="{dxt:LWKey EditorListBox.Style}" BasedOn="{StaticResource {x:Type ListBox}}" TargetType="{x:Type dxep:EditorListBox}">
        <Setter Property="Padding" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey EditorListBox.Template}}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey Brushes.EditorPopupListBoxBackground}}" />
        <Setter Property="TextSearch.TextPath" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(TextSearch.TextPath), RelativeSource={RelativeSource Self}}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(ScrollViewer.CanContentScroll), RelativeSource={RelativeSource Self}}" />
        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(VirtualizingPanel.IsVirtualizingWhenGrouping), RelativeSource={RelativeSource Self}}" />
        <Setter Property="ScrollUnit2" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ScrollUnit, RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="{dxt:LWKey EditorListBox.PopupStyle}" BasedOn="{StaticResource {dxt:LWKey EditorListBox.Style}}" TargetType="{x:Type dxep:EditorListBox}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Contained" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceActive">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey ThemeColors.BlackForegroundColor}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone">
                <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey ComboBoxEdit.PopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid Width="Auto" Height="Auto" SnapsToDevicePixels="True">
            <Grid.Resources>
                <dxei:PopupListBoxDisplayMemberPathConverter x:Key="DisplayMemberPathConverter" />
            </Grid.Resources>
            <dxep:PopupListBox
                x:Name="PART_Content"
                HorizontalContentAlignment="{Binding Path=Tag.HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                VerticalContentAlignment="{Binding Path=Tag.VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                dx:FocusHelper2.Focusable="False"
                AllowItemHighlighting="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowItemHighlighting, RelativeSource={RelativeSource TemplatedParent}}"
                BorderBrush="{x:Null}"
                BorderThickness="0,0,0,0"
                DisplayMemberPath="{Binding Path=Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DisplayMemberPathConverter}}"
                FocusVisualStyle="{x:Null}"
                ItemTemplate="{Binding Path=Tag.ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                ItemsPanel="{Binding Path=Tag.ItemsPanel, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource {dxt:LWKey EditorListBox.PopupStyle}}"
                VirtualizingPanel.VirtualizationMode="{Binding Path=Tag.(VirtualizingPanel.VirtualizationMode), RelativeSource={RelativeSource TemplatedParent}}">
                <dxep:PopupListBox.ItemTemplateSelector>
                    <Binding Path="Tag.ItemTemplateSelector" RelativeSource="{RelativeSource TemplatedParent}" />
                </dxep:PopupListBox.ItemTemplateSelector>
            </dxep:PopupListBox>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ComboBoxEdit.SelectedItemImageTemplate}">
        <DockPanel
            MinHeight="{StaticResource MinTextHeight}"
            Margin="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource Self}}"
            HorizontalAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource Self}}"
            VerticalAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource Self}}"
            LastChildFill="True">
            <dxei:ImagePresenter Padding="{DynamicResource {dxt:LWKey ComboBoxEdit.SelectedItemImagePadding}}" DataContext="{Binding Path=(dxe:BaseEdit.OwnerEdit).SelectedItem, RelativeSource={RelativeSource Self}}" DockPanel.Dock="Left" />
            <dxei:EditItemContentPresenter
                x:Name="PART_Editor"
                Margin="{DynamicResource {dxt:LWKey ComboBoxEdit.SelectedItemContentPadding}}"
                VerticalContentAlignment="Center"
                Content="{Binding Path=(dxe:BaseEdit.OwnerEdit).SelectedItemValue, RelativeSource={RelativeSource Self}}"
                ContentTemplate="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplate, RelativeSource={RelativeSource Self}}">
                <dxei:EditItemContentPresenter.ContentTemplateSelector>
                    <Binding Path="(dxe:BaseEdit.OwnerEdit).ItemTemplateSelector" RelativeSource="{RelativeSource Self}" />
                </dxei:EditItemContentPresenter.ContentTemplateSelector>
            </dxei:EditItemContentPresenter>
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Editor" Property="Opacity" Value="0.35" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ComboBoxEdit.SelectedItemTemplate}">
        <Grid Margin="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource Self}}">
            <dxei:EditItemContentPresenter
                x:Name="PART_Editor"
                Margin="{DynamicResource {dxt:LWKey ComboBoxEdit.SelectedItemContentPadding}}"
                HorizontalAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource Self}}"
                VerticalAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource Self}}"
                Content="{Binding Path=(dxe:BaseEdit.OwnerEdit).SelectedItemValue, RelativeSource={RelativeSource Self}}"
                ContentTemplate="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplate, RelativeSource={RelativeSource Self}}">
                <ContentPresenter.ContentTemplateSelector>
                    <Binding Path="(dxe:BaseEdit.OwnerEdit).ItemTemplateSelector" RelativeSource="{RelativeSource Self}" />
                </ContentPresenter.ContentTemplateSelector>
            </dxei:EditItemContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Editor" Property="Opacity" Value="0.35" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ComboBoxEdit.AutoCompleteBoxTemplate}">
        <dxei:TokenEditor
            x:Name="PART_Editor"
            Margin="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource Self}}"
            CharacterCasing="{Binding Path=(dxe:BaseEdit.OwnerEdit).CharacterCasing, RelativeSource={RelativeSource Self}}"
            IsReadOnly="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource Self}}"
            IsTextEditable="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}"
            MaxTextLength="{Binding Path=(dxe:BaseEdit.OwnerEdit).MaxLength, RelativeSource={RelativeSource Self}}"
            NullTextForeground="{Binding Path=(dxe:BaseEdit.OwnerEdit).NullTextForeground, RelativeSource={RelativeSource Self}}"
            UseLayoutRounding="True" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ComboBoxEdit.AutoCompleteBoxDisplayTemplate}">
        <dxei:TokenEditor
            x:Name="PART_Editor"
            Margin="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource Self}}"
            CharacterCasing="{Binding Path=(dxe:BaseEdit.OwnerEdit).CharacterCasing, RelativeSource={RelativeSource Self}}"
            IsReadOnly="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource Self}}"
            IsTextEditable="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}"
            MaxTextLength="{Binding Path=(dxe:BaseEdit.OwnerEdit).MaxLength, RelativeSource={RelativeSource Self}}"
            NullTextForeground="{Binding Path=(dxe:BaseEdit.OwnerEdit).NullTextForeground, RelativeSource={RelativeSource Self}}"
            UseLayoutRounding="True" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ComboBoxEdit.AutoCompleteBoxNonEditableTemplate}">
        <dxei:TokenEditor
            x:Name="PART_Editor"
            Margin="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource Self}}"
            CharacterCasing="{Binding Path=(dxe:BaseEdit.OwnerEdit).CharacterCasing, RelativeSource={RelativeSource Self}}"
            IsReadOnly="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource Self}}"
            IsTextEditable="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}"
            MaxTextLength="{Binding Path=(dxe:BaseEdit.OwnerEdit).MaxLength, RelativeSource={RelativeSource Self}}"
            NullTextForeground="{Binding Path=(dxe:BaseEdit.OwnerEdit).NullTextForeground, RelativeSource={RelativeSource Self}}"
            UseLayoutRounding="True" />
    </ControlTemplate>

    <DataTemplate x:Key="SearchPanelButtonTemplate">
        <dx:DXBorder Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <Button
                x:Name="PART_Item"
                AutomationProperties.AutomationId="{Binding Path=(AutomationProperties.AutomationId)}"
                AutomationProperties.Name="{Binding Path=(AutomationProperties.Name)}"
                Style="{DynamicResource {dxt:LWKey Buttons.ButtonStyle}}" />
        </dx:DXBorder>
    </DataTemplate>
    <Style x:Key="{dxt:LWKey SearchControl.FindButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,0,6,0" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="AutomationProperties.Name" Value="Find" />
        <Setter Property="AutomationProperties.AutomationId" Value="SearchFindButton" />
        <Setter Property="Content" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=LookUpFind, Converter={StaticResource EditorStringIdConverter}}" />
    </Style>
    <Style x:Key="{dxt:LWKey SearchControl.CloseButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="AutomationProperties.Name" Value="Close" />
        <Setter Property="AutomationProperties.AutomationId" Value="SearchCloseButton" />
        <Setter Property="ToolTip" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=LookUpClose, Converter={StaticResource EditorStringIdConverter}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="2,4,2,4" />
        <Setter Property="Margin" Value="4,0,4,0" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SearchControl.ButtonGlyphTemplate}}" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Height" Value="44" />
                <Setter Property="Width" Value="44" />
                <Setter Property="Padding" Value="4,6,4,6" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter Property="Height" Value="44" />
                <Setter Property="Width" Value="44" />
                <Setter Property="Padding" Value="4,6,4,6" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey SearchControl.ShowButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="AutomationProperties.Name" Value="ShowSearchPanel" />
        <Setter Property="AutomationProperties.AutomationId" Value="SearchPanelShowButton" />
        <Setter Property="ToolTip" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=LookUpShow, Converter={StaticResource EditorStringIdConverter}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="2,4,2,4" />
        <Setter Property="Margin" Value="4,0,4,0" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SearchControl.ButtonGlyphTemplate}}" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Height" Value="44" />
                <Setter Property="Width" Value="44" />
                <Setter Property="Padding" Value="4,6,4,6" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter Property="Height" Value="44" />
                <Setter Property="Width" Value="44" />
                <Setter Property="Padding" Value="4,6,4,6" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey SearchControl.NextButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="AutomationProperties.Name" Value="Next" />
        <Setter Property="AutomationProperties.AutomationId" Value="SearchNextButton" />
        <Setter Property="ToolTip" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=LookUpNext, Converter={StaticResource EditorStringIdConverter}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="2,4,2,4" />
        <Setter Property="Margin" Value="4,0,0,0" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SearchControl.ButtonGlyphTemplate}}" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Height" Value="44" />
                <Setter Property="Width" Value="44" />
                <Setter Property="Padding" Value="4,6,4,6" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter Property="Height" Value="44" />
                <Setter Property="Width" Value="44" />
                <Setter Property="Padding" Value="4,6,4,6" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey SearchControl.PrevButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="AutomationProperties.Name" Value="Previous" />
        <Setter Property="AutomationProperties.AutomationId" Value="SearchPreviousButton" />
        <Setter Property="ToolTip" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=LookUpPrevious, Converter={StaticResource EditorStringIdConverter}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="2,4,2,4" />
        <Setter Property="Margin" Value="10,0,0,0" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SearchControl.ButtonGlyphTemplate}}" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Height" Value="44" />
                <Setter Property="Width" Value="44" />
                <Setter Property="Padding" Value="4,6,4,6" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter Property="Height" Value="44" />
                <Setter Property="Width" Value="44" />
                <Setter Property="Padding" Value="4,6,4,6" />
            </Trigger>
        </Style.Triggers>

    </Style>
    <ControlTemplate x:Key="{dxt:LWKey SearchControl.Template}" TargetType="dxe:SearchControl">
        <ContentControl
            HorizontalContentAlignment="Stretch"
            VerticalContentAlignment="Stretch"
            dx:FocusHelper2.Focusable="False"
            Background="{TemplateBinding Background}">
            <Grid Margin="{TemplateBinding Padding}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <dxeh:ChildMinWidthPanel ChildMinWidth="{TemplateBinding SearchTextBoxMinWidth}">
                    <dxe:ComboBoxEdit
                        x:Name="editor"
                        MinHeight="22"
                        Margin="0"
                        dxe:EditorAppearanceProperties.FocusedBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                        dxeh:MVVMFocusBehavior.IsFocused="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                        AllowDefaultButton="False"
                        AutomationProperties.AutomationId="SearchComboBox"
                        AutomationProperties.Name="SearchComboBox"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        EditValue="{Binding Path=SearchControlPropertyProvider.SearchText, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                        EditValuePostDelay="{TemplateBinding SearchTextPostDelay}"
                        EditValuePostMode="{Binding Path=SearchControlPropertyProvider.ActualPostMode, RelativeSource={RelativeSource TemplatedParent}}"
                        ImmediatePopup="{Binding Path=SearchControlPropertyProvider.ActualImmediateMRUPopup, RelativeSource={RelativeSource TemplatedParent}}"
                        IncrementalFiltering="False"
                        IsCaseSensitiveSearch="True"
                        IsTabStop="{Binding IsEditorTabStop, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                        ItemsSource="{TemplateBinding MRU}"
                        NullTextForeground="{Binding Path=NullTextForeground, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                        ShowBorder="{TemplateBinding ShowEditorBorder}"
                        ShowNullText="{Binding Path=SearchControlPropertyProvider.ActualShowFindButton, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource boolInverseConverter}}"
                        ValidateOnEnterKeyPressed="True">
                        <dxe:ComboBoxEdit.NullText>
                            <MultiBinding>
                                <Binding Path="NullText" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding
                                    Converter="{StaticResource EditorStringIdConverter}"
                                    ConverterParameter="LookUpSearch"
                                    Path="IsTabStop"
                                    RelativeSource="{RelativeSource Self}" />
                                <MultiBinding.Converter>
                                    <dx:SearchControlNullTextConverter />
                                </MultiBinding.Converter>
                            </MultiBinding>
                        </dxe:ComboBoxEdit.NullText>
                        <!--<dxe:ComboBoxEdit.StyleSettings>
                            <dxe:SearchControlStyleSettings/>
                        </dxe:ComboBoxEdit.StyleSettings>-->
                        <dxe:ComboBoxEdit.Buttons>

                            <dxe:ButtonInfo x:Name="resultInfo" Command="{x:Null}" Visibility="{Binding Path=SearchControlPropertyProvider.ActualShowResultInfo, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">
                                <dxe:ButtonInfo.Content>
                                    <MultiBinding Converter="{StaticResource searchInfoConverter}">
                                        <Binding Path="ResultIndex" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ResultCount" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </dxe:ButtonInfo.Content>
                                <dxe:ButtonInfo.Template>
                                    <DataTemplate>
                                        <TextBlock
                                            x:Name="textBlockResultInfo"
                                            Margin="2,0,2,0"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource {dxt:LWKey TextEdit.NullTextForeground}}"
                                            Text="{Binding Content}"
                                            Visibility="{Binding Visibility}" />
                                    </DataTemplate>
                                </dxe:ButtonInfo.Template>
                            </dxe:ButtonInfo>

                            <dxe:ButtonInfo
                                x:Name="buttonClear"
                                Command="{Binding Path=SearchControlPropertyProvider.ClearSearchTextCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                GlyphKind="Custom"
                                Visibility="{Binding Path=SearchControlPropertyProvider.ActualShowClearButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">
                                <dxe:ButtonInfo.Template>
                                    <DataTemplate>
                                        <dxe:ButtonClose
                                            Margin="2,0"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Command="{Binding Command}"
                                            Visibility="{Binding Visibility}" />
                                    </DataTemplate>
                                </dxe:ButtonInfo.Template>
                            </dxe:ButtonInfo>

                            <dxe:ButtonInfo
                                x:Name="SearchFindButton"
                                dx:FocusHelper2.Focusable="False"
                                AutomationProperties.AutomationId="SearchFindButton"
                                AutomationProperties.Name="Find"
                                Command="{Binding Path=SearchControlPropertyProvider.FindCommand, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                CommandParameter="{TemplateBinding FilterCriteria}"
                                GlyphKind="Search"
                                Template="{StaticResource SearchPanelButtonTemplate}"
                                ToolTip="{Binding RelativeSource={RelativeSource Self}, ConverterParameter=LookUpFind, Converter={StaticResource EditorStringIdConverter}}"
                                Visibility="{Binding Path=SearchControlPropertyProvider.ActualShowFindButton, Converter={StaticResource boolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" />

                            <dxe:ButtonInfo Command="{Binding Path=OpenPopupCommand, ElementName=editor}" GlyphKind="DropDown" Visibility="{Binding Path=ShowMRUButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />

                        </dxe:ComboBoxEdit.Buttons>
                    </dxe:ComboBoxEdit>
                </dxeh:ChildMinWidthPanel>

                <Button
                    x:Name="buttonPrev"
                    Grid.Column="1"
                    Command="{Binding PrevCommand, RelativeSource={RelativeSource AncestorType=dxe:SearchControl}, UpdateSourceTrigger=PropertyChanged}"
                    Style="{DynamicResource {dxt:LWKey SearchControl.PrevButtonStyle}}"
                    Visibility="{Binding Path=ShowSearchPanelNavigationButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">
                    <Button.Content>
                        <Path
                            Width="11.3137"
                            Height="7.06579"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="F1 M 1.41188,4.23969L 0,5.65157L 1.41421,7.06578L 5.65685,2.82314L 9.89949,7.06579L 11.3137,5.65157L 9.90244,4.2403L 9.9001,4.24264L 5.65746,-3.12924e-007"
                            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}"
                            Stretch="Fill" />
                    </Button.Content>
                </Button>

                <Button
                    x:Name="buttonNext"
                    Grid.Column="2"
                    Command="{Binding NextCommand, RelativeSource={RelativeSource AncestorType=dxe:SearchControl}, UpdateSourceTrigger=PropertyChanged}"
                    Style="{DynamicResource {dxt:LWKey SearchControl.NextButtonStyle}}"
                    Visibility="{Binding Path=ShowSearchPanelNavigationButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">
                    <Button.Content>
                        <Path
                            Width="11.3137"
                            Height="7.06579"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="F1 M 1.41188,2.82609L 0,1.41422L 1.41421,3.50177e-006L 5.65685,4.24264L 9.89949,6.4075e-007L 11.3137,1.41421L 9.90244,2.82548L 9.9001,2.82315L 5.65746,7.06579"
                            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}"
                            Stretch="Fill" />
                    </Button.Content>
                </Button>

                <Button
                    x:Name="SearchCloseButton"
                    Grid.Column="3"
                    Command="{Binding Path=SearchControlPropertyProvider.CloseCommandInternal, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                    Style="{DynamicResource {dxt:LWKey SearchControl.CloseButtonStyle}}"
                    Visibility="{Binding Path=ShowCloseButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">
                    <Button.Content>
                        <Path
                            Width="11.3137"
                            Height="11.3137"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="F1 M 9.89949,0L 11.3137,1.41421L 7.07106,5.65685L 11.3137,9.89949L 9.89949,11.3137L 5.65685,7.07107L 1.41421,11.3137L 0,9.89949L 4.24264,5.65685L -1.49012e-007,1.41422L 1.41421,2.86102e-006L 5.65685,4.24264L 9.89949,0 Z "
                            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}"
                            Stretch="Fill" />
                    </Button.Content>
                </Button>
            </Grid>
        </ContentControl>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\ComboBoxEdit.xaml-->

    <!--#region Editors\Themes\Generic\DataPager.xaml-->



    <ControlTemplate x:Key="{dxt:LWKey DataPager.AutoNumericButtonCountButtonContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid DataContext="{Binding Path=(dxedp:DataPager.DataPager), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <dxedp:DataPagerButton
                Grid.Column="0"
                VerticalAlignment="Center"
                ButtonType="PageFirst"
                Command="{Binding FirstPageCommand}"
                DisplayMode="{Binding DisplayMode}"
                Visibility="{Binding DisplayMode, Converter={StaticResource DataPagerDisplayModeToButtonVisibilityConverter}, ConverterParameter=FirstLast_FirstLastNumeric_FirstLastPreviousNext_FirstLastPreviousNextNumeric}" />
            <dxedp:DataPagerButton
                Grid.Column="1"
                VerticalAlignment="Center"
                ButtonType="PagePrevious"
                Command="{Binding PreviousPageCommand}"
                DisplayMode="{Binding DisplayMode}"
                Visibility="{Binding DisplayMode, Converter={StaticResource DataPagerDisplayModeToButtonVisibilityConverter}, ConverterParameter=FirstLastPreviousNext_FirstLastPreviousNextNumeric_PreviousNextNumeric_PreviousNext}" />
            <dxedp:DataPagerButton
                Grid.Column="3"
                VerticalAlignment="Center"
                ButtonType="PageNext"
                Command="{Binding NextPageCommand}"
                DisplayMode="{Binding DisplayMode}"
                Visibility="{Binding DisplayMode, Converter={StaticResource DataPagerDisplayModeToButtonVisibilityConverter}, ConverterParameter=FirstLastPreviousNext_FirstLastPreviousNextNumeric_PreviousNextNumeric_PreviousNext}" />
            <dxedp:DataPagerButton
                Grid.Column="4"
                VerticalAlignment="Center"
                ButtonType="PageLast"
                Command="{Binding LastPageCommand}"
                DisplayMode="{Binding DisplayMode}"
                Visibility="{Binding DisplayMode, Converter={StaticResource DataPagerDisplayModeToButtonVisibilityConverter}, ConverterParameter=FirstLast_FirstLastNumeric_FirstLastPreviousNext_FirstLastPreviousNextNumeric}" />
            <Grid Grid.Column="2">
                <ContentControl Template="{DynamicResource {dxt:LWKey DataPager.NumericButtonAreaBorderTemplate}}">

                    <dxedp:DataPagerNumericButtonContainer
                        x:Name="PART_NumButtonContainer"
                        HorizontalContentAlignment="{Binding HorizontalContentAlignment}"
                        AutoEllipsis="{Binding AutoEllipsis}"
                        ButtonCount="{Binding ActualNumericButtonCount}"
                        CurrentIndex="{Binding ActualPageIndex}"
                        FirstButtonPageNumber="{Binding ContainerFirstButtonPageNumber}"
                        PageCount="{Binding PageCount}"
                        SecondButtonPageNumber="{Binding ContainerSecondButtonPageNumber}"
                        Visibility="{Binding DisplayMode, Converter={StaticResource DataPagerDisplayModeToButtonVisibilityConverter}, ConverterParameter=FirstLastNumeric_FirstLastPreviousNextNumeric_Numeric_PreviousNextNumeric}" />
                </ContentControl>
            </Grid>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DataPager.FixedNumericButtonCountButtonContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid HorizontalAlignment="{Binding HorizontalContentAlignment, Converter={StaticResource FixedNumericButtonCountHorizontalAlignmentConverter}}" DataContext="{Binding Path=(dxedp:DataPager.DataPager), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <dxedp:DataPagerButton
                Grid.Column="0"
                VerticalAlignment="Center"
                ButtonType="PageFirst"
                Command="{Binding FirstPageCommand}"
                DisplayMode="{Binding DisplayMode}"
                Visibility="{Binding DisplayMode, Converter={StaticResource DataPagerDisplayModeToButtonVisibilityConverter}, ConverterParameter=FirstLast_FirstLastNumeric_FirstLastPreviousNext_FirstLastPreviousNextNumeric}" />
            <dxedp:DataPagerButton
                Grid.Column="1"
                VerticalAlignment="Center"
                ButtonType="PagePrevious"
                Command="{Binding PreviousPageCommand}"
                DisplayMode="{Binding DisplayMode}"
                Visibility="{Binding DisplayMode, Converter={StaticResource DataPagerDisplayModeToButtonVisibilityConverter}, ConverterParameter=FirstLastPreviousNext_FirstLastPreviousNextNumeric_PreviousNextNumeric_PreviousNext}" />
            <dxedp:DataPagerButton
                Grid.Column="3"
                VerticalAlignment="Center"
                ButtonType="PageNext"
                Command="{Binding NextPageCommand}"
                DisplayMode="{Binding DisplayMode}"
                Visibility="{Binding DisplayMode, Converter={StaticResource DataPagerDisplayModeToButtonVisibilityConverter}, ConverterParameter=FirstLastPreviousNext_FirstLastPreviousNextNumeric_PreviousNextNumeric_PreviousNext}" />
            <dxedp:DataPagerButton
                Grid.Column="4"
                VerticalAlignment="Center"
                ButtonType="PageLast"
                Command="{Binding LastPageCommand}"
                DisplayMode="{Binding DisplayMode}"
                Visibility="{Binding DisplayMode, Converter={StaticResource DataPagerDisplayModeToButtonVisibilityConverter}, ConverterParameter=FirstLast_FirstLastNumeric_FirstLastPreviousNext_FirstLastPreviousNextNumeric}" />
            <Grid Grid.Column="2">
                <ContentControl Template="{DynamicResource {dxt:LWKey DataPager.NumericButtonAreaBorderTemplate}}">

                    <dxedp:DataPagerNumericButtonContainer
                        x:Name="PART_NumButtonContainer"
                        HorizontalContentAlignment="{Binding HorizontalContentAlignment}"
                        AutoEllipsis="{Binding AutoEllipsis}"
                        ButtonCount="{Binding ActualNumericButtonCount}"
                        CurrentIndex="{Binding ActualPageIndex}"
                        FirstButtonPageNumber="{Binding ContainerFirstButtonPageNumber}"
                        PageCount="{Binding PageCount}"
                        SecondButtonPageNumber="{Binding ContainerSecondButtonPageNumber}"
                        Visibility="{Binding DisplayMode, Converter={StaticResource DataPagerDisplayModeToButtonVisibilityConverter}, ConverterParameter=FirstLastNumeric_FirstLastPreviousNextNumeric_Numeric_PreviousNextNumeric}" />
                </ContentControl>
            </Grid>
        </Grid>
    </ControlTemplate>

    <dx:BoolToObjectConverter x:Key="IsAutoNumericButtonCountToButtonContainerTemplateConverter" FalseValue="{DynamicResource {dxt:LWKey DataPager.FixedNumericButtonCountButtonContainerTemplate}}" TrueValue="{DynamicResource {dxt:LWKey DataPager.AutoNumericButtonCountButtonContainerTemplate}}" />

    <ControlTemplate x:Key="{dxt:LWKey DataPager.Template}" TargetType="{x:Type dxedp:DataPager}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <StackPanel
                Grid.Column="0"
                Margin="0,0,16,0"
                Orientation="Horizontal"
                Tag="1"
                Visibility="{Binding ShowTotalPageCount, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}">
                <TextBlock VerticalAlignment="Center" Text="{Binding Source={StaticResource localizer}, Converter={StaticResource DataPagerPageExtract}}" />
                <dxe:SpinEdit
                    Margin="4,0,4,0"
                    AllowRoundOutOfRangeValue="True"
                    EditValue="{Binding CurrentPageParams, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DataPagerPageIndexToPageNumberConverter}, Mode=TwoWay}"
                    IsFloatValue="False"
                    MaxValue="{Binding Path=PageCount, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DataPagerCurrentPageEditMaxValueConverter}}"
                    MinValue="{Binding Path=PageCount, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DataPagerCurrentPageEditMinValueConverter}}"
                    ShowEditorButtons="False"
                    ValidateOnTextInput="False" />
                <TextBlock VerticalAlignment="Center" Text="{Binding PageCount, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DataPagerPageCountToTitleConverter}}" />
            </StackPanel>
            <ContentControl
                Grid.Column="1"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Template="{DynamicResource {dxt:LWKey DataPager.ButtonAreaBorderTemplate}}">

                <dxedp:DataPagerButtonContainer x:Name="PART_ButtonContainer" dxedp:DataPager.DataPager="{Binding Path=(dxedp:DataPager.DataPager), RelativeSource={RelativeSource TemplatedParent}}" Template="{Binding Path=IsAutoNumericButtonCount, Converter={StaticResource IsAutoNumericButtonCountToButtonContainerTemplateConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
            </ContentControl>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DataPagerNumericButtonContainer.Template}" TargetType="{x:Type dxedp:DataPagerNumericButtonContainer}">
        <dxedp:DataPagerNumericButtonContainerPanel
            x:Name="PART_Panel"
            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
            dxedp:DataPagerNumericButtonContainer.NumericButtonContainer="{Binding Path=(dxedp:DataPagerNumericButtonContainer.NumericButtonContainer), RelativeSource={RelativeSource TemplatedParent}}"
            ButtonCount="{TemplateBinding ButtonCount}" />
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\DataPager.xaml-->

    <!--#region Editors\Themes\Generic\DateEdit.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey DateEdit.CalendarPopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid Background="{DynamicResource {dxt:LWKey DateEdit.PopupContentBackground}}">
            <dxepCalendar:DateEditCalendar dx:FocusHelper2.Focusable="False" SnapsToDevicePixels="True" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateEdit.PickerPopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid Background="{DynamicResource {dxt:LWKey DateEdit.PopupContentBackground}}">
            <dxe:DateTimePicker SnapsToDevicePixels="True" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateEdit.TimePickerPopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid Background="{DynamicResource {dxt:LWKey DateEdit.PopupContentBackground}}">
            <dxe:TimePicker />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.NavigatorPopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid Background="{DynamicResource {dxt:LWKey DateEdit.PopupContentBackground}}">
            <dxedn:DateNavigator IsMultiSelect="False">
                <dxedn:DateNavigator.StyleSettings>
                    <dxedn:DateNavigatorOutlookStyleSettings />
                </dxedn:DateNavigator.StyleSettings>
            </dxedn:DateNavigator>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateEdit.NavigatorWithTimePickerPopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <StackPanel Background="{DynamicResource {dxt:LWKey DateEdit.PopupContentBackground}}" Orientation="Horizontal">
            <dxedn:DateNavigator IsMultiSelect="False">
                <dxedn:DateNavigator.StyleSettings>
                    <dxedn:DateNavigatorOutlookStyleSettings />
                </dxedn:DateNavigator.StyleSettings>
            </dxedn:DateNavigator>
            <Grid Background="{Binding Path=Background, ElementName=PART_TimePicker}">
                <dxe:TimePicker x:Name="PART_TimePicker" VerticalAlignment="Bottom" />
            </Grid>
        </StackPanel>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\DateEdit.xaml-->

    <!--#region Editors\Themes\Generic\DateNavigator.xaml-->

    <DataTemplate x:Key="{dxt:LWKey DateNavigator.MonthCellTemplate}">
        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Path=Text}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey DateNavigator.YearCellTemplate}">
        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Path=Text}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey DateNavigator.YearsCellTemplate}">
        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Path=Text}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey DateNavigator.YearsRangeCellTemplate}">
        <TextBlock
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Text="{Binding Path=Text}"
            TextWrapping="WrapWithOverflow" />
    </DataTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.CalendarContentControlTemplate}" TargetType="{x:Type dxednControls:DateNavigatorCalendarContentControl}">
        <dx:DXBorder Margin="{TemplateBinding Padding}">
            <ItemsPresenter x:Name="PART_ItemsPresenter" />
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.CalendarContentControlMonthTemplate}" TargetType="{x:Type dxednControls:DateNavigatorCalendarContentControl}">
        <dx:DXBorder Margin="{TemplateBinding Padding}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <ItemsControl
                    x:Name="PART_WeekdayAbbreviationItemsControl"
                    Grid.Row="0"
                    Grid.Column="2"
                    HorizontalAlignment="Right"
                    ItemsSource="{TemplateBinding DayNames}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <dxednControls:DateNavigatorCalendarMonthLabelsPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Style="{DynamicResource {dxt:LWKey DateNavigator.WeekdayAbbreviationStyle}}" Text="{Binding}" />
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
                <ContentControl
                    Grid.Row="1"
                    Grid.Column="2"
                    Margin="0,0,0,5"
                    dx:FocusHelper2.Focusable="False"
                    Template="{DynamicResource {dxt:LWKey DateNavigator.MonthInfoDelimeter}}" />
                <ItemsControl
                    x:Name="PART_WeekNumbersItemsControl"
                    Grid.Row="2"
                    Grid.Column="0"
                    ItemsSource="{TemplateBinding WeekNumbers}"
                    Visibility="{Binding Path=(dxedn:DateNavigator.Navigator).ShowWeekNumbers, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisibilityConverter}}">
                    <dxmvvmi:Interaction.Behaviors>
                        <dxmvvm:EventToCommand Command="{Binding Path=WeekNumberClickCommand, RelativeSource={RelativeSource TemplatedParent}}" Event="MouseLeftButtonDown" PassEventArgsToCommand="True" />
                    </dxmvvmi:Interaction.Behaviors>
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <dxednControls:DateNavigatorCalendarMonthLabelsPanel Orientation="Vertical" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Style="{DynamicResource {dxt:LWKey DateNavigator.WeekNumberStyle}}" Text="{Binding}" />
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
                <ContentControl
                    Grid.Row="2"
                    Grid.Column="1"
                    dx:FocusHelper2.Focusable="False"
                    Template="{DynamicResource {dxt:LWKey DateNavigator.WeekNumberDelimeter}}"
                    Visibility="{Binding Path=(dxedn:DateNavigator.Navigator).ShowWeekNumbers, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisibilityConverter}}" />
                <ItemsPresenter
                    x:Name="PART_ItemsPresenter"
                    Grid.Row="2"
                    Grid.Column="2"
                    HorizontalAlignment="Right" />
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.CalendarControlTemplate}" TargetType="{x:Type dxednControls:DateNavigatorCalendarControl}">
        <Grid Margin="{TemplateBinding Padding}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <dx:DXBorder
                x:Name="PART_HeaderBorder"
                Grid.Row="0"
                Margin="0,0,0,4"
                Style="{DynamicResource {dxt:LWKey DateNavigator.OutlookHeaderStyle}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <RepeatButton
                        x:Name="PART_PrevButton"
                        Grid.Row="0"
                        Grid.Column="0"
                        Command="{Binding Path=ArrowLeftCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{DynamicResource {dxt:LWKey DateNavigator.LeftArrowStyle}}"
                        Visibility="Collapsed">
                        &lt;
                    </RepeatButton>
                    <Grid x:Name="PART_Header" Grid.Row="0" Grid.Column="1">
                        <TextBlock x:Name="PART_HeaderText" Style="{DynamicResource {dxt:LWKey DateNavigator.CalendarCurrentDateStyle}}" Text="{TemplateBinding CurrentDateText}" />
                        <Button
                            x:Name="PART_HeaderButton"
                            dx:FocusHelper2.Focusable="False"
                            Command="{Binding Path=HeaderClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                            Content="{TemplateBinding CurrentDateText}"
                            Style="{DynamicResource {dxt:LWKey DateNavigator.CurrentDateButtonStyle}}"
                            Visibility="Collapsed" />
                    </Grid>
                    <RepeatButton
                        x:Name="PART_NextButton"
                        Grid.Row="0"
                        Grid.Column="2"
                        Command="{Binding Path=ArrowRightCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{DynamicResource {dxt:LWKey DateNavigator.RightArrowStyle}}"
                        Visibility="Collapsed">
                        &gt;
                    </RepeatButton>
                </Grid>
            </dx:DXBorder>
            <dx:DXBorder Grid.Row="1" Background="{TemplateBinding Background}">
                <dxednControls:DateNavigatorCalendarContentControl
                    x:Name="PART_CalendarContent"
                    DateTime="{TemplateBinding DateTime}"
                    FirstDayOfWeek="{TemplateBinding FirstDayOfWeek}"
                    FirstItemOffset="{TemplateBinding SkipItems}"
                    ItemsSource="{TemplateBinding Cells}"
                    State="{TemplateBinding State}" />
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=HeaderType, RelativeSource={RelativeSource Self}}" Value="First" />
                    <Condition Binding="{Binding Path=(dxedn:DateNavigator.Navigator).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Outlook" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_PrevButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=HeaderType, RelativeSource={RelativeSource Self}}" Value="Both" />
                    <Condition Binding="{Binding Path=(dxedn:DateNavigator.Navigator).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Outlook" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_PrevButton" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_NextButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=HeaderType, RelativeSource={RelativeSource Self}}" Value="Last" />
                    <Condition Binding="{Binding Path=(dxedn:DateNavigator.Navigator).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Outlook" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_NextButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxedn:DateNavigator.Navigator).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Outlook">
                <Setter TargetName="PART_HeaderText" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_HeaderButton" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxedn:DateNavigator.Navigator).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Classic">
                <Setter TargetName="PART_HeaderBorder" Property="Background" Value="Transparent" />
            </DataTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="PART_Header" Property="Margin" Value="0,5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.CalendarCellButtonTemplate}" TargetType="{x:Type dxednControls:DateNavigatorCellButton}">
        <Grid Opacity="{Binding Path=Appearance.Opacity, RelativeSource={RelativeSource TemplatedParent}}">
            <dx:DXBorder
                x:Name="PART_Border"
                Background="{Binding Path=Appearance.Background, RelativeSource={RelativeSource TemplatedParent}}"
                BorderBrush="{Binding Path=Appearance.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                BorderThickness="{Binding Path=Appearance.BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                CornerRadius="{DynamicResource {dxt:LWKey DateNavigator.CellButtonCornerRadius}}" />
            <ContentPresenter
                x:Name="PART_Content"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                RecognizesAccessKey="True"
                TextBlock.FontWeight="{Binding Path=Appearance.FontWeight, RelativeSource={RelativeSource TemplatedParent}}"
                TextBlock.Foreground="{Binding Path=Appearance.Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.NewCalendarTemplate}" TargetType="{x:Type dxedn:DateNavigator}">
        <Grid Background="{TemplateBinding Background}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <dx:DXBorder x:Name="PART_Header" Style="{DynamicResource {dxt:LWKey DateNavigator.HeaderStyle}}">
                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <RepeatButton
                        x:Name="PART_ArrowLeft"
                        Grid.Column="0"
                        HorizontalAlignment="Left"
                        dx:FocusHelper2.Focusable="False"
                        Content="&lt;"
                        Style="{DynamicResource {dxt:LWKey DateNavigator.LeftArrowStyle}}" />
                    <Button
                        x:Name="PART_CurrentDateButton"
                        Grid.Column="1"
                        dx:FocusHelper2.Focusable="False"
                        Content="{TemplateBinding CurrentDateText}"
                        Style="{DynamicResource {dxt:LWKey DateNavigator.CurrentDateButtonStyle}}" />
                    <RepeatButton
                        x:Name="PART_ArrowRight"
                        Grid.Column="2"
                        HorizontalAlignment="Right"
                        dx:FocusHelper2.Focusable="False"
                        Content="&gt;"
                        Style="{DynamicResource {dxt:LWKey DateNavigator.RightArrowStyle}}" />
                </Grid>
            </dx:DXBorder>
            <dxednControls:DateNavigatorPanel Grid.Row="1" VerticalAlignment="Top" Tag="NewCalendar">
                <Grid x:Name="PART_NavigatorContent">
                    <!--<dxei:DateNavigatorPanel x:Name="PART_Panel" ColumnCount="{TemplateBinding ColumnCount}" RowCount="{TemplateBinding RowCount}" />-->
                    <dxednControls:DateNavigatorContent
                        x:Name="PART_Content"
                        ColumnCount="{TemplateBinding ColumnCount}"
                        IsHitTestVisible="False"
                        RowCount="{TemplateBinding RowCount}" />
                    <!--<dxednControls:DateNavigatorContent Opacity="0" State="Year" x:Name="PART_ContentYear" ColumnCount="{TemplateBinding ColumnCount}" RowCount="{TemplateBinding RowCount}" IsHitTestVisible="False"/>
                    <dxednControls:DateNavigatorContent Opacity="0" State="Years" x:Name="PART_ContentYears" ColumnCount="{TemplateBinding ColumnCount}" RowCount="{TemplateBinding RowCount}" IsHitTestVisible="False"/>
                    <dxednControls:DateNavigatorContent Opacity="0" State="YearsRange" x:Name="PART_ContentYearsRange" ColumnCount="{TemplateBinding ColumnCount}" RowCount="{TemplateBinding RowCount}" IsHitTestVisible="False"/>-->
                </Grid>
                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                    <Button x:Name="PART_TodayButton" Style="{DynamicResource {dxt:LWKey DateNavigator.TodayButtonStyle}}" />
                    <Button x:Name="PART_ClearButton" Content="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=Clear, Converter={StaticResource EditorStringIdConverter}}" Style="{DynamicResource {dxt:LWKey DateNavigator.ClearButtonStyle}}" />
                </StackPanel>
            </dxednControls:DateNavigatorPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="DisplayMode" Value="Outlook">
                <Setter TargetName="PART_Header" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_NavigatorContent" Property="Opacity" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.Template}" TargetType="{x:Type dxedn:DateNavigator}">
        <Grid Background="{TemplateBinding Background}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <dx:DXBorder x:Name="PART_Header" Style="{DynamicResource {dxt:LWKey DateNavigator.HeaderStyle}}">
                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <RepeatButton
                        x:Name="PART_ArrowLeft"
                        Grid.Column="0"
                        HorizontalAlignment="Left"
                        dx:FocusHelper2.Focusable="False"
                        Content="&lt;"
                        Style="{DynamicResource {dxt:LWKey DateNavigator.LeftArrowStyle}}" />
                    <Button
                        x:Name="PART_CurrentDateButton"
                        Grid.Column="1"
                        dx:FocusHelper2.Focusable="False"
                        Content="{TemplateBinding CurrentDateText}"
                        Style="{DynamicResource {dxt:LWKey DateNavigator.CurrentDateButtonStyle}}" />
                    <RepeatButton
                        x:Name="PART_ArrowRight"
                        Grid.Column="2"
                        HorizontalAlignment="Right"
                        dx:FocusHelper2.Focusable="False"
                        Content="&gt;"
                        Style="{DynamicResource {dxt:LWKey DateNavigator.RightArrowStyle}}" />
                </Grid>
            </dx:DXBorder>
            <dxednControls:DateNavigatorPanel Grid.Row="1" VerticalAlignment="Top" Tag="OldCalendar">
                <Grid x:Name="PART_NavigatorContent">
                    <!--<dxei:DateNavigatorPanel x:Name="PART_Panel" ColumnCount="{TemplateBinding ColumnCount}" RowCount="{TemplateBinding RowCount}" />-->
                    <dxednControls:DateNavigatorContent
                        x:Name="PART_ContentMonth"
                        ColumnCount="{TemplateBinding ColumnCount}"
                        IsHitTestVisible="False"
                        Opacity="0"
                        RowCount="{TemplateBinding RowCount}"
                        State="Month" />
                    <dxednControls:DateNavigatorContent
                        x:Name="PART_ContentYear"
                        ColumnCount="{TemplateBinding ColumnCount}"
                        IsHitTestVisible="False"
                        Opacity="0"
                        RowCount="{TemplateBinding RowCount}"
                        State="Year" />
                    <dxednControls:DateNavigatorContent
                        x:Name="PART_ContentYears"
                        ColumnCount="{TemplateBinding ColumnCount}"
                        IsHitTestVisible="False"
                        Opacity="0"
                        RowCount="{TemplateBinding RowCount}"
                        State="Years" />
                    <dxednControls:DateNavigatorContent
                        x:Name="PART_ContentYearsRange"
                        ColumnCount="{TemplateBinding ColumnCount}"
                        IsHitTestVisible="False"
                        Opacity="0"
                        RowCount="{TemplateBinding RowCount}"
                        State="YearsRange" />
                </Grid>
                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                    <Button x:Name="PART_TodayButton" Style="{DynamicResource {dxt:LWKey DateNavigator.TodayButtonStyle}}" />
                    <Button x:Name="PART_ClearButton" Content="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=Clear, Converter={StaticResource EditorStringIdConverter}}" Style="{DynamicResource {dxt:LWKey DateNavigator.ClearButtonStyle}}" />
                </StackPanel>
            </dxednControls:DateNavigatorPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="DisplayMode" Value="Outlook">
                <Setter TargetName="PART_Header" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_NavigatorContent" Property="Opacity" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateNavigatorContent.Template}" TargetType="{x:Type dxednControls:DateNavigatorContent}">
        <dxednControls:DateNavigatorContentPanel x:Name="PART_Panel" ColumnCount="{TemplateBinding ColumnCount}" RowCount="{TemplateBinding RowCount}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.CalendarTemplate}" TargetType="{x:Type dxednControls:DateNavigatorCalendar}">
        <Grid Margin="{TemplateBinding Padding}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <dx:DXBorder
                x:Name="PART_HeaderBorder"
                Grid.Row="0"
                Margin="0,0,0,4"
                Style="{DynamicResource {dxt:LWKey DateNavigator.OutlookHeaderStyle}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <RepeatButton
                        x:Name="PART_PrevButton"
                        Grid.Row="0"
                        Grid.Column="0"
                        Command="{Binding Path=ArrowLeftCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{DynamicResource {dxt:LWKey DateNavigator.LeftArrowStyle}}"
                        Visibility="Collapsed">
                        &lt;
                    </RepeatButton>
                    <Grid x:Name="PART_Header" Grid.Row="0" Grid.Column="1">
                        <TextBlock x:Name="PART_HeaderText" Style="{DynamicResource {dxt:LWKey DateNavigator.CalendarCurrentDateStyle}}" Text="{TemplateBinding CurrentDateText}" />
                        <Button
                            x:Name="PART_HeaderButton"
                            dx:FocusHelper2.Focusable="False"
                            Command="{Binding Path=HeaderClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                            Content="{TemplateBinding CurrentDateText}"
                            Style="{DynamicResource {dxt:LWKey DateNavigator.CurrentDateButtonStyle}}"
                            Visibility="Collapsed" />
                    </Grid>
                    <RepeatButton
                        x:Name="PART_NextButton"
                        Grid.Row="0"
                        Grid.Column="2"
                        Command="{Binding Path=ArrowRightCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{DynamicResource {dxt:LWKey DateNavigator.RightArrowStyle}}"
                        Visibility="Collapsed">
                        &gt;
                    </RepeatButton>
                </Grid>
            </dx:DXBorder>
            <dx:DXBorder Grid.Row="1" Background="{TemplateBinding Background}">
                <Grid>
                    <Grid x:Name="PART_ContentPaddingPanel" />
                    <dxednControls:DateNavigatorCalendarContent x:Name="PART_Content" dx:FocusHelper2.Focusable="False" />
                </Grid>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=HeaderType, RelativeSource={RelativeSource Self}}" Value="First" />
                    <Condition Binding="{Binding Path=(dxedn:DateNavigator.Navigator).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Outlook" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_PrevButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=HeaderType, RelativeSource={RelativeSource Self}}" Value="Both" />
                    <Condition Binding="{Binding Path=(dxedn:DateNavigator.Navigator).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Outlook" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_PrevButton" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_NextButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=HeaderType, RelativeSource={RelativeSource Self}}" Value="Last" />
                    <Condition Binding="{Binding Path=(dxedn:DateNavigator.Navigator).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Outlook" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_NextButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(dxedn:DateNavigator.Navigator).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Outlook">
                <Setter TargetName="PART_HeaderText" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_HeaderButton" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxedn:DateNavigator.Navigator).DisplayMode, RelativeSource={RelativeSource Self}}" Value="Classic">
                <Setter TargetName="PART_HeaderBorder" Property="Background" Value="Transparent" />
            </DataTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="PART_Header" Property="Margin" Value="0,5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\DateNavigator.xaml-->

    <!--#region Editors\Themes\Generic\DateRangeControl.xaml-->

    <Style x:Key="CalendarButtonStyle" TargetType="{x:Type dxe:ImageButtonInfo}">
        <Setter Property="Glyph" Value="{dx:SvgImageSource Uri={dx:EditorsResource Images/DateEdit/Date.svg}}" />
        <Setter Property="GlyphStyle">
            <Setter.Value>
                <Style TargetType="{x:Type dx:DXImage}">
                    <Setter Property="dx:WpfSvgPalette.Palette" Value="{Binding Path=(TextElement.Foreground), Converter={StaticResource BrushToSvgPaletteConverter}, ConverterParameter=BlackColor, RelativeSource={RelativeSource Self}}" />
                    <Setter Property="Width" Value="16" />
                    <Setter Property="Height" Value="16" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="IsLeft" Value="True" />
        <Setter Property="Command" Value="{Binding Path=(dxe:PopupBaseEdit.PopupOwnerEdit).OpenPopupCommand, RelativeSource={RelativeSource Self}}" />
    </Style>

    <Style x:Key="EditDefaultStyle" TargetType="{x:Type dxe:ButtonEdit}">
        <Setter Property="ShowBorder" Value="False" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="MaskUseAsDisplayFormat" Value="True" />
        <Setter Property="MaskType" Value="DateOnlyAdvancingCaret" />
        <Setter Property="AllowNullInput" Value="True" />
        <Setter Property="AllowDefaultButton" Value="False" />
        <Setter Property="Mask" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).Mask, RelativeSource={RelativeSource Self}}" />
        <Setter Property="IsReadOnly" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).IsTextReadOnly, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).Foreground, RelativeSource={RelativeSource Self}}" />
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey DateRangeControl.EditTemplate}" TargetType="{x:Type dxe:EditorControl}">
        <Grid Background="{Binding Path=(dxe:DateRangeControl.DateRangeControl).Background, RelativeSource={RelativeSource Self}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="PART_StartColumn" Width="*" />
                <ColumnDefinition x:Name="PART_EndColumn" Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <dx:DXBorder
                x:Name="PART_StartBorder"
                Grid.Column="0"
                BorderBrush="{Binding Path=(dxe:DateRangeControl.DateRangeControl).BorderBrush, RelativeSource={RelativeSource Self}}"
                BorderThickness="{Binding Path=(dxe:DateRangeControl.DateRangeControl).BorderThickness, RelativeSource={RelativeSource Self}}"
                CornerRadius="{DynamicResource {dxt:LWKey DateRangeControl.StartEditorBorderCornerRadius}}"
                Background="{DynamicResource {dxt:LWKey DateRangeControl.EditorBackground}}">
                <Grid>
                    <dx:DXBorder
                        x:Name="PART_StartDecoratedLayer"
                        BorderThickness="{Binding ElementName=PART_StartBorder, Path=BorderThickness}"
                        CornerRadius="{Binding ElementName=PART_StartBorder, Path=CornerRadius}"
                        Height="10"
                        BorderBrush="Transparent"
                        VerticalAlignment="Bottom"
                        Margin="-1" />
                    <dxe:DateRangeButtonEdit
                        x:Name="PART_StartEdit"
                        TabIndex="0"
                        NullText="{Binding Path=(dxe:DateRangeControl.DateRangeControl).StartNullText, RelativeSource={RelativeSource Self}}"
                        EditValue="{Binding Path=(dxe:DateRangeControl.DateRangeControl).Start, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Self}}"
                        ValidationErrorTemplate="{Binding Path=(dxe:DateRangeControl.DateRangeControl).StartValidationErrorTemplate, RelativeSource={RelativeSource Self}}"
                        Style="{Binding Path=(dxe:DateRangeControl.DateRangeControl).StartEditStyle, RelativeSource={RelativeSource Self}}">
                        <dxe:ButtonEdit.Buttons>
                            <dxe:ImageButtonInfo x:Name="PART_EditStartButton" Style="{StaticResource CalendarButtonStyle}" />
                            <dxe:ButtonInfo x:Name="PART_StartClearButton" GlyphKind="Cancel" Command="{Binding Path=(dxe:DateRangeControl.DateRangeControl).ClearCommand, RelativeSource={RelativeSource Self}}" />
                        </dxe:ButtonEdit.Buttons>
                    </dxe:DateRangeButtonEdit>

                </Grid>
            </dx:DXBorder>
            <dx:DXBorder
                x:Name="PART_EndBorder"
                Grid.Column="1"
                Margin="-1,0,0,0"
                BorderBrush="{Binding Path=(dxe:DateRangeControl.DateRangeControl).BorderBrush, RelativeSource={RelativeSource Self}}"
                BorderThickness="{Binding Path=(dxe:DateRangeControl.DateRangeControl).BorderThickness, RelativeSource={RelativeSource Self}}"
                CornerRadius="{DynamicResource {dxt:LWKey DateRangeControl.EndEditorBorderCornerRadius}}"
                Background="{DynamicResource {dxt:LWKey DateRangeControl.EditorBackground}}">
                <Grid>
                    <dx:DXBorder
                        x:Name="PART_EndDecoratedLayer"
                        BorderThickness="{Binding ElementName=PART_EndBorder, Path=BorderThickness}"
                        CornerRadius="{Binding ElementName=PART_EndBorder, Path=CornerRadius}"
                        Height="10"
                        BorderBrush="Transparent"
                        VerticalAlignment="Bottom"
                        Margin="-1" />
                    <dxe:DateRangeButtonEdit
                        x:Name="PART_EndEdit"
                        TabIndex="1"
                        NullText="{Binding Path=(dxe:DateRangeControl.DateRangeControl).EndNullText, RelativeSource={RelativeSource Self}}"
                        EditValue="{Binding Path=(dxe:DateRangeControl.DateRangeControl).End, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Self}}"
                        ValidationErrorTemplate="{Binding Path=(dxe:DateRangeControl.DateRangeControl).EndValidationErrorTemplate, RelativeSource={RelativeSource Self}}"
                        Style="{Binding Path=(dxe:DateRangeControl.DateRangeControl).EndEditStyle, RelativeSource={RelativeSource Self}}">
                        <dxe:ButtonEdit.Buttons>
                            <dxe:ImageButtonInfo x:Name="PART_EditEndButton" Style="{StaticResource CalendarButtonStyle}" />
                            <dxe:ButtonInfo x:Name="PART_EndClearButton" GlyphKind="Cancel" Command="{Binding Path=(dxe:DateRangeControl.DateRangeControl).ClearEndCommand, RelativeSource={RelativeSource Self}}" />
                        </dxe:ButtonEdit.Buttons>
                    </dxe:DateRangeButtonEdit>

                </Grid>
            </dx:DXBorder>
            <dx:SimpleButton
                x:Name="PART_PopupButton"
                Grid.Column="2"
                IsTabStop="False"
                Margin="-1,0,0,0"
                Padding="5,1"
                CornerRadius="{DynamicResource {dxt:LWKey DateRangeControl.CalendarButtonCornerRadius}}"
                Command="{Binding Path=(dxe:PopupBaseEdit.PopupOwnerEdit).OpenPopupCommand, RelativeSource={RelativeSource Self}}">
                <Image Source="{dx:SvgImageSource Uri={dx:EditorsResource Images/DateEdit/Date.svg}}" Height="16" Width="16" />
            </dx:SimpleButton>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).ShowClearButtons, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_StartClearButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_EndClearButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).IsTextReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="PART_PopupButton" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_EditStartButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_EditEndButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).IsTextReadOnly, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_PopupButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_EditStartButton" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_EditEndButton" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).BorderBrush, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter TargetName="PART_StartBorder" Property="BorderBrush" Value="{DynamicResource {dxt:LWKey DateRangeControl.EditorBorderBrush}}" />
                <Setter TargetName="PART_StartDecoratedLayer" Property="BorderBrush" Value="{DynamicResource {dxt:LWKey DateRangeControl.EditorDecoratedBorderBrush}}" />
                <Setter TargetName="PART_EndBorder" Property="BorderBrush" Value="{DynamicResource {dxt:LWKey DateRangeControl.EditorBorderBrush}}" />
                <Setter TargetName="PART_EndDecoratedLayer" Property="BorderBrush" Value="{DynamicResource {dxt:LWKey DateRangeControl.EditorDecoratedBorderBrush}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).BorderThickness, RelativeSource={RelativeSource Self}}" Value="0">
                <Setter TargetName="PART_StartBorder" Property="BorderThickness" Value="{DynamicResource {dxt:LWKey DateRangeControl.EditorBorderThickness}}" />
                <Setter TargetName="PART_EndBorder" Property="BorderThickness" Value="{DynamicResource {dxt:LWKey DateRangeControl.EditorBorderThickness}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).State, RelativeSource={RelativeSource Self}}" Value="StartEditing">
                <Setter TargetName="PART_StartBorder" Property="BorderBrush" Value="{DynamicResource {dxt:LWKey DateRangeControl.CurrentEditorBorderBrush}}" />
                <Setter TargetName="PART_StartDecoratedLayer" Property="Background" Value="{DynamicResource {dxt:LWKey DateRangeControl.CurrentEditorDecoratedBorderBrush}}" />
                <Setter TargetName="PART_StartBorder" Property="BorderThickness" Value="{DynamicResource {dxt:LWKey DateRangeControl.CurrentEditorBorderThickness}}" />
                <Setter TargetName="PART_StartDecoratedLayer" Property="BorderThickness" Value="0" />
                <Setter TargetName="PART_StartBorder" Property="Panel.ZIndex" Value="999" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).State, RelativeSource={RelativeSource Self}}" Value="EndEditing">
                <Setter TargetName="PART_EndBorder" Property="BorderBrush" Value="{DynamicResource {dxt:LWKey DateRangeControl.CurrentEditorBorderBrush}}" />
                <Setter TargetName="PART_EndDecoratedLayer" Property="Background" Value="{DynamicResource {dxt:LWKey DateRangeControl.CurrentEditorDecoratedBorderBrush}}" />
                <Setter TargetName="PART_EndBorder" Property="BorderThickness" Value="{DynamicResource {dxt:LWKey DateRangeControl.CurrentEditorBorderThickness}}" />
                <Setter TargetName="PART_EndDecoratedLayer" Property="BorderThickness" Value="0" />
                <Setter TargetName="PART_EndBorder" Property="Panel.ZIndex" Value="999" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateRangeControl.PopupContentTemplate}" TargetType="{x:Type dxep:PopupContentControl}">
        <dxe:RangeDateNavigator
            x:Name="PART_DateNavigator"
            SelectionMode="Range"
            MinValue="{Binding Path=(dxe:DateRangeControl.DateRangeControl).MinValue, RelativeSource={RelativeSource Self}}"
            MaxValue="{Binding Path=(dxe:DateRangeControl.DateRangeControl).MaxValue, RelativeSource={RelativeSource Self}}"
            Style="{Binding Path=(dxe:DateRangeControl.DateRangeControl).DateNavigatorStyle, RelativeSource={RelativeSource Self}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="DateRangeControlPopupContentContainerTemplate" TargetType="{x:Type dxep:PopupContentContainer}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition x:Name="RowTopFooter" Height="Auto" />
                <RowDefinition x:Name="RowTopContent" Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition x:Name="RowBottomFooter" Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <dxe:ListBoxEdit
                x:Name="PART_PredefinedRangesItemsControl"
                Grid.Row="1"
                Grid.RowSpan="3"
                Grid.Column="0"
                ShowBorder="False"
                HorizontalContentAlignment="Center"
                AllowItemHighlighting="True"
                Background="{DynamicResource {dxt:LWKey DateRangeControl.PredefinedRangesPanelBackground}}"
                Margin="{DynamicResource {dxt:LWKey DateRangeControl.PredefinedRangesPanelMargin}}"
                ItemsSource="{Binding Path=(dxe:DateRangeControl.DateRangeControl).PredefinedRanges, RelativeSource={RelativeSource Self}}"
                ItemTemplate="{Binding Path=(dxe:DateRangeControl.DateRangeControl).PredefinedRangeTemplate, RelativeSource={RelativeSource Self}}" />
            <ContentControl
                x:Name="PART_Top"
                Grid.Row="1"
                Grid.Column="1"
                Style="{DynamicResource {dxt:LWKey PopupBaseEdit.PopupTopAreaStyle}}" />
            <ContentPresenter x:Name="Content" Grid.Row="2" Grid.Column="1" />
            <ContentControl
                x:Name="PART_Footer"
                Grid.Row="3"
                Grid.Column="1"
                Style="{DynamicResource {dxt:LWKey PopupBaseEdit.PopupBottomAreaStyle}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="DropOpposite" Value="True">
                <Setter TargetName="PART_Footer" Property="Grid.Row" Value="0" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).PredefinedRangeTemplate, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter TargetName="PART_PredefinedRangesItemsControl" Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type dxe:PredefinedDateRange}">
                            <TextBlock Text="{Binding Name}" MaxWidth="400" TextTrimming="CharacterEllipsis" Padding="{DynamicResource {dxt:LWKey DateRangeControl.PredefinedRangesItemPadding}}" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).ShowPredefinedRanges, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_PredefinedRangesItemsControl" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).PredefinedRanges.Count, RelativeSource={RelativeSource Self}}" Value="0">
                <Setter TargetName="PART_PredefinedRangesItemsControl" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateRangeControl.PopupBottomAreaTemplate}" TargetType="{x:Type ContentControl}">
        <ControlTemplate.Resources>
            <dx:EditorStringIdConverter x:Key="EditorStringIdConverter" />
        </ControlTemplate.Resources>
        <dx:UniformStackPanel
            Margin="15,0,15,0"
            ChildSpacing="0"
            Orientation="Horizontal"
            Width="Auto"
            HorizontalAlignment="Center">
            <dx:SimpleButton
                x:Name="PART_OkButton"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                dx:FocusHelper2.Focusable="False"
                IsDefault="True"
                Content="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=OK, Converter={StaticResource EditorStringIdConverter}}"
                Padding="{DynamicResource {dxt:LWKey DateRangeControl.FooterButtonsPadding}}"
                Margin="3,6,3,6"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).ClosePopupCommand, RelativeSource={RelativeSource TemplatedParent}}"
                CommandParameter="{x:Static dxe:PopupCloseMode.Normal}" />
            <dx:SimpleButton
                x:Name="PART_CancelButton"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                dx:FocusHelper2.Focusable="False"
                IsCancel="True"
                Content="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=Cancel, Converter={StaticResource EditorStringIdConverter}}"
                Padding="{DynamicResource {dxt:LWKey DateRangeControl.FooterButtonsPadding}}"
                Margin="3,6,3,6"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).ClosePopupCommand, RelativeSource={RelativeSource TemplatedParent}}"
                CommandParameter="{x:Static dxe:PopupCloseMode.Cancel}" />
        </dx:UniformStackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).PopupFooterButtons, RelativeSource={RelativeSource Self}}" Value="None">
                <Setter TargetName="PART_CancelButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_OkButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).PopupFooterButtons, RelativeSource={RelativeSource Self}}" Value="OkCancel">
                <Setter TargetName="PART_CancelButton" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_OkButton" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:DateRangeControl.DateRangeControl).PopupFooterButtons, RelativeSource={RelativeSource Self}}" Value="Close">
                <Setter TargetName="PART_CancelButton" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_OkButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateRangeControl.Template}" TargetType="{x:Type dxe:DateRangeControl}">
        <dxe:PopupBaseEdit
            x:Name="PART_Root"
            IsTabStop="False"
            ShowEditorButtons="False"
            FocusPopupOnOpen="True"
            ShowBorder="False"
            EditTemplate="{DynamicResource {dxt:LWKey DateRangeControl.EditTemplate}}"
            PopupFooterButtons="{TemplateBinding PopupFooterButtons}"
            PopupContentTemplate="{DynamicResource {dxt:LWKey DateRangeControl.PopupContentTemplate}}"
            PopupTopAreaTemplate="{TemplateBinding PopupTopAreaTemplate}"
            PopupBottomAreaTemplate="{TemplateBinding PopupBottomAreaTemplate}"
            PopupContentContainerTemplate="{StaticResource DateRangeControlPopupContentContainerTemplate}" />
        <ControlTemplate.Triggers>
            <Trigger Property="PopupBottomAreaTemplate" Value="{x:Null}">
                <Setter TargetName="PART_Root" Property="PopupBottomAreaTemplate" Value="{DynamicResource {dxt:LWKey DateRangeControl.PopupBottomAreaTemplate}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="DateRangeControl.DefaultStyleBase" TargetType="{x:Type dxe:DateRangeControl}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateRangeControl.Template}}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey DateRangeControl.Foreground}}" />
    </Style>

    <!--#endregion-->

    <!--#region Editors\Themes\Generic\DateTimePicker.xaml-->


    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.DateTimePickerItemTemplate}">
        <dxe:DateTimePickerSelector
            IsAnimated="{Binding Path=IsAnimated, Mode=TwoWay}"
            IsEnabled="{Binding Path=IsEnabled}"
            IsExpanded="{Binding Path=IsExpanded, Mode=TwoWay}"
            IsLooped="{Binding Path=IsLooped}"
            ItemsSource="{Binding Path=Items}"
            SelectedItem="{Binding Path=SelectedItem, Mode=TwoWay}"
            UseTransitions="{Binding Path=UseTransitions, Mode=TwoWay}"
            VisibleItemsCount="{Binding Path=VisibleItemsCount, Mode=TwoWay}" />
    </DataTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateTimePicker.ItemsControlTemplate}" TargetType="{x:Type dxe:DXItemsControl}">
        <dxe:DXScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True" VerticalScrollBarVisibility="Hidden">
            <dxe:LoopedPanel />
        </dxe:DXScrollViewer>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\DateTimePicker.xaml-->

    <!--#region Editors\Themes\Generic\ErrorPresenter.xaml-->
    <Style x:Key="ErrorImageStyle" TargetType="{x:Type Image}">
        <Setter Property="Width" Value="14" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Stretch" Value="Fill" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>



    <DataTemplate x:Key="{dxt:LWKey ErrorTypes.Information}">
        <dx:DXImage Source="{dx:ImageSelector Source='pack://application:,,,/DevExpress.Xpf.Core.v24.1;component/Editors/Images/info.png'}" Style="{StaticResource ErrorImageStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ErrorTypes.Warning}">
        <dx:DXImage Source="{dx:ImageSelector Source='pack://application:,,,/DevExpress.Xpf.Core.v24.1;component/Editors/Images/warning.png'}" Style="{StaticResource ErrorImageStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ErrorTypes.Critical}">
        <dx:DXImage Source="{dx:ImageSelector Source='pack://application:,,,/DevExpress.Xpf.Core.v24.1;component/Editors/Images/error.png'}" Style="{StaticResource ErrorImageStyle}" />
    </DataTemplate>
    <!--#endregion Editors\Themes\Generic\ErrorPresenter.xaml-->

    <!--#region Editors\Themes\Generic\ExpressionEditorControl.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey ExpressionEditorControl.Template}" TargetType="{x:Type dxee:ExpressionEditorControl}">
        <Grid>
            <Grid.Resources>
                <Thickness x:Key="ltrbMargin">3</Thickness>
                <Thickness x:Key="largeltrbMargin">9</Thickness>
                <Thickness x:Key="trMargin">0,8,8,0</Thickness>
                <Thickness x:Key="trbMargin">0,8,8,8</Thickness>
                <Thickness x:Key="rbMargin">0,0,8,8</Thickness>
                <Thickness x:Key="lrMargin">8,0,8,0</Thickness>
                <Thickness x:Key="lMargin">0,0,16,0</Thickness>
                <Thickness x:Key="smallButtonPadding">1,1,1,1</Thickness>
                <Thickness x:Key="smallButtonMargin">2,0,2,0</Thickness>
                <ItemsPanelTemplate x:Key="listBoxPanelTemplate">
                    <StackPanel />
                </ItemsPanelTemplate>
            </Grid.Resources>
            <Grid Margin="{StaticResource largeltrbMargin}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0.4*" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="0.6*" />
                </Grid.RowDefinitions>
                <dxe:TextEdit
                    x:Name="expressionTextEdit"
                    Grid.Row="0"
                    Margin="{StaticResource ltrbMargin}"
                    VerticalContentAlignment="Top"
                    AcceptsReturn="True" />
                <Grid Grid.Row="1" Margin="{StaticResource largeltrbMargin}" HorizontalAlignment="Center">
                    <RenderOptions.BitmapScalingMode>NearestNeighbor</RenderOptions.BitmapScalingMode>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <StackPanel Margin="{StaticResource lMargin}" Orientation="Horizontal">
                        <Button
                            Name="buttonPlus"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.PlusGlyph}}" />
                        <Button
                            Name="buttonMinus"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.MinusGlyph}}" />
                        <Button
                            Name="buttonMultiply"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.MultiplyGlyph}}" />
                        <Button
                            Name="buttonDivide"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.DivideGlyph}}" />
                        <Button
                            Name="buttonModulo"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.ModuloGlyph}}" />
                    </StackPanel>
                    <StackPanel Grid.Column="1" Margin="{StaticResource lMargin}" Orientation="Horizontal">
                        <Button
                            Name="wrapSelectionButton"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.WrapSelectionGlyph}}" />
                    </StackPanel>
                    <StackPanel Grid.Column="2" Margin="{StaticResource lMargin}" Orientation="Horizontal">
                        <Button
                            Name="buttonEqual"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.EqualGlyph}}" />
                        <Button
                            Name="buttonNotEqual"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.NotEqualGlyph}}" />
                        <Button
                            Name="buttonLess"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.LessGlyph}}" />
                        <Button
                            Name="buttonLessOrEqual"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.LessOrEqualGlyph}}" />
                        <Button
                            Name="buttonLargerOrEqual"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.LargerOrEqualGlyph}}" />
                        <Button
                            Name="buttonLarger"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.LargerGlyph}}" />
                    </StackPanel>
                    <StackPanel Grid.Column="3" Orientation="Horizontal">
                        <Button
                            Name="buttonAnd"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.AndGlyph}}" />
                        <Button
                            Name="buttonOr"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.OrGlyph}}" />
                        <Button
                            Name="buttonNot"
                            Margin="{StaticResource smallButtonMargin}"
                            Padding="{StaticResource smallButtonPadding}"
                            ContentTemplate="{DynamicResource {dxt:LWKey ExpressionEditorControl.NotGlyph}}" />
                    </StackPanel>
                </Grid>
                <Grid Grid.Row="2">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ListBox Name="listOfInputTypes" Margin="{StaticResource ltrbMargin}">
                        <ListBox.Style>
                            <x:Null />
                        </ListBox.Style>
                    </ListBox>
                    <Grid Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <dxe:ComboBoxEdit x:Name="functionsTypes" Margin="{StaticResource ltrbMargin}" IsTextEditable="False" />
                        <dx:DXListBox
                            x:Name="listOfInputParameters"
                            Grid.Row="1"
                            Margin="{StaticResource ltrbMargin}"
                            ItemsPanel="{StaticResource listBoxPanelTemplate}" />
                    </Grid>
                    <dxe:TextEdit
                        x:Name="descriptionEdit"
                        Grid.Column="2"
                        Margin="{StaticResource ltrbMargin}"
                        VerticalContentAlignment="Top"
                        IsReadOnly="true"
                        TextWrapping="Wrap" />
                </Grid>
            </Grid>
        </Grid>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\ExpressionEditorControl.xaml-->

    <!--#region Editors\Themes\Generic\FilterControl.xaml-->


    <DataTemplate x:Key="{dxt:LWKey FilterControl.ClauseNodeTemplate}">
        <dxeFiltering:FilterControlClauseNode SecondOperandsCount="{Binding SecondOperandsCount}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey FilterControl.GroupNodeTemplate}">
        <dxeFiltering:FilterControlGroupNode />
    </DataTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.OneElementsInSecondOperandTemplate}">
        <dxeFiltering:FilterControlEditor
            EditMode="{Binding Path=Content.Content.EditMode, RelativeSource={RelativeSource Self}}"
            Index="0"
            Node="{Binding}"
            Operator="{Binding Path=AdditionalOperands[0]}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.TwoElementsInSecondOperandTemplate}">
        <StackPanel Orientation="Horizontal">
            <dxeFiltering:FilterControlEditor
                EditMode="{Binding Path=Content.Content.EditMode, RelativeSource={RelativeSource Self}}"
                Index="0"
                Node="{Binding}"
                Operator="{Binding Path=AdditionalOperands[0]}" />
            <TextBlock
                Margin="0,3,3,3"
                VerticalAlignment="Center"
                Foreground="Green"
                Text="{Binding Source={x:Null}, ConverterParameter=FilterClauseBetweenAnd, Converter={StaticResource EditorStringIdConverter}}" />
            <dxeFiltering:FilterControlEditor
                EditMode="{Binding Path=Content.Content.EditMode, RelativeSource={RelativeSource Self}}"
                Index="1"
                Node="{Binding}"
                Operator="{Binding Path=AdditionalOperands[1]}" />
        </StackPanel>
    </ControlTemplate>
    <DataTemplate x:Key="{dxt:LWKey FilterControl.SomeValuesTemplate}">
        <StackPanel Orientation="Horizontal">
            <TextBlock
                x:Name="TextBlock"
                Margin="-3,3,3,3"
                VerticalAlignment="Center"
                Text=","
                Visibility="{Binding Path=(dx:PositionStackPanel.Position), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FilterControlFirstToCollapsedConverter}}" />
            <dxeFiltering:FilterControlEditor
                EditMode="{Binding Path=Content.Content.EditMode, RelativeSource={RelativeSource Self}}"
                Index="{Binding Path=(dx:PositionStackPanel.Index), RelativeSource={RelativeSource TemplatedParent}}"
                Node="{Binding Path=Tag, RelativeSource={RelativeSource TemplatedParent}}"
                Operator="{Binding}" />
        </StackPanel>
    </DataTemplate>
    <ItemsPanelTemplate x:Key="{dxt:LWKey FilterControl.SeveralElementsItemPanelTemplate}">
        <dx:PositionStackPanel Orientation="Horizontal" />
    </ItemsPanelTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.AddButtonTemplate}">
        <Grid x:Name="Root" Background="Transparent">
            <Grid
                Width="11"
                Height="11"
                Margin="0,3,0,2"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">
                <Image Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.FilterControl.add-normal.png, Converter={StaticResource EmbeddedResourceImageConverter}}" />
                <Image Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.FilterControl.add.png, Converter={StaticResource EmbeddedResourceImageConverter}}" Visibility="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="Root" Property="MinWidth" Value="44" />
                <Setter TargetName="Root" Property="MinHeight" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.GroupCommandsButtonTemplate}">
        <Grid x:Name="Root" Background="Transparent">
            <Grid
                Width="11"
                Height="11"
                Margin="0,3,0,2"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">
                <Image Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.FilterControl.ellipse-normal.png, Converter={StaticResource EmbeddedResourceImageConverter}}" />
                <Image Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.FilterControl.ellipse.png, Converter={StaticResource EmbeddedResourceImageConverter}}" Visibility="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="Root" Property="MinWidth" Value="44" />
                <Setter TargetName="Root" Property="MinHeight" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.DeleteNodeButtonTemplate}">
        <Grid x:Name="Root" Background="Transparent">
            <Grid
                Width="11"
                Height="11"
                Margin="0,3,0,2"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">
                <Image Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.FilterControl.delete-normal.png, Converter={StaticResource EmbeddedResourceImageConverter}}" />
                <Image Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.FilterControl.delete.png, Converter={StaticResource EmbeddedResourceImageConverter}}" Visibility="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="Root" Property="MinWidth" Value="44" />
                <Setter TargetName="Root" Property="MinHeight" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey FilterControl.FocusVisualStyle}" TargetType="Control">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <Rectangle
                        Margin="-1"
                        Stroke="Black"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate x:Key="{dxt:LWKey FilterControl.ItemsControlItemTemplate}">
        <dxec:ContentControlSelector Content="{Binding}">
            <dxec:ContentControlSelector.Resources>
                <DataTemplate x:Key="ClauseNode">
                    <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {dxt:LWKey FilterControl.ClauseNodeTemplate}}" />
                </DataTemplate>
                <DataTemplate x:Key="GroupNode">
                    <ContentControl>
                        <StackPanel>
                            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {dxt:LWKey FilterControl.GroupNodeTemplate}}" />
                            <StackPanel Margin="16,0,0,0" Orientation="Horizontal">
                                <ContentControl>
                                    <ItemsControl ItemTemplate="{DynamicResource {dxt:LWKey FilterControl.ItemsControlItemTemplate}}" ItemsSource="{Binding Path=SubNodes}" />
                                </ContentControl>
                            </StackPanel>
                        </StackPanel>
                    </ContentControl>
                </DataTemplate>
            </dxec:ContentControlSelector.Resources>
        </dxec:ContentControlSelector>
    </DataTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.FilterControlGroupNodeTemplate}">
        <StackPanel Orientation="Horizontal">
            <ContentControl
                x:Name="PART_TypeControl"
                Margin="0,3,3,3"
                Cursor="Hand"
                Template="{DynamicResource {dxt:LWKey FilterControl.FilterControlGroupTypeButtonTemplate}}" />
            <Button
                x:Name="PART_GroupCommandsButton"
                Margin="0,3,3,3"
                VerticalAlignment="Center"
                dx:FocusHelper2.Focusable="False"
                Command="{Binding PressCommandButtonCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Cursor="Hand"
                Template="{DynamicResource {dxt:LWKey FilterControl.GroupCommandsButtonTemplate}}"
                Visibility="{Binding Path=Owner.ShowGroupCommandsIcon, Converter={StaticResource BoolToVisibilityConverter}}">
                <ToolTipService.ToolTip>
                    <ToolTip Visibility="{Binding Owner.ShowToolTips, Converter={StaticResource BoolToVisibilityConverter}}">
                        <TextBlock Text="{Binding Source={x:Null}, ConverterParameter=FilterToolTipNodeAction, Converter={StaticResource EditorStringIdConverter}}" />
                    </ToolTip>
                </ToolTipService.ToolTip>
            </Button>
            <Button
                x:Name="PART_AddButton"
                Margin="0,3,3,3"
                VerticalAlignment="Center"
                dx:FocusHelper2.Focusable="False"
                Cursor="Hand"
                Template="{DynamicResource {dxt:LWKey FilterControl.AddButtonTemplate}}">
                <ToolTipService.ToolTip>
                    <ToolTip Visibility="{Binding Owner.ShowToolTips, Converter={StaticResource BoolToVisibilityConverter}}">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Margin="0,0,0,4" FontWeight="Bold" Text="{Binding Source={x:Null}, ConverterParameter=FilterToolTipKeysAdd, Converter={StaticResource EditorStringIdConverter}}" />
                            <TextBlock Text="{Binding Source={x:Null}, ConverterParameter=FilterToolTipNodeAdd, Converter={StaticResource EditorStringIdConverter}}" />
                        </StackPanel>
                    </ToolTip>
                </ToolTipService.ToolTip>
            </Button>
        </StackPanel>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.SeveralElementsInSecondOperandTemplate}">
        <StackPanel Orientation="Horizontal">
            <TextBlock
                Margin="0,3,0,3"
                VerticalAlignment="Center"
                Text="("
                Visibility="{Binding Path=AdditionalOperands.Count, Converter={StaticResource AdditionalOperandsCountToVisibilityConverter}}" />
            <dxeFiltering:AdditionalOperandsItemsControl ItemTemplate="{DynamicResource {dxt:LWKey FilterControl.SomeValuesTemplate}}" ItemsPanel="{DynamicResource {dxt:LWKey FilterControl.SeveralElementsItemPanelTemplate}}" ItemsSource="{Binding Path=AdditionalOperands}" />
            <TextBlock
                Margin="-3,3,3,3"
                VerticalAlignment="Center"
                Text=")"
                Visibility="{Binding Path=AdditionalOperands.Count, Converter={StaticResource AdditionalOperandsCountToVisibilityConverter}}" />
            <Button
                x:Name="PART_AddNewOperandButton"
                Margin="0,3,3,3"
                VerticalAlignment="Center"
                dx:FocusHelper2.Focusable="False"
                Command="{TemplateBinding Tag}"
                Cursor="Hand"
                Template="{DynamicResource {dxt:LWKey FilterControl.AddButtonTemplate}}">
                <ToolTipService.ToolTip>
                    <ToolTip Visibility="{Binding Owner.ShowToolTips, Converter={StaticResource BoolToVisibilityConverter}}">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Margin="0,0,0,4" FontWeight="Bold" Text="{Binding Source={x:Null}, ConverterParameter=FilterToolTipKeysAdd, Converter={StaticResource EditorStringIdConverter}}" />
                            <TextBlock Text="{Binding Source={x:Null}, ConverterParameter=FilterToolTipElementAdd, Converter={StaticResource EditorStringIdConverter}}" />
                        </StackPanel>
                    </ToolTip>
                </ToolTipService.ToolTip>
            </Button>
        </StackPanel>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.FilterControlClauseNodeTemplate}">
        <StackPanel Orientation="Horizontal">
            <ContentControl
                x:Name="PART_FirstOperand"
                Margin="0,1,3,1"
                Cursor="Hand"
                Template="{DynamicResource {dxt:LWKey FilterControl.FilterControlFirstOperandButtonTemplate}}" />
            <ContentControl
                x:Name="PART_Operation"
                Margin="0,1,3,1"
                Cursor="Hand"
                Template="{DynamicResource {dxt:LWKey FilterControl.FilterControlClauseOperationButtonTemplate}}" />
            <ContentControl x:Name="SecondOperandsControl" Tag="{Binding AddOperandNodeCommand, RelativeSource={RelativeSource TemplatedParent}}" />
            <Button
                x:Name="PART_Delete"
                Margin="0,3,0,3"
                VerticalAlignment="Center"
                dx:FocusHelper2.Focusable="False"
                Cursor="Hand"
                Template="{DynamicResource {dxt:LWKey FilterControl.DeleteNodeButtonTemplate}}">
                <ToolTipService.ToolTip>
                    <ToolTip Visibility="{Binding Owner.ShowToolTips, Converter={StaticResource BoolToVisibilityConverter}}">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Margin="0,0,0,4" FontWeight="Bold" Text="{Binding Source={x:Null}, ConverterParameter=FilterToolTipKeysRemove, Converter={StaticResource EditorStringIdConverter}}" />
                            <TextBlock Text="{Binding Source={x:Null}, ConverterParameter=FilterToolTipNodeRemove, Converter={StaticResource EditorStringIdConverter}}" />
                        </StackPanel>
                    </ToolTip>
                </ToolTipService.ToolTip>
            </Button>
        </StackPanel>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.EmptyValueTemplate}">
        <TextBlock
            VerticalAlignment="Center"
            Foreground="Gray"
            Style="{DynamicResource {dxt:LWKey FilterControl.InactiveTextBlockStyle}}"
            Text="{Binding Source={x:Null}, ConverterParameter=FilterEmptyValueText, Converter={StaticResource EditorStringIdConverter}}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.EmptyStringTemplate}">
        <TextBlock VerticalAlignment="Center" Style="{DynamicResource {dxt:LWKey FilterControl.InactiveTextBlockStyle}}" Text="''" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.ValueTemplate}">
        <TextBlock x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey FilterControl.InactiveTextBlockStyle}}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.BooleanValueTemplate}">
        <TextBlock VerticalAlignment="Center" Style="{DynamicResource {dxt:LWKey FilterControl.InactiveTextBlockStyle}}">
            <TextBlock.Text>
                <Binding Converter="{StaticResource FilterControlBoolToStringConverter}" Path="Value" />

            </TextBlock.Text>
        </TextBlock>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\FilterControl.xaml-->

    <!--#region Editors\Themes\Generic\Flyout.xaml-->
    <Style x:Key="FlyoutBaseStyle" TargetType="dxef:FlyoutControl">
        <Setter Property="StaysOpen" Value="False" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey FlyoutControl.Padding}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey FlyoutControl.BorderThickness}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey FlyoutControl.BorderBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey FlyoutControl.Foreground}}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey FlyoutControl.Background}}" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxef:FlyoutControl">
                    <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Absolute">
                        <Popup.Resources>
                            <dxefi:IndicatorDirectionToVisibilityConverter x:Key="IndicatorDirectionToVisibilityConverter" />
                        </Popup.Resources>
                        <Canvas x:Name="PART_Canvas" Background="Transparent">
                            <ContentControl x:Name="PART_cc" Focusable="False">
                                <Grid x:Name="PART_RenderGrid" FlowDirection="LeftToRight">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <dx:DXBorder
                                        x:Name="PART_Container"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Width="{TemplateBinding Width}"
                                        Height="{TemplateBinding Height}"
                                        MinWidth="{TemplateBinding MinWidth}"
                                        MinHeight="{TemplateBinding MinHeight}"
                                        MaxWidth="{TemplateBinding MaxWidth}"
                                        MaxHeight="{TemplateBinding MaxHeight}"
                                        HorizontalAlignment="Stretch"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{DynamicResource {dxt:LWKey FlyoutControl.CornerRadius}}"
                                        Effect="{TemplateBinding Effect}"
                                        EnableDPICorrection="False">
                                        <dxef:FlyoutContainerControl
                                            Margin="{TemplateBinding Padding}"
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            FlowDirection="{TemplateBinding FlowDirection}"
                                            Focusable="False"
                                            Style="{TemplateBinding ContainerStyle}" />
                                    </dx:DXBorder>
                                    <Grid
                                        x:Name="LeftIndicator"
                                        Grid.RowSpan="3"
                                        Grid.Column="0"
                                        Margin="0,4"
                                        VerticalAlignment="Top"
                                        Visibility="{Binding Path=IndicatorDirection, Converter={StaticResource IndicatorDirectionToVisibilityConverter}, ConverterParameter=Left, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Data="F1 M 13,0L 0,13L 13,26L 13,0 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Data="F1 M 13,0L 0,13L 13,26L 13,0 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Margin="1,0,-1,0"
                                            Data="F1 M 13,0L 0,13L 13,26L 13,0 Z "
                                            Fill="{TemplateBinding Background}"
                                            Stretch="Fill" />
                                    </Grid>
                                    <Grid
                                        x:Name="TopIndicator"
                                        Grid.Row="0"
                                        Grid.ColumnSpan="3"
                                        Margin="4,0"
                                        HorizontalAlignment="Left"
                                        Visibility="{Binding Path=IndicatorDirection, Converter={StaticResource IndicatorDirectionToVisibilityConverter}, ConverterParameter=Top, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Data="F1 M 26,13L 13,0L 1.23978e-005,13L 26,13 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Data="F1 M 26,13L 13,0L 1.23978e-005,13L 26,13 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Margin="0,1,0,-1"
                                            Data="F1 M 26,13L 13,0L 1.23978e-005,13L 26,13 Z "
                                            Fill="{TemplateBinding Background}"
                                            Stretch="Fill" />
                                    </Grid>
                                    <Grid
                                        x:Name="RightIndicator"
                                        Grid.RowSpan="3"
                                        Grid.Column="2"
                                        Margin="0,4"
                                        VerticalAlignment="Top"
                                        Visibility="{Binding Path=IndicatorDirection, Converter={StaticResource IndicatorDirectionToVisibilityConverter}, ConverterParameter=Right, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Data="F1 M 1.90735e-006,26.0001L 13,13.0001L 1.90735e-006,6.10352e-005L 1.90735e-006,26.0001 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Data="F1 M 1.90735e-006,26.0001L 13,13.0001L 1.90735e-006,6.10352e-005L 1.90735e-006,26.0001 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Margin="-1,0,1,0"
                                            Data="F1 M 1.90735e-006,26.0001L 13,13.0001L 1.90735e-006,6.10352e-005L 1.90735e-006,26.0001 Z "
                                            Fill="{TemplateBinding Background}"
                                            Stretch="Fill" />
                                    </Grid>
                                    <Grid
                                        x:Name="BottomIndicator"
                                        Grid.Row="2"
                                        Grid.ColumnSpan="3"
                                        Margin="4,0"
                                        HorizontalAlignment="Left"
                                        Visibility="{Binding Path=IndicatorDirection, Converter={StaticResource IndicatorDirectionToVisibilityConverter}, ConverterParameter=Bottom, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Data="F1 M -1.04904e-005,0L 13,13L 26,0L -1.04904e-005,0 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Data="F1 M -1.04904e-005,0L 13,13L 26,0L -1.04904e-005,0 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Margin="0,-1,0,1"
                                            Data="F1 M -1.04904e-005,0L 13,13L 26,0L -1.04904e-005,0 Z "
                                            Fill="{TemplateBinding Background}"
                                            Stretch="Fill" />
                                    </Grid>
                                </Grid>
                            </ContentControl>
                        </Canvas>
                    </Popup>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion Editors\Themes\Generic\Flyout.xaml-->

    <!--#region Editors\Themes\Generic\FontEdit.xaml-->
    <DataTemplate x:Key="{dxt:LWKey FontEdit.ItemTemplate}">
        <TextBlock
            x:Name="PART_FontContainer"
            MinHeight="16"
            VerticalAlignment="Center"
            FontFamily="{Binding Converter={dxe:FontFamilyConverter}}"
            Text="{Binding}" />
    </DataTemplate>
    <!--#endregion Editors\Themes\Generic\FontEdit.xaml-->

    <!--#region Editors\Themes\Generic\GradientMultiSlider.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey GradientMultiSlider.Template}" TargetType="{x:Type dxei:GradientMultiSlider}">
        <Grid Margin="{TemplateBinding Padding}" Background="Transparent">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <dxei:TransparentBrushRectangle
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Height="22"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Top"
                dx:FocusHelper2.Focusable="False"
                BlockHeight="4"
                BlockWidth="4" />
            <Rectangle
                x:Name="PART_GradientRect"
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Height="22"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Top">
                <Rectangle.Fill>
                    <LinearGradientBrush GradientStops="{Binding Path=Brush.GradientStops, RelativeSource={RelativeSource TemplatedParent}}" StartPoint="0,0.5" EndPoint="1,0.5" />
                </Rectangle.Fill>
            </Rectangle>
            <ItemsControl
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Height="25"
                Margin="0,15,0,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Top"
                ItemsSource="{TemplateBinding Thumbs}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
            <StackPanel Grid.Row="1" Grid.Column="0" Orientation="Horizontal">
                <Button Command="{Binding Path=FlipThumbsCommand, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" Style="{DynamicResource {dxt:LWKey GradientMultiSlider.FlipThumbsButtonStyle}}" />
            </StackPanel>
            <dxei:GradientMultiSliderThumbSelector
                Grid.Row="1"
                Grid.Column="1"
                Height="25"
                SelectedThumb="{Binding Path=SelectedThumb, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey GradientMultiSlider.ThumbSelectorTemplate}" TargetType="{x:Type dxei:GradientMultiSliderThumbSelector}">
        <StackPanel Height="25" Orientation="Horizontal">
            <Button
                x:Name="PART_PreviousButton"
                Command="{Binding Path=PreviousThumbCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Style="{DynamicResource {dxt:LWKey GradientMultiSlider.PreviousThumbButtonStyle}}" />
            <ContentPresenter Content="{TemplateBinding SelectedThumb}" Style="{DynamicResource {dxt:LWKey GradientMultiSlider.SelectedThumbContentPresenterStyle}}" />
            <Button
                x:Name="PART_NextButton"
                Command="{Binding Path=NextThumbCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Style="{DynamicResource {dxt:LWKey GradientMultiSlider.NextThumbButtonStyle}}" />
            <dxe:SpinEdit
                Width="40"
                Margin="10,0,0,0"
                AllowDefaultButton="False"
                AllowNullInput="True"
                AllowRoundOutOfRangeValue="True"
                DisplayFormatString="n"
                EditValue="{Binding Path=SelectedThumb.Offset, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                EditValueType="{x:Type sys:Double}"
                Increment="0.01"
                IsFloatValue="True"
                Mask="p0"
                MaskUseAsDisplayFormat="True"
                MaxValue="1"
                MinValue="0" />
        </StackPanel>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\GradientMultiSlider.xaml-->

    <!--#region Editors\Themes\Generic\ImageEdit.xaml-->
    <sys:Double x:Key="{dxt:LWKey CameraControl.SettingsMinWidth}">280</sys:Double>

    <ControlTemplate x:Key="{dxt:LWKey CameraControl.TakePictureControlTemplate}" TargetType="{x:Type dxei:TakePictureControl}">
        <Grid Margin="15">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <dxe:CameraControl x:Name="PART_Camera" Visibility="{Binding HasCapture, Converter={StaticResource inverseBoolToVisibilityConverter}}" />
            <Image Source="{Binding Image}" Visibility="{Binding HasCapture, Converter={StaticResource boolToVisibilityConverter}}" />
            <StackPanel
                Grid.Row="1"
                Margin="0,10,0,0"
                HorizontalAlignment="Right"
                Orientation="Horizontal">
                <Button
                    Width="100"
                    Margin="0,0,10,0"
                    Command="{Binding CaptureCommand}"
                    Content="{Binding CaptureCaption}" />
                <Button
                    Width="75"
                    Margin="0,0,10,0"
                    Command="{Binding SaveCommand}"
                    Content="{Binding SaveCaption}"
                    IsEnabled="{Binding HasCapture}" />
                <Button Width="75" Command="{Binding CancelCommand}" Content="{Binding CancelCaption}" />
            </StackPanel>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey CameraControl.Template}" TargetType="{x:Type dxe:CameraControl}">
        <ContentControl
            x:Name="contentControl"
            dx:FocusHelper2.Focusable="False"
            Background="{TemplateBinding Background}"
            Template="{TemplateBinding BorderTemplate}">
            <Grid Background="Transparent">
                <Image
                    x:Name="PART_Image"
                    Source="{TemplateBinding NativeImageSource}"
                    Stretch="{TemplateBinding Stretch}"
                    StretchDirection="{TemplateBinding StretchDirection}" />
                <ToggleButton
                    x:Name="button"
                    Opacity="0"
                    Style="{DynamicResource {dxt:LWKey CameraControl.SettingsButtonStyle}}"
                    Visibility="{Binding PropertyProvider.IsSettingsButtonVisible, Converter={StaticResource boolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                <dxef:FlyoutControl
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    AllowMoveAnimation="False"
                    IsOpen="{Binding ElementName=button, Path=IsChecked, Mode=TwoWay}"
                    PlacementTarget="{Binding ElementName=contentControl}">
                    <dxef:FlyoutControl.Settings>
                        <dxef:FlyoutSettings Placement="Right" />
                    </dxef:FlyoutControl.Settings>
                    <ContentPresenter Content="{Binding Path=PropertyProvider.Settings, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{DynamicResource {dxt:LWKey CameraControl.CameraSettingsTemplate}}" />
                </dxef:FlyoutControl>
                <StackPanel VerticalAlignment="Center" Orientation="Vertical" Visibility="{Binding PropertyProvider.IsBusy, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">
                    <Image
                        Width="14"
                        Height="14"
                        HorizontalAlignment="Center"
                        Source="{dx:ImageSelector Source='pack://application:,,,/DevExpress.Xpf.Core.v24.1;component/Editors/Images/error.png'}"
                        Stretch="Fill" />
                    <TextBlock HorizontalAlignment="Center" Text="{Binding PropertyProvider.ErrorCaption, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
                    <Button
                        Margin="0,5,0,0"
                        HorizontalAlignment="Center"
                        Command="{Binding PropertyProvider.RefreshCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        Content="{Binding PropertyProvider.RefreshButtonCaption, RelativeSource={RelativeSource TemplatedParent}}" />
                </StackPanel>
                <StackPanel VerticalAlignment="Center" Orientation="Vertical" Visibility="{Binding PropertyProvider.HasDevices, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource inverseBoolToVisibilityConverter}}">
                    <Image
                        Width="14"
                        Height="14"
                        HorizontalAlignment="Center"
                        Source="{dx:ImageSelector Source='pack://application:,,,/DevExpress.Xpf.Core.v24.1;component/Editors/Images/error.png'}"
                        Stretch="Fill" />
                    <TextBlock HorizontalAlignment="Center" Text="{Binding PropertyProvider.NoDevicesErrorCaption, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
                    <Button
                        Margin="0,5,0,0"
                        HorizontalAlignment="Center"
                        Command="{Binding PropertyProvider.RefreshCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        Content="{Binding PropertyProvider.RefreshButtonCaption, RelativeSource={RelativeSource TemplatedParent}}" />
                </StackPanel>
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="button" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.21" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="button" Storyboard.TargetProperty="Opacity" Duration="0:0:0.21" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <DataTemplate x:Key="{dxt:LWKey CameraControl.CameraSettingsTemplate}">
        <Grid>
            <GroupBox MinWidth="{DynamicResource {dxt:LWKey CameraControl.SettingsMinWidth}}" Margin="5" Header="{Binding SettingsCaption}">
                <StackPanel Margin="10" Orientation="Vertical">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="3*" />
                            <ColumnDefinition Width="7*" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{Binding Device.Caption}" />
                        <dxe:ComboBoxEdit
                            Grid.Column="1"
                            AllowNullInput="True"
                            DisplayMember="Name"
                            EditValue="{Binding ActualDevice, UpdateSourceTrigger=PropertyChanged}"
                            EditValuePostMode="Immediate"
                            IsTextEditable="False"
                            ItemsSource="{Binding Device.AvaliableValues}"
                            ShowCustomItems="True" />
                    </Grid>
                    <StackPanel IsEnabled="{Binding EnableSettings}" Orientation="Vertical">
                        <Grid Margin="0,10,0,0" IsEnabled="{Binding IsResolutionEnabled}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="3*" />
                                <ColumnDefinition Width="7*" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{Binding Resolution.Caption}" />
                            <dxe:ComboBoxEdit
                                Grid.Column="1"
                                DisplayMember="DisplayText"
                                EditValue="{Binding ActualResolution, UpdateSourceTrigger=PropertyChanged}"
                                EditValuePostMode="Immediate"
                                IsTextEditable="False"
                                ItemsSource="{Binding Resolution.AvaliableValues}"
                                ValidateOnTextInput="True"
                                ValueMember="Resolution" />
                        </Grid>
                        <Grid Margin="0,10,0,0" IsEnabled="{Binding IsBrightnessEnabled}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="3*" />
                                <ColumnDefinition Width="7*" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{Binding Brightness.Caption}" />
                            <dxe:TrackBarEdit
                                Grid.Column="1"
                                EditValue="{Binding ActualBrightness, UpdateSourceTrigger=PropertyChanged}"
                                LargeStep="10"
                                Maximum="{Binding Brightness.MaxValue}"
                                Minimum="{Binding Brightness.MinValue}"
                                SmallStep="1"
                                TickPlacement="None" />
                        </Grid>
                        <Grid Margin="0,10,0,0" IsEnabled="{Binding IsContrastEnabled}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="3*" />
                                <ColumnDefinition Width="7*" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{Binding Contrast.Caption}" />
                            <dxe:TrackBarEdit
                                Grid.Column="1"
                                EditValue="{Binding ActualContrast, UpdateSourceTrigger=PropertyChanged}"
                                LargeStep="10"
                                Maximum="{Binding Contrast.MaxValue}"
                                Minimum="{Binding Contrast.MinValue}"
                                SmallStep="1"
                                TickPlacement="None" />
                        </Grid>
                        <Grid Margin="0,10,0,10" IsEnabled="{Binding IsDesaturateEnabled}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="3*" />
                                <ColumnDefinition Width="7*" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{Binding Desaturate.Caption}" />
                            <dxe:CheckEdit Grid.Column="1" HorizontalAlignment="Center" EditValue="{Binding CanDesaturate, UpdateSourceTrigger=PropertyChanged}" />
                        </Grid>
                        <Button Command="{Binding ResetToDefaultCommand}" Content="{Binding Reset.Caption}" IsEnabled="{Binding IsResetEnabled}" />
                    </StackPanel>
                </StackPanel>
            </GroupBox>
        </Grid>
    </DataTemplate>
    <Style x:Key="{dxt:LWKey CameraControl.SettingsButtonStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="grid" Background="Transparent" Opacity="0.5">
                        <Image
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.camerasettings.png, Converter={StaticResource EmbeddedResourceImageConverter}}"
                            Stretch="None" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.21" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="Opacity" Duration="0:0:0.21" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey ImageEdit.Template}" TargetType="{x:Type dxe:ImageEdit}">
        <Grid x:Name="PART_Root">
            <ContentControl
                x:Name="Border"
                HorizontalContentAlignment="Stretch"
                VerticalContentAlignment="Stretch"
                dx:FocusHelper2.Focusable="False"
                dxeh:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}"
                dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
                dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Template="{TemplateBinding ActualBorderTemplate}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <dxe:ErrorControl x:Name="PART_ErrorPresenter" Grid.Column="0" />
                    <dxe:EditorControl
                        x:Name="PART_Content"
                        Grid.Column="1"
                        Padding="{TemplateBinding Padding}"
                        Foreground="{TemplateBinding Foreground}"
                        Template="{TemplateBinding ActualEditorControlTemplate}" />
                </Grid>
            </ContentControl>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ImageEdit.MenuTemplate}" TargetType="{x:Type ContentControl}">
        <StackPanel x:Name="PART_MenuContent" Orientation="Horizontal">
            <dxe:ImageEditCutToolButton />
            <dxe:ImageEditCopyToolButton />
            <dxe:ImageEditPasteToolButton />
            <dxe:ImageEditClearToolButton />
            <dxe:ImageEditToolSeparator />
            <dxe:ImageEditLoadToolButton />
            <dxe:ImageEditSaveToolButton />
            <dxe:ImageEditTakePictureButton />
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ImageEdit.EditMenuTemplate}" TargetType="{x:Type ContentControl}">
        <ItemsControl ItemsSource="{Binding Path=(dxe:ImageEditToEditModeBehavior.ImageEditToEditModeBehavior).ActualEditMenuItems,
                                            RelativeSource={RelativeSource Self}}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel x:Name="PART_MenuContent" Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.Resources>
                <DataTemplate DataType="{x:Type dxe:ImageEditToolButtonInfo}">
                    <dxe:ImageEditToolButton ImageSource="{Binding Glyph}"
                                             ToolTip="{Binding ToolTip}"
                                             Command="{Binding Command}"
                                             CommandParameter="{Binding CommandParameter}"
                                             CommandTarget="{Binding CommandTarget}"/>
                </DataTemplate>
                <DataTemplate DataType="{x:Type dxe:ImageEditToolSeparatorInfo}">
                    <dxe:ImageEditToolSeparator />
                </DataTemplate>
            </ItemsControl.Resources>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ImageEdit.CropMenuTemplate}" TargetType="{x:Type ContentControl}">
        <StackPanel x:Name="PART_MenuContent" Orientation="Horizontal">
            <StackPanel x:Name="PART_Text" Orientation="Horizontal"
                        Margin="{DynamicResource {dxt:LWKey ImageEdit.CropMenuTextMargin}}">
                <TextBlock Text="{Binding Path=(dxe:ImageEditToEditModeBehavior.ImageEditToEditModeBehavior).CropWidth, RelativeSource={RelativeSource Self}}"
                           Foreground="{DynamicResource {dxt:LWKey ImageEdit.CropMenuForegroundBrush}}" VerticalAlignment="Center"/>
                <TextBlock Text=" x "
                           Foreground="{DynamicResource {dxt:LWKey ImageEdit.CropMenuForegroundBrush}}" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding Path=(dxe:ImageEditToEditModeBehavior.ImageEditToEditModeBehavior).CropHeight, RelativeSource={RelativeSource Self}}"
                           Foreground="{DynamicResource {dxt:LWKey ImageEdit.CropMenuForegroundBrush}}" VerticalAlignment="Center"/>
            </StackPanel>
            <dxe:ImageEditToolSeparator />
            <dxe:ImageEditToolButton ImageID="ok" ToolTip="{Binding Source={x:Null}, ConverterParameter=OK, Converter={StaticResource EditorStringIdConverter}}"
                                     Command="{Binding Path=(dxe:ImageEditToEditModeBehavior.ImageEditToEditModeBehavior).ConfirmCropCommand,
                                                       RelativeSource={RelativeSource Self}}"/>
            <dxe:ImageEditToolButton ImageID="cancel" ToolTip="{Binding Source={x:Null}, ConverterParameter=Cancel, Converter={StaticResource EditorStringIdConverter}}"
                                     Command="{Binding Path=(dxe:ImageEditToEditModeBehavior.ImageEditToEditModeBehavior).RejectCropCommand,
                                                       RelativeSource={RelativeSource Self}}"/>
        </StackPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="PART_Text" Property="Margin" Value="18,0"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <SolidColorBrush x:Key="{dxt:LWKey ImageEdit.EmptySpaceBrush}" Color="LightGray"/>

    <ControlTemplate x:Key="{dxt:LWKey ImageEdit.EditTemplateWithEditing}">
        <Grid ClipToBounds="True">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <dxe:FixedSizeCanvas ClipToBounds="True" Background="{DynamicResource {dxt:LWKey ImageEdit.EmptySpaceBrush}}"
                                 MinWidth="100" MinHeight="100">
                <Image x:Name="PART_Editor"
                       Source="{Binding Path=(dxe:BaseEdit.OwnerEdit).Source, RelativeSource={RelativeSource TemplatedParent}}"
                       Stretch="{Binding Path=(dxe:BaseEdit.OwnerEdit).Stretch, RelativeSource={RelativeSource TemplatedParent}}"
                       Effect="{Binding Path=(dxe:BaseEdit.OwnerEdit).ImageEffect, RelativeSource={RelativeSource TemplatedParent}}">
                    <Image.Resources>
                        <SolidColorBrush x:Key="TransparentBrush" Color="Transparent"/>
                        <SolidColorBrush x:Key="SemitransparentBrush" Color="#78000000"/>
                        <Pen x:Key="ThumbPen" Thickness="3" Brush="#78FFFFFF" />
                        <Pen x:Key="BoldThumbPen" Thickness="3" Brush="White" />
                        <sys:Double x:Key="ThumbWidth">20</sys:Double>
                    </Image.Resources>
                </Image>
            </dxe:FixedSizeCanvas>
            <dx:DXBorder Background="{DynamicResource {dxt:LWKey ImageEdit.InplaceMenuBackgroundBrush}}" Grid.Row="1" Padding="8,2,0,2" x:Name="PART_InplaceMenu" Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).InplaceMenuVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                <ContentControl x:Name="StaticPanel" Template="{Binding Path=(dxe:BaseEdit.OwnerEdit).MenuTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
            </dx:DXBorder>
            <dxef:FlyoutControl
                PlacementTarget="{Binding Path=(dxe:BaseEdit.OwnerEdit), RelativeSource={RelativeSource TemplatedParent}}"
                BorderThickness="0"
                Background="Transparent"
                x:Name="PART_MenuFlyout"
                AnimationDuration="00:00:00.1"
                VerticalAlignment="Bottom"
                StaysOpen="True"
                OpenOnHover="True"
                HorizontalAlignment="Center">
                <dxef:FlyoutControl.Settings>
                    <dxef:FlyInSettings />
                </dxef:FlyoutControl.Settings>
                <dxmvvmi:Interaction.Behaviors>
                    <dxmvvm:EventToCommand EventName="Opening" Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).CanShowMenuPopupCommand, RelativeSource={RelativeSource TemplatedParent}}" PassEventArgsToCommand="True" />
                </dxmvvmi:Interaction.Behaviors>
                <ContentControl Template="{Binding Path=(dxe:BaseEdit.OwnerEdit).MenuContainerTemplate, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False"
                                x:Name="PART_MenuContainer">
                    <ContentControl x:Name="ActionPanel" Template="{Binding Path=(dxe:BaseEdit.OwnerEdit).MenuTemplate, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" />
                </ContentControl>
            </dxef:FlyoutControl>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:ImageEditToEditModeBehavior.ImageEditToEditModeBehavior).Cropping, RelativeSource={RelativeSource Self}}"
                         Value="True">
                <Setter TargetName="ActionPanel" Property="Template" Value="{DynamicResource {dxt:LWKey ImageEdit.CropMenuTemplate}}"/>
                <Setter TargetName="StaticPanel" Property="Template" Value="{DynamicResource {dxt:LWKey ImageEdit.CropMenuTemplate}}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:ImageEditToEditModeBehavior.ImageEditToEditModeBehavior).Cropping,
                                                 RelativeSource={RelativeSource Self}}"
                               Value="False"/>
                    <Condition Binding="{Binding Path=(dxe:ImageEditToEditModeBehavior.ImageEditToEditModeBehavior).ActualEditMenuItems.Count,
                                                 RelativeSource={RelativeSource Self}}"
                               Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_MenuContainer" Property="Template" Value="{x:Null}"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey PopupImageEdit.MenuTemplate}" TargetType="{x:Type ContentControl}">
        <StackPanel x:Name="PART_MenuContent" Orientation="Horizontal">
            <dxe:ImageEditCutToolButton />
            <dxe:ImageEditCopyToolButton />
            <dxe:ImageEditPasteToolButton />
            <dxe:ImageEditClearToolButton />
            <dxe:ImageEditToolSeparator />
            <dxe:ImageEditLoadToolButton />
            <dxe:ImageEditSaveToolButton />
            <dxe:ImageEditTakePictureButton />
            <dxe:ImageEditToolSeparator />
            <dxe:PopupImageEditOKToolButton />
            <dxe:PopupImageEditCancelToolButton />
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey PopupImageEdit.PopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid SnapsToDevicePixels="True">
            <dxe:ImageEdit
                x:Name="PART_PopupContent"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Effect="{Binding Path=Tag.ImageEffect, RelativeSource={RelativeSource TemplatedParent}}"
                Foreground="{Binding Path=Tag.Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                ShowBorder="False"
                Stretch="{Binding Path=Tag.Stretch, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ImageEdit.EditInplaceTemplate}">
        <Grid x:Name="PART_Container" Background="Transparent">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Image
                Name="PART_Editor"
                Margin="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Source="{Binding Path=(dxe:BaseEdit.OwnerEdit).Source, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Stretch="{Binding Path=(dxe:BaseEdit.OwnerEdit).Stretch, RelativeSource={RelativeSource TemplatedParent}}" />
            <dx:DXBorder
                x:Name="PART_InplaceMenu"
                Grid.Row="1"
                Padding="8,2,0,2"
                Background="{DynamicResource {dxt:LWKey ImageEdit.InplaceMenuBackgroundBrush}}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).InplaceMenuVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                <ContentControl Template="{Binding Path=(dxe:BaseEdit.OwnerEdit).MenuTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
            </dx:DXBorder>
            <dxef:FlyoutControl
                x:Name="PART_MenuFlyout"
                HorizontalAlignment="Center"
                VerticalAlignment="Bottom"
                AnimationDuration="00:00:00.1"
                Background="Transparent"
                BorderThickness="0"
                OpenOnHover="True"
                PlacementTarget="{Binding Path=(dxe:BaseEdit.OwnerEdit), RelativeSource={RelativeSource TemplatedParent}}">
                <dxef:FlyoutControl.Settings>
                    <dxef:FlyInSettings />
                </dxef:FlyoutControl.Settings>
                <dxmvvmi:Interaction.Behaviors>
                    <dxmvvm:EventToCommand Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).CanShowMenuPopupCommand, RelativeSource={RelativeSource TemplatedParent}}" EventName="Opening" PassEventArgsToCommand="True" />
                </dxmvvmi:Interaction.Behaviors>
                <ContentControl Focusable="False" Template="{Binding Path=(dxe:BaseEdit.OwnerEdit).MenuContainerTemplate, RelativeSource={RelativeSource TemplatedParent}}">
                    <ContentControl Focusable="False" Template="{Binding Path=(dxe:BaseEdit.OwnerEdit).MenuTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                </ContentControl>
            </dxef:FlyoutControl>
        </Grid>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\ImageEdit.xaml-->

    <!--#region Editors\Themes\Generic\ListBoxEdit.xaml-->
    <!-- PROCESS SETTERS WITH BINDING -->

    <!-- BEGIN TOSLONLY REPLACE ' BasedOn="ListBox"'' -->
    <Style x:Key="BaseListBoxStyle" BasedOn="{StaticResource {x:Type ListBox}}" TargetType="{x:Type dxep:EditorListBox}">
        <Setter Property="DisplayMemberPath" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).DisplayMemberPath, RelativeSource={RelativeSource Self}}" />
        <Setter Property="ItemTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplate, RelativeSource={RelativeSource Self}}" />
        <Setter Property="ItemsPanel" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemsPanel, RelativeSource={RelativeSource Self}}" />
        <Setter Property="SelectionMode" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).SelectionMode, RelativeSource={RelativeSource Self}}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource Self}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource Self}}" />
        <Setter Property="AllowItemHighlighting" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowItemHighlighting, RelativeSource={RelativeSource Self}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(ScrollViewer.HorizontalScrollBarVisibility), RelativeSource={RelativeSource Self}}" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(ScrollViewer.VerticalScrollBarVisibility), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Background, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Padding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey EditorListBox.Template}}" />
        <Setter Property="TextSearch.TextPath" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(TextSearch.TextPath), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource Self}}" />
        <Setter Property="ItemTemplateSelector" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplateSelector, RelativeSource={RelativeSource Self}}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(ScrollViewer.CanContentScroll), RelativeSource={RelativeSource Self}}" />
        <Setter Property="ScrollUnit2" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ScrollUnit, RelativeSource={RelativeSource Self}}" />
        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(VirtualizingPanel.IsVirtualizingWhenGrouping), RelativeSource={RelativeSource Self}}" />
    </Style>
    <!-- END TOSLONLY REPLACE ' BasedOn="ListBox"'' -->

    <Style x:Key="{dxt:LWKey ListBoxEdit.ListBoxInplaceStyle}" BasedOn="{StaticResource BaseListBoxStyle}" TargetType="{x:Type dxep:EditorListBox}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="IsHitTestVisible" Value="False" />
    </Style>

    <Style x:Key="{dxt:LWKey ListBoxEdit.ListBoxStyle}" BasedOn="{StaticResource BaseListBoxStyle}" TargetType="{x:Type dxep:EditorListBox}" />

    <ControlTemplate x:Key="{dxt:LWKey ListBoxEdit.DisplayTemplate}">

        <dxep:EditorListBox x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey ListBoxEdit.ListBoxInplaceStyle}}" />

    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ListBoxEdit.EditTemplate}">
        <dxep:EditorListBox x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey ListBoxEdit.ListBoxStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ListBoxEdit.Template}" TargetType="{x:Type dxe:ListBoxEdit}">
        <ContentControl
            x:Name="PART_Root"
            HorizontalContentAlignment="Stretch"
            VerticalContentAlignment="Stretch"
            dx:FocusHelper2.Focusable="False"
            dxe:EditorAppearanceProperties.FocusedBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
            dxeh:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}"
            dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Template="{TemplateBinding ActualBorderTemplate}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <dxe:ErrorControl x:Name="PART_ErrorPresenter" />
                <dxe:EditorControl x:Name="PART_Content" Grid.Column="1" Template="{TemplateBinding ActualEditorControlTemplate}" />
            </Grid>
        </ContentControl>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\ListBoxEdit.xaml-->

    <!--#region Editors\Themes\Generic\PagerControl.xaml-->



    <ControlTemplate x:Key="{dxt:LWKey PagerControl.Template}" TargetType="dxe:PagerControl">
        <Grid>
            <ContentControl VerticalAlignment="Center" Template="{DynamicResource {dxt:LWKey PagerControl.BorderTemplate}}">
                <DockPanel>
                    <TextBlock
                        Margin="12,0,12,0"
                        VerticalAlignment="Center"
                        DockPanel.Dock="Left"
                        Text="{TemplateBinding SummaryText}"
                        Visibility="{TemplateBinding ShowSummaryText, Converter={StaticResource boolToVisibilityConverter}}" />
                    <Grid Margin="0,0,12,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" DockPanel.Dock="Right">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <dxe:PagerControlNavigationButton
                            Grid.Column="0"
                            Command="{Binding Path=FirstPageCommand, RelativeSource={RelativeSource TemplatedParent}}"
                            ContentTemplate="{DynamicResource {dxt:LWKey PagerControl.NavigationButtonFirstPageGlyph}}"
                            ToolTip="{dxe:EditorStringId FirstPage}"
                            Visibility="{TemplateBinding ActualShowFirstPageButton, Converter={StaticResource boolToVisibilityConverter}}" />
                        <dxe:PagerControlNavigationButton
                            Grid.Column="1"
                            Command="{Binding Path=PreviousPageCommand, RelativeSource={RelativeSource TemplatedParent}}"
                            ContentTemplate="{DynamicResource {dxt:LWKey PagerControl.NavigationButtonPreviousPageGlyph}}"
                            ToolTip="{dxe:EditorStringId PrevPage}"
                            Visibility="{TemplateBinding ActualShowPrevPageButton, Converter={StaticResource boolToVisibilityConverter}}" />
                        <ScrollViewer Grid.Column="2" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Disabled">
                            <ItemsControl Name="PART_NumberItemsControl" ItemTemplate="{DynamicResource {dxt:LWKey PagerControl.NumericItemTemplate}}" Visibility="{TemplateBinding ShowNumericButtons, Converter={StaticResource boolToVisibilityConverter}}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <dx:StackVisibleIndexPanel Orientation="Horizontal" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </ScrollViewer>
                        <dxe:PagerControlNavigationButton
                            Grid.Column="3"
                            Command="{Binding Path=NextPageCommand, RelativeSource={RelativeSource TemplatedParent}}"
                            ContentTemplate="{DynamicResource {dxt:LWKey PagerControl.NavigationButtonNextPageGlyph}}"
                            ToolTip="{dxe:EditorStringId NextPage}"
                            Visibility="{TemplateBinding ActualShowNextPageButton, Converter={StaticResource boolToVisibilityConverter}}" />
                        <dxe:PagerControlNavigationButton
                            Grid.Column="4"
                            Command="{Binding Path=LastPageCommand, RelativeSource={RelativeSource TemplatedParent}}"
                            ContentTemplate="{DynamicResource {dxt:LWKey PagerControl.NavigationButtonLastPageGlyph}}"
                            ToolTip="{dxe:EditorStringId LastPage}"
                            Visibility="{TemplateBinding ActualShowLastPageButton, Converter={StaticResource boolToVisibilityConverter}}" />
                        <dxe:PagerControlNavigationButton
                            Grid.Column="5"
                            Margin="8,0,0,0"
                            Command="{Binding Path=RefreshPageCommand, RelativeSource={RelativeSource TemplatedParent}}"
                            ContentTemplate="{DynamicResource {dxt:LWKey PagerControl.RefreshPageGlyph}}"
                            ToolTip="{dxe:EditorStringId RefreshPage}"
                            Visibility="{TemplateBinding ShowRefreshPageButton, Converter={StaticResource boolToVisibilityConverter}}" />
                    </Grid>
                </DockPanel>
            </ContentControl>
        </Grid>
    </ControlTemplate>

    <DataTemplate x:Key="{dxt:LWKey PagerControl.NumericItemTemplate}">
        <dxe:PagerControlNumericButton
            Command="{Binding Path=(dxe:PagerControl.PagerControl).MoveToPageCommand, RelativeSource={RelativeSource TemplatedParent}}"
            CommandParameter="{Binding Number}"
            Number="{Binding Number}"
            ShowEllipsis="{Binding ShowEllipsis}" />
    </DataTemplate>
    <!--#endregion Editors\Themes\Generic\PagerControl.xaml-->

    <!--#region Editors\Themes\Generic\PasswordBoxEdit.xaml-->

    <ControlTemplate x:Key="{dxt:LWKey PasswordBoxEdit.DisplayTemplate}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <PasswordBox
                x:Name="PART_Editor"
                Grid.Column="0"
                Focusable="False"
                FontFamily="{Binding Path=(dxe:BaseEdit.OwnerEdit).FontFamily}"
                Style="{DynamicResource {dxt:LWKey PasswordBoxEdit.PasswordBoxStyle}}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ActualIsPasswordVisible, Converter={dxmvvm:BooleanToVisibilityConverter HiddenInsteadOfCollapsed=True, Inverse=True}, FallbackValue={x:Static Visibility.Visible}}" />
            <TextBlock
                x:Name="PART_PasswordNullText"
                Grid.Column="0"
                Padding="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding}"
                IsHitTestVisible="False"
                Opacity="0.35"
                Style="{DynamicResource {dxt:LWKey PasswordBoxEdit.NullTextEditorStyle}}"
                Text="{Binding Path=(dxe:BaseEdit.OwnerEdit).NullText, RelativeSource={RelativeSource TemplatedParent}}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsNullTextVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <TextBlock
                x:Name="PART_PasswordPreviewText"
                Grid.Column="0"
                Style="{DynamicResource {dxt:LWKey PasswordBoxEdit.PreviewTextEditorStyle}}"
                Text="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayText}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ActualIsPasswordVisible, Converter={dx:BooleanToVisibilityConverter}, FallbackValue={x:Static Visibility.Collapsed}}" />
            <Button x:Name="PART_ShowPasswordButton" Grid.Column="1" Style="{DynamicResource {dxt:LWKey PasswordBoxEdit.ShowPasswordButtonStyle}}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey PasswordBoxEdit.EditTemplate}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <PasswordBox
                x:Name="PART_Editor"
                Grid.Column="0"
                FontFamily="{Binding Path=(dxe:BaseEdit.OwnerEdit).FontFamily}"
                Style="{DynamicResource {dxt:LWKey PasswordBoxEdit.PasswordBoxStyle}}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ActualIsPasswordVisible, Converter={dxmvvm:BooleanToVisibilityConverter HiddenInsteadOfCollapsed=True, Inverse=True}, FallbackValue={x:Static Visibility.Visible}}" />
            <TextBlock
                x:Name="PART_PasswordPreviewText"
                Grid.Column="0"
                Style="{DynamicResource {dxt:LWKey PasswordBoxEdit.PreviewTextEditorStyle}}"
                Text="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayText}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ActualIsPasswordVisible, Converter={dx:BooleanToVisibilityConverter}, FallbackValue={x:Static Visibility.Collapsed}}" />
            <Button x:Name="PART_ShowPasswordButton" Grid.Column="1" Style="{DynamicResource {dxt:LWKey PasswordBoxEdit.ShowPasswordButtonStyle}}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey PasswordBoxEdit.Template}" TargetType="{x:Type dxe:PasswordBoxEdit}">
        <ContentControl
            x:Name="Border"
            HorizontalContentAlignment="Stretch"
            VerticalContentAlignment="Stretch"
            dxe:EditorAppearanceProperties.FocusedBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
            dxe:EditorAppearanceProperties.ReadOnlyBackground="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource TemplatedParent}}"
            dxe:EditorAppearanceProperties.ReadOnlyBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
            dxeh:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}"
            dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Focusable="False"
            Template="{TemplateBinding ActualBorderTemplate}">
            <DockPanel LastChildFill="True" SnapsToDevicePixels="True">
                <dxe:ErrorControl x:Name="PART_ErrorPresenter" />
                <Grid DockPanel.Dock="Left">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" x:Name="PART_FirstRow"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Label Grid.Row="0" x:Name="PART_Label"
                           Content="{TemplateBinding Label}" Visibility="Collapsed" VerticalAlignment="Bottom"
                           Margin="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.Margin}}"
                           Padding="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.Padding}}"
                           FontSize="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.FontSize}}"
                           Foreground="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.Foreground}}"/>
                    <dxe:EditorControl x:Name="PART_Content" Grid.Row="1"
                                       VerticalAlignment="Stretch" Template="{Binding Path=(dxe:BaseEdit.OwnerEdit).ActualEditorControlTemplate, RelativeSource={RelativeSource Self}}" />
                    <dx:DXBorder Margin="2,0" Grid.Row="1">
                        <TextBlock
                            x:Name="PART_PasswordNullText"
                            Padding="{TemplateBinding Padding}"
                            Foreground="{TemplateBinding NullTextForeground}"
                            IsHitTestVisible="False"
                            Style="{DynamicResource {dxt:LWKey PasswordBoxEdit.NullTextEditorStyle}}"
                            Text="{TemplateBinding NullText}"
                            Visibility="{Binding Path=IsNullTextVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                    </dx:DXBorder>
                </Grid>
            </DockPanel>
        </ContentControl>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="PART_PasswordNullText" Property="Opacity" Value="0.35" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=ShowBorder, RelativeSource={RelativeSource Self}}" Value="true">
                <Setter TargetName="PART_ErrorPresenter" Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey InplaceBaseEdit.ValidationErrorSvgPalette}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}"
                         Value="True">
                <Setter TargetName="PART_Label" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PART_Content" Property="Margin" Value="{DynamicResource {dxt:LWKey EmbeddedEditorLabels.ContentMargin}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <DataTemplate x:Key="{dxt:LWKey PasswordBoxEdit.CapsLockWarningToolTipTemplate}">
        <Grid>
            <StackPanel Orientation="Vertical">
                <StackPanel Orientation="Horizontal">
                    <Image
                        Width="24"
                        Height="24"
                        Margin="0,3,3,3"
                        Source="{dx:ImageSelector Source='pack://application:,,,/DevExpress.Xpf.Core.v24.1;component/Editors/Images/warning.png'}"
                        Stretch="Fill" />
                    <Grid Height="24" Margin="3">
                        <TextBlock
                            Margin="0,0,0,2"
                            VerticalAlignment="Center"
                            FontSize="14"
                            Foreground="#FF003399"
                            Text="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, ConverterParameter=PasswordBoxEditToolTipHeader, Converter={StaticResource EditorStringIdConverter}}" />
                    </Grid>
                </StackPanel>
                <TextBlock Margin="30,0,6,6" Text="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, ConverterParameter=PasswordBoxEditToolTipContent, Converter={StaticResource EditorStringIdConverter}}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <Style x:Key="{dxt:LWKey PasswordBoxEdit.ShowPasswordButtonStyle}" TargetType="{x:Type ButtonBase}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Visibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ActualShowPasswordButton, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue={x:Static Visibility.Collapsed}}" />
        <Setter Property="ContentTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowPasswordButtonTemplate}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="4,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <ContentPresenter
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        TextBlock.Foreground="{TemplateBinding Foreground}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Opacity" Value="0.65" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.65" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Editors\Themes\Generic\PasswordBoxEdit.xaml-->

    <!--#region Editors\Themes\Generic\PopupBaseEdit.xaml-->



    <Style x:Key="{dxt:LWKey PopupBaseEdit.ResizeGripStyle}" TargetType="{x:Type dxe:PopupSizeGrip}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey PopupBaseEdit.ResizeGripTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey PopupBaseEdit.NullValueButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="Content" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=SetNullValue, Converter={StaticResource EditorStringIdConverter}}" />
    </Style>
    <Style x:Key="{dxt:LWKey PopupBaseEdit.AddNewButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="Content" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=LookUpAddNew, Converter={StaticResource EditorStringIdConverter}}" />
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey PopupBaseEdit.PopupBottomAreaTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="PART_Root" Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.FooterVisibility, RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter />
            <ContentControl dx:FocusHelper2.Focusable="False" Template="{DynamicResource {dxt:LWKey PopupBaseEdit.FooterTemplate}}" />
            <Button
                x:Name="PART_CloseButton"
                Width="13"
                Height="13"
                Margin="3"
                HorizontalAlignment="Left"
                VerticalAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.VerticalAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).ClosePopupCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Content="Button"
                Template="{DynamicResource {dxt:LWKey PopupBaseEdit.CloseButtonTemplate}}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.CloseButtonVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                <Button.CommandParameter>
                    <dxe:PopupCloseMode>Cancel</dxe:PopupCloseMode>
                </Button.CommandParameter>
            </Button>
            <dx:UniformStackPanel
                Width="Auto"
                Margin="15,0,15,0"
                HorizontalAlignment="Center"
                ChildSpacing="0"
                Orientation="Horizontal">
                <Button
                    x:Name="PART_OkButton"
                    Margin="3,6,3,6"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    dx:FocusHelper2.Focusable="False"
                    Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).ClosePopupCommand, RelativeSource={RelativeSource TemplatedParent}}"
                    Content="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=OK, Converter={StaticResource EditorStringIdConverter}}"
                    IsEnabled="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.OkButtonIsEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.OkButtonVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                    <Button.CommandParameter>
                        <dxe:PopupCloseMode>Normal</dxe:PopupCloseMode>
                    </Button.CommandParameter>
                </Button>
                <Button
                    x:Name="PART_CancelButton"
                    Margin="3,6,3,6"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    dx:FocusHelper2.Focusable="False"
                    Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).ClosePopupCommand, RelativeSource={RelativeSource TemplatedParent}}"
                    Content="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=Cancel, Converter={StaticResource EditorStringIdConverter}}"
                    Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.CancelButtonVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                    <Button.CommandParameter>
                        <dxe:PopupCloseMode>Cancel</dxe:PopupCloseMode>
                    </Button.CommandParameter>
                </Button>
                <Button
                    x:Name="PART_AddNewButton"
                    MinWidth="80"
                    Margin="3,6,3,6"
                    HorizontalAlignment="Left"
                    Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).AddNewCommand, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{DynamicResource {dxt:LWKey PopupBaseEdit.AddNewButtonStyle}}"
                    Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.AddNewButtonVisibility, RelativeSource={RelativeSource TemplatedParent}}" />
                <Button
                    x:Name="PART_NullValueButton"
                    MinWidth="80"
                    Margin="3,6,3,6"
                    HorizontalAlignment="Left"
                    Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).SetNullValueCommand, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{DynamicResource {dxt:LWKey PopupBaseEdit.NullValueButtonStyle}}"
                    Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.NullValueButtonVisibility, RelativeSource={RelativeSource TemplatedParent}}" />
            </dx:UniformStackPanel>
            <dxe:PopupSizeGrip
                x:Name="PART_SizeGrip"
                Margin="2,3,2,2"
                HorizontalAlignment="Right"
                VerticalAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.VerticalAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                dx:FocusHelper2.Focusable="False"
                Style="{DynamicResource {dxt:LWKey PopupBaseEdit.ResizeGripStyle}}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.Visibility, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.IsLeft, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="PART_SizeGrip" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="PART_CloseButton" Property="HorizontalAlignment" Value="Right" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey PopupBaseEdit.PopupTopAreaStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="False" />
        <Setter Property="Template" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupTopAreaTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>
    <Style x:Key="{dxt:LWKey PopupBaseEdit.PopupBottomAreaStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="False" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="Template" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupBottomAreaTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey PopupBaseEdit.PopupContentContainerTemplate}" TargetType="{x:Type dxep:PopupContentContainer}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition x:Name="RowTopFooter" Height="Auto" />
                <RowDefinition x:Name="RowTopContent" Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition x:Name="RowBottomFooter" Height="Auto" />
            </Grid.RowDefinitions>
            <ContentControl x:Name="PART_Top" Grid.Row="1" Style="{DynamicResource {dxt:LWKey PopupBaseEdit.PopupTopAreaStyle}}" />
            <ContentPresenter x:Name="Content" Grid.Row="2" />
            <ContentControl x:Name="PART_Footer" Grid.Row="3" Style="{DynamicResource {dxt:LWKey PopupBaseEdit.PopupBottomAreaStyle}}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="DropDownDirectionStates">
                    <VisualState x:Name="TopToBottomDirection" />
                    <VisualState x:Name="BottomToTopDirection">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Footer" Storyboard.TargetProperty="(Grid.Row)" Duration="0">
                                <ObjectAnimationUsingKeyFrames.KeyFrames>
                                    <DiscreteObjectKeyFrame KeyTime="0">
                                        <DiscreteObjectKeyFrame.Value>
                                            <sys:Int32>0</sys:Int32>
                                        </DiscreteObjectKeyFrame.Value>
                                    </DiscreteObjectKeyFrame>
                                </ObjectAnimationUsingKeyFrames.KeyFrames>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey PopupBaseEdit.PopupContentTemplate}" TargetType="{x:Type dxep:PopupContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <DataTemplate x:Key="{dxt:LWKey PopupBaseEdit.DialogServiceContentTemplate}">
        <ContentControl Content="{Binding Path=Content}" Focusable="False" />
    </DataTemplate>

    <ControlTemplate x:Key="{dxt:LWKey PopupBaseEdit.ResizeGripTemplate}" TargetType="{x:Type dxe:PopupSizeGrip}">
        <Thumb
            x:Name="PART_Thumb"
            Cursor="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.Cursor, RelativeSource={RelativeSource TemplatedParent}}"
            RenderTransformOrigin="0.5,0.5"
            Template="{DynamicResource {dxt:LWKey PopupBaseEdit.ThumbTemplate}}" />
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.IsLeft, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.IsDown, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_Thumb" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform Angle="90" />
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.IsLeft, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.IsDown, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_Thumb" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform Angle="180" />
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.IsLeft, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.IsDown, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_Thumb" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform Angle="270" />
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\PopupBaseEdit.xaml-->

    <!--#region Editors\Themes\Generic\PopupListBox.xaml-->
    <Style x:Key="RadioButtonItemBaseStyle" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="Transparent" SnapsToDevicePixels="True">
                        <dxe:ListBoxRadioButton
                            Name="radioButton"
                            Margin="3,0,3,0"
                            Padding="0,2,0,2"
                            HorizontalAlignment="Stretch"
                            HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                            VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                            dx:FocusHelper2.Focusable="False"
                            dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}"
                            Foreground="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                            IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                            IsHitTestVisible="True">
                            <dxe:ListBoxRadioButton.Content>
                                <ContentPresenter />
                            </dxe:ListBoxRadioButton.Content>
                        </dxe:ListBoxRadioButton>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="radioButton" Property="Margin" Value="3,0,3,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey CustomItem.RadioEmptyItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="Transparent" SnapsToDevicePixels="True">
                        <dxe:ListBoxRadioButton
                            x:Name="radioButton"
                            Margin="3,0,3,0"
                            Padding="0,2,0,2"
                            HorizontalAlignment="Stretch"
                            HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                            VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                            dx:FocusHelper2.Focusable="False"
                            dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}"
                            Foreground="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                            IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                            IsHitTestVisible="True">
                            <dxe:ListBoxRadioButton.Content>
                                <ContentPresenter />
                            </dxe:ListBoxRadioButton.Content>
                        </dxe:ListBoxRadioButton>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="radioButton" Property="Margin" Value="3,0,3,0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditValue, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter Property="IsSelected" Value="True" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey CustomItem.SelectAllItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="True" />
        <Setter Property="IsSelected" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).SelectionViewModel.IsSelected, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="Transparent">
                        <dxe:SelectAllItemCheckEdit
                            x:Name="checkEdit"
                            Padding="3,0,0,0"
                            HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                            VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                            dx:FocusHelper2.Focusable="false"
                            dxeh:ControlHelper.IsFocused="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}"
                            EditValue="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).SelectionViewModel.SelectAll, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                            ShowBorder="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource TemplatedParent}}">
                            <dxe:SelectAllItemCheckEdit.Content>
                                <Binding Converter="{StaticResource stringToSpaceConverter}" Path="DisplayText" />
                            </dxe:SelectAllItemCheckEdit.Content>
                        </dxe:SelectAllItemCheckEdit>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="checkEdit" Property="Margin" Value="0,0,0,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxt:LWKey CustomItem.WaitIndicatorItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="True" />
        <Setter Property="IsSelected" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:ColumnWaitIndicator />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxt:LWKey CustomItem.DefaultButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>
    <DataTemplate x:Key="{dxt:LWKey CustomItem.EmptyItemTemplate}">
        <Button
            Command="{Binding Path=Command}"
            CommandParameter="{Binding Path=Item}"
            Content="{Binding Path=DisplayText}"
            Style="{DynamicResource {dxt:LWKey CustomItem.DefaultButtonStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey CustomItem.SeparatorTemplate}">
        <Separator />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey CustomItem.DefaultTemplate}">
        <ContentPresenter Content="{Binding Path=DisplayText, Converter={StaticResource stringToSpaceConverter}}" />
    </DataTemplate>

    <Style x:Key="{dxt:LWKey EditorListBox.DefaultItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey EditorListBox.DefaultBorderThickness}}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource Self}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource Self}}" />
        <!-- <Setter Property="Padding" Value="2,0,0,0" /> -->
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey EditorListBox.ItemTemplate}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey EditorListBox.CheckBoxItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey EditorListBox.CheckBoxItemPadding}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <dxe:CheckEdit
                            x:Name="checkEdit"
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="Stretch"
                            HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                            VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                            dx:FocusHelper2.Focusable="False"
                            dxeh:ControlHelper.IsFocused="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}"
                            IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                            IsHitTestVisible="True"
                            ShowBorder="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource TemplatedParent}}">
                            <ContentPresenter />
                        </dxe:CheckEdit>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="checkEdit" Property="Margin" Value="0,0,0,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey EditorListBox.ScrollViewerTemplate}" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid.Resources>
                <dxeh:ScrollContentPresenterMarginCorrector x:Key="ScrollContentPresenterMarginCorrector" />
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter
                x:Name="PART_ScrollContentPresenter"
                Grid.Row="0"
                Grid.Column="0"
                Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollContentPresenterMarginCorrector}}"
                CanContentScroll="{TemplateBinding CanContentScroll}"
                CanHorizontallyScroll="False"
                CanVerticallyScroll="False"
                Content="{TemplateBinding Content}"
                ContentTemplate="{TemplateBinding ContentTemplate}" />
            <ScrollBar
                x:Name="PART_VerticalScrollBar"
                Grid.Row="0"
                Grid.Column="1"
                AutomationProperties.AutomationId="VerticalScrollBar"
                Cursor="Arrow"
                Maximum="{TemplateBinding ScrollableHeight}"
                Minimum="0"
                ViewportSize="{TemplateBinding ViewportHeight}"
                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar
                x:Name="PART_HorizontalScrollBar"
                Grid.Row="1"
                Grid.Column="0"
                AutomationProperties.AutomationId="HorizontalScrollBar"
                Cursor="Arrow"
                Maximum="{TemplateBinding ScrollableWidth}"
                Minimum="0"
                Orientation="Horizontal"
                ViewportSize="{TemplateBinding ViewportWidth}"
                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <dx:DXBorder
                x:Name="Corner"
                Grid.Row="1"
                Grid.Column="1"
                Style="{DynamicResource {dxt:LWKey ScrollBar.ScrollingCornerStyle}}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey EditorListBox.Template}" TargetType="{x:Type dxep:EditorListBox}">
        <dx:DXBorder x:Name="Bd" Background="{TemplateBinding Background}">
            <Grid>
                <ScrollViewer
                    x:Name="ScrollViewer"
                    Padding="{TemplateBinding Padding}"
                    dx:FocusHelper2.Focusable="False"
                    BorderThickness="0">
                    <ItemsPresenter />
                    <dx:ScrollBarExtensions.AllowMouseScrolling>
                        <sys:Boolean>true</sys:Boolean>
                    </dx:ScrollBarExtensions.AllowMouseScrolling>
                </ScrollViewer>
                <dx:WaitIndicator DeferedVisibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ShowWaitIndicator, RelativeSource={RelativeSource Self}}" />
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\PopupListBox.xaml-->

    <!--#region Editors\Themes\Generic\ProgressBarEdit.xaml-->

    <DataTemplate x:Key="{dxt:LWKey ProgressBarEdit.ContentTemplate_Content}">
        <Grid>
            <ContentPresenter HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType=dxe:ProgressBarEdit}, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType=dxe:ProgressBarEdit}, UpdateSourceTrigger=PropertyChanged}" Content="{Binding}" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey ProgressBarEdit.ContentTemplate_None}" />
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.Template}" TargetType="{x:Type dxe:ProgressBarEdit}">
        <ContentControl
            x:Name="Border"
            HorizontalContentAlignment="Stretch"
            VerticalContentAlignment="Stretch"
            dx:FocusHelper2.Focusable="False"
            dxi:AppearanceOptions.BorderThickness="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.CornerRadius="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.HasBorderThickness="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
            dxi:AppearanceOptions.HasCornerRadius="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Template="{TemplateBinding ActualBorderTemplate}">
            <dxe:EditorControl
                x:Name="PART_Content"
                dxi:AppearanceOptions.HasPadding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasPadding), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.Padding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Padding), RelativeSource={RelativeSource Self}}"
                Template="{Binding Path=(dxe:BaseEdit.OwnerEdit).ActualEditorControlTemplate, RelativeSource={RelativeSource Self}}" />
        </ContentControl>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEditStyle.ProgressBarMarqueeTemplateHorizontal}" TargetType="{x:Type dxe:RangeEditBasePanel}">
        <Grid>
            <ContentControl
                x:Name="back"
                Grid.ColumnSpan="2"
                dxi:AppearanceOptions.Background="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.HasBackground="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}"
                Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelBackgroundHorizontalStyle}}" />
            <dxe:ProgressBarMarqueeHorizontalAnimationControl dx:FocusHelper2.Focusable="False" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEditStyle.ProgressBarMarqueeTemplateVertical}" TargetType="{x:Type dxe:RangeEditBasePanel}">
        <Grid>
            <ContentControl
                x:Name="back"
                Grid.RowSpan="2"
                dxi:AppearanceOptions.Background="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"
                dxi:AppearanceOptions.HasBackground="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}"
                Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelBackgroundVerticalStyle}}" />
            <dxe:ProgressBarMarqueeVerticalAnimationControl dx:FocusHelper2.Focusable="False" />
        </Grid>
    </ControlTemplate>


    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.DisplayTemplate}">
        <dx:DXBorder x:Name="Root" Margin="{DynamicResource {dxt:LWKey ProgressBarEdit.DisplayInplaceTemplateMargin}}" UseLayoutRounding="True">
            <dxe:RangeEditBasePanel x:Name="PART_Editor" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone">
                <Setter TargetName="Root" Property="Margin" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.DisplayTemplateMargin}}" />
            </DataTrigger>
            <Trigger Property="dxi:AppearanceOptions.HasPadding" Value="True">
                <Setter TargetName="Root" Property="Margin" Value="{Binding Path=(dxi:AppearanceOptions.Padding), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\ProgressBarEdit.xaml-->

    <!--#region Editors\Themes\Generic\RangeControl.xaml-->

    <ControlTemplate x:Key="{dxt:LWKey CalendarClient.CalendarClientTemplate}" TargetType="{x:Type dxer:CalendarClient}">
        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
            <dxeri:CalendarClientPanel />
        </Grid>
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey RangeControl.SelectionThumbBaseStyle}" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="30" />
        <Setter Property="IsHitTestVisible" Value="False" />
    </Style>

    <Style x:Key="{dxt:LWKey RangeControl.LeftSelectionThumbStyle}" BasedOn="{StaticResource {dxt:LWKey RangeControl.SelectionThumbBaseStyle}}" TargetType="{x:Type Thumb}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey RangeControl.LeftSelectionThumbTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey RangeControl.RightSelectionThumbStyle}" BasedOn="{StaticResource {dxt:LWKey RangeControl.SelectionThumbBaseStyle}}" TargetType="{x:Type Thumb}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey RangeControl.RightSelectionThumbTemplate}}" />
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey RangeControl.RangeBarTemplate}" TargetType="{x:Type dxeri:RangeBar}">
        <ContentControl
            x:Name="PART_RangeBarContainer"
            Width="{TemplateBinding Width}"
            Height="{TemplateBinding Height}"
            Background="{TemplateBinding Background}"
            IsTabStop="False"
            Template="{DynamicResource {dxt:LWKey RangeControl.RangeBarRootBorderTemplate}}">
            <Grid x:Name="PART_ThumbContainer">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <dx:DXBorder Grid.ColumnSpan="7" Style="{DynamicResource {dxt:LWKey RangeControl.RangeBarBottomBorderStyle}}" />
                <Grid x:Name="PART_MiddleLayerContainer" Grid.ColumnSpan="7" IsHitTestVisible="False">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <dx:DXBorder Style="{DynamicResource {dxt:LWKey RangeControl.RangeBarOutOfSelectionBorderStyle}}" />
                    <dx:DXBorder x:Name="PART_SelectionSide" Grid.Column="1" Style="{DynamicResource {dxt:LWKey RangeControl.RangeBarSelectionBorderStyle}}" />
                    <dx:DXBorder Grid.Column="2" Style="{DynamicResource {dxt:LWKey RangeControl.RangeBarOutOfSelectionBorderStyle}}" />
                </Grid>
                <Grid x:Name="PART_TopLayerContainer" Grid.ColumnSpan="7" Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <dx:DXBorder x:Name="PART_LeftSide" Style="{DynamicResource {dxt:LWKey RangeControl.RangeBarOutOfRangeBorderStyle}}" />
                    <Thumb x:Name="PART_Slider" Grid.Column="1" Opacity="0" />
                    <dx:DXBorder x:Name="PART_RightSide" Grid.Column="2" Style="{DynamicResource {dxt:LWKey RangeControl.RangeBarOutOfRangeBorderStyle}}" />
                </Grid>
                <Thumb
                    x:Name="PART_LeftResizeThumb"
                    Grid.Column="1"
                    Template="{DynamicResource {dxt:LWKey RangeControl.RangeBarLeftResizeThumbTemplate}}"
                    UseLayoutRounding="True" />
                <Thumb
                    x:Name="PART_RightResizeThumb"
                    Grid.Column="5"
                    Template="{DynamicResource {dxt:LWKey RangeControl.RangeBarRightResizeThumbTemplate}}"
                    UseLayoutRounding="True" />
            </Grid>
        </ContentControl>
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey RangeControl.RangeBarStyle}" TargetType="{x:Type dxeri:RangeBar}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Visibility" Value="{Binding Path=(dxer:RangeControl.OwnerRangeControl).ShowRangeBar, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey RangeControl.RangeBarTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey RangeControl.LabelStyle}" TargetType="{x:Type ContentPresenter}">
        <Setter Property="ContentTemplate" Value="{Binding Path=(dxer:RangeControl.OwnerRangeControl).LabelTemplate, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
    </Style>

    <Style x:Key="{dxt:LWKey RangeControl.LeftNavigationButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey RangeControl.LeftNavigationButtonTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey RangeControl.RightNavigationButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey RangeControl.RightNavigationButtonTemplate}}" />
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey RangeControl.RangeControlTemplate}" TargetType="{x:Type dxer:RangeControl}">
        <ContentControl
            x:Name="PART_Border"
            Width="{TemplateBinding Width}"
            Height="{TemplateBinding Height}"
            Padding="{TemplateBinding Padding}"
            dxi:AppearanceOptions.Background="{TemplateBinding dxi:AppearanceOptions.Background}"
            dxi:AppearanceOptions.BorderBrush="{TemplateBinding dxi:AppearanceOptions.BorderBrush}"
            dxi:AppearanceOptions.HasBackground="{TemplateBinding dxi:AppearanceOptions.HasBackground}"
            dxi:AppearanceOptions.HasBorderBrush="{TemplateBinding dxi:AppearanceOptions.HasBorderBrush}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            IsTabStop="False"
            Template="{DynamicResource {dxt:LWKey RangeControl.BorderTemplate}}">
            <Grid x:Name="PART_RootContainer">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="{Binding Path=ShowRangeBar, Converter={StaticResource BoolToGridLengthConverter}, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay, ConverterParameter=Auto}" />
                </Grid.RowDefinitions>
                <Grid x:Name="PART_ClientPanelArea" Grid.Row="0" Background="{TemplateBinding Background}">
                    <ScrollViewer
                        x:Name="PART_ScrollViewer"
                        Margin="{TemplateBinding Padding}"
                        dx:ScrollBarExtensions.AllowMouseScrolling="False"
                        HorizontalScrollBarVisibility="Hidden"
                        PanningMode="None"
                        UseLayoutRounding="False"
                        VerticalScrollBarVisibility="Hidden">
                        <Canvas x:Name="PART_ClientPanel" Background="Transparent" IsManipulationEnabled="True">
                            <ContentPresenter x:Name="PART_Content" Canvas.ZIndex="0" Content="{TemplateBinding Client}" />
                            <Canvas
                                x:Name="PART_InteractionArea"
                                Canvas.Left="0"
                                Background="Transparent"
                                Canvas.ZIndex="1"
                                IsHitTestVisible="False" />
                        </Canvas>
                    </ScrollViewer>
                    <Canvas x:Name="PART_LayoutPanel">
                        <dx:DXBorder
                            x:Name="PART_LeftSideBorder"
                            Canvas.Left="0"
                            EnableDPICorrection="False"
                            IsHitTestVisible="False"
                            Style="{DynamicResource {dxt:LWKey RangeControl.OutOfRangeAreaBorderStyle}}" />
                        <dx:DXBorder
                            x:Name="PART_RightSideBorder"
                            Canvas.Left="0"
                            EnableDPICorrection="False"
                            IsHitTestVisible="False"
                            Style="{DynamicResource {dxt:LWKey RangeControl.OutOfRangeAreaBorderStyle}}" />
                        <Thumb
                            x:Name="PART_SelectionLeftThumb"
                            Canvas.Left="0"
                            IsHitTestVisible="False"
                            Style="{DynamicResource {dxt:LWKey RangeControl.LeftSelectionThumbStyle}}" />
                        <Thumb
                            x:Name="PART_SelectionRightThumb"
                            Canvas.Left="0"
                            IsHitTestVisible="False"
                            Style="{DynamicResource {dxt:LWKey RangeControl.RightSelectionThumbStyle}}" />
                        <Grid x:Name="PART_NavigationButtonsContainer" Canvas.Left="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_LeftNavigationButton" Style="{DynamicResource {dxt:LWKey RangeControl.LeftNavigationButtonStyle}}" />
                            <Button x:Name="PART_RightNavigationButton" Grid.Column="2" Style="{DynamicResource {dxt:LWKey RangeControl.RightNavigationButtonStyle}}" />
                        </Grid>
                        <ContentPresenter
                            x:Name="PART_LeftLabel"
                            Canvas.Left="0"
                            Margin="{DynamicResource {dxt:LWKey RangeControl.LeftLabelMargin}}"
                            IsHitTestVisible="False"
                            Style="{DynamicResource {dxt:LWKey RangeControl.LabelStyle}}" />
                        <ContentPresenter
                            x:Name="PART_RightLabel"
                            Canvas.Left="0"
                            Margin="{DynamicResource {dxt:LWKey RangeControl.RightLabelMargin}}"
                            IsHitTestVisible="False"
                            Style="{DynamicResource {dxt:LWKey RangeControl.LabelStyle}}" />
                    </Canvas>
                    <Canvas>
                        <dx:DXBorder
                            x:Name="PART_SelectionRectangle"
                            EnableDPICorrection="False"
                            Style="{DynamicResource {dxt:LWKey RangeControl.SelectionRectangleStyle}}"
                            Visibility="Collapsed" />
                    </Canvas>
                </Grid>
                <dxeri:RangeBar x:Name="PART_RangeBar" Grid.Row="1" Style="{DynamicResource {dxt:LWKey RangeControl.RangeBarStyle}}" />
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxer:RangeControl.PropertyProvider).InvertLeftThumb, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="PART_SelectionLeftThumb" Property="Style" Value="{DynamicResource {dxt:LWKey RangeControl.RightSelectionThumbStyle}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxer:RangeControl.PropertyProvider).InvertRightThumb, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="PART_SelectionRightThumb" Property="Style" Value="{DynamicResource {dxt:LWKey RangeControl.LeftSelectionThumbStyle}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\RangeControl.xaml-->

    <!--#region Editors\Themes\Generic\RangeEdit.xaml-->
    <!--#endregion Editors\Themes\Generic\RangeEdit.xaml-->

    <!--#region Editors\Themes\Generic\RatingEdit.xaml-->
    <Style x:Key="RatingControlDefaultStyle" TargetType="dxe:RatingControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxe:RatingControl">
                    <dxei:RatingPanel ChildrenSource="{Binding Items, RelativeSource={RelativeSource TemplatedParent}}" Orientation="{TemplateBinding Orientation}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="2,2,2,2" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Margin" Value="2,2,2,2" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.35" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey RatingEdit.DisplayTemplate}">
        <dxe:RatingControl x:Name="PART_Editor" AllowHover="False" IsReadOnly="True" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RatingEdit.EditTemplate}">
        <dxe:RatingControl x:Name="PART_Editor" AllowHover="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:BooleanNegationConverter}}" IsReadOnly="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RatingEdit.Template}" TargetType="dxe:RatingEdit">
        <ContentControl
            x:Name="PART_Root"
            HorizontalContentAlignment="Stretch"
            VerticalContentAlignment="Stretch"
            dx:FocusHelper2.Focusable="False"
            dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}"
            Template="{TemplateBinding ActualBorderTemplate}">
            <dxe:EditorControl x:Name="PART_Content" Template="{TemplateBinding ActualEditorControlTemplate}" />
        </ContentControl>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\RatingEdit.xaml-->

    <!--#region Editors\Themes\Generic\SparklineEdit.xaml-->
    <sys:Double x:Key="{dxt:LWKey SparklineEdit.MinHeight}">20</sys:Double>
    <Style x:Key="SparklineStyle" TargetType="dxe:SparklineControl">
        <Setter Property="HighlightMinPoint" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HighlightMinPoint}" />
        <Setter Property="HighlightMaxPoint" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HighlightMaxPoint}" />
        <Setter Property="HighlightStartPoint" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HighlightStartPoint}" />
        <Setter Property="HighlightEndPoint" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HighlightEndPoint}" />
        <Setter Property="Brush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).Brush}" />
        <Setter Property="MaxPointBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MaxPointBrush}" />
        <Setter Property="MinPointBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MinPointBrush}" />
        <Setter Property="StartPointBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).StartPointBrush}" />
        <Setter Property="EndPointBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).EndPointBrush}" />
        <Setter Property="NegativePointBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).NegativePointBrush}" />
        <Setter Property="MinHeight" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MinHeight}" />
    </Style>



    <ControlTemplate x:Key="{dxt:LWKey SparklineEdit.Template}" TargetType="dxe:SparklineEdit">
        <dxe:EditorControl x:Name="PART_Content" Template="{TemplateBinding ActualEditorControlTemplate}" />
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey SparklineEdit.LineSparklineStyle}" BasedOn="{StaticResource SparklineStyle}" TargetType="{x:Type dxe:LineSparklineControl}">
        <Setter Property="LineWidth" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).LineWidth}" />
        <Setter Property="HighlightNegativePoints" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HighlightNegativePoints}" />
        <Setter Property="ShowMarkers" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ShowMarkers}" />
        <Setter Property="MarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MarkerSize}" />
        <Setter Property="MaxPointMarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MaxPointMarkerSize}" />
        <Setter Property="MinPointMarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MinPointMarkerSize}" />
        <Setter Property="StartPointMarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).StartPointMarkerSize}" />
        <Setter Property="EndPointMarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).EndPointMarkerSize}" />
        <Setter Property="NegativePointMarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).NegativePointMarkerSize}" />
        <Setter Property="MarkerBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MarkerBrush}" />
    </Style>
    <Style x:Key="{dxt:LWKey SparklineEdit.AreaSparklineStyle}" BasedOn="{StaticResource SparklineStyle}" TargetType="{x:Type dxe:AreaSparklineControl}">
        <Setter Property="LineWidth" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).LineWidth}" />
        <Setter Property="HighlightNegativePoints" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HighlightNegativePoints}" />
        <Setter Property="ShowMarkers" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ShowMarkers}" />
        <Setter Property="MarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MarkerSize}" />
        <Setter Property="MaxPointMarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MaxPointMarkerSize}" />
        <Setter Property="MinPointMarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MinPointMarkerSize}" />
        <Setter Property="StartPointMarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).StartPointMarkerSize}" />
        <Setter Property="EndPointMarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).EndPointMarkerSize}" />
        <Setter Property="NegativePointMarkerSize" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).NegativePointMarkerSize}" />
        <Setter Property="MarkerBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).MarkerBrush}" />
        <Setter Property="AreaOpacity" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).AreaOpacity}" />
    </Style>
    <Style x:Key="{dxt:LWKey SparklineEdit.BarSparklineStyle}" BasedOn="{StaticResource SparklineStyle}" TargetType="{x:Type dxe:BarSparklineControl}">
        <Setter Property="BarDistance" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).BarDistance}" />
        <Setter Property="HighlightNegativePoints" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HighlightNegativePoints}" />
    </Style>
    <Style x:Key="{dxt:LWKey SparklineEdit.WinLossSparklineStyle}" BasedOn="{StaticResource SparklineStyle}" TargetType="{x:Type dxe:WinLossSparklineControl}">
        <Setter Property="BarDistance" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).BarDistance}" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey SparklineEdit.LineDisplayTemplate}">
        <dxe:LineSparklineControl x:Name="PART_Editor" dx:FocusHelper2.Focusable="False" Style="{DynamicResource {dxt:LWKey SparklineEdit.LineSparklineStyle}}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey SparklineEdit.AreaDisplayTemplate}">
        <dxe:AreaSparklineControl x:Name="PART_Editor" dx:FocusHelper2.Focusable="False" Style="{DynamicResource {dxt:LWKey SparklineEdit.AreaSparklineStyle}}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey SparklineEdit.BarDisplayTemplate}">
        <dxe:BarSparklineControl x:Name="PART_Editor" dx:FocusHelper2.Focusable="False" Style="{DynamicResource {dxt:LWKey SparklineEdit.BarSparklineStyle}}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey SparklineEdit.WinLossDisplayTemplate}">
        <dxe:WinLossSparklineControl x:Name="PART_Editor" dx:FocusHelper2.Focusable="False" Style="{DynamicResource {dxt:LWKey SparklineEdit.WinLossSparklineStyle}}" />
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\SparklineEdit.xaml-->

    <!--#region Editors\Themes\Generic\TimePicker.xaml-->


    <ControlTemplate x:Key="{dxt:LWKey TimePicker.ClockTemplate}" TargetType="{x:Type dxei:TimePickerClock}">
        <Grid>
            <Ellipse
                Width="{DynamicResource {dxt:LWKey TimePicker.ClockSize}}"
                Height="{DynamicResource {dxt:LWKey TimePicker.ClockSize}}"
                Fill="{DynamicResource {dxt:LWKey TimePicker.ClockFillBrush}}"
                Stroke="{TemplateBinding BorderBrush}"
                StrokeThickness="{DynamicResource {dxt:LWKey TimePicker.ClockStrokeThickness}}" />
            <Canvas x:Name="PART_ClockCanvas" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <Canvas HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Line
                    x:Name="PART_ClockHoursArrow"
                    StrokeThickness="4"
                    Style="{DynamicResource {dxt:LWKey TimePicker.ClockHandStyle}}"
                    Visibility="{Binding Path=VisibleMaskParts, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TimePickerPartToVisibilityConverter}, ConverterParameter={x:Static dxe:TimePickerMaskPart.Hours}}" />
                <Line
                    x:Name="PART_ClockMinutesArrow"
                    StrokeThickness="3"
                    Style="{DynamicResource {dxt:LWKey TimePicker.ClockHandStyle}}"
                    Visibility="{Binding Path=VisibleMaskParts, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TimePickerPartToVisibilityConverter}, ConverterParameter={x:Static dxe:TimePickerMaskPart.Minutes}}" />
                <Line
                    x:Name="PART_ClockSecondsArrow"
                    StrokeThickness="2"
                    Style="{DynamicResource {dxt:LWKey TimePicker.ClockHandStyle}}"
                    Visibility="{Binding Path=VisibleMaskParts, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TimePickerPartToVisibilityConverter}, ConverterParameter={x:Static dxe:TimePickerMaskPart.Seconds}}" />
                <Ellipse x:Name="PART_ClockCenterDot" Stroke="{TemplateBinding Foreground}" StrokeThickness="{DynamicResource {dxt:LWKey TimePicker.ClockShaftSize}}" />
            </Canvas>
        </Grid>
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey TimePicker.ClockHandStyle}" TargetType="{x:Type Line}">
        <Setter Property="StrokeEndLineCap" Value="Round" />
        <Setter Property="StrokeStartLineCap" Value="Round" />
        <Setter Property="Stroke" Value="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>
    <Style x:Key="{dxt:LWKey TimePicker.ClockStyle}" TargetType="{x:Type dxei:TimePickerClock}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TimePicker.ClockTemplate}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey TimePicker.ClockBorderBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey TimePicker.ClockForeground}}" />
        <Setter Property="Margin" Value="15" />
        <Setter Property="Height" Value="{DynamicResource {dxt:LWKey TimePicker.ClockSize}}" />
        <Setter Property="Width" Value="{DynamicResource {dxt:LWKey TimePicker.ClockSize}}" />
        <Setter Property="ShortTickOffset" Value="{DynamicResource {dxt:LWKey TimePicker.ClockShortTickOffset}}" />
        <Setter Property="LongTickOffset" Value="{DynamicResource {dxt:LWKey TimePicker.ClockLongTickOffset}}" />
        <Setter Property="ShortTickSize" Value="{DynamicResource {dxt:LWKey TimePicker.ClockShortTickLength}}" />
        <Setter Property="LongTickSize" Value="{DynamicResource {dxt:LWKey TimePicker.ClockLongTickLength}}" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey TimePicker.Template}" TargetType="{x:Type dxe:TimePicker}">
        <Grid Background="{TemplateBinding Background}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <dxei:TimePickerClock
                x:Name="PART_Clock"
                Grid.Row="0"
                DateTime="{TemplateBinding DateTime}"
                Style="{DynamicResource {dxt:LWKey TimePicker.ClockStyle}}"
                VisibleMaskParts="{TemplateBinding VisibleMaskParts}" />
            <dxe:ButtonEdit
                Grid.Row="1"
                HorizontalAlignment="Center"
                dxeh:MVVMFocusBehavior.IsFocused="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                AllowDefaultButton="false"
                EditValue="{Binding Path=DateTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}"
                InvalidValueBehavior="AllowLeaveEditor"
                Mask="{Binding Path=VisibleMaskParts, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TimePickerPartToMaskConverter}}"
                MaskType="DateTimeAdvancingCaret"
                MaskUseAsDisplayFormat="True"
                Style="{DynamicResource {dxt:LWKey TimePicker.TimeEditBoxStyle}}">
                <dxmvvmi:Interaction.Behaviors>
                    <dxei:TimePickerClockEditorBehavior MaxValue="{Binding Path=MaxValue, RelativeSource={RelativeSource TemplatedParent}}" MinValue="{Binding Path=MinValue, RelativeSource={RelativeSource TemplatedParent}}" />
                </dxmvvmi:Interaction.Behaviors>
                <dxe:SpinButtonInfo IsDefaultButton="True" />
            </dxe:ButtonEdit>
        </Grid>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\TimePicker.xaml-->

    <!--#region Editors\Themes\Generic\ToggleSwitchEdit.xaml-->

    <Style x:Key="ToggleSwitchStyle" TargetType="{x:Type dxe:ToggleSwitch}">
        <Setter Property="Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Background}" />
        <Setter Property="BorderThickness" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).BorderThickness}" />
        <Setter Property="BorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).BorderBrush}" />
        <Setter Property="CornerRadius" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).CornerRadius}" />
        <Setter Property="dxe:EditorAppearanceProperties.FocusedBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.FocusedBorderBrush)}" />
        <Setter Property="dxe:EditorAppearanceProperties.CheckedStateBackground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.CheckedStateBackground)}" />
        <Setter Property="dxe:EditorAppearanceProperties.CheckedStateBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.CheckedStateBorderBrush)}" />
        <Setter Property="SwitchBorderTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).SwitchBorderTemplate}" />
        <Setter Property="SwitchThumbTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).SwitchThumbTemplate}" />
        <Setter Property="AnimationMode" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).AnimationMode}" />
        <Setter Property="IsReadOnly" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly}" />
        <Setter Property="IsTabStop" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsTabStop}" />
        <Setter Property="Focusable" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Focusable}" />
        <Setter Property="Cursor" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Cursor}" />
        <Setter Property="IsThreeState" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsThreeState}" />
        <Setter Property="CheckedStateContentTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).CheckedStateContentTemplate}" />
        <Setter Property="UncheckedStateContentTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UncheckedStateContentTemplate}" />
        <Setter Property="UndefinedStateContentTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UndefinedStateContentTemplate}" />
        <Setter Property="ToggleSwitchWidth" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ToggleSwitchWidth}" />
        <Setter Property="ToggleSwitchHeight" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ToggleSwitchHeight}" />
        <Setter Property="ContentPlacement" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContentPlacement}" />
        <Setter Property="CheckedStateContent" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).CheckedStateContent}" />
        <Setter Property="UncheckedStateContent" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UncheckedStateContent}" />
        <Setter Property="UndefinedStateContent" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UndefinedStateContent}" />
        <Setter Property="EnableAnimation" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).EnableAnimation}" />
        <Setter Property="Command" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Command}" />
        <Setter Property="CommandParameter" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).CommandParameter}" />
        <Setter Property="CommandTarget" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).CommandTarget}" />
        <Setter Property="ClickMode" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ClickMode}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ToggleSwitch.InplaceTemplate}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceInactive">
                <Setter Property="Margin" Value="{DynamicResource {dxt:LWKey ToggleSwitchEdit.InplaceMargin}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceActive">
                <Setter Property="Margin" Value="{DynamicResource {dxt:LWKey ToggleSwitchEdit.InplaceMargin}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey ToggleSwitchEdit.Template}" TargetType="dxe:ToggleSwitchEdit">
        <dxe:EditorControl x:Name="PART_Content" Template="{TemplateBinding ActualEditorControlTemplate}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ToggleSwitchEdit.EditTemplate}">
        <Grid>
            <dxe:ToggleSwitch x:Name="PART_Editor" Style="{StaticResource ToggleSwitchStyle}" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ToggleSwitchEdit.DisplayTemplate}">
        <Grid>
            <dxe:ToggleSwitch x:Name="PART_Editor" IsReadOnly="True" Style="{StaticResource ToggleSwitchStyle}" />
        </Grid>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\ToggleSwitchEdit.xaml-->

    <!--#region Editors\Themes\Generic\TrackBarEdit.xaml-->
    <sys:Double x:Key="{dxt:LWKey TrackBarEdit.TickLength}">3</sys:Double>
    <sys:Double x:Key="{dxt:LWKey TrackBarEdit.TickContentDistance}">4</sys:Double>
    <sys:Double x:Key="{dxt:LWKey TrackBarEdit.ThumbToolTipDistance}">8</sys:Double>
    <Style x:Key="BaseThumbStyle" TargetType="Thumb">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="dxeh:ToolTipServiceEx.IsEnabled" Value="true" />
        <Setter Property="dxeh:ToolTipServiceEx.ToolTipContent" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Value}" />
        <Setter Property="dxeh:ToolTipServiceEx.ToolTipContentStringFormat" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ValueToolTipStringFormat}" />
        <Setter Property="dxeh:ToolTipServiceEx.ToolTipContentTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ValueToolTipContentTemplate}" />
        <Setter Property="dxeh:ToolTipServiceEx.ToolTipPlacement" Value="Custom" />
        <Setter Property="dxeh:ToolTipServiceEx.CustomPopupPlacementCallback" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ToolTipPlacementCallback}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ValueToolTipPlacement}" Value="None">
                <Setter Property="dxeh:ToolTipServiceEx.IsEnabled" Value="false" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsRange}" Value="true">
                <Setter Property="dxeh:ToolTipServiceEx.ToolTipContent">
                    <Setter.Value>
                        <MultiBinding Converter="{dxe:TrackBarEditRangeMultiValueConverter}">
                            <Binding Path="(dxe:BaseEdit.OwnerEdit).SelectionStart" />
                            <Binding Path="(dxe:BaseEdit.OwnerEdit).SelectionEnd" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>



    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.DisplayTemplate}">
        <dxe:RangeEditBasePanel x:Name="PART_Editor" dx:FocusHelper2.Focusable="False" />
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey TrackBarEdit.PanelRightSideStyle}" TargetType="ContentControl">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.PanelRightSideTemplate}}" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey TrackBarEdit.PanelRightSideBackground}}" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEdit.PanelLeftSideStyle}" TargetType="ContentControl">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.PanelLeftSideTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey TrackBarEdit.PanelLeftSideBackground}}" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEdit.TickBarStyle}" TargetType="{x:Type dxe:TrackBarEditTickItemsControl}">
        <Setter Property="MinHeight" Value="4" />
        <Setter Property="MinWidth" Value="4" />
        <Setter Property="TickFrequency" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickFrequency}" />
        <Setter Property="Ticks" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Ticks}" />
        <Setter Property="ReservedSpace" Value="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).ReservedSpace}" />
        <Setter Property="Minimum" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Minimum}" />
        <Setter Property="Maximum" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Maximum}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="DisplayMode" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickItemDisplayMode}" />
        <Setter Property="ItemTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickItemTemplate}" />
        <Setter Property="ItemTemplateSelector" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickItemTemplateSelector}" />
        <Setter Property="ItemContainerStyle" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickItemContainerStyle}" />
        <Setter Property="ItemContainerStyleSelector" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickItemContainerStyleSelector}" />
        <Setter Property="ItemStringFormat" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickItemStringFormat}" />
        <Setter Property="AlternationCount" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickAlternationCount}" />
        <Setter Property="Orientation" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Orientation}" />
        <Setter Property="LabelClickCommand" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).LabelClickCommand}" />
        <Setter Property="Focusable" Value="False"/>
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEdit.LeftStepButtonStyle}" TargetType="RepeatButton">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="{DynamicResource {dxt:LWKey TrackBarEdit.LeftStepButtonSize}}" />
        <Setter Property="Height" Value="{DynamicResource {dxt:LWKey TrackBarEdit.LeftStepButtonSize}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.LeftStepButtonTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Width" Value="26" />
                <Setter Property="Height" Value="26" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEdit.RightStepButtonStyle}" TargetType="RepeatButton">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="{DynamicResource {dxt:LWKey TrackBarEdit.RightStepButtonSize}}" />
        <Setter Property="Height" Value="{DynamicResource {dxt:LWKey TrackBarEdit.RightStepButtonSize}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.RightStepButtonTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Width" Value="26" />
                <Setter Property="Height" Value="26" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEdit.HorizontalBackgroundStyle}" TargetType="ContentControl">
        <Setter Property="dxeh:ControlHelper.ShowFocusedState" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxeh:ControlHelper.ShowFocusedState), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasBackground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.BorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.BorderThickness" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasBorderThickness" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.CornerRadius" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasCornerRadius" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxei:BaseEditAppearanceOptions.TrackHeight" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.TrackHeight), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxei:BaseEditAppearanceOptions.HasTrackHeight" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasTrackHeight), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxe:EditorAppearanceProperties.FocusedBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.HorizontalBackgroundTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEdit.VerticalBackgroundStyle}" TargetType="ContentControl">
        <Setter Property="dxeh:ControlHelper.ShowFocusedState" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxeh:ControlHelper.ShowFocusedState), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasBackground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.BorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.BorderThickness" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasBorderThickness" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.CornerRadius" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasCornerRadius" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxei:BaseEditAppearanceOptions.TrackWidth" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.TrackWidth), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxei:BaseEditAppearanceOptions.HasTrackWidth" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasTrackWidth), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxe:EditorAppearanceProperties.FocusedBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.VerticalBackgroundTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.PanelHorizontalTemplate}" TargetType="dxe:RangeEditBasePanel">
        <Grid x:Name="root" VerticalAlignment="Center">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{DynamicResource {dxt:LWKey TrackBarEdit.TrackMinHeight}}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="leftButton" Width="Auto" />
                <ColumnDefinition x:Name="leftColumn" Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).LeftSidePosition, Converter={StaticResource GridLengthConverter}}" />
                <ColumnDefinition x:Name="centerColumn" Width="Auto" />
                <ColumnDefinition x:Name="rightColumn" Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).RightSidePosition, Converter={StaticResource GridLengthConverter}}" />
                <ColumnDefinition x:Name="rightButton" Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentControl
                x:Name="back"
                Grid.Row="1"
                Grid.Column="1"
                Grid.ColumnSpan="3"
                dxeh:ControlHelper.ShowFocusedState="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsKeyboardFocusWithin}"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.HorizontalBackgroundStyle}}" />
            <RepeatButton
                x:Name="PART_LeftStepButton"
                Grid.Row="1"
                Grid.Column="0"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).DecrementSmallCommand}"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).DecrementButtonStyle}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsZoom, Converter={StaticResource BoolToVisibilityConverter}}" />
            <dxe:TrackBarEditTickItemsControl
                x:Name="PART_TopTick"
                Grid.Row="0"
                Grid.Column="1"
                Grid.ColumnSpan="3"
                Placement="Top"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.TickBarStyle}}" />
            <dxe:TrackBarEditTickItemsControl
                x:Name="PART_BottomTick"
                Grid.Row="2"
                Grid.Column="1"
                Grid.ColumnSpan="3"
                Placement="Bottom"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.TickBarStyle}}" />
            <RepeatButton
                x:Name="left"
                Grid.Row="1"
                Grid.Column="1"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).DecrementLargeCommand}"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).NearTrackStyle}" />
            <dxe:TrackBarEditThumb
                x:Name="PART_Thumb"
                Grid.Row="1"
                Grid.Column="2"
                Panel.ZIndex="1"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).ThumbStyle}" />
            <RepeatButton
                x:Name="right"
                Grid.Row="1"
                Grid.Column="3"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementLargeCommand}"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).FarTrackStyle}" />
            <RepeatButton
                x:Name="PART_RightStepButton"
                Grid.Row="1"
                Grid.Column="4"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementSmallCommand}"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IncrementButtonStyle}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsZoom, Converter={StaticResource BoolToVisibilityConverter}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="None">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="TopLeft">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="BottomRight">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="Both">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.SelectionRangeLeftButtonTemplate}" TargetType="RepeatButton">
        <Rectangle Fill="Transparent" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.SelectionRangeRightButtonTemplate}" TargetType="RepeatButton">
        <Rectangle Fill="Transparent" />
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey TrackBarEdit.SelectionRangeLeftButtonStyle}" TargetType="RepeatButton">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.SelectionRangeLeftButtonTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEdit.SelectionRangeRightButtonStyle}" TargetType="RepeatButton">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.SelectionRangeRightButtonTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEdit.HorizontalSelectionRangeBackgroundStyle}" TargetType="ContentControl">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.HorizontalSelectionRangeBackgroundTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEdit.VerticalSelectionRangeBackgroundStyle}" TargetType="ContentControl">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.VerticalSelectionRangeBackgroundTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.HorizontalSelectionRangeTemplate}" TargetType="ContentControl">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <ContentControl Grid.Column="0" Grid.ColumnSpan="2" Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).SelectedRangeBackgroundStyle}" />
            <RepeatButton
                Grid.Column="0"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementSmallCommand}"
                CommandParameter="SelectionStart"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.SelectionRangeLeftButtonStyle}}" />
            <RepeatButton
                Grid.Column="1"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).DecrementSmallCommand}"
                CommandParameter="SelectionEnd"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.SelectionRangeRightButtonStyle}}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.VerticalSelectionRangeTemplate}" TargetType="ContentControl">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <ContentControl Grid.Row="0" Grid.RowSpan="2" Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).SelectedRangeBackgroundStyle}" />
            <RepeatButton
                Grid.Row="0"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).DecrementSmallCommand}"
                CommandParameter="SelectionEnd"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.SelectionRangeRightButtonStyle}}" />
            <RepeatButton
                Grid.Row="1"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementSmallCommand}"
                CommandParameter="SelectionStart"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.SelectionRangeLeftButtonStyle}}" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey TrackBarEdit.HorizontalSelectionRangeStyle}" TargetType="ContentControl">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.HorizontalSelectionRangeTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEdit.VerticalSelectionRangeStyle}" TargetType="ContentControl">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.VerticalSelectionRangeTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.RangePanelHorizontalTemplate}" TargetType="dxe:RangeEditBasePanel">
        <Grid x:Name="root" VerticalAlignment="Center" UseLayoutRounding="False">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{DynamicResource {dxt:LWKey TrackBarEdit.TrackMinHeight}}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="leftButton" Width="Auto" />
                <ColumnDefinition x:Name="leftColumn" Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).LeftSidePosition, Converter={StaticResource GridLengthConverter}}" />
                <ColumnDefinition x:Name="leftThumb" Width="Auto" />
                <ColumnDefinition x:Name="centerColumn" Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).SelectionLength, Converter={StaticResource GridLengthConverter}}" />
                <ColumnDefinition x:Name="rightThumb" Width="Auto" />
                <ColumnDefinition x:Name="rightColumn" Width="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).RightSidePosition, Converter={StaticResource GridLengthConverter}}" />
                <ColumnDefinition x:Name="rightButton" Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentControl
                x:Name="back"
                Grid.Row="1"
                Grid.Column="1"
                Grid.ColumnSpan="5"
                dxeh:ControlHelper.ShowFocusedState="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsKeyboardFocusWithin}"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.HorizontalBackgroundStyle}}" />
            <dxe:TrackBarEditTickItemsControl
                x:Name="PART_TopTick"
                Grid.Row="0"
                Grid.Column="1"
                Grid.ColumnSpan="5"
                Placement="Top"
                ReservedSpace="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).ReservedSpace}"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.TickBarStyle}}" />
            <RepeatButton
                x:Name="PART_LeftStepButton"
                Grid.Row="1"
                Grid.Column="0"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).DecrementSmallCommand}"
                CommandParameter="SelectionRange"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).DecrementButtonStyle}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsZoom, Converter={StaticResource BoolToVisibilityConverter}}" />
            <RepeatButton
                x:Name="left"
                Grid.Row="1"
                Grid.Column="1"
                Background="{DynamicResource {dxt:LWKey TrackBarEdit.PanelLeftSideUnSelectedBackground}}"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).DecrementLargeCommand}"
                CommandParameter="SelectionStart"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).NearTrackStyle}" />
            <ContentControl Grid.Row="1" Grid.Column="3" Style="{DynamicResource {dxt:LWKey TrackBarEdit.HorizontalSelectionRangeStyle}}" />
            <dxe:TrackBarEditThumb
                x:Name="PART_LeftThumb"
                Grid.Row="1"
                Grid.Column="2"
                Panel.ZIndex="1"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).NearThumbStyle}" />
            <dxe:TrackBarEditThumb
                x:Name="PART_RightThumb"
                Grid.Row="1"
                Grid.Column="4"
                Panel.ZIndex="1"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).FarThumbStyle}" />
            <RepeatButton
                x:Name="right"
                Grid.Row="1"
                Grid.Column="5"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementLargeCommand}"
                CommandParameter="SelectionEnd"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).FarTrackStyle}" />
            <RepeatButton
                x:Name="PART_RightStepButton"
                Grid.Row="1"
                Grid.Column="6"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementSmallCommand}"
                CommandParameter="SelectionRange"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IncrementButtonStyle}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsZoom, Converter={StaticResource BoolToVisibilityConverter}}" />
            <dxe:TrackBarEditTickItemsControl
                x:Name="PART_BottomTick"
                Grid.Row="2"
                Grid.Column="1"
                Grid.ColumnSpan="5"
                Placement="Bottom"
                ReservedSpace="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).ReservedSpace}"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.TickBarStyle}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="None">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="TopLeft">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="BottomRight">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="Both">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.RangePanelVerticalTemplate}" TargetType="dxe:RangeEditBasePanel">
        <Grid x:Name="root" UseLayoutRounding="False">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition x:Name="leftButton" Height="Auto" />
                <RowDefinition x:Name="leftColumn" Height="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).RightSidePosition, Converter={StaticResource GridLengthConverter}}" />
                <RowDefinition x:Name="leftThumb" Height="Auto" />
                <RowDefinition x:Name="centerColumn" Height="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).SelectionLength, Converter={StaticResource GridLengthConverter}}" />
                <RowDefinition x:Name="rightThumb" Height="Auto" />
                <RowDefinition x:Name="rightColumn" Height="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).LeftSidePosition, Converter={StaticResource GridLengthConverter}}" />
                <RowDefinition x:Name="rightButton" Height="Auto" />
            </Grid.RowDefinitions>
            <ContentControl
                x:Name="back"
                Grid.Row="1"
                Grid.RowSpan="5"
                Grid.Column="1"
                dxeh:ControlHelper.ShowFocusedState="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsKeyboardFocusWithin}"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.VerticalBackgroundStyle}}" />
            <dxe:TrackBarEditTickItemsControl
                x:Name="PART_TopTick"
                Grid.Row="1"
                Grid.RowSpan="5"
                Grid.Column="0"
                Placement="Left"
                ReservedSpace="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).ReservedSpace}"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.TickBarStyle}}" />
            <RepeatButton
                x:Name="PART_RightStepButton"
                Grid.Row="0"
                Grid.Column="1"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementSmallCommand}"
                CommandParameter="SelectionRange"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IncrementButtonStyle}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsZoom, Converter={StaticResource BoolToVisibilityConverter}}" />
            <RepeatButton
                x:Name="right"
                Grid.Row="1"
                Grid.Column="1"
                Background="{DynamicResource {dxt:LWKey TrackBarEdit.PanelLeftSideUnSelectedBackground}}"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementLargeCommand}"
                CommandParameter="SelectionEnd"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).NearTrackStyle}" />
            <ContentControl Grid.Row="3" Grid.Column="1" Style="{DynamicResource {dxt:LWKey TrackBarEdit.VerticalSelectionRangeStyle}}" />
            <dxe:TrackBarEditThumb
                x:Name="PART_RightThumb"
                Grid.Row="2"
                Grid.Column="1"
                Panel.ZIndex="1"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).FarThumbStyle}" />
            <dxe:TrackBarEditThumb
                x:Name="PART_LeftThumb"
                Grid.Row="4"
                Grid.Column="1"
                Panel.ZIndex="1"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).NearThumbStyle}" />
            <RepeatButton
                x:Name="left"
                Grid.Row="5"
                Grid.Column="1"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).DecrementLargeCommand}"
                CommandParameter="SelectionStart"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).FarTrackStyle}" />
            <RepeatButton
                x:Name="PART_LeftStepButton"
                Grid.Row="6"
                Grid.Column="1"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).DecrementSmallCommand}"
                CommandParameter="SelectionRange"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).DecrementButtonStyle}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsZoom, Converter={StaticResource BoolToVisibilityConverter}}" />
            <dxe:TrackBarEditTickItemsControl
                x:Name="PART_BottomTick"
                Grid.Row="1"
                Grid.RowSpan="5"
                Grid.Column="2"
                Placement="Right"
                ReservedSpace="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).ReservedSpace}"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.TickBarStyle}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="None">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="TopLeft">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="BottomRight">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="Both">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.PanelVerticalTemplate}" TargetType="dxe:RangeEditBasePanel">
        <Grid x:Name="root">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition MinWidth="14" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition x:Name="rightButton" Height="Auto" />
                <RowDefinition x:Name="rightColumn" Height="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).RightSidePosition, Converter={StaticResource GridLengthConverter}}" />
                <RowDefinition x:Name="centerColumn" Height="Auto" />
                <RowDefinition x:Name="leftColumn" Height="{Binding Path=(dxe:RangeEditBaseInfo.LayoutInfo).LeftSidePosition, Converter={StaticResource GridLengthConverter}}" />
                <RowDefinition x:Name="leftButton" Height="Auto" />
            </Grid.RowDefinitions>
            <ContentControl
                x:Name="back"
                Grid.Row="1"
                Grid.RowSpan="3"
                Grid.Column="1"
                dxeh:ControlHelper.ShowFocusedState="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsKeyboardFocusWithin}"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.VerticalBackgroundStyle}}" />
            <dxe:TrackBarEditTickItemsControl
                x:Name="PART_TopTick"
                Grid.Row="1"
                Grid.RowSpan="3"
                Grid.Column="0"
                Placement="Left"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.TickBarStyle}}" />
            <RepeatButton
                x:Name="PART_RightStepButton"
                Grid.Row="0"
                Grid.Column="1"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementSmallCommand}"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IncrementButtonStyle}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsZoom, Converter={StaticResource BoolToVisibilityConverter}}" />
            <RepeatButton
                x:Name="right"
                Grid.Row="1"
                Grid.Column="1"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementLargeCommand}"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).FarTrackStyle}" />
            <dxe:TrackBarEditThumb
                x:Name="PART_Thumb"
                Grid.Row="2"
                Grid.Column="1"
                Panel.ZIndex="1"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).ThumbStyle}" />
            <RepeatButton
                x:Name="left"
                Grid.Row="3"
                Grid.Column="1"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).DecrementLargeCommand}"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).NearTrackStyle}" />
            <RepeatButton
                x:Name="PART_LeftStepButton"
                Grid.Row="4"
                Grid.Column="1"
                Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).DecrementSmallCommand}"
                Style="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).DecrementButtonStyle}"
                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsZoom, Converter={StaticResource BoolToVisibilityConverter}}" />
            <dxe:TrackBarEditTickItemsControl
                x:Name="PART_BottomTick"
                Grid.Row="1"
                Grid.RowSpan="3"
                Grid.Column="2"
                Placement="Right"
                Style="{DynamicResource {dxt:LWKey TrackBarEdit.TickBarStyle}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="None">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="TopLeft">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="BottomRight">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisabledTicksVisibility}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).TickPlacement}" Value="Both">
                <Setter TargetName="PART_BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_TopTick" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.Template}" TargetType="dxe:TrackBarEdit">
        <dxe:EditorControl x:Name="PART_Content" Template="{TemplateBinding ActualEditorControlTemplate}" />
    </ControlTemplate>
    <ItemsPanelTemplate x:Key="{dxt:LWKey TrackBarEdit.ItemPanelTemplate}">
        <dxe:TrackBarEditTickPanel />
    </ItemsPanelTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.TickBarItemTemplate}" TargetType="{x:Type dxe:TrackBarEditTickItem}">
        <DockPanel
            x:Name="Panel"
            Margin="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            LastChildFill="true">
            <Rectangle
                x:Name="Rectangle"
                HorizontalAlignment="Center"
                Fill="{TemplateBinding TextElement.Foreground}"
                Opacity="{TemplateBinding TickOpacity}" />
            <ContentPresenter
                x:Name="Presenter"
                Margin="{TemplateBinding TickContentPadding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                DockPanel.Dock="Bottom" />
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="DisplayMode" Value="Tick">
                <Setter TargetName="Presenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="DisplayMode" Value="Text">
                <Setter TargetName="Rectangle" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Placement" Value="Top">
                <Setter TargetName="Rectangle" Property="DockPanel.Dock" Value="Bottom" />
                <Setter TargetName="Rectangle" Property="Width" Value="1" />
                <Setter TargetName="Rectangle" Property="Height" Value="{Binding Path=TickLength, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="Placement" Value="Bottom">
                <Setter TargetName="Rectangle" Property="DockPanel.Dock" Value="Top" />
                <Setter TargetName="Rectangle" Property="Width" Value="1" />
                <Setter TargetName="Rectangle" Property="Height" Value="{Binding Path=TickLength, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="Placement" Value="Left">
                <Setter TargetName="Rectangle" Property="DockPanel.Dock" Value="Right" />
                <Setter TargetName="Rectangle" Property="Width" Value="{Binding Path=TickLength, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Rectangle" Property="Height" Value="1" />
            </Trigger>
            <Trigger Property="Placement" Value="Right">
                <Setter TargetName="Rectangle" Property="DockPanel.Dock" Value="Left" />
                <Setter TargetName="Rectangle" Property="Width" Value="{Binding Path=TickLength, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Rectangle" Property="Height" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\TrackBarEdit.xaml-->

    <!--#region Editors\Themes\Generic\HyperLinkEdit.xaml-->

    <ControlTemplate x:Key="{dxt:LWKey HyperLinkEdit.Template}" TargetType="{x:Type dxe:HyperlinkEdit}">
        <dxe:EditorControl x:Name="PART_Content" Template="{TemplateBinding ActualEditorControlTemplate}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey HyperLinkEdit.DisplayTemplate}">
        <TextBlock
            x:Name="PART_Editor"
            HorizontalAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource Self}}"
            dx:FocusHelper2.Focusable="False"
            Style="{DynamicResource {dxt:LWKey HyperLinkEdit.TextBlockInplaceStyle}}"
            TextTrimming="{Binding Path=(dxe:BaseEdit.OwnerEdit).TextTrimming, RelativeSource={RelativeSource Self}}"
            TextWrapping="{Binding Path=(dxe:BaseEdit.OwnerEdit).TextWrapping, RelativeSource={RelativeSource Self}}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey HyperLinkEdit.EditTemplate}">
        <TextBlock
            x:Name="PART_Editor"
            HorizontalAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource Self}}"
            dx:FocusHelper2.Focusable="False"
            Style="{DynamicResource {dxt:LWKey HyperLinkEdit.TextBlockStyle}}"
            TextTrimming="{Binding Path=(dxe:BaseEdit.OwnerEdit).TextTrimming, RelativeSource={RelativeSource Self}}"
            TextWrapping="{Binding Path=(dxe:BaseEdit.OwnerEdit).TextWrapping, RelativeSource={RelativeSource Self}}" />
    </ControlTemplate>
    <!--#endregion Editors\Themes\Generic\HyperLinkEdit.xaml-->

    <!--#region Editors\Themes\Generic\FontComboBoxEdit.xaml-->
    <!--#endregion Editors\Themes\Generic\FontComboBoxEdit.xaml-->

    <!--#region Editors\Themes\Generic\FontSizeComboBoxEdit.xaml-->
    <!--#endregion Editors\Themes\Generic\FontSizeComboBoxEdit.xaml-->

    <!--#region Editors\Themes\Generic\Generic.xaml-->
    <Style x:Key="ButtonStyleBase" TargetType="{x:Type ButtonBase}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Cursor" Value="{Binding Path=Cursor}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="Foreground" Value="{Binding Path=Foreground}" />
        <Setter Property="BorderThickness" Value="{Binding Path=BorderThickness}" />
        <Setter Property="BorderBrush" Value="{Binding Path=BorderBrush}" />
        <Setter Property="Background" Value="{Binding Path=Background}" />
        <Setter Property="Padding" Value="{Binding Path=Padding}" />
        <Setter Property="dxi:AppearanceOptions.CornerRadius" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius)}" />
        <Setter Property="dxi:AppearanceOptions.HasCornerRadius" Value="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius)}" />
        <Setter Property="Command" Value="{Binding Path=Command}" />
        <Setter Property="CommandParameter" Value="{Binding Path=CommandParameter}" />
        <Setter Property="ClickMode" Value="{Binding Path=ClickMode}" />
        <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled}" />
        <Setter Property="Visibility" Value="{Binding Path=(dxe:ButtonInfo.Visibility)}" />
        <Setter Property="CommandTarget" Value="{Binding Path=CommandTarget}" />
        <Setter Property="ToolTip" Value="{Binding Path=ToolTip}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{Binding Path=(ToolTipService.ShowDuration)}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{Binding Path=(ToolTipService.InitialShowDelay)}" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEditStyle.TrackBarEditPanelHorizontalStyle}" TargetType="{x:Type dxe:RangeEditBasePanel}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.PanelHorizontalTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEditStyle.RangeTrackBarEditPanelHorizontalStyle}" TargetType="{x:Type dxe:RangeEditBasePanel}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.RangePanelHorizontalTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEditStyle.RangeTrackBarEditPanelVerticalStyle}" TargetType="{x:Type dxe:RangeEditBasePanel}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.RangePanelVerticalTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey TrackBarEditStyle.TrackBarEditPanelVerticalStyle}" TargetType="{x:Type dxe:RangeEditBasePanel}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.PanelVerticalTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey ProgressBarEditStyle.ProgressBarStyleHorizontal}" TargetType="dxe:RangeEditBasePanel">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEditStyle.PanelTemplateHorizontal}}" />
    </Style>
    <Style x:Key="{dxt:LWKey ProgressBarEditStyle.ProgressBarMarqueeStyleHorizontal}" TargetType="dxe:RangeEditBasePanel">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEditStyle.ProgressBarMarqueeTemplateHorizontal}}" />
    </Style>
    <Style x:Key="{dxt:LWKey ProgressBarEditStyle.ProgressBarStyleVertical}" TargetType="dxe:RangeEditBasePanel">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEditStyle.PanelTemplateVertical}}" />
    </Style>
    <Style x:Key="{dxt:LWKey ProgressBarEditStyle.ProgressBarMarqueeStyleVertical}" TargetType="dxe:RangeEditBasePanel">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEditStyle.ProgressBarMarqueeTemplateVertical}}" />
    </Style>

    <Style x:Key="CalculatorBaseStyle" TargetType="{x:Type dxe:Calculator}">
        <Setter Property="OperationButtonStyle" Value="{DynamicResource {dxt:LWKey Calculator.ButtonOperationStyle}}" />
        <Setter Property="DigitButtonStyle" Value="{DynamicResource {dxt:LWKey Calculator.ButtonDigitStyle}}" />
        <Setter Property="CEButtonStyle" Value="{DynamicResource {dxt:LWKey Calculator.ButtonCEStyle}}" />
    </Style>

    <Style x:Key="ButtonInfoBaseStyle" TargetType="{x:Type dxe:ButtonInfoBase}">
        <Setter Property="CornerRadius" Value="{DynamicResource {dxt:LWKey Buttons.CornerRadius}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey Buttons.Padding}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey Buttons.Foreground}}" />
        <Setter Property="Margin" Value="{DynamicResource {dxt:LWKey Buttons.RightButtonMargin}}" />
        <Setter Property="MarginCorrection" Value="{DynamicResource {dxt:LWKey Buttons.RightButtonMarginCorrection}}" />
        <Style.Triggers>
            <Trigger Property="IsLeft" Value="True">
                <Setter Property="Margin" Value="{DynamicResource {dxt:LWKey Buttons.LeftButtonMargin}}" />
                <Setter Property="MarginCorrection" Value="{DynamicResource {dxt:LWKey Buttons.LeftButtonMarginCorrection}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CommonButtonInfoStyle" BasedOn="{StaticResource ButtonInfoBaseStyle}" TargetType="{x:Type dxe:CommonButtonInfo}">
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey Buttons.DefaultBorderThickness}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Buttons.ButtonInfoTemplate}}" />
        <Setter Property="dxei:ButtonInfoPropertyProvider.GlyphContainerStyle" Value="{DynamicResource {dxt:LWKey Buttons.ButtonInfoContentStyle}}" />
        <Style.Triggers>
            <Trigger Property="ButtonKind" Value="Repeat">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Buttons.RepeatButtonInfoTemplate}}" />
            </Trigger>
            <Trigger Property="ButtonKind" Value="Toggle">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Buttons.ToggleButtonInfoTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey Buttons.ButtonStyle}" BasedOn="{StaticResource ButtonStyleBase}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Content" Value="{Binding Path=Content}" />
        <Setter Property="ContentTemplate" Value="{Binding Path=ContentTemplate}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Buttons.ButtonTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey Buttons.DeleteButtonStyle}" BasedOn="{StaticResource ButtonStyleBase}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Margin" Value="2,0" />
    </Style>

    <Style x:Key="{dxt:LWKey Buttons.SpinButtonInfoHorizontalStyle}" TargetType="{x:Type FrameworkElement}" />

    <Style x:Key="{dxt:LWKey Buttons.SpinButtonInfoVerticalStyle}" TargetType="{x:Type FrameworkElement}" />

    <Style x:Key="{dxt:LWKey Buttons.ImageButtonStyle}" BasedOn="{StaticResource ButtonStyleBase}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Content" Value="{Binding}" />
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.ImageButtonContentTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Buttons.ButtonTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey Buttons.DateEditButtonStyle}" BasedOn="{StaticResource {dxt:LWKey Buttons.ImageButtonStyle}}" TargetType="{x:Type ButtonBase}">
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey BaseEdit.DefaultIconSvgPalette}}" />
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.DateEditButtonContentTemplate}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ActualGlyphKind}" Value="Arrow">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.DropDownGlyph}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey Buttons.ButtonContainerStyle}" TargetType="{x:Type ContentPresenter}">
        <Setter Property="ContentTemplate" Value="{Binding Path=Template}" />
    </Style>
    <!--#endregion Editors\Themes\Generic\Generic.xaml-->


    <!--#region DEFAULT STYLES-->
    <Style x:Key="BarCodePainter.DefaultStyleBase" TargetType="dxei:BarCodePainter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxei:BarCodePainter">
                    <Grid>
                        <Grid Name="Part_Grid" />
                        <Canvas Name="Part_Canvas" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OfficeDefaultBarItemDataTemplates.DefaultStyleBase" TargetType="{x:Type dxo:OfficeDefaultBarItemDataTemplates}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>
        <Setter Property="MarginBarItemContentTemplate" Value="{DynamicResource {dxt:LWKey OfficeBarItem.MarginBarItemContentTemplate}}" />
        <Setter Property="PaperKindBarItemContentTemplate" Value="{DynamicResource {dxt:LWKey OfficeBarItem.PaperKindBarItemContentTemplate}}" />
        <Setter Property="CheckEditTemplate" Value="{DynamicResource {dxt:LWKey OfficeBarItem.CheckEditTemplate}}" />
    </Style>
    <Style x:Key="CalendarCellButton.DefaultStyleBase" TargetType="{x:Type dxepCalendar:CalendarCellButton}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="White" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateEdit.CellButtonTemplate}}" />
    </Style>
    <Style x:Key="InplaceFilterEditor.DefaultStyleBase" TargetType="{x:Type dxeFiltering:InplaceFilterEditor}">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {dxt:LWKey FilterControl.InplaceFilterEditorForeground}}" />
    </Style>
    <Style x:Key="FilterPanelControlBase.DefaultStyleBase" TargetType="{x:Type dxeFiltering:FilterPanelControlBase}">
        <Style.Setters>
            <!--SPECIFICTHEME Office2010Black <Setter Property="Foreground" Value="Black"/> SPECIFICTHEME-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type dxeFiltering:FilterPanelControlBase}">
                        <dx:DXBorder BorderThickness="0,1,0,0" Style="{DynamicResource {dxt:LWKey FilterPanelControlBase.FilterPanelBorderStyle}}">
                            <dx:DXDockPanel>
                                <dxeFiltering:FilterPanelCaptionControl
                                    Name="PART_FilterPanelContent"
                                    VerticalAlignment="Center"
                                    dx:DXDockPanel.Dock="Left"
                                    Content="{TemplateBinding FilterPanelContent}"
                                    Visibility="{Binding Content, RelativeSource={RelativeSource Self}, Converter={StaticResource ObjectToVisibilityConverter}}" />
                                <Button
                                    Name="PART_FilterPanelCloseButton"
                                    Margin="0,0,6,0"
                                    VerticalAlignment="Center"
                                    dx:DXDockPanel.Dock="Right"
                                    Command="{TemplateBinding ClearFilterCommand}"
                                    Focusable="False"
                                    Template="{DynamicResource {dxt:LWKey FilterPanelControlBase.ClearFilterButtonTemplate}}">
                                    <ToolTipService.ToolTip>
                                        <Binding Converter="{StaticResource EditorStringIdConverter}" ConverterParameter="FilterPanelClearFilter" Source="{x:Null}" />
                                    </ToolTipService.ToolTip>
                                </Button>
                                <Button
                                    Name="PART_FilterControlButton"
                                    Margin="0,0,6,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    dx:DXDockPanel.Dock="Right"
                                    Command="{TemplateBinding ShowFilterEditorCommand}"
                                    Focusable="True"
                                    Template="{DynamicResource {dxt:LWKey FilterPanelControlBase.FilterControlButtonTemplate}}">
                                    <ToolTipService.ToolTip>
                                        <Binding Converter="{StaticResource EditorStringIdConverter}" ConverterParameter="FilterPanelEditFilter" Source="{x:Null}" />
                                    </ToolTipService.ToolTip>
                                    <Button.Visibility>
                                        <Binding Path="AllowFilterEditor" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <dx:BooleanToVisibilityConverter />
                                            </Binding.Converter>
                                        </Binding>
                                    </Button.Visibility>
                                </Button>
                                <dxe:CheckEdit
                                    x:Name="PART_FilterPanelIsActiveButton"
                                    VerticalAlignment="Center"
                                    dx:DXDockPanel.Dock="Left"
                                    EditValue="{Binding IsFilterEnabled, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                    IsEnabled="{TemplateBinding IsCanEnableFilter}"
                                    Style="{DynamicResource {dxt:LWKey FilterPanelControlBase.FilterPanelEnableFilterStyle}}" />
                                <dxe:ComboBoxEdit
                                    x:Name="PART_FilterPanelMRUComboBox"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    dx:DXDockPanel.Dock="Left"
                                    AllowCollectionView="True"
                                    AllowDefaultButton="False"
                                    DisplayTemplate="{DynamicResource {dxt:LWKey FilterPanelControlBase.MRUComboBoxTemplate}}"
                                    EditNonEditableTemplate="{DynamicResource {dxt:LWKey FilterPanelControlBase.MRUComboBoxTemplate}}"
                                    IsTextEditable="False"
                                    ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MRUFilters}"
                                    ShowBorder="False"
                                    ShowEditorButtons="False" />
                            </dx:DXDockPanel>
                        </dx:DXBorder>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="ImageEditToolButton.DefaultStyleBase" TargetType="{x:Type dxe:ImageEditToolButton}">
        <Style.Setters>
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Padding" Value="3" />
            <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
            <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ImageEdit.ToolButtonTemplate}}" />
            <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey ImageEdit.ToolButtonPalette}}" />
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="dx:SvgImageHelper.State" Value="Hover" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="dx:SvgImageHelper.State" Value="Pressed" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ImagePresenter.DefaultStyleBase" TargetType="{x:Type dxei:ImagePresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxei:ImagePresenter}">
                    <dx:DXImage x:Name="PART_Image" Stretch="None" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalendarGroupItem.DefaultStyleBase" TargetType="{x:Type dxer:CalendarGroupItem}">
        <Setter Property="Margin" Value="1,1,1,0" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CalendarClient.CalendarGroupItemTemplate}}" />
    </Style>
    <Style x:Key="CalendarItem.DefaultStyleBase" TargetType="{x:Type dxer:CalendarItem}">
        <Setter Property="Margin" Value="1,0,1,1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CalendarClient.CalendarItemTemplate}}" />
    </Style>
    <Style x:Key="BaseEdit.DefaultStyleBase" TargetType="{x:Type dxe:BaseEdit}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="BorderTemplate" Value="{DynamicResource {dxt:LWKey BaseEdit.CommonBorderTemplate}}" />
        <Setter Property="ErrorToolTipContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Path=ErrorContent}" TextWrapping="Wrap" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TrimmedTextToolTipContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Path=Content}" TextWrapping="Wrap" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="ShowBorder" Value="False">
                <Setter Property="BorderTemplate" Value="{DynamicResource {dxt:LWKey BaseEdit.EmptyBorderTemplate}}" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceInactive">
                <Setter Property="Template" Value="{Binding DisplayTemplate, RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="Template" Value="{Binding EditTemplate, RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowBorder" Value="True" />
                    <Condition Property="EditMode" Value="Standalone" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey ThemeColors.BlackForegroundColor}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:TextEdit}">
        <Setter Property="CaretBrush" Value="{DynamicResource {dxt:LWKey TextEdit.CaretBrush}}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource {dxt:LWKey TextEdit.SelectionBrush}}" />
        <Setter Property="SelectionOpacity" Value="{DynamicResource {dxt:LWKey TextEdit.SelectionOpacity}}" />
        <Setter Property="dx:ScrollBarExtensions.ScrollBehavior" Value="{dx:EditorScrollBehavior}" />
        <Setter Property="NullTextForeground" Value="{DynamicResource {dxt:LWKey TextEdit.NullTextForeground}}" />
        <Setter Property="BorderTemplate" Value="{DynamicResource {dxt:LWKey BaseEdit.TextEditBorderTemplate}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.DisplayInplaceTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.EditTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.EditNonEditableTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TextEdit.Template}}" />
        <Style.Triggers>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.EditInplaceTemplate}}" />
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.EditNonEditableInplaceTemplate}}" />
            </Trigger>
            <Trigger Property="IsPrintingMode" Value="True">
                <Setter Property="Padding" Value="0,2,0,2" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}" Value="True" />
                    <Condition Binding="{Binding Path=TextWrapping, RelativeSource={RelativeSource Self}}" Value="Wrap" />
                </MultiDataTrigger.Conditions>
                <Setter Property="VerticalContentAlignment" Value="Top" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}" Value="True" />
                    <Condition Binding="{Binding Path=TextWrapping, RelativeSource={RelativeSource Self}}" Value="WrapWithOverflow" />
                </MultiDataTrigger.Conditions>
                <Setter Property="VerticalContentAlignment" Value="Top" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ButtonEdit.DefaultStyleBase" BasedOn="{StaticResource TextEdit.DefaultStyleBase}" TargetType="{x:Type dxe:ButtonEdit}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ButtonEdit.Template}}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowText" Value="False" />
                    <Condition Property="EditMode" Value="Standalone" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ButtonEdit.TemplateWithoutEditBox}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowText" Value="False" />
                    <Condition Property="EditMode" Value="InplaceActive" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ButtonEdit.InplaceTemplateWithoutEditBox}}" />
                    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.DisplayInplaceTemplate}}" />
                    <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.DisplayInplaceTemplate}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowText" Value="False" />
                    <Condition Property="EditMode" Value="InplaceInactive" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ButtonEdit.InplaceTemplateWithoutEditBox}}" />
                    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.DisplayInplaceTemplate}}" />
                    <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.DisplayInplaceTemplate}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=ShowText, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceActive" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{Binding Path=EditNonEditableTemplate, RelativeSource={RelativeSource Self}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="PopupBaseEdit.DefaultStyleBase" BasedOn="{StaticResource ButtonEdit.DefaultStyleBase}" TargetType="{x:Type dxe:PopupBaseEdit}">
        <Setter Property="PopupContentContainerTemplate" Value="{DynamicResource {dxt:LWKey PopupBaseEdit.PopupContentContainerTemplate}}" />
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey PopupBaseEdit.PopupContentTemplate}}" />
    </Style>
    <Style x:Key="DateRangeButtonEdit.DefaultStyleBase" BasedOn="{StaticResource ButtonEdit.DefaultStyleBase}" TargetType="{x:Type dxe:DateRangeButtonEdit}">
        <Setter Property="ShowBorder" Value="False" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="MaskUseAsDisplayFormat" Value="True" />
        <Setter Property="MaskType" Value="DateTimeAdvancingCaret" />
        <Setter Property="AllowNullInput" Value="True" />
        <Setter Property="AllowDefaultButton" Value="False" />
        <Setter Property="Mask" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).Mask, RelativeSource={RelativeSource Self}}" />
        <Setter Property="IsReadOnly" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).IsTextReadOnly, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).Foreground, RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="LookUpEditBase.DefaultStyleBase" BasedOn="{StaticResource PopupBaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:LookUpEditBase}">
        <Style.Triggers>
            <Trigger Property="IsTokenMode" Value="True">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey ComboBoxEdit.AutoCompleteBoxTemplate}}" />
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey ComboBoxEdit.AutoCompleteBoxNonEditableTemplate}}" />
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey ComboBoxEdit.AutoCompleteBoxDisplayTemplate}}" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceActive" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ApplyItemTemplateToSelectedItem, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ApplyItemTemplateToSelectedItem, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ComboBoxEdit.DefaultStyleBase" BasedOn="{StaticResource LookUpEditBase.DefaultStyleBase}" TargetType="{x:Type dxe:ComboBoxEdit}">
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey ComboBoxEdit.PopupContentTemplate}}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dx:DXVirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ApplyItemTemplateToSelectedItem" Value="True" />
                    <Condition Property="ApplyImageTemplateToSelectedItem" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey ComboBoxEdit.SelectedItemImageTemplate}}" />
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey ComboBoxEdit.SelectedItemImageTemplate}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ApplyItemTemplateToSelectedItem" Value="True" />
                    <Condition Property="ApplyImageTemplateToSelectedItem" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey ComboBoxEdit.SelectedItemTemplate}}" />
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey ComboBoxEdit.SelectedItemTemplate}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="FontComboBoxEdit.DefaultStyleBase" BasedOn="{StaticResource ComboBoxEdit.DefaultStyleBase}" TargetType="{x:Type dxo:FontComboBoxEdit}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock dxo:FontComboBoxEditSettings.ItemFontFamily="{Binding}" FontFamily="{Binding FontFamily}" Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ValidateOnTextInput" Value="False" />
        <Setter Property="AutoComplete" Value="True" />
    </Style>
    <Style x:Key="FontSizeComboBoxEdit.DefaultStyleBase" BasedOn="{StaticResource ComboBoxEdit.DefaultStyleBase}" TargetType="{x:Type dxo:FontSizeComboBoxEdit}">

        <Setter Property="ValidateOnTextInput" Value="False" />
    </Style>
    <Style x:Key="SparklineEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:SparklineEdit}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SparklineEdit.Template}}" />
        <Style.Triggers>
            <Trigger Property="SparklineType" Value="Line">
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey SparklineEdit.LineDisplayTemplate}}" />
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey SparklineEdit.LineDisplayTemplate}}" />
            </Trigger>
            <Trigger Property="SparklineType" Value="Area">
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey SparklineEdit.AreaDisplayTemplate}}" />
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey SparklineEdit.AreaDisplayTemplate}}" />
            </Trigger>
            <Trigger Property="SparklineType" Value="Bar">
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey SparklineEdit.BarDisplayTemplate}}" />
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey SparklineEdit.BarDisplayTemplate}}" />
            </Trigger>
            <Trigger Property="SparklineType" Value="WinLoss">
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey SparklineEdit.WinLossDisplayTemplate}}" />
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey SparklineEdit.WinLossDisplayTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HyperlinkEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:HyperlinkEdit}">
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey HyperLinkEdit.Foreground}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey HyperLinkEdit.Template}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey HyperLinkEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey HyperLinkEdit.EditTemplate}}" />
        <Setter Property="ShowBorder" Value="false" />
        <Setter Property="BorderTemplate" Value="{DynamicResource {dxt:LWKey BaseEdit.TextEditBorderTemplate}}" />
        <Style.Triggers>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey HyperLinkEdit.DisplayTemplate}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey HyperLinkEdit.InplaceForeground}}" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceInactive">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey HyperLinkEdit.InplaceForeground}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowBorder" Value="True" />
                    <Condition Property="EditMode" Value="Standalone" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey HyperLinkEdit.EditTemplate}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey HyperLinkEdit.Foreground}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TrackBarEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:TrackBarEdit}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ThumbStyle" Value="{DynamicResource {dxt:LWKey TrackBarEditThumb.HorizontalThumbStyle}}" />
        <Setter Property="NearTrackStyle" Value="{DynamicResource {dxt:LWKey TrackBarEdit.PanelLeftSideStyle}}" />
        <Setter Property="FarTrackStyle" Value="{DynamicResource {dxt:LWKey TrackBarEdit.PanelRightSideStyle}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey TrackBarEdit.DisplayTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.Template}}" />
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="ThumbStyle" Value="{DynamicResource {dxt:LWKey TrackBarEditThumb.VerticalThumbStyle}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowBorder" Value="True" />
                    <Condition Property="EditMode" Value="Standalone" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey TrackBarEdit.TickForeground}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TrackBarEditTickItemsControl.DefaultStyleBase" BasedOn="{StaticResource {x:Type ItemsControl}}" TargetType="{x:Type dxe:TrackBarEditTickItemsControl}">
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:LWKey TrackBarEdit.ItemPanelTemplate}}" />
    </Style>
    <Style x:Key="TrackBarEditTickItem.DefaultStyleBase" BasedOn="{StaticResource {x:Type ContentControl}}" TargetType="{x:Type dxe:TrackBarEditTickItem}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEdit.TickBarItemTemplate}}" />
        <Setter Property="TickContentDistance" Value="{DynamicResource {dxt:LWKey TrackBarEdit.TickContentDistance}}" />
        <Setter Property="TickOpacity" Value="{DynamicResource {dxt:LWKey TrackBarEdit.TickOpacity}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="TickLength" Value="{DynamicResource {dxt:LWKey TrackBarEdit.TickLength}}" />
        <Style.Triggers>
            <Trigger Property="Placement" Value="Left">
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Top" />
            </Trigger>
            <Trigger Property="Placement" Value="Right">
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Bottom" />
            </Trigger>
            <Trigger Property="Placement" Value="Top">
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Top" />
            </Trigger>
            <Trigger Property="Placement" Value="Bottom">
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Bottom" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RatingEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:RatingEdit}">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey RatingEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey RatingEdit.EditTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey RatingEdit.Template}}" />
        <Setter Property="BorderTemplate" Value="{DynamicResource {dxt:LWKey BaseEdit.TextEditBorderTemplate}}" />
        <Setter Property="ShowBorder" Value="False" />
    </Style>
    <Style x:Key="PasswordBoxEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:PasswordBoxEdit}">
        <Setter Property="PasswordChar" Value="{DynamicResource {dxt:LWKey PasswordBoxEdit.PasswordChar}}" />
        <Setter Property="CaretBrush" Value="{DynamicResource {dxt:LWKey TextEdit.CaretBrush}}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource {dxt:LWKey TextEdit.SelectionBrush}}" />
        <Setter Property="SelectionOpacity" Value="{DynamicResource {dxt:LWKey TextEdit.SelectionOpacity}}" />
        <Setter Property="NullTextForeground" Value="{DynamicResource {dxt:LWKey TextEdit.NullTextForeground}}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey PasswordBoxEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey PasswordBoxEdit.EditTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey PasswordBoxEdit.DisplayTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey PasswordBoxEdit.Template}}" />
        <Setter Property="BorderTemplate" Value="{DynamicResource {dxt:LWKey BaseEdit.TextEditBorderTemplate}}" />
        <Setter Property="CapsLockWarningToolTipTemplate" Value="{DynamicResource {dxt:LWKey PasswordBoxEdit.CapsLockWarningToolTipTemplate}}" />
        <Setter Property="ShowPasswordButtonTemplate" Value="{DynamicResource {dxt:LWKey PasswordBoxEdit.ShowPasswordButtonTemplate}}" />
        <Style.Triggers>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey PasswordBoxEdit.EditTemplate}}" />
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey PasswordBoxEdit.EditTemplate}}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}" Value="True" />
                    <Condition Binding="{Binding Path=TextWrapping, RelativeSource={RelativeSource Self}}" Value="Wrap" />
                </MultiDataTrigger.Conditions>
                <Setter Property="VerticalContentAlignment" Value="Top" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}" Value="True" />
                    <Condition Binding="{Binding Path=TextWrapping, RelativeSource={RelativeSource Self}}" Value="WrapWithOverflow" />
                </MultiDataTrigger.Conditions>
                <Setter Property="VerticalContentAlignment" Value="Top" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ProgressBarMarqueeHorizontalAnimationControl.DefaultStyleBase" TargetType="{x:Type dxe:ProgressBarMarqueeHorizontalAnimationControl}">
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEditStyle.MarqueeHorizontalAnimationControlTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="40" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ProgressBarMarqueeVerticalAnimationControl.DefaultStyleBase" TargetType="{x:Type dxe:ProgressBarMarqueeVerticalAnimationControl}">
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEditStyle.MarqueeVerticalAnimationControlTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="40" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ProgressBarEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:ProgressBarEdit}">
        <Setter Property="ShowBorder" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.ShowBorderDefault}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.Foreground}}" />
        <Setter Property="AdditionalForeground" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.AdditionalForeground}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderTemplate" Value="{DynamicResource {dxt:LWKey BaseEdit.TextEditBorderTemplate}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.DisplayTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.Template}}" />
        <Style.Triggers>
            <Trigger Property="ContentDisplayMode" Value="Value">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.ContentTemplate}}" />
            </Trigger>
            <Trigger Property="ContentDisplayMode" Value="Content">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.ContentTemplate_Content}}" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.DisplayTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CheckEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:CheckEdit}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {dxt:LWKey CheckEdit.EmptyFocusVisualStyle}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey CheckEdit.Padding}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey CheckEdit.DisplayInplaceTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey CheckEdit.EditTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CheckEdit.Template}}" />
        <Setter Property="GlyphTemplate" Value="{DynamicResource {dxt:LWKey CheckEdit.GlyphTemplate}}" />
        <Style.Triggers>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey CheckEdit.EditInplaceTemplate}}" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="UseLayoutRounding" Value="True" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceInactive">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey CheckEdit.EditInplaceTemplate}}" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="UseLayoutRounding" Value="True" />
            </Trigger>
            <Trigger Property="DisplayMode" Value="Image">
                <Setter Property="Padding" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BrowsePathEdit.DefaultStyleBase" BasedOn="{StaticResource ButtonEdit.DefaultStyleBase}" TargetType="{x:Type dxe:BrowsePathEdit}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BrowsePath.Template}}" />
    </Style>
    <Style x:Key="BrushEditBase.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:BrushEditBase}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BrushEdit.Template}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey BrushEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey BrushEdit.EditTemplate}}" />
    </Style>
    <Style x:Key="PopupBrushEditBase.DefaultStyleBase" BasedOn="{StaticResource PopupBaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:PopupBrushEditBase}">
        <Setter Property="ChipBorderBrush" Value="{DynamicResource {dxt:LWKey PopupBrushEdit.ChipBorderBrush}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey PopupBrushEdit.DisplayInplaceTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey PopupBrushEdit.DisplayInplaceTemplate}}" />
        <Style.Triggers>
            <Trigger Property="EditMode" Value="Standalone">
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey PopupBrushEdit.DisplayTemplate}}" />
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey PopupBrushEdit.DisplayTemplate}}" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey PopupBrushEdit.DisplayInplaceTemplate}}" />
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey PopupBrushEdit.DisplayInplaceTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MemoEdit.DefaultStyleBase" BasedOn="{StaticResource PopupBaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:MemoEdit}">
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey MemoEdit.PopupContentTemplate}}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowIcon" Value="True" />
                    <Condition Property="EditMode" Value="InplaceActive" />
                </MultiTrigger.Conditions>
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey MemoEdit.EditNonEditableIconInplaceTemplate}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowIcon" Value="True" />
                    <Condition Property="EditMode" Value="InplaceInactive" />
                </MultiTrigger.Conditions>
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey MemoEdit.DisplayIconTemplate}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowIcon" Value="True" />
                    <Condition Property="EditMode" Value="Standalone" />
                </MultiTrigger.Conditions>
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey MemoEdit.EditNonEditableIconTemplate}}" />
            </MultiTrigger>
            <Trigger Property="IsPrintingMode" Value="true">
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.DisplayInplaceTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DateEdit.DefaultStyleBase" BasedOn="{StaticResource PopupBaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:DateEdit}">
        <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="False" />
        <Setter Property="AllowNullInput" Value="true" />
        <Style.Triggers>
            <Trigger Property="DateEditPopupContentType" Value="Calendar">
                <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey DateEdit.CalendarPopupContentTemplate}}" />
            </Trigger>
            <Trigger Property="DateEditPopupContentType" Value="DateTimePicker">
                <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey DateEdit.PickerPopupContentTemplate}}" />
            </Trigger>
            <Trigger Property="DateEditPopupContentType" Value="Navigator">
                <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey DateEdit.NavigatorPopupContentTemplate}}" />
            </Trigger>
            <Trigger Property="DateEditPopupContentType" Value="TimePicker">
                <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey DateEdit.TimePickerPopupContentTemplate}}" />
            </Trigger>
            <Trigger Property="DateEditPopupContentType" Value="NavigatorWithTimePicker">
                <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey DateEdit.NavigatorWithTimePickerPopupContentTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="FontEdit.DefaultStyleBase" BasedOn="{StaticResource ComboBoxEdit.DefaultStyleBase}" TargetType="{x:Type dxe:FontEdit}">
        <Setter Property="ItemTemplate" Value="{DynamicResource {dxt:LWKey FontEdit.ItemTemplate}}" />
    </Style>
    <Style x:Key="AutoSuggestEdit.DefaultStyleBase" BasedOn="{StaticResource PopupBaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:AutoSuggestEdit}">
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey AutoSuggestEdit.PopupContentTemplate}}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dx:DXVirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxEditItem.DefaultStyleBase" BasedOn="{StaticResource {dxt:LWKey EditorListBox.DefaultItemStyle}}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey Brushes.ContrastSvgPalette}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="dx:SvgImageHelper.State" Value="Hover" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="dx:SvgImageHelper.State" Value="Pressed" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ListBoxEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:ListBoxEdit}">
        <Setter Property="dx:ScrollBarExtensions.ScrollBehavior" Value="{x:Null}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey ListBoxEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey ListBoxEdit.EditTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ListBoxEdit.Template}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dx:DXVirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="EditMode" Value="InplaceInactive">
                <Setter Property="Background" Value="{x:Null}" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="Background" Value="{x:Null}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DateEditCalendar.DefaultStyleBase" TargetType="{x:Type dxepCalendar:DateEditCalendar}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateEdit.CalendarTemplate}}" />
        <Setter Property="WeekdayAbbreviationStyle" Value="{DynamicResource {dxt:LWKey DateEdit.WeekdayAbbreviationStyle}}" />
        <Setter Property="WeekNumbersStyle" Value="{DynamicResource {dxt:LWKey DateEdit.WeekNumbersStyle}}" />
        <Setter Property="CellButtonStyle" Value="{DynamicResource {dxt:LWKey DateEdit.CellButtonStyle}}" />
        <Setter Property="MonthInfoTemplate" Value="{DynamicResource {dxt:LWKey DateEdit.MonthInfoTemplate}}" />
        <Setter Property="YearInfoTemplate" Value="{DynamicResource {dxt:LWKey DateEdit.YearInfoTemplate}}" />
        <Setter Property="YearsInfoTemplate" Value="{DynamicResource {dxt:LWKey DateEdit.YearInfoTemplate}}" />
        <Setter Property="YearsGroupInfoTemplate" Value="{DynamicResource {dxt:LWKey DateEdit.YearInfoTemplate}}" />
        <Setter Property="CalendarTransferStyle" Value="{DynamicResource {dxt:LWKey DateEdit.CalendarTranserStyle}}" />
    </Style>
    <Style x:Key="DateNavigator.DefaultStyleBase" TargetType="{x:Type dxedn:DateNavigator}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.NewCalendarTemplate}}" />
        <Setter Property="CalendarPadding" Value="{DynamicResource {dxt:LWKey DateNavigator.DateNavigatorCalendarPadding}}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey DateNavigator.BackgroundBrush}}" />
        <Setter Property="DefaultAppearance" Value="{DynamicResource {dxt:LWKey DateNavigator.Appearance}}" />
        <Setter Property="Appearance" Value="{DynamicResource {dxt:LWKey DateNavigator.Appearance}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static data:CompatibilitySettings.UseLegacyCalendarInDateNavigator}}" Value="True">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.Template}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RangeDateNavigator.DefaultStyleBase" TargetType="{x:Type dxe:RangeDateNavigator}" BasedOn="{StaticResource DateNavigator.DefaultStyleBase}">
        <Setter Property="Background" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).Background, RelativeSource={RelativeSource Self}}" />
        <Setter Property="ShowTodayButton" Value="False" />
        <Setter Property="ColumnCount" Value="2" />
    </Style>
    <Style x:Key="DateNavigatorCalendar.DefaultStyleBase" TargetType="{x:Type dxednControls:DateNavigatorCalendar}">
        <Setter Property="FirstDayOfWeek" Value="{Binding Path=(dxedn:DateNavigator.Navigator).ActualFirstDayOfWeek, RelativeSource={RelativeSource Self}}" />
        <Setter Property="HighlightSpecialDates" Value="{Binding Path=(dxedn:DateNavigator.Navigator).HighlightSpecialDates, RelativeSource={RelativeSource Self}}" />
        <Setter Property="HighlightHolidays" Value="{Binding Path=(dxedn:DateNavigator.Navigator).HighlightHolidays, RelativeSource={RelativeSource Self}}" />
        <Setter Property="ShowWeekNumbers" Value="{Binding Path=(dxedn:DateNavigator.Navigator).ShowWeekNumbers, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.CalendarTemplate}}" />
        <Setter Property="WeekNumberRule" Value="{Binding Path=(dxedn:DateNavigator.Navigator).WeekNumberRule, RelativeSource={RelativeSource Self}}" />
        <Setter Property="WeekdayAbbreviationStyle" Value="{DynamicResource {dxt:LWKey DateNavigator.WeekdayAbbreviationStyle}}" />
        <Setter Property="WeekNumberStyle" Value="{DynamicResource {dxt:LWKey DateNavigator.WeekNumberStyle}}" />
        <Setter Property="CellButtonStyle" Value="{DynamicResource {dxt:LWKey DateNavigator.CellButtonStyle}}" />
        <Setter Property="MonthInfoTemplate" Value="{DynamicResource {dxt:LWKey DateNavigator.MonthInfoTemplate}}" />
        <Setter Property="YearInfoTemplate" Value="{DynamicResource {dxt:LWKey DateNavigator.YearInfoTemplate}}" />
        <Setter Property="YearsInfoTemplate" Value="{DynamicResource {dxt:LWKey DateNavigator.YearInfoTemplate}}" />
        <Setter Property="YearsRangeInfoTemplate" Value="{DynamicResource {dxt:LWKey DateNavigator.YearInfoTemplate}}" />
        <Setter Property="Padding" Value="{Binding Path=(dxedn:DateNavigator.Navigator).CalendarPadding, RelativeSource={RelativeSource Self}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <Style x:Key="DateNavigatorCalendarControl.DefaultStyleBase" TargetType="{x:Type dxednControls:DateNavigatorCalendarControl}">
        <Setter Property="WeekNumberRule" Value="{Binding Path=(dxedn:DateNavigator.Navigator).WeekNumberRule, RelativeSource={RelativeSource Self}}" />
        <Setter Property="FirstDayOfWeek" Value="{Binding Path=(dxedn:DateNavigator.Navigator).ActualFirstDayOfWeek, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Padding" Value="{Binding Path=(dxedn:DateNavigator.Navigator).CalendarPadding, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.CalendarControlTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="CellSize" Value="{DynamicResource {dxt:LWKey DateNavigator.CalendarCellSize}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="CellSize" Value="{DynamicResource {dxt:LWKey DateNavigator.CalendarTouchCellSize}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DateNavigatorCalendarContentControl.DefaultStyleBase" TargetType="{x:Type dxednControls:DateNavigatorCalendarContentControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.CalendarContentControlTemplate}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxednControls:DateNavigatorCalendarPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplateSelector" Value="{StaticResource DateNavigatorCalendarContentTemplateSelector}" />
        <Style.Triggers>
            <Trigger Property="State" Value="Month">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.CalendarContentControlMonthTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DateNavigatorCellButton.DefaultStyleBase" TargetType="{x:Type dxednControls:DateNavigatorCellButton}">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0,0,1,1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.CalendarCellButtonTemplate}}" />
    </Style>
    <Style x:Key="DateNavigatorContent.DefaultStyleBase" TargetType="{x:Type dxednControls:DateNavigatorContent}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigatorContent.Template}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <Style x:Key="DateNavigatorCalendarCellButton.DefaultStyleBase" TargetType="{x:Type dxednControls:DateNavigatorCalendarCellButton}">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0,0,1,1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.CellButtonTemplate}}" />
    </Style>
    <Style x:Key="ErrorControl.DefaultStyleBase" TargetType="{x:Type dxe:ErrorControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="DockPanel.Dock" Value="Left" />
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey ErrorTypes.Critical}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TextEdit.ErrorControlTemplate}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Content.ErrorType, RelativeSource={RelativeSource Self}}" Value="Critical">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey ErrorTypes.Critical}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Content.ErrorType, RelativeSource={RelativeSource Self}}" Value="Warning">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey ErrorTypes.Warning}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Content.ErrorType, RelativeSource={RelativeSource Self}}" Value="Information">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey ErrorTypes.Information}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasValidationErrorTemplate, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="ContentTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ValidationErrorTemplate, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ButtonsControl.DefaultStyleBase" TargetType="{x:Type dxe:ButtonsControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="{DynamicResource {dxt:LWKey ButtonEdit.ButtonEditPadding}}" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {dxt:LWKey Buttons.ButtonContainerStyle}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey ButtonEdit.ButtonEditPaddingCorrection}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ButtonsControl}">
                    <dx:DXBorder
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GalleryBarItemLinkControl.DefaultStyleBase" TargetType="{x:Type dxei:GalleryBarItemLinkControl}">
        <Setter Property="dxb:BarItemLinkControlTemplateProvider.TemplateInMenu" Value="{DynamicResource {dxt:LWKey ColorEdit.GalleryBarItemLinkControlTemplate}}" />
    </Style>
    <Style x:Key="ColorEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:ColorEdit}">
        <Setter Property="ChipMargin" Value="2,0,2,0" />
        <Setter Property="ChipBorderBrush" Value="{DynamicResource {dxt:LWKey ColorEdit.ChipBorderBrush}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ColorEdit.Template}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey ColorEdit.EditTemplate}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey ColorEdit.EditTemplate}}" />
        <Style.Triggers>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey ColorEdit.EditInplaceTemplate}}" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceInactive">
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey ColorEdit.EditInplaceTemplate}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="ChipSize" Value="Large" />
                <Setter Property="ChipMargin" Value="8" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter Property="ChipSize" Value="Large" />
                <Setter Property="ChipMargin" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="PopupColorEdit.DefaultStyleBase" BasedOn="{StaticResource PopupBaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:PopupColorEdit}">
        <Setter Property="ChipBorderBrush" Value="{DynamicResource {dxt:LWKey ColorEdit.ChipBorderBrush}}" />
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey PopupColorEdit.PopupContentTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey PopupColorEdit.DisplayTemplate}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey PopupColorEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey TextEdit.EditTemplate}}" />
        <Style.Triggers>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey PopupColorEdit.DisplayTemplate}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="ChipSize" Value="Large" />
                <Setter Property="ChipMargin" Value="8" />
            </Trigger>
        </Style.Triggers>

    </Style>
    <Style x:Key="Calculator.DefaultStyleBase" BasedOn="{StaticResource CalculatorBaseStyle}" TargetType="{x:Type dxe:Calculator}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Calculator.Template}}" />
    </Style>
    <Style x:Key="CalculatorGaugeSegment.DefaultStyleBase" TargetType="{x:Type dxe:CalculatorGaugeSegment}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Calculator.GaugeSegmentTemplate}}" />
    </Style>
    <Style x:Key="CalculatorGauge.DefaultStyleBase" TargetType="{x:Type dxe:CalculatorGauge}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Calculator.GaugeTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <Style x:Key="CalculatorMemoryIndicator.DefaultStyleBase" TargetType="{x:Type dxe:CalculatorMemoryIndicator}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Calculator.MemoryIndicatorTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <Style x:Key="PopupCalcEdit.DefaultStyleBase" BasedOn="{StaticResource PopupBaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:PopupCalcEdit}">
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey CalcEdit.PopupContentTemplate}}" />
    </Style>
    <Style x:Key="PopupCalcEditCalculator.DefaultStyleBase" BasedOn="{StaticResource CalculatorBaseStyle}" TargetType="{x:Type dxe:PopupCalcEditCalculator}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Calculator.PopupTemplate}}" />
        <Setter Property="Precision" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Precision, RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="ImageEditToolSeparator.DefaultStyleBase" TargetType="{x:Type dxe:ImageEditToolSeparator}">
        <Style.Setters>
            <Setter Property="Margin" Value="5,0,6,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle
                            Width="1"
                            Height="18"
                            Fill="{DynamicResource {dxt:LWKey ImageEdit.ImageEditToolSeparatorFillBrush}}"
                            Opacity="0.25" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="ImageEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:ImageEdit}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ImageEdit.Template}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey ImageEdit.EditTemplateWithEditing}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey ImageEdit.EditTemplate}}" />
        <Setter Property="EmptyContentTemplate" Value="{DynamicResource {dxt:LWKey ImageEdit.EmptyContentTemplate}}" />
        <Setter Property="MenuTemplate" Value="{DynamicResource {dxt:LWKey ImageEdit.EditMenuTemplate}}" />
        <Setter Property="MenuContainerTemplate" Value="{DynamicResource {dxt:LWKey ImageEdit.MenuPopupTemplate}}" />
        <Style.Triggers>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey ImageEdit.EditInplaceTemplate}}" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceInactive">
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey ImageEdit.EditInplaceTemplate}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxe:ImageEditToEditModeBehavior.ImageEditToEditModeBehavior), RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey ImageEdit.EditTemplate}}" />
                <Setter Property="MenuTemplate" Value="{DynamicResource {dxt:LWKey ImageEdit.MenuTemplate}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="PopupImageEdit.DefaultStyleBase" BasedOn="{StaticResource PopupBaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:PopupImageEdit}">
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey PopupImageEdit.PopupContentTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey PopupImageEdit.DisplayTemplate}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey PopupImageEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey PopupImageEdit.DisplayTemplate}}" />
        <Setter Property="MenuTemplate" Value="{DynamicResource {dxt:LWKey PopupImageEdit.MenuTemplate}}" />
        <Style.Triggers>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey PopupImageEdit.DisplayTemplate}}" />
                <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxt:LWKey PopupImageEdit.DisplayTemplate}}" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceInactive">
                <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey PopupImageEdit.DisplayTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MultiContentControl.DefaultStyleBase" TargetType="{x:Type dxi:MultiContentControl}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxi:MultiContentControl}">
                    <Grid x:Name="PART_Root" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataPager.DefaultStyleBase" TargetType="{x:Type dxedp:DataPager}">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DataPager.Template}}" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>
    <Style x:Key="DataPagerNumericButtonContainer.DefaultStyleBase" TargetType="{x:Type dxedp:DataPagerNumericButtonContainer}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DataPagerNumericButtonContainer.Template}}" />
    </Style>
    <Style x:Key="DataPagerButton.DefaultStyleBase" TargetType="{x:Type dxedp:DataPagerButton}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DataPagerButton.Template}}" />
        <Style.Triggers>
            <Trigger Property="ButtonType" Value="PageFirst">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey DataPagerButton.FirstPageGlyph}}" />
            </Trigger>
            <Trigger Property="ButtonType" Value="PageLast">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey DataPagerButton.LastPageGlyph}}" />
            </Trigger>
            <Trigger Property="ButtonType" Value="PageNext">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey DataPagerButton.NextPageGlyph}}" />
            </Trigger>
            <Trigger Property="ButtonType" Value="PagePrevious">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey DataPagerButton.PrevPageGlyph}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DataPagerNumericButton.DefaultStyleBase" TargetType="{x:Type dxedp:DataPagerNumericButton}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DataPagerNumericButton.Template}}" />
    </Style>
    <Style x:Key="PagerControl.DefaultStyleBase" TargetType="{x:Type dxe:PagerControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey PagerControl.Template}}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
    </Style>
    <Style x:Key="PagerControlNavigationButton.DefaultStyleBase" TargetType="{x:Type dxe:PagerControlNavigationButton}">
        <Setter Property="MinWidth" Value="18" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Margin" Value="0,0,1,0" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey PagerControl.NavigationButtonTemplate}}" />
    </Style>
    <Style x:Key="PagerControlNumericButton.DefaultStyleBase" BasedOn="{StaticResource PagerControlNavigationButton.DefaultStyleBase}" TargetType="{x:Type dxe:PagerControlNumericButton}">
        <Setter Property="MinWidth" Value="18" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Margin" Value="0,0,1,0" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey PagerControl.NumericButtonTemplate}}" />
    </Style>
    <Style x:Key="SearchControl.DefaultStyleBase" TargetType="{x:Type dxe:SearchControl}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="12" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="NullTextForeground" Value="{DynamicResource {dxt:LWKey TextEdit.NullTextForeground}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SearchControl.Template}}" />
    </Style>
    <Style x:Key="FilterControl.DefaultStyleBase" TargetType="{x:Type dxeFiltering:FilterControl}">
        <Setter Property="ShowBorder" Value="True" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey FilterControl.FilterControlTemplate}}" />
        <Setter Property="EmptyValueTemplate" Value="{DynamicResource {dxt:LWKey FilterControl.EmptyValueTemplate}}" />
        <Setter Property="EmptyStringTemplate" Value="{DynamicResource {dxt:LWKey FilterControl.EmptyStringTemplate}}" />
        <Setter Property="ValueTemplate" Value="{DynamicResource {dxt:LWKey FilterControl.ValueTemplate}}" />
        <Setter Property="BooleanValueTemplate" Value="{DynamicResource {dxt:LWKey FilterControl.BooleanValueTemplate}}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {dxt:LWKey FilterControl.FocusVisualStyle}}" />
    </Style>
    <Style x:Key="FilterControlGroupNode.DefaultStyleBase" TargetType="{x:Type dxeFiltering:FilterControlGroupNode}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey FilterControl.FilterControlGroupNodeTemplate}}" />
    </Style>
    <Style x:Key="FilterControlClauseNode.DefaultStyleBase" TargetType="{x:Type dxeFiltering:FilterControlClauseNode}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey FilterControl.FilterControlClauseNodeTemplate}}" />
        <Setter Property="SecondOperandsOneTemplate" Value="{DynamicResource {dxt:LWKey FilterControl.OneElementsInSecondOperandTemplate}}" />
        <Setter Property="SecondOperandsTwoTemplate" Value="{DynamicResource {dxt:LWKey FilterControl.TwoElementsInSecondOperandTemplate}}" />
        <Setter Property="SecondOperandsSeveralTemplate" Value="{DynamicResource {dxt:LWKey FilterControl.SeveralElementsInSecondOperandTemplate}}" />
        <Setter Property="SecondOperandsLocalDateTimeTemplate" Value="{DynamicResource {dxt:LWKey FilterControl.OneLocalDateTimeTemplate}}" />
    </Style>
    <Style x:Key="FilterControlEditor.DefaultStyleBase" TargetType="{x:Type dxeFiltering:FilterControlEditor}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey FilterControl.FilterControlEditorTemplate}}" />
    </Style>
    <Style x:Key="ExpressionEditorControl.DefaultStyleBase" TargetType="{x:Type dxee:ExpressionEditorControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ExpressionEditorControl.Template}}" />
    </Style>
    <Style x:Key="ColorPicker.DefaultStyleBase" TargetType="{x:Type dxei:ColorPicker}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ColorPicker.Template}}" />
        <Setter Property="MinHeight" Value="206" />
        <Setter Property="MinWidth" Value="200" />
        <Setter Property="Padding" Value="12" />
        <Style.Triggers>
            <Trigger Property="ShowAlphaChannel" Value="True">
                <Setter Property="MinHeight" Value="231" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GradientMultiSlider.DefaultStyleBase" TargetType="{x:Type dxei:GradientMultiSlider}">
        <Setter Property="MinWidth" Value="200" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GradientMultiSlider.Template}}" />
        <Setter Property="Padding" Value="12,0,12,0" />
    </Style>
    <Style x:Key="GradientMultiSliderThumb.DefaultStyleBase" TargetType="{x:Type dxei:GradientMultiSliderThumb}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GradientMultiSlider.ThumbTemplate}}" />
        <Setter Property="Canvas.Left" Value="{Binding Path=ActualOffset, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Canvas.ZIndex" Value="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}, Converter={StaticResource SelectedThumbZIndexConverter}}" />
    </Style>
    <Style x:Key="GradientMultiSliderThumbSelector.DefaultStyleBase" TargetType="{x:Type dxei:GradientMultiSliderThumbSelector}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GradientMultiSlider.ThumbSelectorTemplate}}" />
    </Style>
    <Style x:Key="DXItemsControl.DefaultStyleBase" TargetType="{x:Type dxe:DXItemsControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateTimePicker.ItemsControlTemplate}}" />
    </Style>
    <Style x:Key="DXSelector.DefaultStyleBase" BasedOn="{StaticResource DXItemsControl.DefaultStyleBase}" TargetType="{x:Type dxe:DXSelector}" />
    <Style x:Key="DateTimePicker.DefaultStyleBase" TargetType="{x:Type dxe:DateTimePicker}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateTimePicker.Template}}" />
        <Setter Property="MinHeight" Value="80" />
        <Setter Property="MaxHeight" Value="700" />
        <Setter Property="Margin" Value="5,5,5,5" />
        <Setter Property="IsTabStop" Value="False" />
    </Style>
    <Style x:Key="DateTimePickerItem.DefaultStyleBase" TargetType="{x:Type dxe:DateTimePickerItem}">
        <Setter Property="Width" Value="90" />
        <Setter Property="Height" Value="70" />
        <Setter Property="Padding" Value="0,1,1,0" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateTimePicker.ItemTemplate}}" />
    </Style>
    <Style x:Key="DateTimePickerSelector.DefaultStyleBase" BasedOn="{StaticResource DXSelector.DefaultStyleBase}" TargetType="{x:Type dxe:DateTimePickerSelector}">
        <Setter Property="ItemTemplateSelector" Value="{StaticResource DateTimePicker_ItemTemplateSelector}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateTimePicker.SelectorTemplate}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style x:Key="RangeControl.DefaultStyleBase" TargetType="{x:Type dxer:RangeControl}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey RangeControl.RangeControlTemplate}}" />
        <Setter Property="LabelTemplate" Value="{DynamicResource {dxt:LWKey RangeControl.LabelTemplate}}" />
    </Style>
    <Style x:Key="CalendarClient.DefaultStyleBase" TargetType="{x:Type dxer:CalendarClient}">
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CalendarClient.CalendarClientTemplate}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey CalendarClient.CalendarClientForegroundBrush}}" />
        <Setter Property="ZoomOutSelectionMarkerTemplate" Value="{DynamicResource {dxt:LWKey CalendarClient.CalendarSelectionMarkerTemplate}}" />
        <Setter Property="FontSize" Value="20" />
    </Style>
    <Style x:Key="BrushTypeSelectorControl.DefaultStyleBase" TargetType="{x:Type dxe:BrushTypeSelectorControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BrushEdit.BrushTypeSelectorControlTemplate}}" />
    </Style>
    <Style x:Key="BrushPicker.DefaultStyleBase" TargetType="{x:Type dxei:BrushPicker}">
        <Style.Triggers>
            <Trigger Property="BrushType" Value="None">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BrushEdit.BrushPickerNoneTemplate}}" />
            </Trigger>
            <Trigger Property="BrushType" Value="SolidColorBrush">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BrushEdit.BrushPickerSolidTemplate}}" />
            </Trigger>
            <Trigger Property="BrushType" Value="LinearGradientBrush">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BrushEdit.BrushPickerGradientTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TokenEditor.DefaultStyleBase" TargetType="{x:Type dxei:TokenEditor}">
        <Setter Property="IsTabStop" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsTabStop, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Background, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TokenEditor.Template}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="TokenBorderTemplate" Value="{DynamicResource {dxt:LWKey TokenEditor.TokenContainerTemplate}}" />
        <Setter Property="dx:ScrollBarExtensions.IsScrollBarThumbDragDeltaListener" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(ScrollViewer.HorizontalScrollBarVisibility), RelativeSource={RelativeSource Self}}" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(ScrollViewer.VerticalScrollBarVisibility), RelativeSource={RelativeSource Self}}" />
        <Setter Property="DeleteTokenButtonTemplate" Value="{DynamicResource {dxt:LWKey TokenEditor.DeleteButtonTemplate}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="Standalone">
                <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey TokenEditor.TokenEditorMargin}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TokenEditorPanel.DefaultStyleBase" TargetType="{x:Type dxei:TokenEditorPanel}">
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="EmptyTokenContainerTemplate" Value="{DynamicResource {dxt:LWKey TokenEditor.EmptyTokenContainerTemplate}}" />
    </Style>
    <Style x:Key="TokenEditorPresenter.DefaultStyleBase" TargetType="{x:Type dxei:TokenEditorPresenter}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TokenEditor.CellPresenterTemplate}}" />
        <Setter Property="ActiveEditorStyle" Value="{DynamicResource {dxt:LWKey TokenEditor.ActiveEditorStyle}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="NewTokenText" Value="{Binding Path=(dxei:TokenEditor.OwnerTokenEditor).NewTokenText, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey TokenEditor.TokenForeground}}" />
    </Style>
    <Style x:Key="BarCodeEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:BarCodeEdit}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarCodeEdit.Template}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey BarCodeEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey BarCodeEdit.EditTemplate}}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="Black" />
        <Style.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Setter Property="Foreground" Value="Black" />
                <!-- the smells code, but I need to override the basestyle's trigger -->
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CameraControl.DefaultStyleBase" TargetType="{x:Type dxe:CameraControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CameraControl.Template}}" />
        <Setter Property="BorderTemplate" Value="{DynamicResource {dxt:LWKey BaseEdit.CommonBorderTemplate}}" />
    </Style>
    <Style x:Key="TakePictureControl.DefaultStyleBase" TargetType="{x:Type dxei:TakePictureControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CameraControl.TakePictureControlTemplate}}" />
    </Style>
    <Style x:Key="ToggleSwitch.DefaultStyleBase" TargetType="{x:Type dxe:ToggleSwitch}">
        <Setter Property="KeyboardNavigation.AcceptsReturn" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ToggleSwitch.Template}}" />
        <Setter Property="ToggleSwitchWidth" Value="{DynamicResource {dxt:LWKey ToggleSwitch.ToggleSwitchWidth}}" />
        <Setter Property="ToggleSwitchHeight" Value="{DynamicResource {dxt:LWKey ToggleSwitch.ToggleSwitchHeight}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="ToggleSwitchWidth" Value="96" />
                <Setter Property="ToggleSwitchHeight" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ToggleSwitchEdit.DefaultStyleBase" BasedOn="{StaticResource BaseEdit.DefaultStyleBase}" TargetType="{x:Type dxe:ToggleSwitchEdit}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ToggleSwitchEdit.Template}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxt:LWKey ToggleSwitchEdit.DisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxt:LWKey ToggleSwitchEdit.EditTemplate}}" />
        <Setter Property="ToggleSwitchWidth" Value="{DynamicResource {dxt:LWKey ToggleSwitch.ToggleSwitchWidth}}" />
        <Setter Property="ToggleSwitchHeight" Value="{DynamicResource {dxt:LWKey ToggleSwitch.ToggleSwitchHeight}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="ToggleSwitchWidth" Value="96" />
                <Setter Property="ToggleSwitchHeight" Value="44" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceInactive">
                <Setter Property="ToggleSwitchHeight" Value="{DynamicResource {dxt:LWKey ToggleSwitchEdit.InplaceToggleSwitchHeight}}" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="ToggleSwitchHeight" Value="{DynamicResource {dxt:LWKey ToggleSwitchEdit.InplaceToggleSwitchHeight}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="EditMode" Value="InplaceActive" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="ToggleSwitchHeight" Value="40" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="EditMode" Value="InplaceInactive" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="ToggleSwitchHeight" Value="40" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TimePicker.DefaultStyleBase" TargetType="{x:Type dxe:TimePicker}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TimePicker.Template}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey TimePicker.BackgroundBrush}}" />
    </Style>
    <Style x:Key="ButtonInfo.DefaultStyleBase" BasedOn="{StaticResource CommonButtonInfoStyle}" TargetType="{x:Type dxe:ButtonInfo}">
        <Setter Property="ButtonStyle" Value="{DynamicResource {dxt:LWKey Buttons.ButtonStyle}}" />
        <Style.Triggers>
            <Trigger Property="GlyphKind" Value="User">
                <Setter Property="dxei:ButtonInfoPropertyProvider.GlyphContainerStyle" Value="{DynamicResource {dxt:LWKey Buttons.UserButtonInfoContentStyle}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="None">
                <Setter Property="dxei:ButtonInfoPropertyProvider.GlyphContainerStyle" Value="{DynamicResource {dxt:LWKey Buttons.NoneButtonInfoContentStyle}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="DropDown">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.DropDownGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Regular">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.RegularGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Up">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.UpGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Down">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.DownGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Left">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.LeftGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Right">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.RightGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Cancel">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.CancelGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Apply">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.ApplyGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Plus">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.PlusGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Minus">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.MinusGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Undo">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.UndoGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Redo">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.RedoGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Refresh">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.RefreshGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Search">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.SearchGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="NextPage">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.NextPageGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="PrevPage">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.PrevPageGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Last">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.LastGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="First">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.FirstGlyph}}" />
            </Trigger>
            <Trigger Property="GlyphKind" Value="Edit">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey Buttons.EditGlyph}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SpinButtonInfo.DefaultStyleBase" BasedOn="{StaticResource ButtonInfoBaseStyle}" TargetType="{x:Type dxe:SpinButtonInfo}">
        <Style.Triggers>
            <Trigger Property="SpinStyle" Value="Horizontal">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Buttons.SpinButtonInfoHorizontalTemplate}}" />
            </Trigger>
            <Trigger Property="SpinStyle" Value="Vertical">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Buttons.SpinButtonInfoVerticalTemplate}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ImageButtonInfo.DefaultStyleBase" BasedOn="{StaticResource CommonButtonInfoStyle}" TargetType="{x:Type dxe:ImageButtonInfo}">
        <Setter Property="ButtonStyle" Value="{DynamicResource {dxt:LWKey Buttons.ImageButtonStyle}}" />
        <Setter Property="GlyphStyle" Value="{DynamicResource {dxt:LWKey Buttons.ImageButtonGlyphStyle}}" />
    </Style>
    <Style x:Key="DeleteButtonInfo.DefaultStyleBase" BasedOn="{StaticResource ButtonInfoBaseStyle}" TargetType="{x:Type dxe:DeleteButtonInfo}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Buttons.DeleteButtonInfoTemplate}}" />
    </Style>
    <Style x:Key="LoadingIndicatorButtonInfo.DefaultStyleBase" BasedOn="{StaticResource ButtonInfoBaseStyle}" TargetType="{x:Type dxe:LoadingIndicatorButtonInfo}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Buttons.LoadingButtonInfoTemplate}}" />
    </Style>
    <Style x:Key="DateEditButtonInfo.DefaultStyleBase" BasedOn="{StaticResource ImageButtonInfo.DefaultStyleBase}" TargetType="{x:Type dxe:DateEditButtonInfo}">
        <Setter Property="dxei:ButtonInfoPropertyProvider.UseArrowGlyphOnly" Value="{DynamicResource {dxt:LWKey Buttons.DateEditUseArrowGlyph}}" />
        <Setter Property="ButtonStyle" Value="{DynamicResource {dxt:LWKey Buttons.DateEditButtonStyle}}" />
        <Style.Triggers>
            <Trigger Property="ActualGlyphKind" Value="Date">
                <Setter Property="Glyph" Value="{dx:SvgImageSource Uri={dx:EditorsResource Images/DateEdit/Date.svg}}" />
            </Trigger>
            <Trigger Property="ActualGlyphKind" Value="Time">
                <Setter Property="Glyph" Value="{dx:SvgImageSource Uri={dx:EditorsResource Images/DateEdit/Time.svg}}" />
            </Trigger>
            <Trigger Property="ActualGlyphKind" Value="DateAndTime">
                <Setter Property="Glyph" Value="{dx:SvgImageSource Uri={dx:EditorsResource Images/DateEdit/DateAndTime.svg}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion DEFAULT STYLES-->

</ResourceDictionary>