<?xml version="1.0" encoding="utf-8" ?>
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:aero="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxbi="http://schemas.devexpress.com/winfx/2008/xaml/bars/internal"
    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Core/Editors/_{ThemeName}.xaml" />
        <dxi:ThemeResourceDictionary Path="Core/Editors/_Base.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.Foreground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.MouseOverForeground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.PressedForeground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.CheckedForeground}" Color="{StaticResource Color.Foreground}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey DropDownButton.ArrowForegroundColor}" Color="{StaticResource Color.Foreground}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey DropDownButton.ArrowPressedForegroundColor}" Color="{StaticResource Color.Foreground}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey DropDownButton.ArrowMouseOverForegroundColor}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.ArrowForeground}" Color="{StaticResource {dxt:LWKey DropDownButton.ArrowForegroundColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.ArrowPressedForeground}" Color="{StaticResource {dxt:LWKey DropDownButton.ArrowPressedForegroundColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.ArrowMouseOverForeground}" Color="{StaticResource {dxt:LWKey DropDownButton.ArrowMouseOverForegroundColor}}" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.Brush}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.MaxPointBrush}" Color="#FFC30300" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.MinPointBrush}" Color="#FFFFC300" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.StartPointBrush}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.EndPointBrush}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.NegativePointBrush}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey SparklineEdit.MarkerBrush}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey HyperLinkEdit.Foreground}" Color="{dx:LWColor 'Win10Dark=#FF0078D7, Win10Light=#FF0066CC'}" />
    <SolidColorBrush x:Key="{dxt:LWKey HyperLinkEdit.InplaceForeground}" Color="{dx:LWColor 'Win10Dark=#FF0078D7, Win10Light=#FF0066CC'}" />
    <SolidColorBrush x:Key="{dxt:LWKey FlyoutControl.BorderBrush}" Color="{dx:LWColor 'Win10Dark=Color.AltBorder, Win10Light=Color.Border'}" />
    <SolidColorBrush x:Key="{dxt:LWKey FlyoutControl.Background}" Color="{StaticResource Color.Control.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey FlyoutControl.Foreground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey ColorEdit.Background}" Color="{StaticResource Color.Control.Background}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey SpinEdit.ArrowBrushColor}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey Buttons.Foreground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.Background}" Color="{StaticResource Color.Window.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.Foreground}" Color="{StaticResource Color.Delimiter}" />
    <SolidColorBrush x:Key="{dxt:LWKey DateEdit.PopupContentBackground}" Color="{StaticResource Color.Editor.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey DateNavigator.BackgroundBrush}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey BaseEdit.ReadOnlyBackground}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey BaseEdit.ReadOnlyBorder}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.ReadOnlyBackground}" Color="{dx:LWColor 'Win10Dark=Color.Border, Win10Light=#FFF3F3F3'}" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.ReadOnlyBorder}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.CaretBrush}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.SelectionBrush}" Color="{StaticResource Color.Focused}" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.NullTextForeground}" Color="{StaticResource Color.Foreground}" Opacity="0.62" />
    <SolidColorBrush x:Key="{dxt:LWKey CalendarClient.CalendarClientForegroundBrush}" Color="{StaticResource Color.Editor.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ProgressBarEdit.Foreground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey ProgressBarEdit.AdditionalForeground}" Color="{dx:LWColor 'Win10Dark=Color.Foreground, Win10Light=Color.Editor.Background'}" />
    <SolidColorBrush x:Key="{dxt:LWKey ImageEdit.ImageBackgroundBrush}" Color="{StaticResource Color.Editor.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey ImageEdit.CropMenuForegroundBrush}" Color="{StaticResource Color.Backstage.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey ImageEdit.ImageEditToolSeparatorFillBrush}" Color="{dx:LWColor '#3FFFFFFF, Win10Light=Color.Foreground'}" />
    <SolidColorBrush x:Key="{dxt:LWKey PopupBrushEdit.ChipBorderBrush}" Color="{StaticResource Color.Custom.Red}" />
    <SolidColorBrush x:Key="{dxt:LWKey Brushes.EditorPopupListBoxBackground}" Color="{StaticResource Color.Editor.Background}" />
    <SolidColorBrush x:Key="{dxt:LWKey FilterControl.InplaceFilterEditorForeground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey TokenEditor.TokenForeground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey TimePicker.BackgroundBrush}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey TimePicker.ClockBorderBrush}" Color="{StaticResource Color.Border}" />
    <SolidColorBrush x:Key="{dxt:LWKey TimePicker.ClockForeground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey TimePicker.ClockFillBrush}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.TickForeground}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey ImageEdit.InplaceMenuBackgroundBrush}" Color="{dx:LWColor 'Win10Dark=Color.Backstage.Button.Background, Win10Light=Color.Backstage.Window.Background'}"  />
    <Thickness x:Key="{dxt:LWKey EditorListBox.DefaultBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey ButtonEdit.ButtonEditPadding}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey ButtonEdit.ButtonEditPaddingCorrection}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.LeftButtonMargin}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.LeftButtonMarginCorrection}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.RightButtonMargin}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey Buttons.RightButtonMarginCorrection}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey InplaceBaseEdit.CommonBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey InplaceBaseEdit.TextEditBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey InplaceBaseEdit.TextEditPadding}">4,2,4,2</Thickness>
    <Thickness x:Key="{dxt:LWKey InplaceBaseEdit.ValidationErrorPadding}">3,0,1,0</Thickness>
    <Thickness x:Key="{dxt:LWKey CheckEdit.Padding}">0,1,0,1</Thickness>
    <Thickness x:Key="{dxt:LWKey FlyoutControl.BorderThickness}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey FlyoutControl.Padding}">12</Thickness>
    <Thickness x:Key="{dxt:LWKey ImageEdit.CropMenuTextMargin}">0</Thickness>
    <sys:Double x:Key="{dxt:LWKey TrackBarEdit.LeftStepButtonSize}">16</sys:Double>
    <sys:Double x:Key="{dxt:LWKey TrackBarEdit.RightStepButtonSize}">16</sys:Double>
    <sys:Double x:Key="{dxt:LWKey ToggleSwitch.ToggleSwitchWidth}">48</sys:Double>
    <sys:Double x:Key="{dxt:LWKey ToggleSwitch.ToggleSwitchHeight}">22</sys:Double>
    <sys:Double x:Key="{dxt:LWKey ToggleSwitch.DisabledStateOpacity}">0.35</sys:Double>
    <Thickness x:Key="{dxt:LWKey DateNavigator.DateNavigatorCalendarPadding}">12</Thickness>
    <Thickness
        x:Key="{dxt:LWKey RangeControl.LeftLabelMargin}"
        Bottom="1"
        Left="0"
        Right="5"
        Top="1" />
    <Thickness
        x:Key="{dxt:LWKey RangeControl.RightLabelMargin}"
        Bottom="1"
        Left="5"
        Right="0"
        Top="1" />
    <sys:Double x:Key="{dxt:LWKey TextEdit.SelectionOpacity}">0.4</sys:Double>
    <Thickness x:Key="{dxt:LWKey Buttons.DefaultBorderThickness}">0,0,0,0</Thickness>
    <Thickness x:Key="{dxt:LWKey InplaceBaseEdit.CheckEditPadding}">0,3,0,3</Thickness>
    <sys:Double x:Key="{dxt:LWKey TrackBarEdit.TrackMinHeight}">17</sys:Double>
    <Thickness x:Key="{dxt:LWKey ProgressBarEdit.DisplayTemplateMargin}">0</Thickness>
    <Thickness x:Key="{dxt:LWKey ProgressBarEdit.DisplayInplaceTemplateMargin}">0</Thickness>
    <Style x:Key="{dxt:LWKey TokenEditor.DeleteButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Root" Background="Transparent" Opacity="0.62">
                        <Path Fill="{TemplateBinding TextElement.Foreground}" Margin="4" Style="{StaticResource UIShape.Clear}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="Root" Value="1" />
                            <Setter Property="Opacity" TargetName="Root" Value="1" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="Root" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="40" />
                <Setter Property="MinHeight" Value="40" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.CellButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1" />
            <dx:DXBorder
                x:Name="IsSelection"
                Background="{StaticResource Brush.SelectionBackground}"
                BorderBrush="{StaticResource Brush.SelectionBorder}"
                BorderThickness="1"
                Opacity="0" />
            <dx:DXBorder
                x:Name="IsToday"
                Background="{StaticResource Brush.Border}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1"
                Opacity="0" />
            <dx:DXBorder
                x:Name="IsHot"
                Background="{StaticResource Brush.HoverBackground}"
                BorderBrush="{StaticResource Brush.HoverBorder}"
                BorderThickness="1"
                Opacity="0" />
            <dx:DXBorder
                x:Name="IsFocused"
                Background="{x:Null}"
                BorderBrush="{StaticResource Brush.Focused}"
                BorderThickness="1"
                Opacity="0" />
            <dx:ContentContainer
                x:Name="Content"
                Content="{TemplateBinding Content}"
                Foreground="{StaticResource Brush.Foreground}"
                HorizontalAlignment="Center"
                Margin="3"
                VerticalAlignment="Center" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsHot" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(dx:ContentContainer.Foreground).(SolidColorBrush.Color)" To="{StaticResource Color.HoverForeground}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed" />
                    <VisualState x:Name="Disabled" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesSpecial">
                    <VisualState x:Name="CellStateSpecial">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames dxi:ValueSetter.FontWeight="Bold" Storyboard.TargetName="Content" Storyboard.TargetProperty="FontWeight" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotSpecial" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesSelected">
                    <VisualState x:Name="CellStateSelected">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsSelection" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor2" To="{StaticResource Color.SelectionForeground}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotSelected" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesToday">
                    <VisualState x:Name="CellStateToday">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsToday" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor6" To="{StaticResource Color.SelectionForeground}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotToday" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesFocused">
                    <VisualState x:Name="CellStateNotFocused" />
                    <VisualState x:Name="CellStateFocused">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocused" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor5" To="{StaticResource Color.SelectionForeground}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesHoliday">
                    <VisualState x:Name="CellStateHoliday">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor6" To="{StaticResource Color.Custom.Red}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotHoliday" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesInactive">
                    <VisualState x:Name="CellStateActive" />
                    <VisualState x:Name="CellStateInactive">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesDisabled">
                    <VisualState x:Name="CellStateEnabled" />
                    <VisualState x:Name="CellStateDisabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.2" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey RangeControl.RangeBarOutOfRangeBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{dx:LWBrush 'Win10Dark=Brush.Focused, Win10Light=Brush.Border'}" />
        <Setter Property="Opacity" Value="0.84" />
    </Style>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.DropDownGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="M24.828,28.237 L0,3.409 3.408,0.001 24.828,20.586 46.247,9.9261674E-24 49.656,3.408 24.828,28.237 z"
                Fill="{StaticResource {dxt:LWKey DropDownButton.ArrowForeground}}"
                Height="5"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="MouseStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Fill" TargetName="Path" Value="{StaticResource {dxt:LWKey DropDownButton.ArrowMouseOverForeground}}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Fill" TargetName="Path" Value="{StaticResource {dxt:LWKey DropDownButton.ArrowPressedForeground}}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.UpGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="M24.828 -1.64416e-06L49.656 24.828L46.248 28.236L24.828 7.651L3.409 28.237L7.33146e-06 24.829L24.828 -1.64416e-06Z"
                Fill="{StaticResource Brush.Foreground}"
                Height="5"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.DownGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="M24.828,28.237 L0,3.409 3.408,0.001 24.828,20.586 46.247,9.9261674E-24 49.656,3.408 24.828,28.237 z"
                Fill="{StaticResource Brush.Foreground}"
                Height="5"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.LeftGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="M0.709502 25.1185L25.5375 0.290497L28.9455 3.6985L8.3605 25.1185L28.9465 46.5375L25.5385 49.9465L0.709502 25.1185Z"
                Fill="{StaticResource Brush.Foreground}"
                Height="8"
                Stretch="Fill"
                Width="5" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RightGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="M28.9465 25.1185L4.1185 49.9465L0.710503 46.5385L21.2955 25.1185L0.709501 3.6995L4.1175 0.2905L28.9465 25.1185Z"
                Fill="{StaticResource Brush.Foreground}"
                Height="8"
                Stretch="Fill"
                Width="5" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.SpinUpGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="M24.828 -1.64416e-06L49.656 24.828L46.248 28.236L24.828 7.651L3.409 28.237L7.33146e-06 24.829L24.828 -1.64416e-06Z"
                Fill="{StaticResource Brush.Foreground}"
                Height="5"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="Path" TargetProperty="Fill" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.SpinDownGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="M24.828,28.237 L0,3.409 3.408,0.001 24.828,20.586 46.247,9.9261674E-24 49.656,3.408 24.828,28.237 z"
                Fill="{StaticResource Brush.Foreground}"
                Height="5"
                Margin="0,1,0,0"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="Path" TargetProperty="Fill" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.SpinLeftGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="M0.709502 25.1185L25.5375 0.290497L28.9455 3.6985L8.3605 25.1185L28.9465 46.5375L25.5385 49.9465L0.709502 25.1185Z"
                Fill="{StaticResource Brush.Foreground}"
                Height="8"
                Stretch="Fill"
                Width="5" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="Path" TargetProperty="Fill" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.SpinRightGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="M28.9465 25.1185L4.1185 49.9465L0.710503 46.5385L21.2955 25.1185L0.709501 3.6995L4.1175 0.2905L28.9465 25.1185Z"
                Fill="{StaticResource Brush.Foreground}"
                Height="8"
                Stretch="Fill"
                Width="5" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="Path" TargetProperty="Fill" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.ApplyGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="M468.298,75.496 C468.298,75.496 263.82867,279.23382 161.594,381.46949 122.29667,342.17216 43.702,264.311 43.702,264.311 43.702,264.311 8.0894987,299.77356 8.0894987,299.77356 8.0894987,299.77356 166.03026,450.16039 166.03026,450.16039 166.03026,450.16039 505.03829,108.32784 505.03829,108.32784 505.03829,108.32784 468.298,75.496 468.298,75.496 z"
                Fill="{StaticResource Brush.Foreground}"
                Height="8"
                Stretch="Fill"
                Width="10" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <Style x:Key="{dxt:LWKey Buttons.ImageButtonGlyphStyle}" TargetType="{x:Type Image}">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey GradientMultiSlider.ThumbTemplate}" TargetType="{x:Type dxei:GradientMultiSliderThumb}">
        <Grid Margin="0,1,0,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Path
                Grid.Row="0"
                Height="6"
                Style="{StaticResource UIShape.Up.Default}"
                Width="12" />
            <Path
                Grid.Row="0"
                Height="6"
                Style="{StaticResource UIShape.Up.Default}"
                Width="12" />
            <dx:DXBorder
                Grid.Row="1"
                Background="{StaticResource Brush.Foreground}"
                Height="12"
                Width="12" />
            <dx:DXBorder Grid.Row="1" Margin="1">
                <dx:DXBorder.Background>
                    <SolidColorBrush Color="{TemplateBinding Color}" />
                </dx:DXBorder.Background>
            </dx:DXBorder>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Buttons.SpinUpButtonTemplate}" TargetType="{x:Type ButtonBase}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{Binding Path=Background}"
                BorderBrush="{Binding Path=BorderBrush}"
                BorderThickness="{Binding Path=BorderThickness}"
                CornerRadius="{Binding Path=CornerRadius}"
                Padding="{Binding Path=Padding}" />
            <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="0" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.HoverBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.HoverBorder}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBorder}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground}" />
                <Setter Property="Panel.ZIndex" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Buttons.SpinDownButtonTemplate}" TargetType="{x:Type ButtonBase}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{Binding Path=Background}"
                BorderBrush="{Binding Path=BorderBrush}"
                BorderThickness="{Binding Path=BorderThickness}"
                CornerRadius="{Binding Path=CornerRadius}"
                Padding="{Binding Path=Padding}" />
            <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="0" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.HoverBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.HoverBorder}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBorder}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{StaticResource Brush.Foreground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RenderCheckBoxTemplate}">
        <dxi:RenderPanel Name="CheckBox" LayoutProvider="{dxi:DockPanelLayoutProvider LastChildFill=True}">
            <dxi:RenderPanel
                Name="Field"
                Height="14"
                Margin="{StaticResource {dxt:LWKey InplaceBaseEdit.CheckEditPadding}}"
                ShouldCalcDpiAwareThickness="False"
                Width="14">
                <dxi:RenderBorder
                    Name="IsDefault"
                    Background="{StaticResource Brush.Editor.Background}"
                    BorderBrush="{dx:LWBrush 'Win10Dark=Brush.AltBorder, Win10Light=Brush.Border'}"
                    BorderThickness="1" />
                <dxi:RenderBorder
                    Name="Indeterminate"
                    Background="{StaticResource Brush.Foreground}"
                    Height="8"
                    Visibility="Collapsed"
                    Width="8" />
                <dxi:RenderPath
                    Name="Checked"
                    Data="M468.298,75.496 C468.298,75.496 263.82867,279.23382 161.594,381.46949 122.29667,342.17216 43.702,264.311 43.702,264.311 43.702,264.311 8.0894987,299.77356 8.0894987,299.77356 8.0894987,299.77356 166.03026,450.16039 166.03026,450.16039 166.03026,450.16039 505.03829,108.32784 505.03829,108.32784 505.03829,108.32784 468.298,75.496 468.298,75.496 z"
                    Fill="{StaticResource Brush.Foreground}"
                    Height="8"
                    Margin="1"
                    Stretch="Fill"
                    Visibility="Collapsed"
                    Width="10" />
            </dxi:RenderPanel>
            <dxi:RenderContentPresenter Name="PART_ContentPresenter" Visibility="Collapsed" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="CommonStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.HoverBackground}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.SelectionBackground}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Disabled">
                    <dxi:RenderSetter Property="Opacity" TargetName="CheckBox" Value="0.38" />
                    <dxi:RenderSetter Property="Opacity" TargetName="PART_ContentPresenter" Value="0.38" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="CheckStates">
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="Visibility" TargetName="Checked" Value="Visible" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Unchecked" />
                <dxi:RenderStateTrigger Name="Indeterminate">
                    <dxi:RenderSetter Property="Visibility" TargetName="Indeterminate" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="FocusStates">
                <dxi:RenderStateTrigger Name="Unfocused" />
                <dxi:RenderStateTrigger Name="Focused">
                    <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="ContentStates">
                <dxi:RenderStateTrigger Name="HasNoContent" />
                <dxi:RenderStateTrigger Name="HasContent">
                    <dxi:RenderSetter Property="Visibility" TargetName="PART_ContentPresenter" Value="Visible" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="Chrome">
                <dxi:RenderSetter Property="MinWidth" TargetName="Field" Value="32" />
                <dxi:RenderSetter Property="MinHeight" TargetName="Field" Value="32" />
                <dxi:RenderSetter Property="MinWidth" TargetName="Indeterminate" Value="20" />
                <dxi:RenderSetter Property="MinHeight" TargetName="Indeterminate" Value="20" />
                <dxi:RenderSetter Property="MinWidth" TargetName="Checked" Value="20" />
                <dxi:RenderSetter Property="MinHeight" TargetName="Checked" Value="20" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey ToggleSwitch.SwitchBorderTemplate}">
        <dxi:RenderBorder
            Name="IsDefault"
            Background="{StaticResource Brush.Editor.Background}"
            BorderBrush="{dx:LWBrush 'Win10Dark=Brush.AltBorder, Win10Light=Brush.Border'}"
            BorderThickness="1"
            CornerRadius="10" />
        <dxi:RenderTemplate.Triggers>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderThicknessProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.BorderBrushProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="IsDefault"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:RenderStateGroup Name="VisualStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver" />
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="True" ValueSource="TemplatedParent" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsCheckedProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                <dxi:RenderSetter Property="BorderThickness" TargetName="IsDefault" Value="1" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsFocusedProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="IsDefault" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="IsDefault" Value="44" />
            </dxi:RenderTrigger>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.FocusedBorderBrushProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasFocusedBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition Property="IsFocused" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.CheckedStateBackgroundProperty}"
                TargetName="IsDefault"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasCheckedStateBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition Property="IsChecked" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.CheckedStateBorderBrushProperty}"
                TargetName="IsDefault"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasCheckedStateBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition Property="IsChecked" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey ToggleSwitch.SwitchThumbTemplate}">
        <dxi:RenderBorder
            Name="IsDefault"
            Background="{StaticResource Brush.Foreground}"
            CornerRadius="10"
            Height="12"
            Margin="4,2,4,2"
            Width="12" />
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="VisualStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsCheckedProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Win10Dark=Brush.Foreground, Win10Light=Brush.Window.Background'}" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.IsCheckedProperty}" Value="{x:Null}" ValueSource="TemplatedParent" />
            <dxi:RenderTrigger DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="True" ValueSource="TemplatedParent" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="IsDefault" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="IsDefault" Value="44" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEditThumb.VerticalThumbTemplate}" TargetType="{x:Type Thumb}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder x:Name="Back" Background="Transparent" />
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource Brush.AltPressed}"
                BorderBrush="{StaticResource Brush.Window.Background}"
                BorderThickness="1"
                CornerRadius="4"
                Height="7"
                Width="18" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Foreground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Window.Background}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.AltPressed}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Window.Background}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="IsDefault" Value="0.38" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="IsDefault" Value="16" />
                <Setter Property="MinWidth" TargetName="IsDefault" Value="26" />
                <Setter Property="MinHeight" TargetName="Back" Value="16" />
                <Setter Property="MinWidth" TargetName="Back" Value="26" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEditThumb.HorizontalThumbTemplate}" TargetType="{x:Type Thumb}">
        <Grid x:Name="Root" Background="Transparent" Margin="0,-1,0,0">
            <dx:DXBorder x:Name="Back" Background="Transparent" />
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource Brush.AltPressed}"
                BorderBrush="{StaticResource Brush.Window.Background}"
                BorderThickness="1"
                CornerRadius="4"
                Height="18"
                Width="7" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Foreground}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Window.Background}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.AltPressed}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Window.Background}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="IsDefault" Value="0.38" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="IsDefault" Value="26" />
                <Setter Property="MinWidth" TargetName="IsDefault" Value="16" />
                <Setter Property="MinHeight" TargetName="Back" Value="26" />
                <Setter Property="MinWidth" TargetName="Back" Value="16" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.VerticalBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource {dxt:LWKey TrackBarEdit.Foreground}}"
                BorderBrush="{StaticResource Brush.Window.Background}"
                BorderThickness="1"
                Width="4" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasTrackWidth" Value="True">
                <Setter Property="Width" TargetName="IsDefault" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.TrackWidth), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxei:ControlHelper.ShowFocusedState" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxei:ControlHelper.ShowFocusedState" Value="True" />
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="IsDefault" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.HorizontalBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" UseLayoutRounding="False">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource {dxt:LWKey TrackBarEdit.Foreground}}"
                BorderBrush="{StaticResource Brush.Window.Background}"
                BorderThickness="1"
                Height="4" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasTrackHeight" Value="True">
                <Setter Property="Height" TargetName="IsDefault" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.TrackHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxei:ControlHelper.ShowFocusedState" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxei:ControlHelper.ShowFocusedState" Value="True" />
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="IsDefault" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="RatingItem.Template" TargetType="dxe:RatingItem">
        <dx:DXBorder x:Name="Root" Background="Transparent">
            <Grid HorizontalAlignment="Stretch" Margin="{TemplateBinding Margin}" VerticalAlignment="Stretch">
                <Path
                    x:Name="PathBackground"
                    Data="{TemplateBinding Geometry}"
                    Fill="{TemplateBinding Background}"
                    Style="{StaticResource UIShape.Rating}" />
                <Path
                    x:Name="PathSelectedBackground"
                    Data="{TemplateBinding Geometry}"
                    Fill="{TemplateBinding SelectedBackground}"
                    OpacityMask="{TemplateBinding VisualValue}"
                    Style="{StaticResource UIShape.Rating}" />
                <Path
                    x:Name="PathHoverBackground"
                    Data="{TemplateBinding Geometry}"
                    Fill="{TemplateBinding HoverBackground}"
                    OpacityMask="{TemplateBinding HoverVisualValue}"
                    Style="{StaticResource UIShape.Rating}" />
                <Path
                    x:Name="PART_Content"
                    Data="{TemplateBinding Geometry}"
                    Fill="Transparent"
                    Opacity="0.01"
                    Stroke="{TemplateBinding BorderBrush}"
                    StrokeThickness="{TemplateBinding BorderThickness}"
                    Style="{StaticResource UIShape.Rating}" />
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Width" TargetName="PathBackground" Value="32" />
                <Setter Property="Height" TargetName="PathBackground" Value="30" />
                <Setter Property="Width" TargetName="PathHoverBackground" Value="32" />
                <Setter Property="Height" TargetName="PathHoverBackground" Value="30" />
                <Setter Property="Width" TargetName="PathSelectedBackground" Value="32" />
                <Setter Property="Height" TargetName="PathSelectedBackground" Value="30" />
                <Setter Property="Width" TargetName="PART_Content" Value="32" />
                <Setter Property="Height" TargetName="PART_Content" Value="30" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ButtonStyleBase" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.HoverForeground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.SelectionForeground}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey Calculator.ButtonDigitStyle}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Root">
                        <dx:DXBorder x:Name="IsDefault" BorderBrush="{dx:LWBrush 'Win10Dark=Brush.AltBorder, Win10Light=Brush.Border'}" BorderThickness="1">
                            <dx:DXBorder.Background>
                                <SolidColorBrush Color="{StaticResource Color.Delimiter}" Opacity="0.10" />
                            </dx:DXBorder.Background>
                        </dx:DXBorder>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="12,3,12,3" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(Opacity)" To="1" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Win10Dark=Color.HoverBackground, Win10Light=Color.AltHover'}" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Win10Dark=Color.HoverBackground, Win10Light=Color.AltHover'}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(Opacity)" To="1" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.AltPressed}" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.AltPressed}" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(Opacity)" To="0.42" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(Opacity)" To="0.42" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="MemoryStates">
                                <VisualState x:Name="EmptyMemory" />
                                <VisualState x:Name="MemoryAssigned">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.Focused}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="dx:FocusHelper2.Focusable" Value="False"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.HoverForeground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.SelectionForeground}"/>
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44"/>
                <Setter Property="MinWidth" Value="44"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey Calculator.ButtonOperationStyle}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Root">
                        <dx:DXBorder x:Name="IsDefault" BorderBrush="{dx:LWBrush 'Win10Dark=Brush.AltBorder, Win10Light=Brush.Border'}" BorderThickness="1">
                            <dx:DXBorder.Background>
                                <SolidColorBrush Color="{StaticResource Color.Delimiter}" Opacity="0.38" />
                            </dx:DXBorder.Background>
                        </dx:DXBorder>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="12,3,12,3" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(Opacity)" To="1" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Win10Dark=Color.HoverBackground, Win10Light=Color.AltHover'}" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Win10Dark=Color.HoverBackground, Win10Light=Color.AltHover'}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(Opacity)" To="0.42" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(Opacity)" To="0.42" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.AltPressed}" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.AltPressed}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="MemoryStates">
                                <VisualState x:Name="EmptyMemory" />
                                <VisualState x:Name="MemoryAssigned">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.Focused}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="dx:FocusHelper2.Focusable" Value="False"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.HoverForeground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.SelectionForeground}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44"/>
                <Setter Property="MinWidth" Value="44"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey Calculator.ButtonCEStyle}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Root">
                        <dx:DXBorder x:Name="IsDefault" BorderBrush="{dx:LWBrush 'Win10Dark=Brush.AltBorder, Win10Light=Brush.Border'}" BorderThickness="1">
                            <dx:DXBorder.Background>
                                <SolidColorBrush Color="{StaticResource Color.Delimiter}" Opacity="0.7" />
                            </dx:DXBorder.Background>
                        </dx:DXBorder>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="12,3,12,3" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(Opacity)" To="1" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Win10Dark=Color.HoverBackground, Win10Light=Color.AltHover'}" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Win10Dark=Color.HoverBackground, Win10Light=Color.AltHover'}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(Opacity)" To="0.42" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(Opacity)" To="0.42" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.AltPressed}" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.AltPressed}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="MemoryStates">
                                <VisualState x:Name="EmptyMemory" />
                                <VisualState x:Name="MemoryAssigned">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.Focused}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="dx:FocusHelper2.Focusable" Value="False"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.HoverForeground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Brush.SelectionForeground}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44"/>
                <Setter Property="MinWidth" Value="44"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <DataTemplate x:Key="{dxt:LWKey Buttons.UpGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Up}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.DownGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Down}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.LeftGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Left}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RightGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Right}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinUpGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Up}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinDownGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Down}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinLeftGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Left}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinRightGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Right}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.DropDownGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path x:Name="Path" Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Down}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.ApplyGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Apply}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.CancelGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Cancel}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RegularGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Regular}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RefreshGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Refresh}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SearchGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Search}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.EditGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Edit}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.UndoGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Undo}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RedoGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Redo}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.PlusGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.Plus}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.MinusGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.Minus}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.HoverBorderTemplate}">
        <dxi:RenderBorder
            Name="PART_Focus"
            BorderBrush="{StaticResource Brush.Focused}"
            BorderThickness="1"
            Visibility="Collapsed" />
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxei:ControlHelper.ShowFocusedStateProperty}" Value="True" ValueSource="Chrome">
                <dxi:RenderSetter Property="Visibility" TargetName="PART_Focus" Value="Visible" />
            </dxi:RenderTrigger>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.FocusedBorderBrushProperty}"
                TargetName="PART_Focus"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasFocusedBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BorderThicknessProperty}"
                TargetName="PART_Focus"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="PART_Focus"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.CommonBorderTemplate}">
        <dxi:RenderBorder
            Name="PART_Border"
            Background="{StaticResource Brush.Editor.Background}"
            BorderBrush="{StaticResource Brush.Border}"
            BorderThickness="1" />
        <dxi:RenderTemplate.Triggers>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BorderThicknessProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="PART_Border"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" />
            </dxi:ConditionalRenderBinding>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="PART_Border" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="PART_Border" Value="44" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static FrameworkElement.IsEnabledProperty}" Value="False" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Opacity" TargetName="PART_Border" Value="0.35" />
            </dxi:RenderTrigger>
            <dxi:MultiRenderTrigger>
                <dxi:MultiRenderTrigger.Conditions>
                    <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
                    <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBorderBrushProperty}" Value="False" ValueSource="TemplatedParent" />
                </dxi:MultiRenderTrigger.Conditions>
                <dxi:RenderSetter Property="BorderBrush" TargetName="PART_Border" Value="{StaticResource {dxt:LWKey TextEdit.ReadOnlyBorder}}" />
            </dxi:MultiRenderTrigger>
            <dxi:MultiRenderTrigger>
                <dxi:MultiRenderTrigger.Conditions>
                    <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
                    <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBackgroundProperty}" Value="False" ValueSource="TemplatedParent" />
                </dxi:MultiRenderTrigger.Conditions>
                <dxi:RenderSetter Property="Background" TargetName="PART_Border" Value="{StaticResource {dxt:LWKey BaseEdit.ReadOnlyBackground}}" />
            </dxi:MultiRenderTrigger>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.ReadOnlyBorderBrushProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.ReadOnlyBackgroundProperty}"
                TargetName="PART_Border"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BackgroundProperty}"
                TargetName="PART_Border"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:BaseEdit.BackgroundProperty}" Operator="Not" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BorderBrushProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:BaseEdit.BorderBrushProperty}" Operator="Not" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.TextEditBorderTemplate}">
        <dxi:RenderBorder
            Name="PART_Border"
            Background="{StaticResource Brush.Editor.Background}"
            BorderBrush="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.AltBorder'}"
            BorderThickness="1" />
        <dxi:RenderTemplate.Triggers>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BorderThicknessProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderThickness"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasBorderThicknessProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxi:AppearanceOptions.CornerRadiusProperty}"
                TargetName="PART_Border"
                TargetProperty="CornerRadius"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxi:AppearanceOptions.HasCornerRadiusProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="MinWidth" TargetName="PART_Border" Value="44" />
                <dxi:RenderSetter Property="MinHeight" TargetName="PART_Border" Value="44" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static FrameworkElement.IsEnabledProperty}" Value="False" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Opacity" TargetName="PART_Border" Value="0.35" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="true" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="BorderBrush" TargetName="PART_Border" Value="{StaticResource {dxt:LWKey TextEdit.ReadOnlyBorder}}" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="true" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Background" TargetName="PART_Border" Value="{StaticResource {dxt:LWKey TextEdit.ReadOnlyBackground}}" />
            </dxi:RenderTrigger>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.ReadOnlyBorderBrushProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBorderBrushProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:EditorAppearanceProperties.ReadOnlyBackgroundProperty}"
                TargetName="PART_Border"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:EditorAppearanceProperties.HasReadOnlyBackgroundProperty}" Value="True" ValueSource="TemplatedParent" />
                <dxi:RenderCondition DependencyProperty="{x:Static dxei:ControlHelper.IsReadOnlyProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BackgroundProperty}"
                TargetName="PART_Border"
                TargetProperty="Background"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:BaseEdit.BackgroundProperty}" Operator="Not" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:BaseEdit.BorderBrushProperty}"
                TargetName="PART_Border"
                TargetProperty="BorderBrush"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:BaseEdit.BorderBrushProperty}" Operator="Not" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <Thickness x:Key="{dxt:LWKey EmbeddedEditorLabels.Margin}">4,2,0,0</Thickness>
    <Thickness x:Key="{dxt:LWKey EmbeddedEditorLabels.Padding}">0</Thickness>
    <sys:Double x:Key="{dxt:LWKey EmbeddedEditorLabels.FontSize}">12</sys:Double>
    <SolidColorBrush x:Key="{dxt:LWKey EmbeddedEditorLabels.Foreground}" Color="Gray"/>
    <Thickness x:Key="{dxt:LWKey EmbeddedEditorLabels.ContentMargin}">0,0,0,2</Thickness>
    <Style x:Key="RatingControlDefaultStyle" TargetType="dxe:RatingControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxe:RatingControl">
                    <dxei:RatingPanel ChildrenSource="{Binding Items, RelativeSource={RelativeSource TemplatedParent}}" Orientation="{TemplateBinding Orientation}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="2,2,2,2" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Margin" Value="2,2,2,2" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.35" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RatingControl.DefaultStyle" BasedOn="{StaticResource RatingControlDefaultStyle}" TargetType="dxe:RatingControl"/>
    <x:Null x:Key="FlyoutControlEffect"/>
    <Style x:Key="{dxt:LWKey CheckEdit.EmptyFocusVisualStyle}" />
    <Style x:Key="{dxt:LWKey DateNavigator.HeaderButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.HeaderButtonTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="MinHeight" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey DateEdit.HeaderButtonStyle}" BasedOn="{StaticResource {dxt:LWKey DateNavigator.HeaderButtonStyle}}" TargetType="{x:Type Button}" />
    <Style x:Key="{dxt:LWKey DateNavigator.CurrentDateButtonStyle}" BasedOn="{StaticResource {dxt:LWKey DateNavigator.HeaderButtonStyle}}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.CurrentDateButtonTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="MinHeight" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>