<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
    xmlns:cs="colorscheme_ignorable_uri"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    mc:Ignorable="cs">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Core/Editors/_{ThemeCategory}.xaml" />
        <dxi:ThemeResourceDictionary Path="Core/Editors/Editors.Generic.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <dx:EmbeddedResourceImageConverter x:Key="EmbeddedResourceImageConverter" />
    <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <dx:BoolToVisibilityInverseConverter x:Key="BoolToVisibilityInverseConverter" />
    <dx:BoolToThicknessConverter x:Key="BoolToThicknessConverter" ThicknessFalse="11" ThicknessTrue="13" />
    <dx:EditorStringIdConverter x:Key="EditorStringIdConverter" />
    <dx:BoolToObjectConverter x:Key="BorderThicknessConverter">
        <dx:BoolToObjectConverter.FalseValue>
            <Thickness>0,1,0,0</Thickness>
        </dx:BoolToObjectConverter.FalseValue>
        <dx:BoolToObjectConverter.TrueValue>
            <Thickness>0,0,0,1</Thickness>
        </dx:BoolToObjectConverter.TrueValue>
    </dx:BoolToObjectConverter>
    <dxe:GroupTypeConverter x:Key="FilterControlGroupTypeConverter" />
    <dxe:OperationStringConverter x:Key="FilterControlOperationStringConverter" />
    <dxe:CheckedUncheckedBoolToStringConverter x:Key="FilterControlBoolToStringConverter" />
    <dxe:FirstToCollapsedConverter x:Key="FirstToCollapsedConverter" />
    <dxe:AdditionalOperandsCountToVisibilityConverter x:Key="AdditionalOperandsCountToVisibilityConverter" />
    <dxe:OperatorPropertyNameConverter x:Key="OperatorPropertyNameConverter" />
    <dxei:HorizontalContentAlignmentToTextAlignmentConverter x:Key="HorizontalContentAlignmentToTextAlignmentConverter" />
    <sys:Boolean x:Key="AllowBinding">True</sys:Boolean>
    <dxi:RenderDropDownArrowTemplateSelector x:Key="RenderDropDownArrowTemplateSelector" />
    <dx:ColorToBrushConverter x:Key="ColorToBrushConverter" />
    <dxe:HideBorderSideToThicknessConverter x:Key="HideBorderSideToThicknessConverter" />
    <dxe:ChipSizeToSizeConverter x:Key="ChipSizeToSizeConverter" />
    <dxe:DataPagerBoolToVisibilityInvertConverter x:Key="DataPagerBoolToVisibilityInvertConverter" />
    <dxe:ActualPageIndexConveter x:Key="pageIndexConverter" />
    <dx:BoolToVisibilityInverseConverter x:Key="boolToVisiblityConverterInverse" />
    <BooleanToVisibilityConverter x:Key="boolToVisibilityConverter" />
    <dx:BoolToDoubleConverter x:Key="InvertedBoolToDoubleConverter" FalseValue="1" TrueValue="0" />
    <dx:BoolToDoubleConverter x:Key="BoolToDoubleConverter" FalseValue="0" TrueValue="1" />
    <dxe:DateTimePickerDataCaptionConverter x:Key="DateTimePickerDataCaptionConverter" />

    <!--#region Base\\Core\Core\Editors\Themes\TransferStyles.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey DateEdit.CalendarTranserStyle}" BasedOn="{dx:TargetStaticResource TransferControl.DefaultStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/Controls/Controls.xaml'}}" TargetType="{x:Type dxe:DateEditCalendarTransferControl}">
        <Setter Property="ControlTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dx:TransferContentControl}">
                    <ContentPresenter Name="PART_ContentPresenter" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PreviousControlTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dx:TransferContentControl}">
                    <ContentPresenter Name="PART_ContentPresenter" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--#endregion Base\\Core\Core\Editors\Themes\TransferStyles.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\AutoCompleteBox\Control.xaml-->


    <!-- General -->

    <Style x:Key="{dxt:LWKey TokenEditor.BorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey TokenEditor.CellPresenterTemplate}" TargetType="{x:Type dxei:TokenEditorPresenter}">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}">
            <ContentControl Focusable="False" Template="{TemplateBinding BorderTemplate}" />
            <dxei:CellEditor x:Name="CellEditor" Focusable="False" TextElement.Foreground="{TemplateBinding Foreground}" />
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEditorActivated" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="TextElement.Foreground" TargetName="CellEditor" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Office2019HighContrast=Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="IsEditorActivated" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="TextElement.Foreground" TargetName="CellEditor" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Office2019HighContrast=Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceActive">
                <Setter Property="TextElement.Foreground" TargetName="CellEditor" Value="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceInactive">
                <Setter Property="TextElement.Foreground" TargetName="CellEditor" Value="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\AutoCompleteBox\Control.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ButtonEdit\ButtonEditButton.xaml-->
    <sys:Boolean x:Key="{dxt:LWKey Buttons.DateEditUseArrowGlyph}">False</sys:Boolean>

    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ButtonEdit\ButtonEditButton.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ButtonEdit\ButtonEditGlyphes.xaml-->

    <DataTemplate x:Key="{dxt:LWKey Buttons.FirstGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.First}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey Buttons.PrevPageGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.PrevPage}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey Buttons.NextPageGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.NextPage}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey Buttons.LastGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.Last}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ButtonEdit\ButtonEditGlyphes.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ButtonEdit\ButtonEditInfoContent.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey Buttons.ButtonInfoContentStyle}" TargetType="{x:Type ContentPresenter}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="{dxt:LWKey Buttons.UserButtonInfoContentStyle}" TargetType="{x:Type ContentPresenter}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="{dx:LWThickness '(3,0,3,0), Win11=(3,1,3,1)'}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey Buttons.NoneButtonInfoContentStyle}" TargetType="{x:Type ContentPresenter}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="{dx:LWThickness '(3,0,3,0), Win11=(3,1,3,1)'}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ButtonEdit\ButtonEditInfoContent.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ButtonEdit\ButtonEditSpinButton.xaml-->
    <!-- General -->
    <ControlTemplate x:Key="{dxt:LWKey Buttons.SpinLeftButtonTemplate}" TargetType="{x:Type ButtonBase}">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{Binding Path=Background}"
                BorderBrush="{Binding Path=BorderBrush}"
                BorderThickness="{Binding Path=BorderThickness}"
                CornerRadius="{Binding Path=CornerRadius}"
                Padding="{Binding Path=Padding}" />
            <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding ContentTemplate}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, Office2019Colorful=Brush.HoverAltBackground, Win11=Brush.ListItem.HoverBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBorder, Office2019Black=Brush.ControlLight.HoverBackground, Office2019Colorful=Brush.HoverAltBorder, Win11=Brush.ListItem.HoverBorder'}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBorder, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBorder, Win11=Brush.ListItem.SelectionBorder'}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, VS2019Blue=Brush.SelectionForeground, VS2019Light=Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey Buttons.SpinRightButtonTemplate}" TargetType="{x:Type ButtonBase}">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{Binding Path=Background}"
                BorderBrush="{Binding Path=BorderBrush}"
                BorderThickness="{Binding Path=BorderThickness}"
                CornerRadius="{Binding Path=CornerRadius}"
                Padding="{Binding Path=Padding}" />
            <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding ContentTemplate}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, Office2019Colorful=Brush.HoverAltBackground, Win11=Brush.ListItem.HoverBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBorder, Office2019Black=Brush.ControlLight.HoverBackground, Office2019Colorful=Brush.HoverAltBorder, Win11=Brush.ListItem.HoverBorder'}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBorder, Office2019Black=Brush.ControlLight.SelectionBackground, Office2019Colorful=Brush.SelectionAltBorder, Win11=Brush.ListItem.SelectionBorder'}" />
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, VS2019Blue=Brush.SelectionForeground, VS2019Light=Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ButtonEdit\ButtonEditSpinButton.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\TextEdit.xaml-->
    <sys:Boolean x:Key="{dxt:LWKey TextEdit.UseLightweightTemplates}">True</sys:Boolean>


    <!-- General -->

    <Style x:Key="{dxt:LWKey TextEdit.WatermarkTextBlockStyle}" BasedOn="{StaticResource BaseWatermarkTextBlockStyle}" TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasPadding), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Margin" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey TextEdit.TextBlockStyle}" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="Margin" Value="{dx:LWThickness '(4,2,4,2), Win11=(6,3,4,3)'}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="13,13,13,13" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey TextEdit.TextBlockInplaceStyle}" BasedOn="{StaticResource BaseTextBlockInplaceStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="dxei:EditorMarginHelper.Margin" Value="{StaticResource TextBlockInplaceHelperMargin}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="dxei:EditorMarginHelper.Margin" Value="13,13,13,13,13,13,13,13" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey TextEdit.TextStyle}" BasedOn="{StaticResource BaseTextStyle}" TargetType="{x:Type TextBox}">
        <Setter Property="dxei:EditorMarginHelper.Margin" Value="{StaticResource TextStyleHelperMargin}" />
        <Setter Property="CaretBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.CaretBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="SelectionBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.SelectionBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="SelectionOpacity" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.SelectionOpacity), RelativeSource={RelativeSource Self}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="dxei:EditorMarginHelper.Margin" Value="13,13,13,13,0,13,13,13" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=ShowBorder, RelativeSource={RelativeSource AncestorType={x:Type dxe:BaseEdit}}}" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey TextEdit.TextInplaceStyle}" BasedOn="{StaticResource BaseTextInplaceStyle}" TargetType="{x:Type TextBox}">
        <Setter Property="dxei:EditorMarginHelper.Margin" Value="{StaticResource TextInplaceStyleHelperMargin}" />
        <Setter Property="CaretBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.CaretBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="SelectionBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.SelectionBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="SelectionOpacity" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.SelectionOpacity), RelativeSource={RelativeSource Self}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="dxei:EditorMarginHelper.Margin" Value="13,13,13,13,0,13,13,13" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=ShowBorderInInplaceMode, RelativeSource={RelativeSource AncestorType={x:Type dxe:BaseEdit}}}" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\TextEdit.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\TimePicker.xaml-->
    <sys:Double x:Key="{dxt:LWKey TimePicker.ClockSize}">120</sys:Double>
    <sys:Double x:Key="{dxt:LWKey TimePicker.ClockStrokeThickness}">1</sys:Double>
    <sys:Double x:Key="{dxt:LWKey TimePicker.ClockShaftSize}">10</sys:Double>
    <sys:Double x:Key="{dxt:LWKey TimePicker.ClockLongTickOffset}">5</sys:Double>
    <sys:Double x:Key="{dxt:LWKey TimePicker.ClockShortTickOffset}">5</sys:Double>
    <sys:Double x:Key="{dxt:LWKey TimePicker.ClockLongTickLength}">8</sys:Double>
    <sys:Double x:Key="{dxt:LWKey TimePicker.ClockShortTickLength}">4</sys:Double>


    <Style x:Key="{dxt:LWKey TimePicker.TimeEditBoxStyle}" TargetType="{x:Type dxe:ButtonEdit}">
        <Setter Property="Margin" Value="0,12,0,12" />
        <Setter Property="MinWidth" Value="100" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\TimePicker.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\HyperLinkEdit.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey HyperLinkEdit.TextBlockStyle}" BasedOn="{StaticResource BaseTextBlockStyleBase}" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="{dx:LWThickness '(4,3,4,3), Win11=4'}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="TextDecorations" Value="Underline" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey HyperLinkEdit.TextBlockInplaceStyle}" BasedOn="{StaticResource BaseTextBlockInplaceStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="{dx:LWThickness '(4,2,4,2), Win11=4'}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="TextDecorations" Value="Underline" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\HyperLinkEdit.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\Flyout.xaml-->
    <!-- General -->
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\Flyout.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateTimePicker\DataTemplates.xaml-->
    <!-- General -->

    <Style x:Key="DateTimePickerItemTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.YearItemTemplate}">
        <TextBlock Text="{Binding Path=Text}" Style="{StaticResource DateTimePickerItemTextStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.MonthItemTemplate}">
        <TextBlock Text="{Binding Path=Value, StringFormat='{}{0:MM}'}" Style="{StaticResource DateTimePickerItemTextStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.DayItemTemplate}">
        <TextBlock Text="{Binding Path=Text}" Style="{StaticResource DateTimePickerItemTextStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.Hour24ItemTemplate}">
        <TextBlock Text="{Binding Path=Text}" Style="{StaticResource DateTimePickerItemTextStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.Hour12ItemTemplate}">
        <TextBlock Text="{Binding Path=Text}" Style="{StaticResource DateTimePickerItemTextStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.MinuteItemTemplate}">
        <TextBlock Text="{Binding Path=Text}" Style="{StaticResource DateTimePickerItemTextStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.SecondItemTemplate}">
        <TextBlock Text="{Binding Path=Text}" Style="{StaticResource DateTimePickerItemTextStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.MillisecondItemTemplate}">
        <TextBlock Text="{Binding Path=Text}" Style="{StaticResource DateTimePickerItemTextStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.AmPmItemTemplate}">
        <TextBlock Text="{Binding Path=Text}" Style="{StaticResource DateTimePickerItemTextStyle}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DateTimePicker.NoneItemTemplate}" />
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateTimePicker\DataTemplates.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateTimePicker\DateTimePickerControl.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DateTimePicker.ItemTemplate}" TargetType="{x:Type dxe:DateTimePickerItem}">
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsExpanded, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding Path=UseTransitions, RelativeSource={RelativeSource Self}}" Value="true" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="expandedStateStoryboard">
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="itemBackground" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.0" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Color" To="{dx:LWColor 'Color.Foreground, Office2019HighContrast=Color.SelectionForeground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="expandedStateStoryboard" />
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsExpanded, RelativeSource={RelativeSource Self}}" Value="false" />
                    <Condition Binding="{Binding Path=UseTransitions, RelativeSource={RelativeSource Self}}" Value="true" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="hiddenStateStoryboard">
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="itemBackground" Storyboard.TargetProperty="Opacity" To="0" />
                            <DoubleAnimation Duration="0:0:0.0" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Opacity" To="0.8" />
                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Color" To="{dx:LWColor 'Color.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="hiddenStateStoryboard" />
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsExpanded, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding Path=UseTransitions, RelativeSource={RelativeSource Self}}" Value="false" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="instantlyExpandedStateStoryboard">
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.0" Storyboard.TargetName="itemBackground" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.0" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0:0:0.0" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Color" To="{dx:LWColor 'Color.Foreground, Office2019HighContrast=Color.SelectionForeground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="instantlyExpandedStateStoryboard" />
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsExpanded, RelativeSource={RelativeSource Self}}" Value="false" />
                    <Condition Binding="{Binding Path=UseTransitions, RelativeSource={RelativeSource Self}}" Value="false" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="instantlyHiddenStateStoryboard">
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.0" Storyboard.TargetName="itemBackground" Storyboard.TargetProperty="Opacity" To="0" />
                            <DoubleAnimation Duration="0:0:0.0" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Opacity" To="0.8" />
                            <ColorAnimation Duration="0:0:0.0" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Color" To="{dx:LWColor 'Color.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="instantlyHiddenStateStoryboard" />
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <Trigger Property="IsActive" Value="True">
                <Setter Property="TextBlock.Foreground" TargetName="content" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, VS2019Light=Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Background="Transparent" Opacity="{Binding Path=IsFake, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertedBoolToDoubleConverter}}">
            <Grid x:Name="itemBackground" Margin="{TemplateBinding Padding}" Opacity="0">
                <dx:DXBorder x:Name="activeSelectedBorder" Background="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, VS2019Blue=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" Opacity="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToDoubleConverter}}">
                    <dx:DXBorder x:Name="activeBackground" Background="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, VS2019Blue=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" Margin="1" />
                </dx:DXBorder>
                <dx:DXBorder x:Name="selectedBorder" Background="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, VS2019Blue=Brush.ControlLight.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" Opacity="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertedBoolToDoubleConverter}}">
                    <dx:DXBorder x:Name="background" Background="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, VS2019Blue=Brush.ControlLight.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" Margin="1" />
                </dx:DXBorder>
            </Grid>
            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}">
                <TextBlock.Foreground>
                    <SolidColorBrush x:Name="foregroundColor" Color="{dx:LWColor 'Color.Foreground, Win11=Color.Foreground.Primary'}" />
                </TextBlock.Foreground>
            </ContentPresenter>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateTimePicker.Template}">
        <ItemsControl
            x:Name="ItemsControl"
            Background="{StaticResource Brush.Editor.Background}"
            BorderBrush="{StaticResource Brush.Border}"
            dx:FocusHelper2.Focusable="False"
            HorizontalAlignment="Center"
            ItemTemplate="{DynamicResource {dxt:LWKey DateTimePicker.DateTimePickerItemTemplate}}"
            VirtualizingStackPanel.VirtualizationMode="Recycling">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel Orientation="Horizontal" VirtualizingStackPanel.VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateTimePicker.SelectorTemplate}" TargetType="{x:Type dxe:DateTimePickerSelector}">
        <Grid>
            <Grid
                x:Name="SelectedItemContainer"
                HorizontalAlignment="Center"
                Opacity="{Binding Path=IsAnimated, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertedBoolToDoubleConverter}}"
                VerticalAlignment="Center">
                <dxe:DateTimePickerItem
                    x:Name="SelectedItemContainerData"
                    Content="{TemplateBinding SelectedItem}"
                    ContentTemplate="{Binding Path=SelectedItemTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                    Foreground="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                    IsActive="{TemplateBinding IsExpanded}"
                    IsExpanded="True" />
            </Grid>
            <Grid x:Name="pickerSelectorContainer" HorizontalAlignment="Center" VerticalAlignment="Center">
                <dxe:DXScrollViewer
                    CanContentScroll="True"
                    dx:FocusHelper2.Focusable="False"
                    IsDeferredScrollingEnabled="True"
                    IsManipulationEnabled="False"
                    PanningMode="None"
                    VerticalScrollBarVisibility="Hidden"
                    VerticalSnapPointsAlignment="Near">
                    <dxe:DateTimePickerPanel x:Name="pickerPanel" />
                </dxe:DXScrollViewer>
                <Grid
                    x:Name="selectedItemCaption"
                    HorizontalAlignment="Center"
                    Opacity="{Binding Path=IsAnimated, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertedBoolToDoubleConverter}}"
                    VerticalAlignment="Center">
                    <TextBlock
                        x:Name="tb"
                        Foreground="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Office2019HighContrast=Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}"
                        IsHitTestVisible="False"
                        Margin="0,40,0,0"
                        Opacity="0.62"
                        Text="{Binding Path=SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DateTimePickerDataCaptionConverter}}" />
                </Grid>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Setter Property="Foreground" TargetName="tb" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, VS2019Light=Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Opacity" TargetName="tb" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateTimePicker\DateTimePickerControl.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\RangeControl\RangeControlStyles.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey RangeControl.OutOfRangeAreaBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.ControlLight.Background, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Control.Background, Win11=Brush.Button.SimpleButtonBackground'}" />
        <Setter Property="Opacity" Value="0.62" />
    </Style>

    <Style x:Key="{dxt:LWKey RangeControl.RangeBarOutOfSelectionBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Border, Office2019Black=Brush.Window.Background'}" />
        <Setter Property="Margin" Value="{dx:LWThickness '0, Win11=(0,2)'}" />
        <Setter Property="Opacity" Value="0.62" />
        <Setter Property="CornerRadius" Value="{dx:LWCornerRadius '0, Win11=4'}" />
    </Style>

    <Style x:Key="{dxt:LWKey RangeControl.SelectionRectangleStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Border, Win11=Brush.Foreground.Secondary'}" />
        <Setter Property="Opacity" Value="0.62" />
    </Style>

    <Style x:Key="{dxt:LWKey RangeControl.RangeBarSelectionBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Window.Background'}" />
    </Style>

    <Style x:Key="{dxt:LWKey RangeControl.RangeBarBottomBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Delimiter'}" />
        <Setter Property="Height" Value="13" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\RangeControl\RangeControlStyles.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\RangeControl\RangeControlTooltip.xaml-->
    <!-- General -->

    <DataTemplate x:Key="{dxt:LWKey RangeControl.LabelTemplate}">
        <Grid
            x:Name="Root"
            Background="{dx:LWBrush 'Brush.Border, Office2019Black=Brush.Button.Background'}"
            Margin="5,-1,5,0"
            VerticalAlignment="Top">
            <TextBlock Foreground="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Foreground, VS2019Dark=Brush.Foreground, Win10Dark=Brush.Foreground, Win11Dark=Brush.Foreground.Primary'}" Margin="12,3,12,3" Text="{Binding}" />
        </Grid>
    </DataTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\RangeControl\RangeControlTooltip.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\RangeControl\RangeControlCalendar.xaml-->
    <!-- General -->

    <DataTemplate x:Key="{dxt:LWKey CalendarClient.CalendarSelectionMarkerTemplate}">
        <dx:DXBorder
            Background="{DynamicResource {dxt:LWKey CalendarClient.CalendarClientForegroundBrush}}"
            CornerRadius="16"
            Height="16"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Width="16" />
    </DataTemplate>

    <!-- Group -->

    <ControlTemplate x:Key="{dxt:LWKey CalendarClient.CalendarGroupItemTemplate}" TargetType="{x:Type dxe:CalendarGroupItem}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush 'Brush.Border, Win11=Brush.PanelBackground'}" />
            <TextBlock
                Foreground="{dx:LWBrush 'Brush.Window.Background, Office2019Black=Brush.ForegroundDark, VS2019Dark=Brush.Foreground, Win10Dark=Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                HorizontalAlignment="Center"
                Text="{TemplateBinding Text}"
                VerticalAlignment="Center" />
        </Grid>
    </ControlTemplate>

    <!-- Item -->

    <ControlTemplate x:Key="{dxt:LWKey CalendarClient.CalendarItemTemplate}" TargetType="{x:Type dxe:CalendarItem}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.ControlLight.Background, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Border, VS2019Dark=Brush.Border, Win11=Brush.Button.SimpleButtonBackground'}" />
            <TextBlock
                Foreground="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}"
                HorizontalAlignment="Center"
                Margin="3"
                Text="{TemplateBinding Text}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.HoverBackground, Office2019Colorful=Brush.HoverBackground, Office2019HighContrast=Brush.HoverBackground, VS2019Light=Brush.HoverBackground, Win11=Brush.ListItem.SelectionAlt'}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\RangeControl\RangeControlCalendar.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\RangeControl\RangeControlBar.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey RangeControl.BorderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder
            x:Name="border"
            Background="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Window.Background'}"
            BorderBrush="{dx:LWBrush 'Brush.Border, Win11Dark=Brush.PanelBorder'}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter Margin="1" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="border" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{Binding Path=BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey RangeControl.RangeBarRootBorderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder BorderBrush="{StaticResource Brush.Border}" BorderThickness="0,1,0,0" Padding="0,1,0,0">
            <ContentPresenter />
        </dx:DXBorder>
    </ControlTemplate>

    <!-- Resize Thumb -->

    <ControlTemplate x:Key="{dxt:LWKey RangeControl.RangeBarLeftResizeThumbTemplate}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                BorderBrush="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Foreground, VS2019Dark=Brush.Foreground, Win10Dark=Brush.Foreground, Win11Dark=Brush.Foreground.Alt'}"
                BorderThickness="1,0,1,0"
                Margin="{dx:LWThickness '3, Win11=(3,5,4,5)'}"
                Width="3" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey RangeControl.RangeBarRightResizeThumbTemplate}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                BorderBrush="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Foreground, VS2019Dark=Brush.Foreground, Win10Dark=Brush.Foreground, Win11Dark=Brush.Foreground.Alt'}"
                BorderThickness="1,0,1,0"
                Margin="{dx:LWThickness '3, Win11=(4,5,3,5)'}"
                Width="3" />
        </Grid>
    </ControlTemplate>

    <!--#endregion Base\\Core\Core\Editors\Themes\Base\RangeControl\RangeControlBar.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\PagerControl\PagerControl.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey PagerControl.BorderTemplate}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\PagerControl\PagerControl.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\PagerControl\PagerControlGlyphs.xaml-->
    <DataTemplate x:Key="{dxt:LWKey PagerControl.NavigationButtonFirstPageGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.First}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey PagerControl.NavigationButtonPreviousPageGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.PrevPage}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey PagerControl.NavigationButtonNextPageGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.NextPage}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey PagerControl.NavigationButtonLastPageGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.Last}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey PagerControl.RefreshPageGlyph}">
        <Grid>
            <Path
                Data="M1.0000008,5.9999999 C1.0000007,8.2090558 2.791002,9.9999207 5.0000038,9.9999207 5.8149419,9.9999207 6.5731067,9.7561959 7.2053051,9.3376683 L7.2834491,9.2834481 5,6.9999989 10,6.9999989 10,11.999999 8.0001802,10.000179 7.918436,10.060469 C7.0969662,10.651709 6.0887546,11.000001 5.0000038,11.000001 2.2390017,11.000001 -2.9806088E-08,8.7614449 0,6.0001 z M0,0 L1.9997931,1.9997934 2.0814781,1.939532 C2.902729,1.3482915 3.9104328,1 4.9999962,1 7.7609982,1 10,3.2385551 10,5.9998997 L8.999999,5.9999999 C8.999999,3.7909442 7.2089977,2.00008 4.9999962,2.00008 4.1537142,2.00008 3.3686571,2.2629133 2.7223119,2.7113947 L2.715928,2.7159282 5,5.0000004 0,5.0000004 z"
                Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}"
                Height="12"
                HorizontalAlignment="Center"
                Stretch="Fill"
                Width="10" />
        </Grid>
    </DataTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\PagerControl\PagerControlGlyphs.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\PagerControl\PagerControlNumericButton.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey PagerControl.NumericButtonTemplate}" TargetType="dxe:PagerControlNumericButton">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}">
            <dx:DXBorder
                Name="IsDefault"
                Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}"
                BorderBrush="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Border'}"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <Grid x:Name="Content" Margin="{TemplateBinding Padding}">
                <ContentPresenter
                    x:Name="Content1"
                    Content="{Binding Number, Converter={StaticResource pageIndexConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    HorizontalAlignment="Center"
                    TextElement.Foreground="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Secondary'}"
                    Visibility="{Binding Path=ShowEllipsis, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisiblityConverterInverse}}" />
                <ContentPresenter
                    x:Name="Content2"
                    Content="..."
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    HorizontalAlignment="Center"
                    TextElement.Foreground="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Secondary'}"
                    Visibility="{Binding Path=ShowEllipsis, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content1" Value="{dx:LWBrush 'Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="TextElement.Foreground" TargetName="Content2" Value="{dx:LWBrush 'Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Win11=Brush.Button.HoverBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBorder, Win11=Brush.Button.HoverBorder'}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content1" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Alt'}" />
                <Setter Property="TextElement.Foreground" TargetName="Content2" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Alt'}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.Button.CheckedBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBorder, Win11=Brush.Button.CheckedBorder'}" />
            </DataTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content1" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Muted'}" />
                <Setter Property="TextElement.Foreground" TargetName="Content2" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Muted'}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.Button.PressedBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBorder, Win11=Brush.Button.PressedBorder'}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Content" Value="19,14,19,14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\PagerControl\PagerControlNumericButton.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\PagerControl\PagerControlNavigationButton.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey PagerControl.NavigationButtonTemplate}" TargetType="dxe:PagerControlNavigationButton">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}">
            <dx:DXBorder
                Name="IsDefault"
                Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}"
                BorderBrush="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Border'}"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" TextElement.Foreground="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Secondary'}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Win11=Brush.Button.HoverBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBorder, Win11=Brush.Button.HoverBorder'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="TextElement.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Muted'}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.Button.PressedBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBorder, Win11=Brush.Button.PressedBorder'}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Content" Value="0,14,0,14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\PagerControl\PagerControlNavigationButton.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DataPager\DataPagerGlyphs.xaml-->
    <!-- General -->

    <DataTemplate x:Key="{dxt:LWKey DataPagerButton.FirstPageGlyph}">
        <Grid x:Name="Root" Height="20" Width="16">
            <Path Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Navigation.First}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="42" />
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DataPagerButton.PrevPageGlyph}">
        <Grid x:Name="Root" Height="20" Width="16">
            <Path Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Navigation.PrevPage}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="42" />
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DataPagerButton.NextPageGlyph}">
        <Grid x:Name="Root" Height="20" Width="16">
            <Path Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Navigation.NextPage}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="42" />
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey DataPagerButton.LastPageGlyph}">
        <Grid x:Name="Root" Height="20" Width="16">
            <Path Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Navigation.Last}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="42" />
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DataPager\DataPagerGlyphs.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DataPager\DataPagerButtonNumeric.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DataPagerNumericButton.Template}" TargetType="{x:Type dxe:DataPagerNumericButton}">
        <Grid x:Name="Root" Height="20" MinWidth="{dx:LWDouble '16, Win11=20'}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}"
                BorderBrush="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Border'}"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0,Win11=4'}"/>
            <dx:ContentContainer x:Name="Content" Foreground="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}">
                <Grid Margin="2">
                    <ContentPresenter Content="99" ContentTemplate="{TemplateBinding ContentTemplate}" Opacity="0" />
                    <ContentPresenter
                        Content="{TemplateBinding PageNumber}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        HorizontalAlignment="Center"
                        Visibility="{Binding ShowEllipsis, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DataPagerBoolToVisibilityInvertConverter}}" />
                    <ContentPresenter
                        Content="..."
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        HorizontalAlignment="Center"
                        Visibility="{Binding ShowEllipsis, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
                </Grid>
            </dx:ContentContainer>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Win11=Color.Button.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Black=Color.ControlLight.HoverBackground, Win11=Color.Button.HoverBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(dx:ContentContainer.Foreground).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Win11=Color.Button.PressedBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Win11=Color.Button.PressedBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(dx:ContentContainer.Foreground).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Muted'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="SelectedStates">
                    <VisualState x:Name="NotSelected" />
                    <VisualState x:Name="Selected">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Win11=Color.Button.CheckedBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Win11=Color.Button.CheckedBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(dx:ContentContainer.Foreground).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Alt'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="42" />
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DataPager\DataPagerButtonNumeric.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DataPager\DataPagerControl.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DataPager.NumericButtonAreaBorderTemplate}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DataPager\DataPagerControl.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\PopupBaseEdit\ButtonClose.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey PopupBaseEdit.CloseButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" Opacity="0.62">
            <Path x:Name="Content" Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Clear}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" TargetName="Root" Value="1" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" TargetName="Root" Value="1" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Content" Value="14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\PopupBaseEdit\ButtonClose.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\PopupBaseEdit\PopupBaseEditSizeGrip.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey PopupBaseEdit.ThumbTemplate}" TargetType="{x:Type Thumb}">
        <Grid
            x:Name="Root"
            Background="Transparent"
            HorizontalAlignment="Right"
            RenderTransformOrigin="0.5,0.5"
            VerticalAlignment="Bottom">
            <Path Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.SizeGrip}" />
        </Grid>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\PopupBaseEdit\PopupBaseEditSizeGrip.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\PopupBaseEdit\PopupBaseEditControl.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey PopupBaseEdit.FooterTemplate}">
        <dx:DXBorder
            x:Name="PART_FooterLayer"
            Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.Window.Background, Win10Dark=Brush.Menu.Background, Win10Light=Brush.Menu.Background, Win11Dark=Brush.PanelBackground'}"
            BorderBrush="{dx:LWBrush 'Brush.Delimiter, Office2019Black=Brush.Border, Win10Dark=Brush.AltBorder'}"
            BorderThickness="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.DropOpposite, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BorderThicknessConverter}}"
            MinHeight="21" />
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\PopupBaseEdit\PopupBaseEditControl.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\CheckEdit\CheckEditModes.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey CheckEdit.CheckEditBoxStyle}" BasedOn="{StaticResource BaseCheckEditBoxStyle}" TargetType="{x:Type dxe:CheckEditBox}">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.AltBorder'}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="dxi:AppearanceOptions.BorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.BorderThickness" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasBorderThickness" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasBackground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.CornerRadius" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasCornerRadius" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.Padding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Padding), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxi:AppearanceOptions.HasPadding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasPadding), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxei:BaseEditAppearanceOptions.CheckBoxWidth" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.CheckBoxWidth), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxei:BaseEditAppearanceOptions.HasCheckBoxWidth" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasCheckBoxWidth), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxei:BaseEditAppearanceOptions.CheckBoxHeight" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.CheckBoxHeight), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxei:BaseEditAppearanceOptions.HasCheckBoxHeight" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasCheckBoxHeight), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxe:EditorAppearanceProperties.FocusedBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxe:EditorAppearanceProperties.ReadOnlyBackground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxe:EditorAppearanceProperties.ReadOnlyBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxe:EditorAppearanceProperties.CheckedStateBackground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.CheckedStateBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxe:EditorAppearanceProperties.CheckedStateBorderBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.CheckedStateBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="dxe:EditorAppearanceProperties.CheckEditGlyphBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:EditorAppearanceProperties.CheckEditGlyphBrush), RelativeSource={RelativeSource Self}}" />
        <Setter Property="FocusVisualStyle" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).FocusVisualStyle, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey CheckEdit.CheckEditBoxTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="dxe:EditorAppearanceProperties.HasCheckedStateBackground" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckedStateBackground), RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="dxe:EditorAppearanceProperties.HasCheckedStateBorderBrush" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{Binding Path=(dxe:EditorAppearanceProperties.CheckedStateBorderBrush), RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey TextEdit.ReadOnlyBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey TextEdit.ReadOnlyBorder}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:EditorAppearanceProperties.HasReadOnlyBackground), RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:EditorAppearanceProperties.HasReadOnlyBorderBrush), RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Modes -->

    <ControlTemplate x:Key="{dxt:LWKey CheckEdit.DisplayTemplate}">
        <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey CheckEdit.CheckEditBoxStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey CheckEdit.EditTemplate}">
        <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey CheckEdit.CheckEditBoxStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey CheckEdit.DisplayInplaceTemplate}">
        <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey CheckEdit.CheckEditBoxInplaceStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey CheckEdit.EditInplaceTemplate}">
        <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey CheckEdit.CheckEditBoxInplaceStyle}}" />
    </ControlTemplate>

    <!-- Other -->

    <ControlTemplate x:Key="{dxt:LWKey CheckEdit.Template}" TargetType="{x:Type dxe:CheckEdit}">
        <dxe:EditorControl x:Name="PART_Content" Template="{TemplateBinding ActualEditorControlTemplate}" />
        <ControlTemplate.Triggers>
            <Trigger Property="EditMode" Value="InplaceInactive">
                <Setter Property="HorizontalAlignment" Value="Center" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="HorizontalAlignment" Value="Center" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\CheckEdit\CheckEditModes.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ListBoxEdit\ListBoxEdit.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey ListBoxEdit.EmptyBorderTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ListBoxEdit\ListBoxEdit.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ListBoxEdit\ListBoxEditItem.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey EditorListBox.RadioButtonItemStyle}" BasedOn="{StaticResource RadioButtonItemBaseStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{StaticResource EditorListBox.RadioButtonItemSvgPalette}" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ListBoxEdit\ListBoxEditItem.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\TrackBarEdit\SelectionRange.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.HorizontalSelectionRangeBackgroundTemplate}" TargetType="ContentControl">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, VS2019Blue=Brush.Backstage.Delimiter, Win11=Brush.Accent'}" Height="{dx:LWDouble '2, Win11=4'}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.VerticalSelectionRangeBackgroundTemplate}" TargetType="ContentControl">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, VS2019Blue=Brush.Backstage.Delimiter, Win11=Brush.Accent'}" Width="{dx:LWDouble '2, Win11=4'}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\TrackBarEdit\SelectionRange.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\TrackBarEdit\TrackBarEditStepButtons.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.LeftStepButtonTemplate}" TargetType="{x:Type RepeatButton}">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}"
                BorderBrush="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Border'}"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <Path x:Name="Content" Fill="{TemplateBinding Foreground}" Style="{StaticResource UIShape.Navigation.Minus}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
                <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="Standalone" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, VS2019Blue=Brush.ControlDark.SelectionBackground, Win11=Brush.ListItem.HoverBackground'}" />
                    <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBorder, VS2019Blue=Brush.ControlDark.SelectionBackground, Win11=Brush.ListItem.HoverBorder'}" />
                    <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="Standalone" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, VS2019Blue=Brush.Focused, Win11=Brush.ListItem.SelectionBackground'}" />
                    <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBorder, VS2019Blue=Brush.Focused, Win11=Brush.ListItem.SelectionBorder'}" />
                    <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.RightStepButtonTemplate}" TargetType="{x:Type RepeatButton}">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}"
                BorderBrush="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Border'}"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <Path x:Name="Content" Fill="{TemplateBinding Foreground}" Style="{StaticResource UIShape.Navigation.Plus}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
                <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="Standalone" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, VS2019Blue=Brush.ControlDark.SelectionBackground, Win11=Brush.ListItem.HoverBackground'}" />
                    <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBorder, VS2019Blue=Brush.ControlDark.SelectionBackground, Win11=Brush.ListItem.HoverBorder'}" />
                    <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="Standalone" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, VS2019Blue=Brush.Focused, Win11=Brush.ListItem.SelectionBackground'}" />
                    <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBorder, VS2019Blue=Brush.Focused, Win11=Brush.ListItem.SelectionBorder'}" />
                    <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\TrackBarEdit\TrackBarEditStepButtons.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\TrackBarEdit.xaml-->
    <sys:Double x:Key="{dxt:LWKey TrackBarEdit.TickOpacity}">0.5</sys:Double>


    <!-- General -->

    <!-- Styles -->

    <Style x:Key="{dxt:LWKey TrackBarEditThumb.HorizontalThumbStyle}" BasedOn="{StaticResource BaseThumbStyle}" TargetType="Thumb">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEditThumb.HorizontalThumbTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
    </Style>

    <Style x:Key="{dxt:LWKey TrackBarEditThumb.VerticalThumbStyle}" BasedOn="{StaticResource BaseThumbStyle}" TargetType="Thumb">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEditThumb.VerticalThumbTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
    </Style>

    <Style x:Key="{dxt:LWKey TrackBarEditThumb.LeftHorizontalThumbStyle}" BasedOn="{StaticResource BaseThumbStyle}" TargetType="Thumb">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEditThumb.HorizontalThumbTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Tag" Value="True" />
    </Style>

    <Style x:Key="{dxt:LWKey TrackBarEditThumb.RightHorizontalThumbStyle}" BasedOn="{StaticResource BaseThumbStyle}" TargetType="Thumb">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEditThumb.HorizontalThumbTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
    </Style>

    <Style x:Key="{dxt:LWKey TrackBarEditThumb.LeftVerticalThumbStyle}" BasedOn="{StaticResource BaseThumbStyle}" TargetType="Thumb">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEditThumb.VerticalThumbTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
    </Style>

    <Style x:Key="{dxt:LWKey TrackBarEditThumb.RightVerticalThumbStyle}" BasedOn="{StaticResource BaseThumbStyle}" TargetType="Thumb">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey TrackBarEditThumb.VerticalThumbTemplate}}" />
        <Setter Property="UseLayoutRounding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).UseLayoutRounding}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\TrackBarEdit.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\PasswordBoxEdit\NullText.xaml-->
    <Style x:Key="{dxt:LWKey PasswordBoxEdit.NullTextEditorStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Background, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey TextEdit.NullTextForeground}}" />
        <Setter Property="HorizontalAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsTabStop, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Margin" Value="2,2,2,2" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14,13,14,13" />
                <Setter Property="Padding" Value="13,0,13,0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\PasswordBoxEdit\NullText.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\PasswordBoxEdit\PasswordBoxEdit.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey PasswordBoxEdit.PasswordBoxTemplate}" TargetType="{x:Type PasswordBox}">
        <dx:DXBorder x:Name="PART_ContentBorder" Background="{TemplateBinding Background}">
            <ScrollViewer
                x:Name="PART_ContentHost"
                Focusable="False"
                Padding="{TemplateBinding Padding}"
                Template="{DynamicResource {dxt:LWKey EditorListBox.ScrollViewerTemplate}}" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.38" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="Standalone" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="PART_ContentBorder" Value="{x:Null}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey PasswordBoxEdit.PasswordBoxStyle}" TargetType="{x:Type PasswordBox}">
        <Setter Property="Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Background}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CaretBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.CaretBrush)}" />
        <Setter Property="ContextMenu" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContextMenu}" />
        <Setter Property="Focusable" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Focusable}" />
        <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground}" />
        <Setter Property="IsTabStop" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsTabStop}" />
        <Setter Property="MaxLength" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).MaxLength}" />
        <Setter Property="Padding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding}" />
        <Setter Property="PasswordChar" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).PasswordChar}" />
        <Setter Property="SelectionBrush" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.SelectionBrush)}" />
        <Setter Property="SelectionOpacity" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.SelectionOpacity)}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey PasswordBoxEdit.PasswordBoxTemplate}}" />
        <Setter Property="TextBlock.TextAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, Converter={StaticResource HorizontalContentAlignmentToTextAlignmentConverter}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment}" />
        <Setter Property="dxei:EditorMarginHelper.Margin" Value="{StaticResource PasswordBoxHelperMargin}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="dxei:EditorMarginHelper.Margin" Value="14,13,15,13,0,13,14,13" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=ShowBorder, RelativeSource={RelativeSource AncestorType={x:Type dxe:BaseEdit}}}" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey PasswordBoxEdit.PreviewTextEditorStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="4,0" />
        <Setter Property="Padding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding}" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\PasswordBoxEdit\PasswordBoxEdit.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ComboBoxEdit\LoadingIndicator.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="ComboBoxEditLoadingIndicatorTemplate" TargetType="{x:Type ProgressBar}">
        <Grid x:Name="TemplateRoot">
            <Path x:Name="Content" RenderTransformOrigin="0.5,0.5" Style="{StaticResource UIShape.WaitIndicator}">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform />
                        <SkewTransform />
                        <RotateTransform Angle="0" />
                        <TranslateTransform />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Determinate" />
                    <VisualState x:Name="Indeterminate">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="Content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="359" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey ComboBoxEdit.LoadingButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Root" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <ProgressBar
                            x:Name="progressBar"
                            Height="{dx:LWDouble '16, Win11=NaN'}"
                            IsIndeterminate="{Binding Path=Visibility, RelativeSource={RelativeSource TemplatedParent}, Converter={dxei:VisibilityToBooleanConverter}}"
                            Margin="2"
                            MinHeight="{dx:LWDouble '0, Win11=16'}"
                            Template="{StaticResource ComboBoxEditLoadingIndicatorTemplate}"
                            Width="{dx:LWDouble '16, Win11=NaN'}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ComboBoxEdit\LoadingIndicator.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ComboBoxEdit\ComboBoxEditPanel.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey SearchControl.PanelTemplate}" TargetType="ContentControl">
        <dx:DXBorder BorderBrush="{StaticResource Brush.Delimiter}" BorderThickness="0,0,0,1">
            <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" />
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey SearchControl.ButtonGlyphTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="grid" Width="Auto">
            <dx:DXBorder x:Name="normal" />
            <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Border.Background" TargetName="normal" Value="Transparent" />
                <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="normal" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Colorful=Brush.HoverAltBackground, Win11=Brush.ListItem.HoverBackground'}" />
                <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.HoverForeground, Office2019Black=Brush.ForegroundDark, VS2019Light=Brush.Focused, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="normal" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Colorful=Brush.SelectionAltBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="grid" Value="6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.36" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ComboBoxEdit\ComboBoxEditPanel.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\MemoEdit.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey MemoEdit.MemoBackgroundStyle}" TargetType="Panel">
        <Setter Property="Background" Value="{StaticResource Brush.Editor.Background}" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\MemoEdit.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\BrushEdit\BrushEditTextBlock.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey PopupBrushEdit.TextBlockStyle}" BasedOn="{StaticResource {dxt:LWKey TextEdit.TextBlockStyle}}" TargetType="{x:Type TextBlock}">
        <Setter Property="Opacity" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey PopupBrushEdit.TextBlockInplaceStyle}" BasedOn="{StaticResource BaseTextBlockInplaceStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Opacity" Value="0" />
        <Setter Property="Margin" Value="{dx:LWThickness '0, Win11=(0,4)'}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\BrushEdit\BrushEditTextBlock.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\BrushEdit\ultiSliderNavigation.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey GradientMultiSlider.PreviousThumbButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,4,0" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GradientMultiSlider.PreviousThumbButtonTemplate}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey GradientMultiSlider.NextThumbButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="4,0,0,0" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GradientMultiSlider.NextThumbButtonTemplate}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Buttons -->

    <ControlTemplate x:Key="{dxt:LWKey GradientMultiSlider.PreviousThumbButtonTemplate}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" />
            <Path Style="{StaticResource UIShape.Left}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, Win11=Brush.ListItem.HoverBackground'}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, Win11=Brush.ListItem.HoverBackground'}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey GradientMultiSlider.NextThumbButtonTemplate}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" />
            <Path Style="{StaticResource UIShape.Right}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, Win11=Brush.ListItem.HoverBackground'}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, Win11=Brush.ListItem.HoverBackground'}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\BrushEdit\ultiSliderNavigation.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\BrushEdit\GradientMultiSliderThumb.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey GradientMultiSlider.FlipThumbsButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GradientMultiSlider.FlipThumbsButtonTemplate}}" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey GradientMultiSlider.FlipThumbsButtonTemplate}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" />
            <Path Style="{StaticResource UIShape.Flip}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, Win11=Brush.ListItem.HoverBackground'}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, Win11=Brush.ListItem.HoverBackground'}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Selected Thumb -->

    <DataTemplate x:Key="{dxt:LWKey GradientMultiSlider.SelectedThumbContentPresenterContentTemplate}">
        <dx:DXBorder BorderBrush="{StaticResource Brush.Border}" BorderThickness="1">
            <dx:DXBorder.Background>
                <SolidColorBrush Color="{Binding Path=Color}" />
            </dx:DXBorder.Background>
        </dx:DXBorder>
    </DataTemplate>

    <Style x:Key="{dxt:LWKey GradientMultiSlider.SelectedThumbContentPresenterStyle}" TargetType="{x:Type ContentPresenter}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxt:LWKey GradientMultiSlider.SelectedThumbContentPresenterContentTemplate}}" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="14" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\BrushEdit\GradientMultiSliderThumb.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\BrushEdit\BrushEditDisplay.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey PopupBrushEdit.DisplayTemplate}">
        <Grid Margin="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource TemplatedParent}}">
            <dxei:TransparentBrushRectangle
                x:Name="TransparentRectangle"
                BlockHeight="4"
                BlockWidth="4"
                dx:FocusHelper2.Focusable="False"
                HorizontalAlignment="Stretch"
                Margin="3"
                VerticalAlignment="Stretch" />
            <Rectangle
                x:Name="Rectangle"
                Fill="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).Brush, RelativeSource={RelativeSource TemplatedParent}}"
                Margin="3"
                Stretch="Fill" />
            <TextBlock x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey PopupBrushEdit.TextBlockStyle}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Rectangle" Value="6" />
                <Setter Property="BlockHeight" TargetName="TransparentRectangle" Value="12" />
                <Setter Property="BlockWidth" TargetName="TransparentRectangle" Value="12" />
                <Setter Property="Margin" TargetName="TransparentRectangle" Value="6" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey PopupBrushEdit.DisplayInplaceTemplate}">
        <Grid>
            <dxei:TransparentBrushRectangle
                x:Name="TransparentRectangle"
                BlockHeight="4"
                BlockWidth="4"
                dx:FocusHelper2.Focusable="False"
                HorizontalAlignment="Stretch"
                Margin="3"
                VerticalAlignment="Stretch" />
            <Rectangle
                x:Name="Rectangle"
                Fill="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).Brush, RelativeSource={RelativeSource TemplatedParent}}"
                Margin="3"
                Stretch="Fill" />
            <TextBlock x:Name="PART_Editor" Style="{DynamicResource {dxt:LWKey PopupBrushEdit.TextBlockInplaceStyle}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Rectangle" Value="6" />
                <Setter Property="BlockHeight" TargetName="TransparentRectangle" Value="12" />
                <Setter Property="BlockWidth" TargetName="TransparentRectangle" Value="12" />
                <Setter Property="Margin" TargetName="TransparentRectangle" Value="6" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\BrushEdit\BrushEditDisplay.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ProgressBarEdit\SideHorizontal.xaml-->
    <!-- Horizontal Side -->

    <Style x:Key="{dxt:LWKey ProgressBarEdit.PanelLeftSideHorizontalStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="{dx:LWThickness '0, Win11=(2,2,2,3)'}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelLeftSideHorizontalTemplate}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceInactive">
                <Setter Property="Margin" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceActive">
                <Setter Property="Margin" Value="0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey ProgressBarEdit.PanelRightSideHorizontalStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="{dx:LWThickness '0, Win11=(2,3,2,4)'}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelRightSideHorizontalTemplate}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceInactive">
                <Setter Property="Margin" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="InplaceActive">
                <Setter Property="Margin" Value="0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ProgressBarEdit\SideHorizontal.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ProgressBarEdit\SideVertical.xaml-->
    <!-- Vertical Side -->

    <Style x:Key="{dxt:LWKey ProgressBarEdit.PanelLeftSideVerticalStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="{dx:LWThickness '0, Win11=(2,2,3,2)'}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelLeftSideVerticalTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey ProgressBarEdit.PanelRightSideVerticalStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="{dx:LWThickness '0, Win11=(3,2,4,2)'}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelRightSideVerticalTemplate}}" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ProgressBarEdit\SideVertical.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ProgressBarEdit\ProgressBarMarquee.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEditStyle.ProgressBarMarqueeHorizontalAnimationElementTemplate}">
        <dx:DXBorder
            x:Name="border"
            Background="{dx:LWBrush 'Brush.Foreground, Office2019Colorful=Brush.Focused, Office2019HighContrast=Brush.Focused, VS2019=Brush.Focused, Win10=Brush.Focused, Win11=Brush.Accent'}"
            CornerRadius="{dx:LWCornerRadius '0, Win11=1'}"
            Height="{dx:LWDouble 'NaN, Win11=3'}" />
        <ControlTemplate.Triggers>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasProgressBrush" Value="True">
                <Setter Property="Background" TargetName="border" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEditStyle.ProgressBarMarqueeVerticalAnimationElementTemplate}">
        <dx:DXBorder
            x:Name="border"
            Background="{dx:LWBrush 'Brush.Foreground, Office2019Colorful=Brush.Focused, Office2019HighContrast=Brush.Focused, VS2019=Brush.Focused, Win10=Brush.Focused, Win11=Brush.Accent'}"
            CornerRadius="{dx:LWCornerRadius '0, Win11=1'}"
            Width="{dx:LWDouble 'NaN, Win11=3'}" />
        <ControlTemplate.Triggers>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasProgressBrush" Value="True">
                <Setter Property="Background" TargetName="border" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Animation -->

    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEditStyle.MarqueeHorizontalAnimationControlTemplate}" TargetType="Control">
        <ContentControl dxi:AppearanceOptions.Background="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" dxi:AppearanceOptions.HasBackground="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelBackgroundHorizontalStyle}}">
            <dxe:HorizontalAnimationElement AccelerateRatio="{Binding Path=(dxe:BaseEdit.OwnerEdit).StyleSettings.AccelerateRatio}">
                <ContentControl
                    dx:FocusHelper2.Focusable="False"
                    dxei:BaseEditAppearanceOptions.HasProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasProgressBrush), RelativeSource={RelativeSource Self}}"
                    dxei:BaseEditAppearanceOptions.ProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource Self}}"
                    Template="{DynamicResource {dxt:LWKey ProgressBarEditStyle.ProgressBarMarqueeHorizontalAnimationElementTemplate}}" />
            </dxe:HorizontalAnimationElement>
        </ContentControl>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEditStyle.MarqueeVerticalAnimationControlTemplate}" TargetType="Control">
        <ContentControl dxi:AppearanceOptions.Background="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" dxi:AppearanceOptions.HasBackground="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Style="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelBackgroundVerticalStyle}}">
            <dxe:VerticalAnimationElement AccelerateRatio="{Binding Path=(dxe:BaseEdit.OwnerEdit).StyleSettings.AccelerateRatio}" MinWidth="{dx:LWDouble '0, Win11=24'}">
                <ContentControl
                    dx:FocusHelper2.Focusable="False"
                    dxei:BaseEditAppearanceOptions.HasProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.HasProgressBrush), RelativeSource={RelativeSource Self}}"
                    dxei:BaseEditAppearanceOptions.ProgressBrush="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxei:BaseEditAppearanceOptions.ProgressBrush), RelativeSource={RelativeSource Self}}"
                    Template="{DynamicResource {dxt:LWKey ProgressBarEditStyle.ProgressBarMarqueeVerticalAnimationElementTemplate}}" />
            </dxe:VerticalAnimationElement>
        </ContentControl>
    </ControlTemplate>

    <!--         <Setter Property="Foreground"
                Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground'}"

                />-->

    <Style x:Key="{dxt:LWKey ProgressBarEdit.ContentStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground}" />
        <Setter Property="HorizontalAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment}" />
        <Setter Property="Margin" Value="{dx:LWThickness '1, Win11=(2,0,2,0)'}" />
        <Setter Property="VerticalAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment}" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ProgressBarEdit\ProgressBarMarquee.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ProgressBarEdit\ProgressBarEditPanel.xaml-->
    <!-- Panel -->

    <ControlTemplate x:Key="{dxt:LWKey ProgressBarEdit.PanelForegroundTemplate}" TargetType="{x:Type ContentControl}">
        <Rectangle Fill="Transparent" />
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey ProgressBarEdit.PanelForegroundStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelForegroundTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey ProgressBarEdit.PanelBackgroundHorizontalStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelBackgroundHorizontalTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey ProgressBarEdit.PanelBackgroundVerticalStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ProgressBarEdit.PanelBackgroundVerticalTemplate}}" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ProgressBarEdit\ProgressBarEditPanel.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditButtonClear.xaml-->


    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.ClearButtonTemplate}" TargetType="{x:Type Button}" />

    <Style x:Key="{dxt:LWKey DateEdit.ClearButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,0,12" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="Visibility" Value="{Binding Path=ShowClearButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="MinHeight" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditButtonClear.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateNavigator\ButtonToday.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey DateNavigator.TodayButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=Today, Converter={StaticResource EditorStringIdConverter}}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,0,12" />
        <Setter Property="Visibility" Value="{Binding Path=ShowTodayButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateNavigator\ButtonToday.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateNavigator\ButtonClear.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.ClearButtonTemplate}" TargetType="{x:Type Button}" />

    <Style x:Key="{dxt:LWKey DateNavigator.ClearButtonStyle}" BasedOn="{StaticResource {dxt:LWKey DateEdit.ClearButtonStyle}}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ShowTodayButton, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Margin" Value="8,0,0,12" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateNavigator\ButtonClear.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateNavigator\DateNavigatorArrows.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.LeftArrowTemplate}" TargetType="{x:Type RepeatButton}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <Path x:Name="Content" Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Left}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Win11=Color.ListItem.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Black=Color.ControlLight.HoverBackground, Win11=Color.ListItem.HoverBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Win11=Color.ListItem.SelectionBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.RightArrowTemplate}" TargetType="{x:Type RepeatButton}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <Path x:Name="Content" Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Right}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Win11=Color.ListItem.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Black=Color.ControlLight.HoverBackground, Win11=Color.ListItem.HoverBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Win11=Color.ListItem.SelectionBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <!-- Styles -->

    <Style x:Key="{dxt:LWKey DateNavigator.LeftArrowStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Delay" Value="400" />
        <Setter Property="Height" Value="{dx:LWDouble '16, Win11=24'}" />
        <Setter Property="Interval" Value="400" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.LeftArrowTemplate}}" />
        <Setter Property="Width" Value="{dx:LWDouble '16, Win11=24'}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="Margin" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey DateNavigator.RightArrowStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Delay" Value="400" />
        <Setter Property="Height" Value="{dx:LWDouble '16, Win11=24'}" />
        <Setter Property="Interval" Value="400" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.RightArrowTemplate}}" />
        <Setter Property="Width" Value="{dx:LWDouble '16, Win11=24'}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="Margin" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateNavigator\DateNavigatorArrows.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateNavigator\DateNavigatorHeader.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.HeaderButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" />
            <dx:ContentContainer x:Name="Content" Foreground="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" Margin="3">
                <ContentPresenter
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center" />
            </dx:ContentContainer>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <!-- Current Date -->

    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.CurrentDateButtonTemplate}" TargetType="{x:Type Button}">
        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" />
    </ControlTemplate>


    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateNavigator\DateNavigatorHeader.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateNavigator\DateNavigatorCell.xaml-->
    <!-- General -->
    <Size x:Key="{dxt:LWKey DateNavigator.CalendarTouchCellSize}">44,44</Size>

    <Style x:Key="{dxt:LWKey DateNavigator.CellButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.CellButtonTemplate}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateNavigator\DateNavigatorCell.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateNavigator\InfoMonthYear.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.WeekNumberDelimeter}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Delimiter, Office2019Black=Brush.Editor.Delimiter'}" Height="1" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.MonthInfoDelimeter}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Delimiter, Office2019Black=Brush.Editor.Delimiter, Win10Dark=Brush.Border, Win11=#00FFFFFF'}" Height="1" />
    </ControlTemplate>

    <!-- Year Info -->

    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.YearInfoTemplate}">
        <Grid x:Name="PART_ContentGrid">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
        </Grid>
    </ControlTemplate>

    <!-- Month Info -->

    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.MonthInfoTemplate}">
        <Grid x:Name="PART_ContentGrid">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ContentControl
                Grid.Row="1"
                Grid.Column="2"
                Grid.ColumnSpan="7"
                IsTabStop="False"
                Margin="0,3,0,3"
                Template="{DynamicResource {dxt:LWKey DateNavigator.MonthInfoDelimeter}}" />
            <ContentControl
                x:Name="WeekNumberDelimeter"
                Grid.Row="2"
                Grid.RowSpan="6"
                Grid.Column="1"
                IsTabStop="False"
                Margin="0,3,0,3"
                Template="{DynamicResource {dxt:LWKey DateNavigator.WeekNumberDelimeter}}"
                Visibility="{Binding Path=(dxe:DateNavigator.Navigator).ShowWeekNumbers, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisibilityConverter}}" />
        </Grid>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateNavigator\InfoMonthYear.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateNavigator\DateNavigatorControl.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey DateNavigator.HeaderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Control.Background, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Control.Background, Win11=Brush.Button.SimpleButtonBackground'}" />
    </Style>

    <Style x:Key="{dxt:LWKey DateNavigator.WeekdayNameStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey DateNavigator.WeekNumberStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="6" />
        <Setter Property="Opacity" Value="0.38" />
        <Setter Property="TextElement.FontSize" Value="9" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey DateNavigator.CalendarCurrentDateStyle}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateNavigator\DateNavigatorControl.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditArrows.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.LeftArrowTemplate}" TargetType="{x:Type RepeatButton}" />

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.RightArrowTemplate}" TargetType="{x:Type RepeatButton}" />

    <!-- Styles -->

    <Style x:Key="{dxt:LWKey DateEdit.LeftArrowStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Delay" Value="400" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Interval" Value="400" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.LeftArrowTemplate}}" />
        <Setter Property="Width" Value="16" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="Margin" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey DateEdit.RightArrowStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Delay" Value="400" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Interval" Value="400" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.RightArrowTemplate}}" />
        <Setter Property="Width" Value="16" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="Margin" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditArrows.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditHeader.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.HeaderButtonTemplate}" TargetType="{x:Type Button}" />


    <!-- Current Date -->

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.CurrentDateButtonTemplate}" TargetType="{x:Type Button}" />

    <Style x:Key="{dxt:LWKey DateEdit.CurrentDateButtonStyle}" BasedOn="{StaticResource {dxt:LWKey DateNavigator.CurrentDateButtonStyle}}" TargetType="{x:Type Button}" />
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditHeader.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditCell.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.CellButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.HoverBackground, Win11=Brush.ListItem.SelectionBackground'}"
                BorderBrush="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.HoverBackground, Win11=Brush.ListItem.SelectionBackground'}"
                BorderThickness="1"
                Opacity="0" />
            <dx:DXBorder
                x:Name="IsToday"
                Background="{dx:LWBrush 'Brush.Border, Office2019Black=Brush.ControlLight.Background, VS2019Blue=Brush.ControlDark.SelectionBackground'}"
                BorderBrush="{dx:LWBrush '#00000000, Office2019Black=Brush.Border, Win11=Brush.Button.Border'}"
                BorderThickness="1"
                Opacity="0" />
            <dx:ContentContainer
                x:Name="Content"
                Content="{TemplateBinding Content}"
                Foreground="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                HorizontalAlignment="Center"
                Margin="3"
                VerticalAlignment="Center" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="CellNormalState" />
                    <VisualState x:Name="CellFocusedState">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(dx:ContentContainer.Foreground).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.SelectionForeground, VS2019Dark=Color.Backstage.Focused, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellTodayState">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsToday" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(dx:ContentContainer.Foreground).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.SelectionForeground, VS2019Dark=Color.Backstage.Focused, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellInactiveState">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.62" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
                <Setter Property="Margin" TargetName="Content" Value="14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey DateEdit.CellButtonStyle}" BasedOn="{StaticResource {dxt:LWKey DateNavigator.CellButtonStyle}}" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey DateNavigator.CellButtonTemplate}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditCell.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditInfoMonthYear.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.MonthInfoDelimeter}">
        <dx:DXBorder Background="{StaticResource Brush.Delimiter}" Height="1" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.WeekNumberDelimeter}">
        <dx:DXBorder Background="{StaticResource Brush.Delimiter}" Height="1" />
    </ControlTemplate>

    <!-- Info -->

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.YearInfoTemplate}">
        <Grid x:Name="PART_ContentGrid">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.MonthInfoTemplate}">
        <Grid x:Name="PART_ContentGrid">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ContentControl
                x:Name="MonthInfoDelimeter"
                Grid.Row="1"
                Grid.Column="2"
                Grid.ColumnSpan="7"
                IsTabStop="False"
                Margin="0,3,0,3"
                Template="{DynamicResource {dxt:LWKey DateNavigator.MonthInfoDelimeter}}" />
            <ContentControl
                x:Name="WeekNumberDelimeter"
                Grid.Row="2"
                Grid.RowSpan="6"
                Grid.Column="1"
                IsTabStop="False"
                Margin="0,3,0,3"
                Template="{DynamicResource {dxt:LWKey DateNavigator.WeekNumberDelimeter}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="MonthInfoDelimeter" Value="0,12,0,12" />
                <Setter Property="Margin" TargetName="WeekNumberDelimeter" Value="0,12,0,12" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditInfoMonthYear.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditControl.xaml-->
    <!-- General -->

    <Style x:Key="{dxt:LWKey DateEdit.WeekdayNameStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey DateEdit.WeekNumbersStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="6" />
        <Setter Property="Opacity" Value="0.38" />
        <Setter Property="TextElement.FontSize" Value="9" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey DateEdit.WeekdayAbbreviationStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Calendar -->

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.CalendarTemplate}" TargetType="{x:Type dxe:DateEditCalendar}">
        <Grid Background="Transparent">
            <StackPanel>
                <Button x:Name="PART_Today" Content="{TemplateBinding DateTimeText}" Style="{DynamicResource {dxt:LWKey DateEdit.HeaderButtonStyle}}" />
                <Grid Background="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Control.Background, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Control.Background, Win11=Brush.Button.SimpleButtonBackground'}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <RepeatButton x:Name="PART_LeftArrow" Grid.Column="0" Style="{DynamicResource {dxt:LWKey DateEdit.LeftArrowStyle}}" />
                    <Button
                        x:Name="PART_CurrentDate"
                        Grid.Column="1"
                        Content="{TemplateBinding CurrentDateText}"
                        Style="{DynamicResource {dxt:LWKey DateEdit.CurrentDateButtonStyle}}" />
                    <RepeatButton x:Name="PART_RightArrow" Grid.Column="2" Style="{DynamicResource {dxt:LWKey DateEdit.RightArrowStyle}}" />
                </Grid>
                <Grid Margin="12">
                    <dxe:DateEditCalendarContent
                        IsEnabled="False"
                        Opacity="0"
                        State="Month"
                        Template="{TemplateBinding MonthInfoTemplate}" />
                    <dxe:DateEditCalendarContent
                        IsEnabled="False"
                        Opacity="0"
                        State="Year"
                        Template="{TemplateBinding YearInfoTemplate}" />
                    <dxe:DateEditCalendarContent
                        IsEnabled="False"
                        Opacity="0"
                        State="Years"
                        Template="{TemplateBinding YearsInfoTemplate}" />
                    <dxe:DateEditCalendarContent
                        IsEnabled="False"
                        Opacity="0"
                        State="YearsGroup"
                        Template="{TemplateBinding YearsGroupInfoTemplate}" />
                    <dxe:DateEditCalendarTransferControl x:Name="PART_CalendarTransferContent" Style="{TemplateBinding CalendarTransferStyle}" />
                </Grid>
                <Button x:Name="PART_Clear" Content="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=Clear, Converter={StaticResource EditorStringIdConverter}}" Style="{DynamicResource {dxt:LWKey DateEdit.ClearButtonStyle}}" />
            </StackPanel>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey DateEdit.PopupContentTemplate}" TargetType="{x:Type ContentControl}">
        <dxe:DateEditCalendar dx:FocusHelper2.Focusable="False" />
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\DateEdit\DateEditControl.xaml-->

    <!--#region DateRangeControl-->
    <SolidColorBrush x:Key="{dxt:LWKey DateRangeControl.EditorBackground}" Color="{StaticResource Color.Editor.Background}" />
    <Thickness x:Key="{dxt:LWKey DateRangeControl.EditorBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxt:LWKey DateRangeControl.CurrentEditorBorderThickness}">1</Thickness>
    <SolidColorBrush x:Key="{dxt:LWKey DateRangeControl.EditorBorderBrush}" Color="{dx:LWColor 'Color.Border, Win11=Color.Editor.Border'}" />
    <SolidColorBrush x:Key="{dxt:LWKey DateRangeControl.CurrentEditorBorderBrush}" Color="{dx:LWColor 'Color.Focused, Win11=Color.Editor.Border'}" />
    <SolidColorBrush x:Key="{dxt:LWKey DateRangeControl.PredefinedRangesPanelBackground}" Color="{dx:LWColor 'Color.Window.Background, VS2019Blue=Color.Window.Background, Win10Dark=Color.Menu.Background, Win10Light=Color.Menu.Background, Win11=Color.FlyoutBackground, VS2019Light=Color.Control.Background, VS2019Dark=Color.Control.Background, Office2019Colorful=Color.Editor.Background'}" />
    <Thickness x:Key="{dxt:LWKey DateRangeControl.FooterButtonsPadding}">20,2</Thickness>
    <Thickness x:Key="{dxt:LWKey DateRangeControl.PredefinedRangesItemPadding}">10,10,10,0</Thickness>
    <Thickness x:Key="{dxt:LWKey DateRangeControl.PredefinedRangesPanelMargin}">0</Thickness>
    <SolidColorBrush x:Key="{dxt:LWKey DateRangeControl.Foreground}" Color="{dx:LWColor 'Color.Foreground, Win11=Color.Foreground.Primary'}" />
    <!--#endregion DateRangeControl-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ImageEdit.xaml-->
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ImageEdit.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ImageEdit\ImageEditEmptyContent.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey ImageEdit.EmptyContentTemplate}">
        <Grid x:Name="empty_image">
            <Grid.RowDefinitions>
                <RowDefinition Height="0.25*" />
                <RowDefinition Height="0.5*" />
                <RowDefinition Height="0.25*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="0.25*" />
                <ColumnDefinition Width="0.5*" />
                <ColumnDefinition Width="0.25*" />
            </Grid.ColumnDefinitions>
            <Path
                Grid.Row="1"
                Grid.Column="1"
                Data="F1 M 546,395C 551,394 554,404 564,403C 574,402 576,384 596,390C 597.058,390.317 598,390.895 598,392L 598,411C 598,412.105 597.104,413 596,413L 546,413C 544.895,413 544,412.105 544,411L 544,398C 544,396.895 544.917,395.217 546,395 Z M 560,379C 563.866,379 567,382.134 567,386C 567,389.866 563.866,393 560,393C 556.134,393 553,389.866 553,386C 553,382.134 556.134,379 560,379 Z M 543,370L 599,370C 601.209,370 603,371.791 603,374L 603,414C 603,416.209 601.209,418 599,418L 543,418C 540.791,418 539,416.209 539,414L 539,374C 539,371.791 540.791,370 543,370 Z M 545,374C 543.895,374 543,374.896 543,376L 543,412C 543,413.105 543.895,414 545,414L 597,414C 598.104,414 599,413.105 599,412L 599,376C 599,374.896 598.104,374 597,374L 545,374 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}"
                Margin="3"
                Stretch="Uniform"
                UseLayoutRounding="False" />
        </Grid>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ImageEdit\ImageEditEmptyContent.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ImageEdit\ImageEditBorder.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey CameraControl.BorderTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" BorderBrush="{StaticResource Brush.Border}" BorderThickness="1" />
            <ContentPresenter />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="InternalFocusStates">
                    <VisualState x:Name="InternalFocused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Focused, Office2019Black=Color.HoverForeground, Office2019Colorful=Color.HoverForeground, Office2019HighContrast=Color.HoverForeground, VS2019Blue=Color.HoverForeground, Win11=Color.Accent'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="InternalUnfocused" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ImageEdit.BorderTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" BorderBrush="{StaticResource Brush.Border}" BorderThickness="1" />
            <ContentPresenter />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="InternalFocusStates">
                    <VisualState x:Name="InternalFocused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Focused, Office2019Black=Color.HoverForeground, Office2019Colorful=Color.HoverForeground, Office2019HighContrast=Color.HoverForeground, VS2019Blue=Color.HoverForeground, Win11=Color.Accent'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="InternalUnfocused" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ImageEdit\ImageEditBorder.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ImageEdit\ImageEditTemplate.xaml-->
    <!-- General -->


    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ImageEdit\ImageEditTemplate.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ImageEdit\ImageEditControl.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey ImageEdit.MenuPopupTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" Background="{dx:LWBrush 'Brush.Backstage.Window.Background, Win11=Brush.Control.Background'}">
            <ContentPresenter Margin="5" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey PopupImageEdit.DisplayTemplate}">
        <Grid
            x:Name="Root"
            Background="Transparent"
            dx:FocusHelper2.Focusable="True"
            Margin="{dx:LWThickness '(3,2), Win11=3'}">
            <dx:DXImage
                x:Name="PART_Icon"
                dx:FocusHelper2.Focusable="False"
                dx:WpfSvgPalette.Palette="{StaticResource {dxt:LWKey BaseEdit.DefaultIconSvgPalette}}"
                Height="16"
                Margin="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding, RelativeSource={RelativeSource TemplatedParent}}"
                Source="/DevExpress.Xpf.Core.v24.1;component/Editors/Images/ImageEdit/DefaultIcon.svg"
                Stretch="Fill"
                Width="16">
                <RenderOptions.BitmapScalingMode>NearestNeighbor</RenderOptions.BitmapScalingMode>
            </dx:DXImage>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).HasImage, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="dx:WpfSvgPalette.Palette" TargetName="PART_Icon" Value="{StaticResource {dxt:LWKey Brushes.GrayScaleSvgPalette}}" />
            </DataTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Root" Value="14,13" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Button -->

    <ControlTemplate x:Key="{dxt:LWKey ImageEdit.ToolButtonTemplate}" TargetType="{x:Type dxe:ImageEditToolButton}">
        <Grid x:Name="Root" Margin="0,0,1,0">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" CornerRadius="{dx:LWCornerRadius '0, Win11=3'}" />
            <StackPanel Margin="3" Orientation="Horizontal" HorizontalAlignment="Center">
                <dx:DXImage
                    HorizontalAlignment="Center"
                    Source="{TemplateBinding ImageSource}"
                    Stretch="None"
                    VerticalAlignment="Center" />
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </StackPanel>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, Win11=Color.Button.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Button.PressedBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="Root" Property="Height" Value="44"/>
                <Setter TargetName="Root" Property="Width" Value="44"/>
                <Setter TargetName="Root" Property="Margin" Value="0"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ImageEdit\ImageEditControl.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\CalcEdit\CalcEditDisplay.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey Calculator.DisplayTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Editor.Background, Win10=#00000000, Win11=Brush.Button.Background'}"
                BorderBrush="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Border, Office2019Colorful=Brush.Border, Office2019HighContrast=Brush.Border, Win10=#00000000, Win11=#00000000'}"
                Height="{dx:LWDouble 'NaN, Win11=64'}"
                BorderThickness="1" />
            <ContentControl dx:FocusHelper2.Focusable="False" Template="{DynamicResource {dxt:LWKey Calculator.DisplayContentTemplate}}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver" />
                    <VisualState x:Name="Pressed" />
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Border, Win10=#00000000, Win11=#00000000'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey Calculator.DisplayStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="FontSize" Value="21" />
        <Setter Property="Margin" Value="0,0,0,10" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Calculator.DisplayTemplate}}" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\CalcEdit\CalcEditDisplay.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\CalcEdit\CalcEditControl.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey Calculator.BorderTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="border"
                Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background, Win10Dark=Brush.Window.Background, Win10Light=Brush.Window.Background, Win11=Brush.WindowBackground'}"
                BorderBrush="{dx:LWBrush 'Brush.Border, Win11=Brush.PanelBorder'}"
                BorderThickness="1"
                Visibility="{Binding ShowBorder, Converter={StaticResource BoolToVisibilityConverter}}"
                CornerRadius="{dx:LWCornerRadius '0, Win11=7'}" />
            <dx:DXBorder Background="{dx:LWBrush 'Brush.Window.Background, Win11=Brush.WindowBackground'}" Visibility="{Binding ShowBorder, Converter={StaticResource BoolToVisibilityInverseConverter}}" />
            <ContentPresenter x:Name="content" Margin="{Binding ShowBorder, Converter={StaticResource BoolToThicknessConverter}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="border" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="border" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="border" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasPadding" Value="True">
                <Setter Property="Margin" TargetName="content" Value="{Binding Path=(dxi:AppearanceOptions.Padding), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey Calculator.PopupContentContainerTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background, Win10Dark=Brush.Window.Background, Win10Light=Brush.Window.Background'}" Padding="11">
            <ContentPresenter />
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\CalcEdit\CalcEditControl.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ColorEdit\ColorEditGallery.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey ColorEdit.GalleryItemControlTemplate}" TargetType="{x:Type dxb:GalleryItemControl}">
        <Grid x:Name="Root">
            <dx:DXBorder
                Name="IsDefault"
                Background="{Binding Path=Item.Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToBrushConverter}}"
                BorderBrush="{Binding Path=DataContext.Group.Gallery.(dxe:BaseEdit.OwnerEdit).ChipBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                BorderThickness="{Binding Path=Item.HideBorderSide, Converter={StaticResource HideBorderSideToThicknessConverter}, ConverterParameter=1, RelativeSource={RelativeSource TemplatedParent}}"
                Height="{Binding Path=Gallery.(dxe:ColorEdit.OwnerEdit).ChipSize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ChipSizeToSizeConverter}}"
                Margin="{Binding Path=GroupControl.GroupsControl.GalleryControl.ActualItemMargin, RelativeSource={RelativeSource TemplatedParent}}"
                Visibility="{Binding Path=Item.IsVisible, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}"
                Width="{Binding Path=Gallery.(dxe:ColorEdit.OwnerEdit).ChipSize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ChipSizeToSizeConverter}}" />
            <Grid
                Name="IsFocus"
                Height="{Binding Path=Gallery.(dxe:ColorEdit.OwnerEdit).ChipSize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ChipSizeToSizeConverter}}"
                Margin="{Binding Path=GroupControl.GroupsControl.GalleryControl.ActualItemMargin, RelativeSource={RelativeSource TemplatedParent}}"
                Opacity="0"
                Width="{Binding Path=Gallery.(dxe:ColorEdit.OwnerEdit).ChipSize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ChipSizeToSizeConverter}}">
                <dx:DXBorder BorderBrush="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.ControlLight.Foreground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.Border, VS2019Blue=Brush.HoverForeground, Win11=Brush.Accent'}" BorderThickness="1" />
                <dx:DXBorder BorderBrush="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background, Office2019HighContrast=Brush.Border'}" BorderThickness="1" Margin="1" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocus" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocus" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocus" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocus" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocus" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="IsDefault" Value="44" />
                <Setter Property="MinHeight" TargetName="IsDefault" Value="44" />
                <Setter Property="MinWidth" TargetName="IsFocus" Value="44" />
                <Setter Property="MinHeight" TargetName="IsFocus" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ColorEdit.GalleryBarItemLinkControlTemplate}" TargetType="{x:Type dxei:GalleryBarItemLinkControl}">
        <StackPanel Orientation="Vertical">
            <dx:DXBorder BorderBrush="{dx:LWBrush 'Brush.Delimiter, Win10Dark=Brush.Border'}" BorderThickness="0,0,0,1" Visibility="{Binding Path=HasTopBorder, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
            <dx:DXBorder Background="{DynamicResource {dxt:LWKey ColorEdit.Background}}">
                <dxb:GalleryControl
                    x:Name="PART_GalleryControl"
                    BorderBrush="{StaticResource Brush.Editor.Background}"
                    DefaultIsGroupCaptionVisible="False"
                    DefaultItemControlTemplate="{DynamicResource {dxt:LWKey ColorEdit.GalleryItemControlTemplate}}"
                    DesiredColCount="{Binding Path=(dxe:BaseEdit.OwnerEdit).ColumnCount, RelativeSource={RelativeSource Self}}"
                    Gallery="{Binding Path=GalleryLink.Item.Gallery, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                    PlacementTarget="Ribbon" />
            </dx:DXBorder>
            <dx:DXBorder BorderBrush="{dx:LWBrush 'Brush.Delimiter, Win10Dark=Brush.Border'}" BorderThickness="0,1,0,0" Visibility="{Binding Path=HasBottomBorder, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
        </StackPanel>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ColorEdit\ColorEditGallery.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ColorEdit\ColorEditPicker.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey ColorPicker.PipetButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Button.Background, Win11=Brush.Button.SimpleButtonBackground'}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1" />
            <Path x:Name="Path" Style="{StaticResource UIShape.Picker}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
                <Setter Property="Fill" TargetName="Path" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                <Setter Property="Fill" TargetName="Path" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.HoverForeground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, Win11=Brush.Accent'}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey ColorPicker.DefaultColorButtonTemplate}" TargetType="{x:Type Button}">
        <dx:DXBorder Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ColorEdit\ColorEditPicker.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\RatingEdit.xaml-->
    <!-- General -->
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\RatingEdit.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ExprEdCtrl.xaml-->
    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.AndGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Grid Height="9" Width="14">
                <Path
                    Data="F1 M 216.3,225.6C 216.3,224.21 215.416,222.975 214.05,222.2C 212.684,222.975 211.8,224.21 211.8,225.6C 211.8,226.99 212.684,228.225 214.05,229C 215.416,228.225 216.3,226.99 216.3,225.6 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                    Margin="4.8,1.2,4.7,1"
                    Opacity="0.62"
                    Stretch="Fill"
                    UseLayoutRounding="False" />
                <Path
                    Data="F1 M 217.1,225.5C 217.1,223.834 216.296,222.38 215.1,221.602C 215.688,221.219 216.371,221 217.1,221C 219.309,221 221.1,223.015 221.1,225.5C 221.1,227.985 219.309,230 217.1,230C 216.371,230 215.688,229.781 215.1,229.398C 216.296,228.62 217.1,227.166 217.1,225.5 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                    HorizontalAlignment="Right"
                    Margin="0,0,-0.1,0"
                    Stretch="Fill"
                    UseLayoutRounding="False"
                    Width="6" />
                <Path
                    Data="F1 M 211,225.5C 211,223.834 211.804,222.38 213,221.602C 212.412,221.219 211.729,221 211,221C 208.791,221 207,223.015 207,225.5C 207,227.985 208.791,230 211,230C 211.729,230 212.412,229.781 213,229.398C 211.804,228.62 211,227.166 211,225.5 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                    HorizontalAlignment="Left"
                    Stretch="Fill"
                    UseLayoutRounding="False"
                    Width="6" />
            </Grid>
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.NotGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Grid Height="9" Width="14">
                <Path
                    Data="F1 M 216.3,225.6C 216.3,224.21 215.416,222.975 214.05,222.2C 212.684,222.975 211.8,224.21 211.8,225.6C 211.8,226.99 212.684,228.225 214.05,229C 215.416,228.225 216.3,226.99 216.3,225.6 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                    Margin="4.8,1.2,4.7,1"
                    Stretch="Fill"
                    UseLayoutRounding="False" />
                <Path
                    Data="F1 M 217.1,225.5C 217.1,223.834 216.296,222.38 215.1,221.602C 215.688,221.219 216.371,221 217.1,221C 219.309,221 221.1,223.015 221.1,225.5C 221.1,227.985 219.309,230 217.1,230C 216.371,230 215.688,229.781 215.1,229.398C 216.296,228.62 217.1,227.166 217.1,225.5 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                    HorizontalAlignment="Right"
                    Margin="0,0,-0.1,0"
                    Stretch="Fill"
                    UseLayoutRounding="False"
                    Width="6" />
                <Path
                    Data="F1 M 211,225.5C 211,223.834 211.804,222.38 213,221.602C 212.412,221.219 211.729,221 211,221C 208.791,221 207,223.015 207,225.5C 207,227.985 208.791,230 211,230C 211.729,230 212.412,229.781 213,229.398C 211.804,228.62 211,227.166 211,225.5 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                    HorizontalAlignment="Left"
                    Opacity="0.62"
                    Stretch="Fill"
                    UseLayoutRounding="False"
                    Width="6" />
            </Grid>
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.NotEqualGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 266,320L 273.5,320L 276,317L 278,317L 275.5,320L 278,320L 278,322L 273.833,322L 272.167,324L 278,324L 278,326L 270.5,326L 268,329L 266,329L 268.5,326L 266,326L 266,324L 270.167,324L 271.833,322L 266,322L 266,320 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="12"
                Stretch="Fill"
                Width="12" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.OrGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Grid Height="9" Width="14">
                <Path
                    Data="F1 M 216.3,225.6C 216.3,224.21 215.416,222.975 214.05,222.2C 212.684,222.975 211.8,224.21 211.8,225.6C 211.8,226.99 212.684,228.225 214.05,229C 215.416,228.225 216.3,226.99 216.3,225.6 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                    Margin="4.8,1.2,4.7,1"
                    Opacity="0.62"
                    Stretch="Fill"
                    UseLayoutRounding="False" />
                <Path
                    Data="F1 M 217.1,225.5C 217.1,223.834 216.296,222.38 215.1,221.602C 215.688,221.219 216.371,221 217.1,221C 219.309,221 221.1,223.015 221.1,225.5C 221.1,227.985 219.309,230 217.1,230C 216.371,230 215.688,229.781 215.1,229.398C 216.296,228.62 217.1,227.166 217.1,225.5 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                    HorizontalAlignment="Right"
                    Margin="0,0,-0.1,0"
                    Opacity="0.62"
                    Stretch="Fill"
                    UseLayoutRounding="False"
                    Width="6" />
                <Path
                    Data="F1 M 211,225.5C 211,223.834 211.804,222.38 213,221.602C 212.412,221.219 211.729,221 211,221C 208.791,221 207,223.015 207,225.5C 207,227.985 208.791,230 211,230C 211.729,230 212.412,229.781 213,229.398C 211.804,228.62 211,227.166 211,225.5 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                    HorizontalAlignment="Left"
                    Opacity="0.62"
                    Stretch="Fill"
                    UseLayoutRounding="False"
                    Width="6" />
            </Grid>
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.EqualGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 266,331L 278,331L 278,333L 266,333L 266,331 Z M 266,335L 278,335L 278,337L 266,337L 266,335 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="6"
                Stretch="Fill"
                Width="12" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.DivideGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 119,291L 119,293L 105,293L 105,291L 119,291 Z M 112,285C 113.105,285 114,285.896 114,287C 114,288.105 113.105,289 112,289C 110.895,289 110,288.105 110,287C 110,285.896 110.895,285 112,285 Z M 112,295C 113.105,295 114,295.896 114,297C 114,298.105 113.105,299 112,299C 110.895,299 110,298.105 110,297C 110,295.896 110.895,295 112,295 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="14"
                Stretch="Fill"
                Width="14" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.LargerGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 170,254L 170,252L 182,257L 170,262L 170,260L 178,257L 170,254 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="10"
                Margin="1,0,-1,0"
                Stretch="Fill"
                Width="12" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.LargerOrEqualGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 136,306.5L 144,309.5L 136,312.5L 136,314.5L 148,309.5L 136,304.5L 136,306.5 Z M 136,315.5L 136,317.5L 148,312.5L 148,310.5L 136,315.5 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="13"
                Margin="1,0,-1,0"
                Stretch="Fill"
                Width="12" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.LessGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 185,266L 185,264L 173,269L 185,274L 185,272L 177,269L 185,266 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="10"
                Margin="-1,0,1,0"
                Stretch="Fill"
                Width="12" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.LessOrEqualGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 212,316L 204,319L 212,322L 212,324L 200,319L 212,314L 212,316 Z M 212,325L 212,327L 200,322L 200,320L 212,325 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="13"
                Margin="-1,0,1,0"
                Stretch="Fill"
                Width="12" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.MinusGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Rectangle
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="2"
                HorizontalAlignment="Center"
                Stretch="Fill"
                VerticalAlignment="Center"
                Width="14" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.ModuloGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 78,17.9996L 88,5.99988L 90,5.99988L 80,17.9996L 78,17.9996 Z M 80.5,6.00012C 81.8806,6.00012 83,7.11951 83,8.50012C 83,9.88086 81.8807,11.0001 80.5,11.0001C 79.1193,11.0001 78,9.88086 78,8.50012C 78,7.11951 79.1194,6.00012 80.5,6.00012 Z M 80.5,7.00037C 79.6714,7.00037 79,7.67175 79,8.50037C 79,9.32874 79.6716,10.0004 80.5,10.0004C 81.3284,10.0004 82,9.32874 82,8.50037C 82,7.67175 81.3286,7.00037 80.5,7.00037 Z M 87.5,12.9999C 88.8806,12.9999 90,14.1191 90,15.4999C 90,16.8805 88.8807,17.9999 87.5,17.9999C 86.1193,17.9999 85,16.8805 85,15.4999C 85,14.1191 86.1194,12.9999 87.5,12.9999 Z M 87.5,14C 86.6714,14 86,14.6714 86,15.5C 86,16.3285 86.6716,17 87.5,17C 88.3284,17 89,16.3285 89,15.5C 89,14.6714 88.3286,14 87.5,14 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="12"
                Stretch="Fill"
                Width="12" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.MultiplyGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 107,249L 107,248L 112,243L 107,238L 107,237L 108,237L 113,242L 118,237L 119,237L 119,238L 114,243L 119,248L 119,249L 118,249L 113,244L 108,249L 107,249 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="12"
                Stretch="Fill"
                Width="12" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.PlusGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 238,60L 244,59.9999L 244,54L 246,54L 246,59.9999L 252,60L 252,62L 246,61.9999L 246,68L 244,68L 244,62L 238,62L 238,60 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="14"
                Stretch="Fill"
                Width="14" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxt:LWKey ExpressionEditorControl.WrapSelectionGlyph}">
        <Grid x:Name="Root" Height="20" Width="20">
            <Path
                Data="F1 M 91.5,57.8334C 92.1441,57.8334 92.6667,58.3558 92.6667,59C 92.6667,59.6442 92.1443,60.1666 91.5,60.1666C 90.8557,60.1666 90.3333,59.6442 90.3333,59C 90.3333,58.3558 90.8559,57.8334 91.5,57.8334 Z M 95,57.834C 95.6441,57.834 96.1666,58.3566 96.1666,59.0006C 96.1666,59.645 95.6443,60.1674 95,60.1674C 94.3556,60.1674 93.8333,59.645 93.8333,59.0006C 93.8333,58.3566 94.3559,57.834 95,57.834 Z M 98.5,57.8339C 99.1441,57.8339 99.6666,58.3564 99.6666,59.0005C 99.6666,59.6449 99.1443,60.1671 98.5,60.1671C 97.8556,60.1671 97.3333,59.6449 97.3333,59.0005C 97.3333,58.3564 97.8559,57.8339 98.5,57.8339 Z M 90.3333,52.0005C 90.5347,52.0005 90.73,52.077 90.9164,52.2207C 89.9101,52.9982 89.1667,55.7386 89.1667,59.0001C 89.1667,62.2622 89.9104,65.0029 90.9169,65.7798C 90.7304,65.9238 90.5348,66.0005 90.3333,66.0005C 89.0447,66.0005 88,62.8663 88,59.0005C 88,55.1343 89.0446,52.0005 90.3333,52.0005 Z M 99.6667,52.0001C 100.955,52.0001 102,55.1338 102,59.0001C 102,62.8661 100.955,66.0001 99.6667,66.0001C 99.4651,66.0001 99.2696,65.9233 99.0831,65.7794C 100.09,65.0026 100.833,62.2617 100.833,58.9996C 100.833,55.7383 100.09,52.9977 99.0836,52.2203C 99.2699,52.0767 99.4653,52.0001 99.6667,52.0001 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="14"
                Stretch="Fill"
                Width="14" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ExprEdCtrl.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\FilterControl\FilterControlBorder.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey FilterControl.FilterControlBorderTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{StaticResource Brush.Editor.Background}" BorderBrush="{StaticResource Brush.Border}">
                <dx:DXBorder.BorderThickness>
                    <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                            <dx:BoolToObjectConverter>
                                <dx:BoolToObjectConverter.TrueValue>
                                    <Thickness>1</Thickness>
                                </dx:BoolToObjectConverter.TrueValue>
                                <dx:BoolToObjectConverter.FalseValue>
                                    <Thickness>0</Thickness>
                                </dx:BoolToObjectConverter.FalseValue>
                            </dx:BoolToObjectConverter>
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.BorderThickness>
                <ContentPresenter />
            </dx:DXBorder>
        </Grid>
    </ControlTemplate>

    <dxe:GroupFilterControlNodeToListConverter x:Key="itemsSourceConverter"/>
    <ControlTemplate x:Key="{dxt:LWKey FilterControl.FilterControlTemplate}" TargetType="{x:Type dxe:FilterControl}">
        <dxe:FilterControlBarManager>
            <Grid>
                <ContentControl
                    SnapsToDevicePixels="True"
                    Tag="{TemplateBinding ShowBorder}"
                    Template="{DynamicResource {dxt:LWKey FilterControl.FilterControlBorderTemplate}}"
                    UseLayoutRounding="True">
                    <ScrollViewer
                        BorderThickness="0"
                        dx:FocusHelper2.Focusable="False"
                        HorizontalScrollBarVisibility="Auto"
                        VerticalScrollBarVisibility="Auto">
                        <Grid TextElement.Foreground="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}">
                            <ItemsControl
                                x:Name="PART_ItemsControl"
                                dx:FocusHelper2.Focusable="False"
                                ItemsSource="{Binding Path=RootNode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource itemsSourceConverter}}"
                                ItemTemplate="{DynamicResource {dxt:LWKey FilterControl.ItemsControlItemTemplate}}"
                                Margin="8,2,8,2" />
                            <Canvas x:Name="PART_FocusVisualContainer" Focusable="False" />
                        </Grid>
                    </ScrollViewer>
                </ContentControl>
            </Grid>
        </dxe:FilterControlBarManager>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="PART_ItemsControl" Value="14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Filter Panel -->

    <Style x:Key="{dxt:LWKey FilterPanelControlBase.FilterPanelBorderStyle}" TargetType="Border">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.Window.Background'}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
    </Style>

    <!-- Filter -->

    <Style x:Key="{dxt:LWKey FilterPanelControlBase.FilterPanelEnableFilterStyle}" TargetType="{x:Type dxe:CheckEdit}">
        <Setter Property="Margin" Value="6,2,6,2" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxt:LWKey FilterPanelControlBase.FilterPanelTextStyle}" TargetType="{x:Type dxe:TextEdit}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="Margin" Value="3" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Caption -->

    <!-- ComboBox -->

    <ControlTemplate x:Key="{dxt:LWKey FilterPanelControlBase.MRUComboBoxTemplate}">
        <dx:DXDockPanel>
            <Path
                x:Name="Glyph"
                dx:DXDockPanel.Dock="Right"
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Margin="3"
                Style="{StaticResource UIShape.Down}">
                <Path.Visibility>
                    <Binding Path="(dxe:BaseEdit.OwnerEdit).ShowEditorButtons" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                            <dx:BooleanToVisibilityConverter />
                        </Binding.Converter>
                    </Binding>
                </Path.Visibility>
            </Path>
            <TextBlock
                Foreground="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Text="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditValue, RelativeSource={RelativeSource TemplatedParent}}"
                TextDecorations="{Binding Path=(dxe:BaseEdit.OwnerEdit).TextDecorations, RelativeSource={RelativeSource TemplatedParent}}"
                TextTrimming="WordEllipsis" />
        </dx:DXDockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Glyph" Value="14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\FilterControl\FilterControlBorder.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\FilterControl\FilterControlButtons.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey FilterControl.FilterControlGroupTypeButtonTemplate}" TargetType="{x:Type ContentControl}">
        <TextBlock
            Foreground="{StaticResource Brush.Custom.Red}"
            HorizontalAlignment="Center"
            Text="{Binding Path=NodeType, Converter={StaticResource FilterControlGroupTypeConverter}}"
            VerticalAlignment="Center" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey FilterControl.FilterControlClauseOperationButtonTemplate}" TargetType="{x:Type ContentControl}">
        <TextBlock
            Foreground="{StaticResource Brush.Custom.Blue}"
            HorizontalAlignment="Center"
            Text="{Binding Path=Operation, Converter={StaticResource FilterControlOperationStringConverter}}"
            VerticalAlignment="Center" />
    </ControlTemplate>

    <!-- First Operatin Button -->

    <ControlTemplate x:Key="{dxt:LWKey FilterControl.FieldInOperationButtonTemplate}" TargetType="{x:Type dxe:FieldInOperationButtonControl}">
        <dx:XPFContentControl
            Content="{TemplateBinding ColumnCaption}"
            ContentTemplate="{TemplateBinding ContentTemplate}"
            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
            Cursor="Hand"
            Foreground="{StaticResource Brush.Custom.Green}"
            HorizontalAlignment="Center"
            VerticalAlignment="Center" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey FilterControl.FilterControlFirstOperandButtonTemplate}" TargetType="{x:Type ContentControl}">
        <dx:XPFContentControl
            x:Name="FirstOperandButton"
            Content="{Binding Path=ColumnHeaderCaption}"
            ContentTemplate="{Binding Path=ColumnHeaderTemplate}"
            ContentTemplateSelector="{Binding Path=ColumnHeaderTemplateSelector}"
            Cursor="Hand"
            Foreground="{StaticResource Brush.Custom.Green}"
            HorizontalAlignment="Center"
            VerticalAlignment="Center" />
    </ControlTemplate>

    <!-- Change Operand -->

    <ControlTemplate x:Key="{dxt:LWKey FilterControl.ChangeOperandTypeButtonTemplate}" TargetType="{x:Type ToggleButton}">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <Grid Visibility="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityInverseConverter}}">
                <Image Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.FilterControl.edit-normal.png, Converter={StaticResource EmbeddedResourceImageConverter}}" />
                <Image Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.FilterControl.edit.png, Converter={StaticResource EmbeddedResourceImageConverter}}" Visibility="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
            </Grid>
            <Grid Visibility="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}">
                <Image Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.FilterControl.list-normal.png, Converter={StaticResource EmbeddedResourceImageConverter}}" />
                <Image Source="{Binding Source=DevExpress.Xpf.Core.Editors.Images.FilterControl.list.png, Converter={StaticResource EmbeddedResourceImageConverter}}" Visibility="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
            </Grid>
        </Grid>
    </ControlTemplate>

    <!-- One Date -->

    <ControlTemplate x:Key="{dxt:LWKey FilterControl.OneLocalDateTimeTemplate}">
        <dx:XPFContentControl
            x:Name="LocalDateTimeButton"
            Content="{Binding Path=LocalDateTimeFunctionLabel}"
            Cursor="Hand"
            Foreground="{StaticResource Brush.Custom.Green}"
            HorizontalAlignment="Center"
            VerticalAlignment="Center" />
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\FilterControl\FilterControlButtons.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\FilterControl\PanelButtons.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey FilterPanelControlBase.FilterControlButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}"
                CornerRadius="16"
                Height="16"
                Opacity="0.62"
                Width="16">
                <Path Fill="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Window.Background'}" Style="{StaticResource UIShape.Editor.Edit}" />
            </dx:DXBorder>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="42" />
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
                <Setter Property="Margin" TargetName="Root" Value="0,0,-6,0" />
                <Setter Property="Width" TargetName="IsDefault" Value="24" />
                <Setter Property="Height" TargetName="IsDefault" Value="24" />
                <Setter Property="CornerRadius" TargetName="IsDefault" Value="24" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Clear -->

    <ControlTemplate x:Key="{dxt:LWKey FilterPanelControlBase.ClearFilterButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}"
                CornerRadius="16"
                Height="16"
                Opacity="0.62"
                Width="16">
                <Path Fill="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Window.Background'}" Style="{StaticResource UIShape.Editor.Cancel}" />
            </dx:DXBorder>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="42" />
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
                <Setter Property="Margin" TargetName="Root" Value="0,0,-6,0" />
                <Setter Property="Width" TargetName="IsDefault" Value="24" />
                <Setter Property="Height" TargetName="IsDefault" Value="24" />
                <Setter Property="CornerRadius" TargetName="IsDefault" Value="24" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\FilterControl\PanelButtons.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\FilterControl\PanelEditor.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey FilterControl.FilterControlEditorTemplate}" TargetType="{x:Type dxe:FilterControlEditor}">
        <StackPanel Orientation="Horizontal">
            <dxe:FieldInOperationButtonControl
                x:Name="PART_Column"
                Node="{TemplateBinding Node}"
                OperatorPropertyName="{Binding Path=Operator, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource OperatorPropertyNameConverter}}"
                Template="{DynamicResource {dxt:LWKey FilterControl.FieldInOperationButtonTemplate}}"
                Visibility="{Binding Path=FieldInValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
            <dx:DXBorder
                x:Name="PART_Stroke_Border"
                Background="{dx:LWBrush 'Brush.Window.Background, Win11=Brush.WindowBackground'}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1"
                Margin="0,0,3,0"
                Visibility="{Binding Path=FieldInValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityInverseConverter}}">
                <ContentPresenter Name="PART_EditorPresenter" />
            </dx:DXBorder>
            <ToggleButton
                x:Name="PART_ChangeOperandTypeButton"
                Command="{Binding ChangeOperandTypeCommand, RelativeSource={RelativeSource TemplatedParent}}"
                Cursor="Hand"
                dx:FocusHelper2.Focusable="False"
                IsChecked="{Binding Path=FieldInValue, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Margin="3"
                Template="{DynamicResource {dxt:LWKey FilterControl.ChangeOperandTypeButtonTemplate}}"
                VerticalAlignment="Center"
                Visibility="{Binding Path=Node.Owner.ShowOperandTypeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}">
                <ToolTipService.ToolTip>
                    <ToolTip Visibility="{Binding Node.Owner.ShowToolTips, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}">
                        <TextBlock Text="{Binding Source={x:Null}, ConverterParameter=FilterToolTipValueType, Converter={StaticResource EditorStringIdConverter}}" />
                    </ToolTip>
                </ToolTipService.ToolTip>
            </ToggleButton>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="EditModeStates">
                    <VisualState x:Name="InplaceActive">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="PART_Stroke_Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource Color.Border}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="PART_Stroke_Border" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Window.Background, Office2019Colorful=Color.Editor.Background, Office2019HighContrast=Color.Editor.Background, Win11=Color.WindowBackground'}" />
                            <DoubleAnimation Duration="0" Storyboard.TargetName="PART_EditorPresenter" Storyboard.TargetProperty="MinWidth" To="32" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="InplaceInactive">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="PART_Stroke_Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="Transparent" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="PART_Stroke_Border" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Editor.Background, Office2019Colorful=#00000000, Office2019HighContrast=#00000000'}" />
                            <DoubleAnimation Duration="0" Storyboard.TargetName="PART_EditorPresenter" Storyboard.TargetProperty="MinWidth" To="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </StackPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="PART_Stroke_Border" Value="1" />
                <Setter Property="MinHeight" TargetName="PART_Stroke_Border" Value="44" />
                <Setter Property="MinWidth" TargetName="PART_Stroke_Border" Value="96" />
                <Setter Property="Margin" TargetName="PART_ChangeOperandTypeButton" Value="14" />
                <Setter Property="MinHeight" TargetName="PART_ChangeOperandTypeButton" Value="44" />
                <Setter Property="MinWidth" TargetName="PART_ChangeOperandTypeButton" Value="96" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Style -->

    <Style x:Key="{dxt:LWKey FilterControl.InactiveTextBlockStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="4,2,4,2" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\FilterControl\PanelEditor.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\InplaceGlyphes.xaml-->
    <!-- General -->

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.CancelGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,1 1,0 4,3 7,0 8,1 5,4 8,7 7,8 4,5 1,8 0,7 3,4 0,1 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="8"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RegularGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,3L 2,3L 2,5L 0,5L 0,3 Z M 4,3L 6,3L 6,5L 4,5L 4,3 Z M 8,3L 10,3L 10,5L 8,5L 8,3 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="2"
                Stretch="Fill"
                Width="10" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.SearchGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 4,1.90735e-006C 6.20914,1.90735e-006 8,1.79086 8,4C 8,4.84917 7.73539,5.63653 7.28414,6.28414L 10,9L 9,10L 6.28414,7.28414C 5.63653,7.7354 4.84917,8 4,8C 1.79086,8 0,6.20914 0,4C 0,1.79086 1.79086,1.90735e-006 4,1.90735e-006 Z M 4,1C 2.34315,1 1,2.34315 1,4C 1,5.65686 2.34315,7 4,7C 5.65685,7 7,5.65686 7,4C 7,2.34315 5.65685,1 4,1 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="10"
                Stretch="Fill"
                Width="10" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <!-- Operation -->

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.PlusGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,3 3,3 3,0 5,0 5,3 8,3 8,5 5,5 5,8 3,8 3,5 0,5 0,3 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="8"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.MinusGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,3 8,3 8,5 0,5 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="2"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RefreshGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 5,1C 6.35997,1 7.56143,1.6787 8.28413,2.71586L 10,1L 10,5L 6,5L 7.56187,3.43813C 7.03492,2.57566 6.08469,2 5,2C 3.69378,2 2.58254,2.83481 2.17071,4L 1.12602,4C 1.57006,2.27477 3.13616,1 5,1 Z M 5,9C 3.64003,9 2.43857,8.3213 1.71587,7.28414L 1.98682e-008,9L 1.98682e-008,5L 4,5L 2.43813,6.56187C 2.96507,7.42434 3.91531,8 5,8C 6.30622,8 7.41746,7.16519 7.82929,6L 8.87398,6C 8.42994,7.72523 6.86384,9 5,9 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="10"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.EditGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,8L 5,3L 7,5L 2,10L 0,10L 0,8 Z M 6,2L 8,0L 10,2L 8,4L 6,2 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="10"
                Stretch="Fill"
                Width="10" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.UndoGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 4.76837e-007,9.53674e-007L 4.76837e-007,4L 4,4L 2.43813,2.43813C 2.89308,2.16018 3.42784,2 4,2C 5.65685,2 7,3.34315 7,5C 7,6.65686 5.65685,8 4,8L 4,9C 6.20914,9 8,7.20914 8,5C 8,2.79086 6.20914,1 4,1C 3.15083,1 2.36347,1.26461 1.71587,1.71587L 4.76837e-007,9.53674e-007 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="9"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RedoGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 8,0L 8,4L 4,4L 5.56187,2.43813C 5.10692,2.16018 4.57216,2 4,2C 2.34315,2 1,3.34315 1,5C 1,6.65685 2.34315,8 4,8L 4,9C 1.79086,9 0,7.20914 0,5C 0,2.79086 1.79086,1 4,1C 4.84917,1 5.63653,1.26461 6.28413,1.71587L 8,0 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="9"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <!-- Navigation -->

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.PrevPageGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,4 4,0 4,8 0,4 Z M 4,4 8,0 8,8 4,4 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="8"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.NextPageGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,0 0,8 4,4 0,0 Z M 4,0 4,8 8,4 4,0 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="8"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.FirstGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 1,4 5,0 5,8 1,4 Z M 5,4 9,0 9,8 5,4 Z M 0,0 1,0 1,8 0,8 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="8"
                Stretch="Fill"
                Width="9" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.LastGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxi:RenderPath
                Name="Path"
                Data="F1 M 0,0 0,8 4,4 0,0 Z M 4,0 4,8 8,4 4,0 Z M 8,0 9,0 9,8 8,8 Z "
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Height="8"
                Stretch="Fill"
                Width="9" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <!-- Other -->

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.NoneGlyph}">
        <dxi:RenderPanel Foreground="{StaticResource {dxt:LWKey Buttons.Foreground}}" MinWidth="42" />
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.UserGlyph}">
        <dxi:RenderPanel Name="Root" Foreground="{StaticResource {dxt:LWKey Buttons.Foreground}}" MinWidth="42">
            <dxi:RenderContentControl Name="PART_DefaultContentPresenter" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding
                Property="ContentTemplate"
                TargetName="PART_DefaultContentPresenter"
                TargetProperty="ContentTemplate"
                ValueSource="DataContext" />
            <dxi:RenderBinding
                Property="Content"
                TargetName="PART_DefaultContentPresenter"
                TargetProperty="Content"
                ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.CustomGlyph}">
        <dxi:RenderPanel Name="Root" Foreground="{StaticResource {dxt:LWKey Buttons.Foreground}}">
            <dxi:RenderContentControl Name="PART_DefaultContentPresenter" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding
                Property="ContentTemplate"
                TargetName="PART_DefaultContentPresenter"
                TargetProperty="ContentTemplate"
                ValueSource="DataContext" />
            <dxi:RenderBinding
                Property="Content"
                TargetName="PART_DefaultContentPresenter"
                TargetProperty="Content"
                ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\InplaceGlyphes.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\InplaceBaseEdit.xaml-->


    <!-- General -->
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\InplaceBaseEdit.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\InplaceBaseEdit\Control.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxt:LWKey BaseEdit.HoverBorderDecorationTemplate}" TargetType="Control">
        <dxi:Chrome dxei:ControlHelper.ShowFocusedState="{Binding Path=(dxei:ControlHelper.ShowFocusedState), RelativeSource={RelativeSource TemplatedParent}}" IsHitTestVisible="False" RenderTemplate="{StaticResource {dxt:LWKey InplaceBaseEdit.HoverBorderTemplate}}" />
    </ControlTemplate>

    <!-- Border -->

    <!--#endregion Base\\Core\Core\Editors\Themes\Base\InplaceBaseEdit\Control.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\InplaceBaseEdit\InplaceCheckBox.xaml-->

    <!--#endregion Base\\Core\Core\Editors\Themes\Base\InplaceBaseEdit\InplaceCheckBox.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\InplaceBaseEdit\InplaceButton.xaml-->
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RenderButtonTemplate}">
        <dxi:RenderPanel Name="Root">
            <dxi:RenderBorder Name="IsDefault" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" />
            <dxi:RenderContentPresenter Name="PART_ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:ConditionalRenderBinding Property="Background" TargetName="IsDefault" TargetProperty="Background">
                <dxi:RenderCondition Operator="Not" Property="Background" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding Property="BorderBrush" TargetName="IsDefault" TargetProperty="BorderBrush">
                <dxi:RenderCondition Operator="Not" Property="BorderBrush" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding Property="BorderThickness" TargetName="IsDefault" TargetProperty="BorderThickness">
                <dxi:RenderCondition Operator="Not" Property="BorderThickness" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
            <dxi:ConditionalRenderBinding Property="CornerRadius" TargetName="IsDefault" TargetProperty="CornerRadius">
                <dxi:RenderCondition Operator="Not" Property="Background" Value="{x:Null}" />
            </dxi:ConditionalRenderBinding>
            <dxi:RenderStateGroup Name="CommonStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Disabled" />
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="CheckedStates">
                <dxi:RenderStateTrigger Name="Unchecked" />
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="TouchStates">
                <dxi:RenderStateTrigger Name="NonTouch" />
                <dxi:RenderStateTrigger Name="Touch" />
            </dxi:RenderStateGroup>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\InplaceBaseEdit\InplaceButton.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\InplaceBaseEdit\InplaceSpinEdit.xaml-->
    <!-- General -->

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RenderSpinDownButtonTemplate}">
        <dxi:RenderPanel Name="Root">
            <dxi:RenderBorder Name="IsDefault" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" />
            <dxi:RenderContentPresenter Name="PART_ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="CommonStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Disabled" />
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="CheckedStates">
                <dxi:RenderStateTrigger Name="Unchecked" />
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="TouchStates">
                <dxi:RenderStateTrigger Name="NonTouch" />
                <dxi:RenderStateTrigger Name="Touch" />
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger Property="GlyphKind" Value="User" />
            <dxi:RenderTrigger Property="GlyphKind" Value="None" />
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RenderSpinUpButtonTemplate}">
        <dxi:RenderPanel Name="Root">
            <dxi:RenderBorder Name="IsDefault" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" />
            <dxi:RenderContentPresenter Name="PART_ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="CommonStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Disabled" />
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="CheckedStates">
                <dxi:RenderStateTrigger Name="Unchecked" />
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="TouchStates">
                <dxi:RenderStateTrigger Name="NonTouch" />
                <dxi:RenderStateTrigger Name="Touch" />
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger Property="GlyphKind" Value="User" />
            <dxi:RenderTrigger Property="GlyphKind" Value="None" />
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RenderSpinLeftButtonTemplate}">
        <dxi:RenderPanel Name="Root">
            <dxi:RenderBorder Name="IsDefault" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" />
            <dxi:RenderContentPresenter Name="PART_ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="CommonStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Disabled" />
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="CheckedStates">
                <dxi:RenderStateTrigger Name="Unchecked" />
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="TouchStates">
                <dxi:RenderStateTrigger Name="NonTouch" />
                <dxi:RenderStateTrigger Name="Touch" />
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger Property="GlyphKind" Value="User" />
            <dxi:RenderTrigger Property="GlyphKind" Value="None" />
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.RenderSpinRightButtonTemplate}">
        <dxi:RenderPanel Name="Root">
            <dxi:RenderBorder Name="IsDefault" Background="{dx:LWBrush '#00FFFFFF, Win11=Brush.Button.Background'}" />
            <dxi:RenderContentPresenter Name="PART_ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderStateGroup Name="CommonStates">
                <dxi:RenderStateTrigger Name="Normal" />
                <dxi:RenderStateTrigger Name="MouseOver">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.ControlLight.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Pressed">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                </dxi:RenderStateTrigger>
                <dxi:RenderStateTrigger Name="Disabled" />
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="CheckedStates">
                <dxi:RenderStateTrigger Name="Unchecked" />
                <dxi:RenderStateTrigger Name="Checked">
                    <dxi:RenderSetter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                </dxi:RenderStateTrigger>
            </dxi:RenderStateGroup>
            <dxi:RenderStateGroup Name="TouchStates">
                <dxi:RenderStateTrigger Name="NonTouch" />
                <dxi:RenderStateTrigger Name="Touch" />
            </dxi:RenderStateGroup>
            <dxi:RenderTrigger Property="GlyphKind" Value="User" />
            <dxi:RenderTrigger Property="GlyphKind" Value="None" />
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\InplaceBaseEdit\InplaceSpinEdit.xaml-->

    <!--#region Base\\Core\Core\Editors\Themes\Base\ToggleSwitch\ToggleSwitchStates.xaml-->
    <!-- General -->

    <dxi:RenderTemplate x:Key="{dxt:LWKey ToggleSwitch.UndefinedStateContentTemplate}">
        <dxi:RenderPanel LayoutProvider="{dxi:GridPanelLayoutProvider}">
            <dxi:RenderTextBlock Name="TextBlock" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="TextBlock" TargetProperty="Text" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Near" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Left" />
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="0,0,5,0" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Far" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Right" />
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="5,0,0,0" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <dxi:RenderTemplate x:Key="{dxt:LWKey ToggleSwitch.CheckedStateContentTemplate}">
        <dxi:RenderPanel LayoutProvider="{dxi:GridPanelLayoutProvider}">
            <dxi:RenderTextBlock Name="TextBlock" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="TextBlock" TargetProperty="Text" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Near" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Left" />
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="0,0,5,0" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Far" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Right" />
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="5,0,0,0" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Both" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Right" />
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="5,0,0,0" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Inside" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Left" />
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="5,0,0,0" />
                <dxi:RenderSetter Property="Foreground" TargetName="TextBlock" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win10Light=Brush.HighlightedForeground, Win11=Brush.Foreground.Alt'}" />
            </dxi:RenderTrigger>
            <dxi:MultiRenderTrigger>
                <dxi:MultiRenderTrigger.Conditions>
                    <dxi:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Inside" ValueSource="TemplatedParent" />
                    <dxi:RenderCondition DependencyProperty="{x:Static ToggleButton.IsCheckedProperty}" Value="{x:Null}" ValueSource="TemplatedParent" />
                </dxi:MultiRenderTrigger.Conditions>
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="0,0,5,0" />
                <dxi:RenderSetter Property="Foreground" TargetName="TextBlock" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
            </dxi:MultiRenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="14" />
            </dxi:RenderTrigger>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:ToggleSwitch.ForegroundProperty}"
                TargetName="TextBlock"
                TargetProperty="Foreground"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>

    <!-- Unchecked -->

    <dxi:RenderTemplate x:Key="{dxt:LWKey ToggleSwitch.UncheckedStateContentTemplate}">
        <dxi:RenderPanel LayoutProvider="{dxi:GridPanelLayoutProvider}">
            <dxi:RenderTextBlock Name="TextBlock" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
        </dxi:RenderPanel>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderBinding TargetName="TextBlock" TargetProperty="Text" ValueSource="DataContext" />
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Near" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Left" />
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="0,0,5,0" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Far" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Right" />
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="5,0,0,0" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Both" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Left" />
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="0,0,5,0" />
            </dxi:RenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Inside" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="HorizontalAlignment" TargetName="TextBlock" Value="Right" />
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="0,0,5,0" />
                <dxi:RenderSetter Property="Foreground" TargetName="TextBlock" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
            </dxi:RenderTrigger>
            <dxi:MultiRenderTrigger>
                <dxi:MultiRenderTrigger.Conditions>
                    <dxi:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.ContentPlacementProperty}" Value="Inside" ValueSource="TemplatedParent" />
                    <dxi:RenderCondition DependencyProperty="{x:Static ToggleButton.IsCheckedProperty}" Value="{x:Null}" ValueSource="TemplatedParent" />
                </dxi:MultiRenderTrigger.Conditions>
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="5,0,0,0" />
                <dxi:RenderSetter Property="Foreground" TargetName="TextBlock" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
            </dxi:MultiRenderTrigger>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True" ValueSource="TemplatedParent">
                <dxi:RenderSetter Property="Margin" TargetName="TextBlock" Value="14" />
            </dxi:RenderTrigger>
            <dxi:ConditionalRenderBinding
                DependencyProperty="{x:Static dxe:ToggleSwitch.ForegroundProperty}"
                TargetName="TextBlock"
                TargetProperty="Foreground"
                ValueSource="TemplatedParent">
                <dxi:RenderCondition DependencyProperty="{x:Static dxe:ToggleSwitch.HasForegroundProperty}" Value="True" ValueSource="TemplatedParent" />
            </dxi:ConditionalRenderBinding>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <!--#endregion Base\\Core\Core\Editors\Themes\Base\ToggleSwitch\ToggleSwitchStates.xaml-->
    <ControlTemplate x:Key="RatingItemDefaultTemplate" TargetType="dxe:RatingItem">
        <dx:DXBorder Background="Transparent" Padding="{TemplateBinding Padding}">
            <Grid>
                <Path Stretch="Uniform" Data="{TemplateBinding Geometry}" Fill="{TemplateBinding Background}" />
                <Path Stretch="Uniform" Data="{TemplateBinding Geometry}" Fill="{TemplateBinding SelectedBackground}" OpacityMask="{TemplateBinding VisualValue}" />
                <Path Stretch="Uniform" Data="{TemplateBinding Geometry}" Fill="{TemplateBinding HoverBackground}" OpacityMask="{TemplateBinding HoverVisualValue}" />
                <Path x:Name="PART_Content" Stretch="Uniform" Data="{TemplateBinding Geometry}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    <Style x:Key="RatingItemDefaultStyle" TargetType="dxe:RatingItem">
        <Setter Property="Template" Value="{StaticResource RatingItemDefaultTemplate}" />
        <Setter Property="Geometry" Value="F1 M 3.13819,15.5069L 4.02332,9.9978L 0.00327778,6.12838L 5.51622,5.2678L 7.95399,0.248802L 10.476,5.22599L 16.0027,5.99349L 12.0485,9.93014L 13.0264,15.4235L 8.06048,12.8793L 3.13819,15.5069 Z" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="MinHeight" Value="16" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="Background" Value="Blue" />
        <Setter Property="HoverBackground" Value="Green" />
        <Setter Property="SelectedBackground" Value="Red" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Vertical" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="0,2,0,2" />
                <Setter Property="MinWidth" Value="16" />
                <Setter Property="MinHeight" Value="20" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Vertical" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="0,4,0,4" />
                <Setter Property="MinWidth" Value="32" />
                <Setter Property="MinHeight" Value="40" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Horizontal" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="MinWidth" Value="40" />
                <Setter Property="MinHeight" Value="32" />
                <Setter Property="Padding" Value="4,0,4,0" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--#region DEFAULT STYLES-->
    <Style x:Key="RatingItem.DefaultStyle" BasedOn="{StaticResource RatingItemDefaultStyle}" TargetType="dxe:RatingItem">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.ControlLight.Background, VS2019Blue=Brush.Border, Win10=Brush.Border, Win11=Brush.Button.SimpleButtonBackground'}" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=#00000000, Office2019Colorful=Brush.Focused, Office2019HighContrast=Brush.Focused, VS2019Blue=Brush.Border, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused, Win10=Brush.Border, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="Geometry" Value="F1 M 10.5187,12.8825L 9.68433,8.51054L 12.9324,5.46739L 8.51652,4.90992L 6.62601,0.880473L 4.73126,4.90793L 0.314825,5.46074L 3.55965,8.50731L 2.72065,12.8784L 6.62082,10.7338L 10.5187,12.8825 Z " />
        <Setter Property="HoverBackground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Colorful=Brush.Focused, Office2019HighContrast=Brush.Focused, VS2019=Brush.Focused, Win11=Brush.Button.SimpleButtonHoverBorder'}" />
        <Setter Property="SelectedBackground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Colorful=Brush.Focused, Office2019HighContrast=Brush.Focused, VS2019=Brush.Focused, Win10=Brush.Focused, Win11=Brush.Button.CheckedBackground'}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="MinWidth" Value="17" />
        <Setter Property="MinHeight" Value="16" />
        <Setter Property="Margin" Value="0,0,1,0" />
        <Setter Property="Template" Value="{StaticResource RatingItem.Template}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Vertical" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="MinWidth" Value="16" />
                <Setter Property="MinHeight" Value="17" />
                <Setter Property="Margin" Value="0,1,0,0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Vertical" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="MinWidth" Value="32" />
                <Setter Property="MinHeight" Value="32" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Horizontal" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="MinWidth" Value="32" />
                <Setter Property="MinHeight" Value="32" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FilterPanelCaptionControl.DefaultStyle" TargetType="dxe:FilterPanelCaptionControl">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="Margin" Value="6,0,6,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxe:FilterPanelCaptionControl">
                    <ContentPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="FlyoutControl.DefaultStyleBase" BasedOn="{StaticResource FlyoutBaseStyle}" TargetType="{x:Type dxe:FlyoutControl}">
        <Setter Property="Effect" Value="{StaticResource FlyoutControlEffect}"/>
    </Style>
    <!--#endregion DEFAULT STYLES-->


</ResourceDictionary>