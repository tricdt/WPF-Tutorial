<?xml version="1.0" encoding="utf-8" ?>
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:aero="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxbi="http://schemas.devexpress.com/winfx/2008/xaml/bars/internal"
    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm">
    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Common/{ThemeName}/Common.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <!--#region Editors-->
    <SolidColorBrush x:Key="{dxt:LWKey BaseEdit.ReadOnlyBackground}" Color="#FF3C3C3C" />
    <SolidColorBrush x:Key="{dxt:LWKey TextEdit.ReadOnlyBackground}" Color="#FF3C3C3C" />
    <Style x:Key="{dxt:LWKey TokenEditor.DeleteButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Root" Background="Transparent">
                        <Path
                            x:Name="Path"
                            Fill="{StaticResource Brush.Foreground}"
                            Margin="4"
                            Style="{StaticResource UIShape.Clear}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Path" Value="{StaticResource Brush.HoverBackground}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsEditorActivated, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="Path" Value="{StaticResource Brush.HoverForeground}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsEditorActivated, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="Path" Value="{StaticResource Brush.HoverForeground}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsEditorActivated, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="Path" Value="{StaticResource Brush.HoverForeground}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="40" />
                <Setter Property="MinHeight" Value="40" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <dxe:DateNavigatorStateAppearance
        x:Key="{dxt:LWKey DateNavigator.AppearanceDisabledState}"
        Background="Transparent"
        BorderBrush="Transparent"
        Foreground="{StaticResource Brush.Foreground}"
        Opacity="0.2"
        PriorityIndex="8" />
    <dxe:DateNavigatorStateAppearance x:Key="{dxt:LWKey DateNavigator.AppearanceInactiveState}" Opacity="0.4" PriorityIndex="2" />
    <dxe:DateNavigatorStateAppearance x:Key="{dxt:LWKey DateNavigator.AppearanceHolidayState}" Foreground="{StaticResource Brush.AltForeground}" PriorityIndex="4" />
    <ControlTemplate x:Key="{dxt:LWKey DateNavigator.CellButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1" />
            <dx:DXBorder
                x:Name="IsSelection"
                Background="{StaticResource Brush.SelectionBackground}"
                BorderBrush="{StaticResource Brush.SelectionBorder}"
                BorderThickness="1"
                Opacity="0" />
            <dx:DXBorder
                x:Name="IsToday"
                Background="{StaticResource Brush.Border}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1"
                Opacity="0" />
            <dx:DXBorder
                x:Name="IsHot"
                Background="{StaticResource Brush.HoverBackground}"
                BorderBrush="{StaticResource Brush.HoverBorder}"
                BorderThickness="1"
                Opacity="0" />
            <dx:DXBorder
                x:Name="IsFocused"
                BorderBrush="{StaticResource Brush.Focused}"
                BorderThickness="1"
                Opacity="0" />
            <dx:ContentContainer
                x:Name="Content"
                Content="{TemplateBinding Content}"
                Foreground="{StaticResource Brush.Foreground}"
                HorizontalAlignment="Center"
                Margin="3"
                VerticalAlignment="Center" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsHot" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(dx:ContentContainer.Foreground).(SolidColorBrush.Color)" To="{StaticResource Color.HoverForeground}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed" />
                    <VisualState x:Name="Disabled" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesSpecial">
                    <VisualState x:Name="CellStateSpecial">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames dxi:ValueSetter.FontWeight="Bold" Storyboard.TargetName="Content" Storyboard.TargetProperty="FontWeight" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotSpecial" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesSelected">
                    <VisualState x:Name="CellStateSelected">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsSelection" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor2" To="{StaticResource Color.SelectionForeground}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotSelected" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesToday">
                    <VisualState x:Name="CellStateToday">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsToday" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor6" To="{StaticResource Color.SelectionForeground}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotToday" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesFocused">
                    <VisualState x:Name="CellStateNotFocused" />
                    <VisualState x:Name="CellStateFocused">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocused" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesHoliday">
                    <VisualState x:Name="CellStateHoliday">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="ForegroundSolidColor6" To="{StaticResource Color.AltForeground}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="CellStateNotHoliday" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesInactive">
                    <VisualState x:Name="CellStateActive" />
                    <VisualState x:Name="CellStateInactive">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CellStatesDisabled">
                    <VisualState x:Name="CellStateEnabled" />
                    <VisualState x:Name="CellStateDisabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.6" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <Thickness x:Key="{dxt:LWKey ComboBoxEdit.SelectedItemImagePadding}">3,0,0,0</Thickness>
    <Thickness x:Key="{dxt:LWKey ComboBoxEdit.SelectedItemContentPadding}">3,2,3,2</Thickness>
    <ControlTemplate x:Key="{dxt:LWKey EditorListBox.ItemTemplate}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Grid x:Name="Root" MinHeight="20">
            <Rectangle
                x:Name="IsFocus"
                Opacity="0"
                Stroke="{StaticResource Brush.HoverBorder}"
                StrokeDashArray="1 2"
                StrokeThickness="1" />
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" />
            <DockPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" LastChildFill="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <dxei:ImagePresenter DockPanel.Dock="Left" Padding="{StaticResource {dxt:LWKey ComboBoxEdit.SelectedItemImagePadding}}" />
                <dx:ContentContainer x:Name="Content" Margin="{StaticResource {dxt:LWKey ComboBoxEdit.SelectedItemContentPadding}}">
                    <ContentPresenter />
                </dx:ContentContainer>
            </DockPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" TargetName="Content" Value="{StaticResource Brush.HoverForeground}" />
                <Setter Property="Background" Value="{StaticResource Brush.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.HoverBorder}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" TargetName="Content" Value="{StaticResource Brush.SelectionForeground}" />
                <Setter Property="Background" Value="{StaticResource Brush.SelectionBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.SelectionBorder}" />
                <Setter Property="Opacity" TargetName="IsFocus" Value="0" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowItemHighlighting, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" TargetName="Content" Value="{StaticResource Brush.HoverForeground}" />
                <Setter Property="Background" Value="{StaticResource Brush.HoverBackground}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.HoverBorder}" />
            </MultiDataTrigger>
            <Trigger Property="dxi:AppearanceOptions.HasPadding" Value="True">
                <Setter Property="Margin" TargetName="Content" Value="{Binding Path=Padding, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused" Value="True" />
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Stroke" TargetName="IsFocus" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Content" Value="14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey RangeControl.RangeBarOutOfRangeBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource Brush.Border}" />
    </Style>
    <dx:ColorStaticResource x:Key="{dxt:LWKey DropDownButton.ArrowForegroundColor}" Color="{StaticResource Color.Foreground}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.ArrowForeground}" Color="{StaticResource {dxt:LWKey DropDownButton.ArrowForegroundColor}}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey DropDownButton.ArrowMouseOverForegroundColor}" Color="{StaticResource Color.HoverForeground}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.ArrowMouseOverForeground}" Color="{StaticResource {dxt:LWKey DropDownButton.ArrowMouseOverForegroundColor}}" />
    <dx:ColorStaticResource x:Key="{dxt:LWKey DropDownButton.ArrowPressedForegroundColor}" Color="{StaticResource Color.SelectionForeground}" />
    <SolidColorBrush x:Key="{dxt:LWKey DropDownButton.ArrowPressedForeground}" Color="{StaticResource {dxt:LWKey DropDownButton.ArrowPressedForegroundColor}}" />
    <dxi:RenderTemplate x:Key="{dxt:LWKey InplaceBaseEdit.DropDownGlyph}">
        <dxi:RenderBorder Name="Root" MinWidth="16">
            <dxbi:RenderArrowPath
                Name="Path"
                Data="F1 M 0,0 8,0 4,4 0,0 Z "
                Height="4"
                Stretch="Fill"
                Width="8" />
        </dxi:RenderBorder>
        <dxi:RenderTemplate.Triggers>
            <dxi:RenderTrigger DependencyProperty="{x:Static dx:ThemeManager.IsTouchEnabledProperty}" Value="True">
                <dxi:RenderSetter Property="MinWidth" TargetName="Root" Value="42" />
            </dxi:RenderTrigger>
        </dxi:RenderTemplate.Triggers>
    </dxi:RenderTemplate>
    <SolidColorBrush x:Key="{dxt:LWKey TrackBarEdit.Foreground}" Color="{StaticResource Color.Border}" />
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.VerticalBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource {dxt:LWKey TrackBarEdit.Foreground}}"
                BorderBrush="{StaticResource Brush.Window.Background}"
                BorderThickness="1"
                Width="4" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasTrackWidth" Value="True">
                <Setter Property="Width" TargetName="IsDefault" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.TrackWidth), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxei:ControlHelper.ShowFocusedState" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxei:ControlHelper.ShowFocusedState" Value="True" />
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="IsDefault" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey TrackBarEdit.HorizontalBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{StaticResource {dxt:LWKey TrackBarEdit.Foreground}}"
                BorderBrush="{StaticResource Brush.Window.Background}"
                BorderThickness="1"
                Height="4" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxei:BaseEditAppearanceOptions.HasTrackHeight" Value="True">
                <Setter Property="Height" TargetName="IsDefault" Value="{Binding Path=(dxei:BaseEditAppearanceOptions.TrackHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBackground" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderBrush" Value="True">
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasBorderThickness" Value="True">
                <Setter Property="BorderThickness" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxi:AppearanceOptions.HasCornerRadius" Value="True">
                <Setter Property="CornerRadius" TargetName="IsDefault" Value="{Binding Path=(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="dxei:ControlHelper.ShowFocusedState" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{StaticResource Brush.Focused}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxei:ControlHelper.ShowFocusedState" Value="True" />
                    <Condition Property="dxe:EditorAppearanceProperties.HasFocusedBorderBrush" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="IsDefault" Value="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Root" Value="0.38" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.UpGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Up}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.DownGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Down}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.LeftGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Left}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RightGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Right}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinUpGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Up}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinDownGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Down}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinLeftGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Left}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SpinRightGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Right}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.DropDownGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path x:Name="Path" Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Down}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.ApplyGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Apply}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.CancelGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Cancel}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RegularGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Regular}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RefreshGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Refresh}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.SearchGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Search}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.EditGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Edit}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.UndoGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Undo}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.RedoGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Editor.Redo}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.PlusGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.Plus}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey Buttons.MinusGlyph}">
        <Grid x:Name="Root" MinWidth="16">
            <Path Fill="{TemplateBinding TextElement.Foreground}" Style="{StaticResource UIShape.Navigation.Minus}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!--#endregion Editors-->
</ResourceDictionary>