<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dx="clr-namespace:DevExpress.Xpf.Core;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxb="clr-namespace:DevExpress.Xpf.Bars;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxbc="clr-namespace:DevExpress.Xpf.Bars.Customization;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxbi="clr-namespace:DevExpress.Xpf.Bars.Native;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxbt="clr-namespace:DevExpress.Xpf.Bars.Themes;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxe="clr-namespace:DevExpress.Xpf.Editors;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxi="clr-namespace:DevExpress.Xpf.Core.Native;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxmvvm="clr-namespace:DevExpress.Mvvm.UI;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxt="clr-namespace:DevExpress.Xpf.Utils.Themes;assembly=DevExpress.Xpf.Core.v24.1">

    <BooleanToVisibilityConverter x:Key="boolToVisibilityConverter" />
    <dx:BoolToVisibilityConverter x:Key="MyConverter" />
    <dx:EnumToVisibilityConverter x:Key="orientationConverter" />
    <dx:BooleanToVisibilityConverter x:Key="booleanToVisibilityInvertedConverter" Invert="True" />
    <dx:BooleanToVisibilityConverter x:Key="notInvertedBooleanToVisibilityConverter" Invert="False" />
    <dx:BooleanToVisibilityConverter x:Key="invertedBooleanToVisibilityConverter" Invert="True" />
    <sys:Double x:Key="Double.NaN">NaN</sys:Double>
    <dxb:BooleanToIntegerConverter x:Key="booleanToIntegerConverter" />
    <dx:BoolToObjectConverter x:Key="CheckedBorderOpacityConverter">
        <dx:BoolToObjectConverter.TrueValue>
            <sys:Double>0.5</sys:Double>
        </dx:BoolToObjectConverter.TrueValue>
        <dx:BoolToObjectConverter.FalseValue>
            <sys:Double>0</sys:Double>
        </dx:BoolToObjectConverter.FalseValue>
    </dx:BoolToObjectConverter>
    <dx:BooleanToVisibilityConverter x:Key="invertBoolToVisibilityConverter" Invert="True" />
    <dx:ControlBrushesToVisibilityConverter x:Key="controlToVisibilityConverter" />
    <dx:ControlBrushesToVisibilityConverter x:Key="invertControlToVisibilityConverter" Invert="True" />
    <dxbi:ThemePaletteNameConverter x:Key="ThemePaletteNameConverter" />
    <dxbi:ThemePaletteGlyphConverter x:Key="ThemePaletteGlyphConverter" />
    <sys:Double x:Key="{dxt:LWKey ThemedWindowSearchBox.MinWidth}">50</sys:Double>
    <sys:Double x:Key="{dxt:LWKey ThemedWindowSearchBox.MaxWidth}">200</sys:Double>

    <ControlTemplate x:Key="{dxt:LWKey SubMenuBarControl.PopupMenuColumnSplitterTemplate}" TargetType="{x:Type dxb:PopupMenuColumnSplitter}">
        <dx:DXBorder Background="#FFB0B0B0" Width="1" VerticalAlignment="Stretch" HorizontalAlignment="Center" />
    </ControlTemplate>


    <!--#region Bars\Themes\Generic\BarContainerControl.xaml-->


    <ItemsPanelTemplate x:Key="{dxt:LWKey BarContainerControl.ItemsPanelTemplate}">
        <dxb:BarContainerControlPanel />
    </ItemsPanelTemplate>
    <ControlTemplate x:Key="{dxt:LWKey BarContainerControl.EmptyBorderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXContentPresenter Content="{TemplateBinding Content}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey BarContainerControl.ControlTemplate}" TargetType="{x:Type dxb:BarContainerControl}">
        <ContentControl
            x:Name="PART_Border"
            Focusable="False"
            IsTabStop="False"
            Template="{DynamicResource {dxt:LWKey BarContainerControl.EmptyBorderTemplate}}">
            <Grid>
                <ContentControl
                    x:Name="PART_Background"
                    Focusable="False"
                    IsTabStop="False"
                    Template="{TemplateBinding dxb:BarContainerControlTemplateProvider.BackgroundTemplate}" />
                <ItemsPresenter x:Name="PART_ItemsPresenter" Margin="{TemplateBinding Padding}" />
            </Grid>

            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="Common">
                    <VisualState x:Name="ShowBorder" />
                    <VisualState x:Name="HideBorder" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </ContentControl>
    </ControlTemplate>
    <!--#endregion Bars\Themes\Generic\BarContainerControl.xaml-->

    <!--#region Bars\Themes\Generic\BarControl.xaml-->


    <Style x:Key="{dxt:LWKey BarControl.ContentExpanderStyle}" TargetType="{x:Type dx:DXExpander}">
        <Setter Property="HorizontalExpand" Value="FromLeftToRight" />
        <Setter Property="VerticalExpand" Value="None" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="{dxt:LWKey BarControl.DragWidgetStyle}" TargetType="{x:Type dxb:DragWidget}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarControl.DragWidgetTemplate}}" />
        <Setter Property="Cursor" Value="SizeAll" />
    </Style>

    <Style x:Key="{dxt:LWKey BarControl.QuickCustomizationButtonStyle}" TargetType="{x:Type dxb:BarQuickCustomizationButton}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarControl.QuickCustomizationButtonTemplate}}" />
    </Style>

    <ItemsPanelTemplate x:Key="{dxt:LWKey BarControl.ItemsPanelTemplate}">
        <dxb:BarClientPanel
            MinHeight="{DynamicResource {dxt:LWKey BarControl.ClientPanelMinHeight}}"
            Margin="{DynamicResource {dxt:LWKey BarControl.ClientPanelPadding}}"
            Background="Transparent"
            HorizontalIndent="{Binding TemplatedParent.Bar.BarItemHorzIndent, RelativeSource={RelativeSource TemplatedParent}}"
            IsItemsHost="True"
            QuickCustomizationButtonShowMode="{Binding TemplatedParent.ActualQuickCustomizationButtonShowMode, RelativeSource={RelativeSource TemplatedParent}}">
            <dxb:BarClientPanel.QuickCustomizationButton>
                <dxb:BarQuickCustomizationButton
                    x:Name="PART_Button"
                    Focusable="False"
                    Orientation="{Binding TemplatedParent.ContainerOrientation, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{Binding QuickCustomizationButtonStyle, RelativeSource={RelativeSource TemplatedParent}}" />
            </dxb:BarClientPanel.QuickCustomizationButton>
        </dxb:BarClientPanel>
    </ItemsPanelTemplate>

    <Style x:Key="{dxt:LWKey BarControl.QuickCustomizationButtonInMainMenuStyle}" TargetType="{x:Type dxb:BarQuickCustomizationButton}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarControl.QuickCustomizationButtonInMainMenuTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey BarControl.ThumbStyle}" TargetType="{x:Type Thumb}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarControl.ThumbTemplate}}" />
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey BarControl.ControlTemplate}" TargetType="{x:Type dxb:BarControl}">
        <dx:LayoutTransformPanel x:Name="PART_TransformPanel" Clockwise="True" Orientation="Vertical">
            <ContentControl
                x:Name="PART_Bar"
                Focusable="False"
                IsTabStop="False"
                Style="{DynamicResource {dxt:LWKey BarControl.BarStyle}}"
                Template="{DynamicResource {dxt:LWKey BarControl.BarTemplate}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <dxb:DragWidget x:Name="PART_DragWidget" Grid.Column="0" Style="{DynamicResource {dxt:LWKey BarControl.DragWidgetStyle}}" />
                    <ContentControl
                        x:Name="PART_Content"
                        Grid.Column="1"
                        Focusable="False"
                        IsTabStop="False"
                        Style="{DynamicResource {dxt:LWKey BarControl.BarContentStyle}}">
                        <dx:CompatibilityAdornerContainer x:Name="PART_Adorner">
                            <dxb:BarControlItemsPresenter x:Name="PART_ItemsPresenter" QuickCustomizationButtonStyle="{DynamicResource {dxt:LWKey BarControl.QuickCustomizationButtonStyle}}" ShowBackground="{TemplateBinding ShowBackground}" />
                        </dx:CompatibilityAdornerContainer>
                    </ContentControl>
                    <Thumb x:Name="PART_Thumb" Grid.Column="2" Style="{DynamicResource {dxt:LWKey BarControl.ThumbStyle}}" />
                </Grid>
            </ContentControl>
        </dx:LayoutTransformPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Bar.IsStatusBar, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="PART_Bar" Property="Template" Value="{DynamicResource {dxt:LWKey BarControl.StatusBarTemplate}}" />
                <Setter TargetName="PART_Bar" Property="Style" Value="{DynamicResource {dxt:LWKey BarControl.StatusBarStyle}}" />
                <Setter TargetName="PART_Content" Property="Style" Value="{DynamicResource {dxt:LWKey BarControl.StatusBarContentStyle}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Bar.IsMainMenu, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="PART_Bar" Property="Template" Value="{DynamicResource {dxt:LWKey BarControl.MainMenuTemplate}}" />
                <Setter TargetName="PART_Bar" Property="Style" Value="{DynamicResource {dxt:LWKey BarControl.MainMenuStyle}}" />
                <Setter TargetName="PART_Content" Property="Style" Value="{DynamicResource {dxt:LWKey BarControl.MainMenuContentStyle}}" />
                <Setter TargetName="PART_ItemsPresenter" Property="QuickCustomizationButtonStyle" Value="{DynamicResource {dxt:LWKey BarControl.QuickCustomizationButtonInMainMenuStyle}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Bar.DockInfo.Container.IsFloating, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="PART_Bar" Property="Style" Value="{DynamicResource {dxt:LWKey BarControl.FloatingBarStyle}}" />
            </DataTrigger>
            <Trigger Property="ShowBackground" Value="False">
                <Setter TargetName="PART_Bar" Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <ContentPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="ContainerOrientation" Value="Vertical">
                <Setter TargetName="PART_TransformPanel" Property="Orientation" Value="Horizontal" />
            </Trigger>
            <Trigger Property="ActualShowContent" Value="False">
                <Setter TargetName="PART_Adorner" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey BarControl.DropIndicatorStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarControl.DropIndicatorTemplate}}" />
    </Style>
    <ControlTemplate x:Key="{dxt:LWKey ToolBar.Template}" TargetType="{x:Type dxb:ToolBarControlBase}">
        <ContentControl x:Name="PART_Border" Focusable="False" Template="{TemplateBinding BorderTemplate}">
            <dxb:BarControl x:Name="PART_BarControl" ShowBackground="{TemplateBinding ShowBackground}" />
        </ContentControl>
        <ControlTemplate.Triggers>
            <Trigger Property="BorderTemplate" Value="{x:Null}">
                <Setter TargetName="PART_Border" Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <ContentPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Bars\Themes\Generic\BarControl.xaml-->

    <!--#region Bars\Themes\Generic\BarItemLinkMenuHeader.xaml-->


    <ControlTemplate x:Key="{dxt:LWKey BarItemLinkMenuHeader.Template}" TargetType="{x:Type dxb:BarItemLinkMenuHeaderControl}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <dxb:BarItemLinkMenuHeaderContentControl
                x:Name="PART_Content"
                Grid.Row="0"
                Content="{TemplateBinding ActualContent}"
                ContentTemplate="{TemplateBinding ActualContentTemplate}"
                Style="{DynamicResource {dxt:LWKey BarItemLinkMenuHeader.HeaderStyle}}"
                Template="{DynamicResource {dxt:LWKey BarItemLinkMenuHeader.HeaderTemplate}}"
                Visibility="{Binding Path=ActualShowContentHeader, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:BooleanToVisibilityConverter}}" />
            <Grid Grid.Row="1" Visibility="{Binding IsEmpty, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource booleanToVisibilityInvertedConverter}}">
                <dxb:GlyphSideControl
                    x:Name="PART_GlyphSideControl"
                    Width="{Binding LinksControl.GlyphSidePanelWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    HorizontalAlignment="Left"
                    Visibility="{Binding ActualItemsOrientation, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource orientationConverter}, ConverterParameter=Vertical}" />
                <dxb:BarItemMenuHeaderItemsControl
                    x:Name="PART_ItemsControl"
                    HorizontalGlyphPadding="{DynamicResource {dxt:LWKey BarItemLinkMenuHeader.HorizontalGlyphPadding}}"
                    ItemRenderTemplateSelector="{DynamicResource {dxt:LWKey BarItemRender.TemplateSelector}}"
                    Template="{DynamicResource {dxt:LWKey BarItemLinkMenuHeader.ItemsControlTemplate}}"
                    UseLightweightTemplates="{TemplateBinding UseLightweightTemplates}">
                    <dxb:BarItemMenuHeaderItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <dxb:BarItemLinkMenuHeaderItemsPanel HorizontalItems="{Binding Path=HorizontalItems, ElementName=PART_ItemsControl}" />
                        </ItemsPanelTemplate>
                    </dxb:BarItemMenuHeaderItemsControl.ItemsPanel>
                </dxb:BarItemMenuHeaderItemsControl>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxb:BarManager.ShowGlyphsInPopupMenus), RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_GlyphSideControl" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Bars\Themes\Generic\BarItemLinkMenuHeader.xaml-->

    <!--#region Bars\Themes\Generic\BarItems.xaml-->
    <sys:Double x:Key="{dxt:LWKey BarItem.DisableStateOpacityValue}">0.35</sys:Double>
    <Thickness x:Key="{dxt:LWKey BarItem.InMenuClientPadding}">0,3,0,3</Thickness>
    <Thickness x:Key="{dxt:LWKey BarItem.InMenuContentMargin}">6,0,14,0</Thickness>
    <Thickness x:Key="{dxt:LWKey BarItem.InMenuKeyGestureMargin}">6,0,14,0</Thickness>
    <Thickness x:Key="{dxt:LWKey BarCheckItem.BorderMarginInMenu}">-2</Thickness>




    <!--<DataTemplate x:Key="{dxt:LWKey BarItem.SnappedContentTemplate}">
        <dx:MeasurePixelSnapper SnapperType="Around">
            <dx:DXContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{Binding Path=Link.ActualContentTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarItemLinkControl}}}" />
        </dx:MeasurePixelSnapper>
    </DataTemplate>-->

    <Style x:Key="{dxt:LWKey BarSubItemThemeSelector.BarCheckItemStyle}" TargetType="dxb:BarCheckItem">
        <Setter Property="Content" Value="{Binding Theme.DisplayName, Mode=OneTime}" />
        <Setter Property="Glyph" Value="{Binding Theme.SmallGlyph, Mode=OneTime}" />
        <Setter Property="IsChecked" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding UseSvgGlyphs}" Value="True">
                <Setter Property="Glyph" Value="{Binding Theme.SvgGlyph, Mode=OneTime, Converter={dx:SvgUriToImageSourceConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Theme.SvgGlyph, Mode=OneTime}" Value="{x:Null}">
                <Setter Property="Glyph" Value="{Binding Theme.SmallGlyph, Mode=OneTime}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="{dxt:LWKey BarSubItemThemeSelector.ItemTemplate}">
        <ContentControl>
            <dxb:BarCheckItem Style="{DynamicResource {dxt:LWKey BarSubItemThemeSelector.BarCheckItemStyle}}" />
        </ContentControl>
    </DataTemplate>
    <Style x:Key="{dxt:LWKey BarSubItemThemeSelector.BarSubItemGroupStyle}" TargetType="dxb:BarSubItem">
        <Setter Property="Content" Value="{Binding Name}" />
        <Setter Property="ItemLinksSource" Value="{Binding Items}" />
        <Setter Property="ItemTemplate" Value="{DynamicResource {dxt:LWKey BarSubItemThemeSelector.ItemTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey BarSubItemThemeSelector.BarItemMenuHeaderGroupStyle}" TargetType="dxb:BarItemMenuHeader">
        <Setter Property="Content" Value="{Binding Name}" />
        <Setter Property="ItemsSource" Value="{Binding Items}" />
        <Setter Property="ItemTemplate" Value="{DynamicResource {dxt:LWKey BarSubItemThemeSelector.ItemTemplate}}" />
    </Style>
    <DataTemplate x:Key="{dxt:LWKey BarSubItemThemeSelector.GroupedInSubMenusItemTemplate}">
        <ContentControl>
            <dxb:BarSubItem Style="{DynamicResource {dxt:LWKey BarSubItemThemeSelector.BarSubItemGroupStyle}}" />
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey BarSubItemThemeSelector.GroupedListItemTemplate}">
        <ContentControl>
            <dxb:BarItemMenuHeader Style="{DynamicResource {dxt:LWKey BarSubItemThemeSelector.BarItemMenuHeaderGroupStyle}}" />
        </ContentControl>
    </DataTemplate>

    <Style x:Key="{dxt:LWKey BarSubItemThemeSelector.Style}" TargetType="dxb:BarSubItem">
        <Setter Property="Content" Value="Theme" />
        <Setter Property="ItemLinksSource" Value="{Binding}" />
        <Setter Property="ItemTemplate" Value="{DynamicResource {dxt:LWKey BarSubItemThemeSelector.ItemTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey BarSubItemThemeSelector.StyleGroupedInSubMenus}" BasedOn="{StaticResource {dxt:LWKey BarSubItemThemeSelector.Style}}" TargetType="dxb:BarSubItem">
        <Setter Property="ItemLinksSource" Value="{Binding Groups}" />
        <Setter Property="ItemTemplate" Value="{DynamicResource {dxt:LWKey BarSubItemThemeSelector.GroupedInSubMenusItemTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey BarSubItemThemeSelector.StyleGroupedList}" BasedOn="{StaticResource {dxt:LWKey BarSubItemThemeSelector.Style}}" TargetType="dxb:BarSubItem">
        <Setter Property="ItemLinksSource" Value="{Binding Groups}" />
        <Setter Property="ItemTemplate" Value="{DynamicResource {dxt:LWKey BarSubItemThemeSelector.GroupedListItemTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey BarSplitButtonItemThemeSelector.Style}" TargetType="dxb:BarSplitButtonItem">
        <Setter Property="Content" Value="Theme" />
        <Setter Property="ActAsDropDown" Value="True" />
    </Style>
    <!--#endregion Bars\Themes\Generic\BarItems.xaml-->

    <!--#region Bars\Themes\Generic\BarItemSearchControl.xaml-->
    <ControlTemplate x:Key="{dxt:LWKey BarItemSearchControl.PopupContentTemplate}">
        <Grid>
            <dxb:MenuBarControl Visibility="Hidden">
                <dxb:PopupMenu>
                    <dxb:BarButtonItem />
                </dxb:PopupMenu>
            </dxb:MenuBarControl>
            <ContentControl Content="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemsSource, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey BarItemSearchControl.Template}" TargetType="{x:Type dxbi:BarItemSearchControl}">
        <dxbi:BarItemSearchControlAutoSuggestEdit x:Name="PART_AutoSuggestEditRoot"
                                                  SearchDelay="{Binding RelativeSource={RelativeSource AncestorType=dx:ThemedWindow}, Path=SearchDelay}">
            <dxbi:BarItemSearchControlAutoSuggestEdit.Buttons>
                <dxbi:BarItemSearchControlSearchButtonInfo />
            </dxbi:BarItemSearchControlAutoSuggestEdit.Buttons>
        </dxbi:BarItemSearchControlAutoSuggestEdit>
    </ControlTemplate>
    <Style x:Key="{dxt:LWKey BarItemSearchControl.SearchIconButtonInfoStyle}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Image Margin="10,0,5,0"
                           Height="16" Width="16" HorizontalAlignment="Center" VerticalAlignment="Center"
                           Stretch="Fill" Source="{dx:SvgImageSource Uri={dx:UtilsResource Bars/Images/Search.svg}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False"/>
    </Style>
    <Style x:Key="{dxt:LWKey BarItemSearchControl.DeleteButtonInfoStyle}" TargetType="{x:Type dxe:ButtonClose}">
        <Setter Property="Margin" Value="2,0" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
        <Setter Property="Command" Value="{Binding Path=Command}" />
        <Setter Property="CommandParameter" Value="{Binding Path=CommandParameter}" />
        <Setter Property="CommandTarget" Value="{Binding Path=CommandTarget}" />
        <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled}" />
        <Setter Property="Visibility" Value="{Binding Path=(dxe:ButtonInfo.Visibility)}" />
        <Setter Property="ToolTip" Value="{Binding Path=ToolTip}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{Binding Path=(ToolTipService.ShowDuration)}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{Binding Path=(ToolTipService.InitialShowDelay)}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ButtonClose}">
                    <Image Margin="5,0" Height="12" Width="12" HorizontalAlignment="Center" VerticalAlignment="Center"
                           Stretch="Fill" Source="{dx:SvgImageSource Uri={dx:UtilsResource Bars/Images/Clear.svg}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate x:Key="{dxt:LWKey BarItemSearchControl.SearchIconButtonInfoTemplate}">
        <Button Style="{DynamicResource {dxt:LWKey BarItemSearchControl.SearchIconButtonInfoStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey BarItemSearchControl.DeleteButtonInfoTemplate}">
        <dx:DXBorder Margin="{Binding Path=ActualMargin}">
            <dxe:ButtonClose x:Name="PART_Item" Style="{DynamicResource {dxt:LWKey BarItemSearchControl.DeleteButtonInfoStyle}}" />
        </dx:DXBorder>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:LWKey BarItemSearchControl.DefaultTemplate}">
        <dxbi:BarItemSearchControl />
    </DataTemplate>

    <!-- Close
    <Path
                            Stretch="Fill"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}"
                            Width="11.3137" Height="11.3137"
                            Data="F1 M 9.89949,0L 11.3137,1.41421L 7.07106,5.65685L 11.3137,9.89949L 9.89949,11.3137L 5.65685,7.07107L 1.41421,11.3137L 0,9.89949L 4.24264,5.65685L -1.49012e-007,1.41422L 1.41421,2.86102e-006L 5.65685,4.24264L 9.89949,0 Z "
                            />
    -->


    <!-- Search
    <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}"
                          Stretch="Fill"
                          Height="14" Width="14" HorizontalAlignment="Center" VerticalAlignment="Center"
                          Data="F1 M 4,1.90735e-006C 6.20914,1.90735e-006 8,1.79086 8,4C 8,4.84917 7.73539,5.63653 7.28414,6.28414L 10,9L 9,10L 6.28414,7.28414C 5.63653,7.7354 4.84917,8 4,8C 1.79086,8 0,6.20914 0,4C 0,1.79086 1.79086,1.90735e-006 4,1.90735e-006 Z M 4,1C 2.34315,1 1,2.34315 1,4C 1,5.65686 2.34315,7 4,7C 5.65685,7 7,5.65686 7,4C 7,2.34315 5.65685,1 4,1 Z "
                          />
    -->
    <!--#endregion Bars\Themes\Generic\BarItemSearchControl.xaml-->

    <!--#region Bars\Themes\Generic\BarItemsInRadialMenu.xaml-->
    <Storyboard x:Key="PressStoryboard">
        <DoubleAnimation Storyboard.TargetName="BorderLine" Storyboard.TargetProperty="Opacity" To="0.25" Duration="0:0:0.21" />
    </Storyboard>
    <Storyboard x:Key="HighlightStoryboard">
        <DoubleAnimation Storyboard.TargetName="BorderLine" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.21" />
    </Storyboard>
    <Storyboard x:Key="ReleaseStoryboard">
        <DoubleAnimation Storyboard.TargetName="BorderLine" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.34" />
    </Storyboard>
    <Storyboard x:Key="CheckStoryboard">
        <DoubleAnimation Storyboard.TargetName="CheckedBorderLine" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.21" />
    </Storyboard>
    <Storyboard x:Key="UncheckStoryboard">
        <DoubleAnimation Storyboard.TargetName="CheckedBorderLine" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.34" />
    </Storyboard>



    <ControlTemplate x:Key="{dxt:LWKey BarItem.ControlTemplateInRadialMenu}" TargetType="{x:Type dxb:BarItemLinkControl}">
        <dxb:RadialMenuItem
            x:Name="item"
            Angle="{Binding Path=(dxb:RadialMenuItemsPanel.Angle), RelativeSource={RelativeSource TemplatedParent}}"
            ContentTopPadding="32"
            Focusable="False">
            <dxb:RadialMenuItem.Arrow>
                <Button
                    x:Name="PART_ArrowButton"
                    Focusable="False"
                    IsEnabled="{TemplateBinding ActualIsArrowEnabled}"
                    Visibility="{Binding ActualShowArrow, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:BooleanToVisibilityConverter Invert=False}}">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Grid x:Name="rootGrid" Background="{x:Null}">
                                <dxb:ArcBorder x:Name="PART_ArrowBorder" Fill="{DynamicResource {dxt:LWKey RadialMenuItem.BackgroundBrush}}" Thickness="26" />
                                <Path
                                    Margin="0,10,0,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Top"
                                    Data="F1 M 6,0L 1.18424e-015,6L 12,6L 6,0 Z "
                                    Fill="{DynamicResource {dxt:LWKey RadialMenuItem.PathBrush}}"
                                    IsHitTestVisible="False"
                                    Stretch="None" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding ElementName=PART_ArrowBorder, Path=IsMouseOver}" Value="true">
                                    <Setter TargetName="PART_ArrowBorder" Property="Fill" Value="{DynamicResource {dxt:LWKey RadialMenuItem.HoverPathBrush}}" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
            </dxb:RadialMenuItem.Arrow>
            <dxb:RadialMenuItem.Border>
                <Grid
                    x:Name="borderRootGrid"
                    Background="{x:Null}"
                    Focusable="False"
                    IsEnabled="{TemplateBinding ActualIsContentEnabled}">
                    <dx:DXBorder
                        x:Name="Border"
                        dxb:ArcBorder.ClipToSectorBounds="true"
                        Background="Transparent"
                        Focusable="False" />
                    <dxb:ArcBorder
                        x:Name="CheckedBorderLine"
                        Fill="{DynamicResource {dxt:LWKey RadialMenuItem.BackgroundBrush}}"
                        Focusable="False"
                        IsHitTestVisible="False"
                        Opacity="{TemplateBinding ActualIsChecked, Converter={StaticResource CheckedBorderOpacityConverter}}"
                        Thickness="2"
                        TopPadding="29" />
                    <dxb:ArcBorder
                        x:Name="BorderLine"
                        Fill="{DynamicResource {dxt:LWKey RadialMenuItem.BackgroundBrush}}"
                        Focusable="False"
                        IsHitTestVisible="False"
                        Opacity="0"
                        Thickness="3"
                        TopPadding="29" />
                </Grid>
            </dxb:RadialMenuItem.Border>
            <dxb:RadialMenuItem.Content>
                <StackPanel
                    x:Name="Content"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Focusable="False"
                    IsEnabled="{TemplateBinding ActualIsContentEnabled}"
                    RenderTransformOrigin="0.5,0.5">
                    <dx:MeasurePixelSnapperContentControl
                        HorizontalAlignment="Center"
                        ContentTemplate="{TemplateBinding ActualGlyphTemplate}"
                        Focusable="False"
                        Visibility="{Binding ActualShowGlyph, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:BooleanToVisibilityConverter Invert=False}}">
                        <dx:DXImage
                            x:Name="Image"
                            dxb:ImageColorizer.Color="{DynamicResource {dxt:LWKey RadialMenuItem.NormalImageColorizeColor}}"
                            dxb:ImageColorizer.IsEnabled="{TemplateBinding ActualAllowGlyphTheming}"
                            Focusable="False"
                            Source="{TemplateBinding ActualGlyph}"
                            Stretch="None" />
                    </dx:MeasurePixelSnapperContentControl>
                    <ContentControl
                        HorizontalAlignment="Center"
                        Content="{TemplateBinding ActualContent}"
                        ContentTemplate="{TemplateBinding ActualContentTemplate}"
                        Focusable="False"
                        Visibility="{Binding ActualShowContent, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:BooleanToVisibilityConverter Invert=False}}" />
                </StackPanel>
            </dxb:RadialMenuItem.Content>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="CommonStates_Normal" Storyboard="{StaticResource ReleaseStoryboard}" />
                    <VisualState x:Name="CommonStates_Highlighted" Storyboard="{StaticResource HighlightStoryboard}" />
                    <VisualState x:Name="CommonStates_Pressed" Storyboard="{StaticResource PressStoryboard}" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckedStates">
                    <VisualState x:Name="CheckedStates_Checked" Storyboard="{StaticResource CheckStoryboard}" />
                    <VisualState x:Name="CheckedStates_Unchecked" Storyboard="{StaticResource UncheckStoryboard}" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </dxb:RadialMenuItem>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused" Value="true" />
                    <Condition Property="IsMouseOver" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Highlighted" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_ArrowButton" Property="IsMouseOver" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Normal" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ActualIsHoverEnabled" Value="true" />
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_ArrowButton" Property="IsMouseOver" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Highlighted" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ActualIsHoverEnabled" Value="true" />
                    <Condition Property="IsPressed" Value="true" />
                    <Condition SourceName="PART_ArrowButton" Property="IsMouseOver" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Pressed" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="false" />
                    <Condition Property="IsKeyboardFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Normal" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ActualIsHoverEnabled" Value="false" />
                    <Condition Property="IsKeyboardFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Normal" />
            </MultiTrigger>
            <Trigger Property="ActualIsChecked" Value="True">
                <Setter Property="dxb:VisualStateSetter.CheckedGroupVisualState" Value="CheckedStates_Checked" />
            </Trigger>
            <Trigger Property="ActualIsChecked" Value="False">
                <Setter Property="dxb:VisualStateSetter.CheckedGroupVisualState" Value="CheckedStates_Unchecked" />
            </Trigger>
            <Trigger Property="ActualIsArrowEnabled" Value="false">
                <Setter TargetName="PART_ArrowButton" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="ActualIsContentEnabled" Value="false">
                <Setter TargetName="borderRootGrid" Property="Opacity" Value="0.5" />
                <Setter TargetName="Content" Property="Opacity" Value="0.5" />
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Bars\Themes\Generic\BarItemsInRadialMenu.xaml-->

    <!--#region Bars\Themes\Generic\FloatingBarPopup.xaml-->

    <ControlTemplate x:Key="{dxt:LWKey FloatingBarPopup.DragWidgetTemplate}" TargetType="{x:Type dxb:DragWidget}">
        <dx:DXBorder Background="Transparent" />
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey FloatingBarPopup.DragWidgetStyle}" TargetType="{x:Type dxb:DragWidget}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey FloatingBarPopup.DragWidgetTemplate}}" />
        <Setter Property="Cursor" Value="SizeAll" />
        <!--
        <Setter Property="dx:CustomCursorController.Cursor" Value="{StaticResource SizeAllCursor}"/>
        -->
    </Style>

    <Style x:Key="{dxt:LWKey FloatingBarPopup.SizeGripStyle}" TargetType="{x:Type Thumb}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey FloatingBarPopup.SizeGripTemplate}}" />
        <Setter Property="Width" Value="2" />
        <Setter Property="Cursor" Value="SizeWE" />
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey FloatingBarPopup.ContentTemplate}" TargetType="{x:Type dxb:FloatingBarPopupContentControl}">
        <ContentControl x:Name="PART_Border" IsTabStop="False" Template="{DynamicResource {dxt:LWKey FloatingBarPopup.BorderTemplate}}">
            <StackPanel>
                <ContentControl x:Name="PART_Caption" Template="{DynamicResource {dxt:LWKey FloatingBarPopup.CaptionBackgroundTemplate}}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <dxb:DragWidget x:Name="PART_DragWidget" Grid.ColumnSpan="2" Style="{DynamicResource {dxt:LWKey FloatingBarPopup.DragWidgetStyle}}" />
                        <dx:DXBorder ClipToBounds="True">
                            <TextBlock
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                Style="{DynamicResource {dxt:LWKey FloatingBarPopup.CaptionStyle}}"
                                Text="{Binding Path=DataContext.Caption, RelativeSource={RelativeSource TemplatedParent}}"
                                TextWrapping="NoWrap" />
                        </dx:DXBorder>
                        <Button x:Name="PART_CloseButton" Grid.Column="1" Style="{DynamicResource {dxt:LWKey FloatingBarPopup.CloseButtonStyle}}" />
                    </Grid>
                </ContentControl>
                <Grid Grid.Row="1">
                    <dxb:FloatingBarContainerControl x:Name="PART_FloatingBarContainer" />
                    <Thumb x:Name="PART_SizeGrip" HorizontalAlignment="Right" Style="{DynamicResource {dxt:LWKey FloatingBarPopup.SizeGripStyle}}" />
                </Grid>
            </StackPanel>
        </ContentControl>
    </ControlTemplate>
    <!--#endregion Bars\Themes\Generic\FloatingBarPopup.xaml-->

    <!--#region Bars\Themes\Generic\Gallery.xaml-->


    <ControlTemplate x:Key="{dxt:LWKey GalleryControl.StandaloneControlTemplate}" TargetType="{x:Type dxb:GalleryControl}">
        <Grid Background="Transparent">
            <ContentControl
                x:Name="PART_StandaloneBarManagerContainer"
                Width="0"
                Height="0"
                HorizontalAlignment="Left"
                VerticalAlignment="Top" />
            <ContentControl Template="{DynamicResource {dxt:LWKey GalleryControl.StandaloneBackgroundTemplate}}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource invertControlToVisibilityConverter}}" />
            <dx:DXBorder
                x:Name="PART_UserBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource controlToVisibilityConverter}}" />
            <ContentControl Margin="{Binding ElementName=PART_UserBorder, Path=BorderThickness}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                <ContentControl HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Style="{DynamicResource {dxt:LWKey GalleryControl.StandaloneContentStyle}}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>


                        <ToggleButton
                            x:Name="PART_Caption"
                            FocusVisualStyle="{x:Null}"
                            Style="{DynamicResource {dxt:LWKey GalleryControl.StandaloneCaptionStyle}}"
                            Template="{TemplateBinding ActualFilterControlTemplate}"
                            Visibility="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.AllowFilter, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource boolToVisibilityConverter}}">

                            <Grid>

                                <ContentControl
                                    Width="0"
                                    Content="Wg"
                                    Focusable="False"
                                    Opacity="0"
                                    Style="{TemplateBinding ActualNormalFilterCaptionTextStyle}"
                                    Visibility="{Binding Path=IsMouseOver, ElementName=PART_Caption, Converter={StaticResource invertBoolToVisibilityConverter}}" />
                                <ContentControl
                                    Width="0"
                                    Content="Wg"
                                    Focusable="False"
                                    Opacity="0"
                                    Style="{TemplateBinding SelectedFilterCaptionTextStyle}"
                                    Visibility="{Binding Path=IsMouseOver, ElementName=PART_Caption, Converter={StaticResource boolToVisibilityConverter}}" />

                                <ContentControl
                                    Content="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.FilterCaption, RelativeSource={RelativeSource Mode=Self}}"
                                    ContentTemplate="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.FilterCaptionTemplate, RelativeSource={RelativeSource Mode=Self}}"
                                    Focusable="False"
                                    Style="{TemplateBinding ActualNormalFilterCaptionTextStyle}"
                                    Visibility="{Binding Path=IsMouseOver, ElementName=PART_Caption, Converter={StaticResource invertBoolToVisibilityConverter}}" />
                                <ContentControl
                                    Content="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.FilterCaption, RelativeSource={RelativeSource Mode=Self}}"
                                    ContentTemplate="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.FilterCaptionTemplate, RelativeSource={RelativeSource Mode=Self}}"
                                    Focusable="False"
                                    Style="{TemplateBinding ActualSelectedFilterCaptionTextStyle}"
                                    Visibility="{Binding Path=IsMouseOver, ElementName=PART_Caption, Converter={StaticResource boolToVisibilityConverter}}" />
                            </Grid>

                        </ToggleButton>

                        <ContentControl Grid.Row="1" Style="{DynamicResource {dxt:LWKey GalleryControl.StandaloneGroupsBackgroundStyle}}" Template="{DynamicResource {dxt:LWKey GalleryControl.StandaloneGroupsBackgroundTemplate}}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <dxb:GalleryGroupsViewer x:Name="PART_ScrollHost" Grid.Column="0" Style="{DynamicResource {dxt:LWKey GalleryControl.StandaloneGroupsViewportStyle}}">
                                    <dxb:GalleryItemGroupsControl
                                        x:Name="PART_Groups"
                                        ItemBorderTemplate="{TemplateBinding ActualItemBorderTemplate}"
                                        ItemGlyphBorderTemplate="{TemplateBinding ActualItemGlyphBorderTemplate}"
                                        ItemsSource="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.Groups, RelativeSource={RelativeSource Mode=Self}}" />
                                </dxb:GalleryGroupsViewer>
                                <ContentControl
                                    Grid.Column="1"
                                    VerticalContentAlignment="Stretch"
                                    Style="{DynamicResource {dxt:LWKey GalleryControl.StandaloneVerticalScrollBarContainerStyle}}"
                                    Visibility="{TemplateBinding ActualVerticalScrollBarVisibility}">
                                    <ScrollBar x:Name="PART_VerticalScrollBar" Orientation="Vertical" ViewportSize="{Binding ElementName=PART_ScrollHost, Path=ViewportSize.Height}" />
                                </ContentControl>
                            </Grid>
                        </ContentControl>

                    </Grid>
                </ContentControl>
            </ContentControl>

        </Grid>
    </ControlTemplate>


    <ControlTemplate x:Key="{dxt:LWKey GalleryItemControl.DefaultControlTemplate}" TargetType="{x:Type dxb:GalleryItemControl}">
        <ControlTemplate.Resources>
            <PopupAnimation x:Key="{x:Static SystemParameters.ToolTipPopupAnimationKey}">None</PopupAnimation>
        </ControlTemplate.Resources>
        <Grid x:Name="PART_Panel" Margin="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualItemMargin, RelativeSource={RelativeSource Self}}" Visibility="{Binding Path=Item.IsVisible, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">
            <dxb:ItemBorderControl
                x:Name="PART_Border"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                NormalTemplate="{Binding Path=ItemBorderTemplate, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dxb:GalleryItemGroupsControl}}}" />

            <dxb:SplitLayoutPanel Content1Location="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemGlyphLocation, RelativeSource={RelativeSource Self}}" Style="{DynamicResource {dxt:LWKey GalleryItemControl.SplitLayoutStyle}}">

                <dxb:SplitLayoutPanel.Content1>
                    <Grid
                        Margin="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualItemGlyphMargin, RelativeSource={RelativeSource Self}}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Visibility="{Binding Path=ActualIsItemGlyphVisible, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">

                        <dxb:ItemBorderControl
                            x:Name="PART_GlyphBorder"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            NormalTemplate="{Binding Path=ItemGlyphBorderTemplate, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dxb:GalleryItemGroupsControl}}}"
                            Visibility="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.IsItemGlyphVisible, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource boolToVisibilityConverter}}" />
                        <dxb:ContentViewport x:Name="PART_GlyphViewport" HorizontalContentAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemGlyphHorizontalAlignment, RelativeSource={RelativeSource Mode=Self}}" VerticalContentAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemGlyphVerticalAlignment, RelativeSource={RelativeSource Mode=Self}}">
                            <dx:ImagePixelSnapper>
                                <dx:DXImage
                                    x:Name="PART_Image"
                                    Width="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemGlyphSize.Width, RelativeSource={RelativeSource Mode=Self}}"
                                    Height="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemGlyphSize.Height, RelativeSource={RelativeSource Mode=Self}}"
                                    Margin="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualItemGlyphBorderPadding, RelativeSource={RelativeSource Self}}"
                                    RenderOptions.BitmapScalingMode="HighQuality"
                                    SnapsToDevicePixels="True"
                                    Source="{Binding Path=Item.Glyph, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                    Stretch="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemGlyphStretch, RelativeSource={RelativeSource Mode=Self}}" />
                            </dx:ImagePixelSnapper>
                        </dxb:ContentViewport>

                    </Grid>

                </dxb:SplitLayoutPanel.Content1>
                <dxb:SplitLayoutPanel.Content2>

                    <dxb:ContentViewport
                        x:Name="PART_ContentViewport"
                        HorizontalAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemContentHorizontalAlignment, RelativeSource={RelativeSource Mode=Self}}"
                        VerticalAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemContentVerticalAlignment, RelativeSource={RelativeSource Mode=Self}}"
                        HorizontalContentAlignment="Stretch"
                        VerticalContentAlignment="Stretch"
                        Visibility="{Binding Path=ActualIsItemContentVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>

                            <ContentControl
                                Name="PART_Caption"
                                Grid.Row="0"
                                Margin="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualItemCaptionMargin, RelativeSource={RelativeSource Self}}"
                                HorizontalAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemCaptionHorizontalAlignment, RelativeSource={RelativeSource Self}}"
                                VerticalAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemCaptionVerticalAlignment, RelativeSource={RelativeSource Self}}"
                                Content="{TemplateBinding ActualCaption}"
                                ContentTemplate="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemCaptionTemplate, RelativeSource={RelativeSource Mode=Self}}"
                                Focusable="False"
                                IsTabStop="False"
                                SnapsToDevicePixels="True"
                                Style="{TemplateBinding ActualCaptionTextStyle}"
                                Visibility="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.IsItemCaptionVisible, RelativeSource={RelativeSource Self}, Converter={StaticResource boolToVisibilityConverter}}" />


                            <ContentControl
                                Name="PART_Description"
                                Grid.Row="1"
                                Margin="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualItemDescriptionMargin, RelativeSource={RelativeSource Self}}"
                                HorizontalAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemDescriptionHorizontalAlignment, RelativeSource={RelativeSource Mode=Self}}"
                                VerticalAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemDescriptionVerticalAlignment, RelativeSource={RelativeSource Mode=Self}}"
                                Content="{TemplateBinding ActualDescription}"
                                ContentTemplate="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.ItemDescriptionTemplate, RelativeSource={RelativeSource Mode=Self}}"
                                Focusable="False"
                                IsTabStop="False"
                                SnapsToDevicePixels="True"
                                Style="{TemplateBinding ActualDescriptionTextStyle}"
                                Visibility="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.IsItemDescriptionVisible, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource boolToVisibilityConverter}}" />
                        </Grid>
                    </dxb:ContentViewport>

                </dxb:SplitLayoutPanel.Content2>

            </dxb:SplitLayoutPanel>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="EnabledStates">
                    <VisualState x:Name="Enabled">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PART_Panel" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PART_Panel" Storyboard.TargetProperty="Opacity" To="0.35" Duration="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey GalleryItemGroupControl.ControlTemplate}" TargetType="{x:Type dxb:GalleryItemGroupControl}">
        <ContentControl
            Focusable="False"
            IsTabStop="False"
            Template="{DynamicResource {dxt:LWKey GalleryItemGroupControl.BackgroundTemplate}}"
            Visibility="{Binding Path=Group.IsVisible, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <ContentControl
                    x:Name="PART_Caption"
                    DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                    Focusable="False"
                    IsTabStop="False"
                    Template="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualGroupCaptionControlTemplate, RelativeSource={RelativeSource Mode=Self}}"
                    Visibility="{Binding Path=ActualIsCaptionVisible, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}">

                    <Grid>
                        <ContentControl
                            Width="0"
                            Margin="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualGroupCaptionMargin, RelativeSource={RelativeSource Mode=Self}}"
                            HorizontalAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.GroupCaptionHorizontalAlignment, RelativeSource={RelativeSource Mode=Self}}"
                            VerticalAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.GroupCaptionVerticalAlignment, RelativeSource={RelativeSource Mode=Self}}"
                            Content="Wg"
                            Focusable="False"
                            IsTabStop="False"
                            Style="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualGroupCaptionTextStyle, RelativeSource={RelativeSource Mode=Self}}" />
                        <dx:PixelSnapper>
                            <ContentControl
                                Margin="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualGroupCaptionMargin, RelativeSource={RelativeSource Mode=Self}}"
                                HorizontalAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.GroupCaptionHorizontalAlignment, RelativeSource={RelativeSource Mode=Self}}"
                                VerticalAlignment="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.GroupCaptionVerticalAlignment, RelativeSource={RelativeSource Mode=Self}}"
                                Content="{Binding Path=Group.Caption, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                ContentTemplate="{Binding Path=(dxb:GalleryControl.GalleryControl).Gallery.GroupCaptionTemplate, RelativeSource={RelativeSource Mode=Self}}"
                                Focusable="False"
                                IsTabStop="False"
                                Style="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualGroupCaptionTextStyle, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </dx:PixelSnapper>
                    </Grid>

                </ContentControl>
                <ContentControl
                    Grid.Row="1"
                    Focusable="False"
                    IsTabStop="False"
                    Template="{DynamicResource {dxt:LWKey GalleryItemGroupControl.ItemsBackgroundTemplate}}">
                    <ItemsPresenter x:Name="PART_Items" Margin="{Binding Path=(dxb:GalleryControl.GalleryControl).ActualGroupItemsMargin, RelativeSource={RelativeSource Mode=Self}}" />
                </ContentControl>
            </Grid>
        </ContentControl>
    </ControlTemplate>

    <ItemsPanelTemplate x:Key="{dxt:LWKey GalleryItemGroupControl.ItemsPanelTemplate}">
        <dxb:GalleryItemsPanel />
    </ItemsPanelTemplate>

    <ControlTemplate x:Key="{dxt:LWKey GalleryItemGroupsControl.ControlTemplate}" TargetType="{x:Type dxb:GalleryItemGroupsControl}">
        <ItemsPresenter />
    </ControlTemplate>

    <ItemsPanelTemplate x:Key="{dxt:LWKey GalleryItemGroupsControl.ItemsPanelTemplate}">
        <dxb:GalleryItemGroupsPanel />
    </ItemsPanelTemplate>


    <ControlTemplate x:Key="{dxt:LWKey GalleryItemControl.HoverToolTipTemplate}" TargetType="{x:Type dxb:GalleryItemHoverToolTip}">
        <Grid>
            <ContentControl
                Width="{Binding LargeGlyphSize.Width, RelativeSource={RelativeSource TemplatedParent}}"
                Height="{Binding LargeGlyphSize.Height, RelativeSource={RelativeSource TemplatedParent}}"
                Opacity="0"
                Template="{DynamicResource {dxt:LWKey GalleryItemControl.HoverContentControlTemplate}}">
                <dx:DXImage
                    x:Name="PART_LargeImage"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Opacity="0"
                    RenderOptions.BitmapScalingMode="HighQuality"
                    SnapsToDevicePixels="True"
                    Source="{TemplateBinding Glyph}"
                    Stretch="UniformToFill" />
            </ContentControl>
            <ContentControl HorizontalAlignment="Center" VerticalAlignment="Center" Template="{DynamicResource {dxt:LWKey GalleryItemControl.HoverContentControlTemplate}}">
                <dx:DXImage
                    x:Name="PART_Image"
                    Width="{Binding SmallGlyphSize.Width, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding SmallGlyphSize.Height, RelativeSource={RelativeSource TemplatedParent}}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    RenderOptions.BitmapScalingMode="HighQuality"
                    SnapsToDevicePixels="True"
                    Source="{TemplateBinding Glyph}"
                    Stretch="Fill" />
            </ContentControl>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{dxt:LWKey GalleryThemeSelector.ItemStyle}" TargetType="dxb:GalleryItem">
        <Setter Property="Caption" Value="{Binding Path=Theme.DisplayName, Mode=OneTime}" />
        <Setter Property="Glyph" Value="{Binding Path=Theme.LargeGlyph, Mode=OneTime}" />
        <Setter Property="HoverGlyph" Value="{Binding Path=Theme.LargeGlyph, Mode=OneTime}" />
        <Setter Property="IsChecked" Value="{Binding Path=IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding UseSvgGlyphs}" Value="True">
                <Setter Property="Glyph" Value="{Binding Theme.SvgGlyph, Mode=OneTime, Converter={dx:SvgUriToImageSourceConverter}}" />
                <Setter Property="HoverGlyph" Value="{Binding Theme.SvgGlyph, Mode=OneTime, Converter={dx:SvgUriToImageSourceConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Theme.SvgGlyph, Mode=OneTime}" Value="{x:Null}">
                <Setter Property="Glyph" Value="{Binding Path=Theme.LargeGlyph, Mode=OneTime}" />
                <Setter Property="HoverGlyph" Value="{Binding Path=Theme.LargeGlyph, Mode=OneTime}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.InSplitButtonItemStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.ItemStyle}}" TargetType="dxb:GalleryItem" />
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.InRibbonGalleryItemStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.ItemStyle}}" TargetType="dxb:GalleryItem" />
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.InRibbonDropDownGalleryItemStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.ItemStyle}}" TargetType="dxb:GalleryItem" />

    <DataTemplate x:Key="{dxt:LWKey GalleryThemeSelector.ItemTemplate}">
        <ContentControl>
            <dxb:GalleryItem />
        </ContentControl>
    </DataTemplate>

    <Style x:Key="{dxt:LWKey GalleryThemeSelector.GroupStyle}" TargetType="dxb:GalleryItemGroup">
        <Setter Property="Caption" Value="{Binding Path=Name}" />
        <Setter Property="ItemsSource" Value="{Binding Path=Items}" />
        <Setter Property="ItemStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.ItemStyle}}" />
        <Setter Property="ItemTemplate" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.ItemTemplate}}" />
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.InSplitButtonGroupStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.GroupStyle}}" TargetType="dxb:GalleryItemGroup">
        <Setter Property="ItemStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.InSplitButtonItemStyle}}" />
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.InRibbonGalleryGroupStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.GroupStyle}}" TargetType="dxb:GalleryItemGroup">
        <Setter Property="ItemStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.InRibbonGalleryItemStyle}}" />
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.InRibbonDropDownGalleryGroupStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.GroupStyle}}" TargetType="dxb:GalleryItemGroup">
        <Setter Property="ItemStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.InRibbonDropDownGalleryItemStyle}}" />
    </Style>


    <DataTemplate x:Key="{dxt:LWKey GalleryThemeSelector.GroupTemplate}">
        <ContentControl>
            <dxb:GalleryItemGroup />
        </ContentControl>
    </DataTemplate>

    <Style x:Key="{dxt:LWKey GalleryThemeSelector.Style}" TargetType="dxb:Gallery">
        <Setter Property="AllowHoverAnimation" Value="True" />
        <Setter Property="AllowHoverImages" Value="True" />
        <Setter Property="FilterCaption" Value="Themes" />
        <Setter Property="GroupsSource" Value="{Binding Path=Groups}" />
        <Setter Property="HoverGlyphSize" Value="48,48" />
        <Setter Property="IsItemCaptionVisible" Value="False" />
        <Setter Property="IsItemDescriptionVisible" Value="False" />
        <Setter Property="ItemCaptionHorizontalAlignment" Value="Center" />
        <Setter Property="ItemCheckMode" Value="Single" />
        <Setter Property="ColCount" Value="3" />
        <Setter Property="RowCount" Value="2" />
        <Setter Property="GroupTemplate" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.GroupTemplate}}" />
        <Setter Property="GroupStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.GroupStyle}}" />
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.InSplitButtonGalleryStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.Style}}" TargetType="dxb:Gallery">
        <Setter Property="GroupStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.InSplitButtonGroupStyle}}" />
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.InRibbonGalleryStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.Style}}" TargetType="dxb:Gallery">
        <Setter Property="ItemAutoHeight" Value="True" />
        <Setter Property="RowCount" Value="2" />
        <Setter Property="GroupStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.InRibbonGalleryGroupStyle}}" />
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.InRibbonDropDownGalleryStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.Style}}" TargetType="dxb:Gallery">
        <Setter Property="AllowHoverImages" Value="False" />
        <Setter Property="IsItemCaptionVisible" Value="True" />
        <Setter Property="ItemGlyphLocation" Value="Top" />
        <Setter Property="IsGroupCaptionVisible" Value="True" />
        <Setter Property="GroupStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.InRibbonDropDownGalleryGroupStyle}}" />
        <Setter Property="RowCount" Value="4" />
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.PaletteInRibbonGalleryItemStyle}" TargetType="dxb:GalleryItem">
        <Setter Property="Caption" Value="{Binding Converter={StaticResource ThemePaletteNameConverter}, Mode=OneWay}" />
        <Setter Property="IsChecked" Value="{Binding Path=IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        <Setter Property="Glyph" Value="{Binding Theme.Name, Mode=OneTime, Converter={StaticResource ThemePaletteGlyphConverter}}" />
        <!--<Setter Property="Glyph" Value="{Binding Theme.SvgGlyph, Converter={dx:SvgUriToImageSourceConverter}}"/>-->
        <!--<Setter Property="dxbi:ThemeSelectorSvgPaletteBehavior.Enabled" Value="True"/>-->
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.PaletteInRibbonGalleryGroupStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.GroupStyle}}" TargetType="dxb:GalleryItemGroup">
        <Setter Property="ItemStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.PaletteInRibbonGalleryItemStyle}}" />
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.PaletteInRibbonGalleryStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.Style}}" TargetType="dxb:Gallery">
        <Setter Property="AllowHoverImages" Value="False" />
        <Setter Property="AllowHoverAnimation" Value="False" />
        <Setter Property="ItemAutoHeight" Value="False" />
        <Setter Property="ColCount" Value="4" />
        <Setter Property="ItemGlyphSize" Value="80,60" />
        <Setter Property="ItemMargin" Value="0" />
        <Setter Property="GroupStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.PaletteInRibbonGalleryGroupStyle}}" />
    </Style>
    <Style x:Key="{dxt:LWKey GalleryThemeSelector.PaletteInRibbonDropDownGalleryStyle}" BasedOn="{StaticResource {dxt:LWKey GalleryThemeSelector.Style}}" TargetType="dxb:Gallery">
        <Setter Property="AllowHoverImages" Value="False" />
        <Setter Property="AllowHoverAnimation" Value="False" />
        <Setter Property="IsItemCaptionVisible" Value="True" />
        <Setter Property="ItemGlyphLocation" Value="Top" />
        <Setter Property="IsGroupCaptionVisible" Value="True" />
        <Setter Property="AllowFilter" Value="False" />
        <Setter Property="GroupStyle" Value="{DynamicResource {dxt:LWKey GalleryThemeSelector.PaletteInRibbonGalleryGroupStyle}}" />
        <Setter Property="ColCount" Value="4" />
        <Setter Property="ItemGlyphSize" Value="60,42" />
        <Setter Property="RowCount" Value="4" />
        <Setter Property="ItemAutoHeight" Value="True" />
    </Style>
    <!--#endregion Bars\Themes\Generic\Gallery.xaml-->

    <!--#region Bars\Themes\Generic\RadialMenuControl.xaml-->
    <Storyboard x:Key="ExpandStoryboard">
        <DoubleAnimation Storyboard.TargetName="layersRotateTransform" Storyboard.TargetProperty="Angle" From="-20" To="0" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layersScaleTransform" Storyboard.TargetProperty="ScaleX" From="0.9" To="1" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layersScaleTransform" Storyboard.TargetProperty="ScaleY" From="0.9" To="1" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layers" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.100" />
        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="layers" Storyboard.TargetProperty="IsHitTestVisible" Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="True" />
        </BooleanAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="CollapseStoryboard">
        <DoubleAnimation Storyboard.TargetName="layersRotateTransform" Storyboard.TargetProperty="Angle" From="0" To="-20" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layersScaleTransform" Storyboard.TargetProperty="ScaleX" From="1" To="0.9" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layersScaleTransform" Storyboard.TargetProperty="ScaleY" From="1" To="0.9" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layers" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.100" />
        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="layers" Storyboard.TargetProperty="IsHitTestVisible" Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="False" />
        </BooleanAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="RegularPopupOpenStoryboard">
        <DoubleAnimation Storyboard.TargetName="layersScaleTransform" Storyboard.TargetProperty="ScaleX" From="1" To="0.9" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layersScaleTransform" Storyboard.TargetProperty="ScaleY" From="1" To="0.9" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layers" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="centerButtons" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.100" />
        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="layers" Storyboard.TargetProperty="IsHitTestVisible" Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="False" />
        </BooleanAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="RegularPopupCloseStoryboard">
        <DoubleAnimation Storyboard.TargetName="layersScaleTransform" Storyboard.TargetProperty="ScaleX" From="0.9" To="1" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layersScaleTransform" Storyboard.TargetProperty="ScaleY" From="0.9" To="1" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layers" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="centerButtons" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.100" />
        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="layers" Storyboard.TargetProperty="IsHitTestVisible" Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="True" />
        </BooleanAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="SwitchToContent2Storyboard">
        <DoubleAnimation Storyboard.TargetName="layer1ScaleTransform" Storyboard.TargetProperty="ScaleX" From="1" To="0.9" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layer1ScaleTransform" Storyboard.TargetProperty="ScaleY" From="1" To="0.9" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="PART_Glyph1" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.200" />
        <DoubleAnimation Storyboard.TargetName="Layer1Control" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.100" />

        <DoubleAnimation BeginTime="0:0:0.100" Storyboard.TargetName="layer2ScaleTransform" Storyboard.TargetProperty="ScaleX" From="0.9" To="1" Duration="0:0:0.100" />
        <DoubleAnimation BeginTime="0:0:0.100" Storyboard.TargetName="layer2ScaleTransform" Storyboard.TargetProperty="ScaleY" From="0.9" To="1" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="PART_Glyph2" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.200" />
        <DoubleAnimation BeginTime="0:0:0.100" Storyboard.TargetName="Layer2Control" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.100" />


        <BooleanAnimationUsingKeyFrames
            BeginTime="0:0:0.100"
            Storyboard.TargetName="PART_Glyph1"
            Storyboard.TargetProperty="IsHitTestVisible"
            Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="False" />
        </BooleanAnimationUsingKeyFrames>
        <BooleanAnimationUsingKeyFrames
            BeginTime="0:0:0.100"
            Storyboard.TargetName="Layer1Control"
            Storyboard.TargetProperty="IsHitTestVisible"
            Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="False" />
        </BooleanAnimationUsingKeyFrames>
        <BooleanAnimationUsingKeyFrames
            BeginTime="0:0:0.100"
            Storyboard.TargetName="PART_Glyph2"
            Storyboard.TargetProperty="IsHitTestVisible"
            Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="True" />
        </BooleanAnimationUsingKeyFrames>
        <BooleanAnimationUsingKeyFrames
            BeginTime="0:0:0.100"
            Storyboard.TargetName="Layer2Control"
            Storyboard.TargetProperty="IsHitTestVisible"
            Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="True" />
        </BooleanAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="SwitchToContent1Storyboard">
        <DoubleAnimation Storyboard.TargetName="layer2ScaleTransform" Storyboard.TargetProperty="ScaleX" From="1" To="0.9" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="layer2ScaleTransform" Storyboard.TargetProperty="ScaleY" From="1" To="0.9" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="PART_Glyph2" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.200" />
        <DoubleAnimation Storyboard.TargetName="Layer2Control" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.100" />

        <DoubleAnimation BeginTime="0:0:0.100" Storyboard.TargetName="layer1ScaleTransform" Storyboard.TargetProperty="ScaleX" From="0.9" To="1" Duration="0:0:0.100" />
        <DoubleAnimation BeginTime="0:0:0.100" Storyboard.TargetName="layer1ScaleTransform" Storyboard.TargetProperty="ScaleY" From="0.9" To="1" Duration="0:0:0.100" />
        <DoubleAnimation Storyboard.TargetName="PART_Glyph1" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.200" />
        <DoubleAnimation BeginTime="0:0:0.100" Storyboard.TargetName="Layer1Control" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.100" />


        <BooleanAnimationUsingKeyFrames
            BeginTime="0:0:0.100"
            Storyboard.TargetName="PART_Glyph2"
            Storyboard.TargetProperty="IsHitTestVisible"
            Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="False" />
        </BooleanAnimationUsingKeyFrames>
        <BooleanAnimationUsingKeyFrames
            BeginTime="0:0:0.100"
            Storyboard.TargetName="Layer2Control"
            Storyboard.TargetProperty="IsHitTestVisible"
            Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="False" />
        </BooleanAnimationUsingKeyFrames>
        <BooleanAnimationUsingKeyFrames
            BeginTime="0:0:0.100"
            Storyboard.TargetName="PART_Glyph1"
            Storyboard.TargetProperty="IsHitTestVisible"
            Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="True" />
        </BooleanAnimationUsingKeyFrames>
        <BooleanAnimationUsingKeyFrames
            BeginTime="0:0:0.100"
            Storyboard.TargetName="Layer1Control"
            Storyboard.TargetProperty="IsHitTestVisible"
            Duration="0:0:0.0">
            <DiscreteBooleanKeyFrame Value="True" />
        </BooleanAnimationUsingKeyFrames>
    </Storyboard>


    <ControlTemplate x:Key="{dxt:LWKey RadialMenuControl.ControlTemplate}" TargetType="{x:Type dxb:RadialMenuControl}">
        <Grid>
            <Grid
                x:Name="layers"
                IsHitTestVisible="False"
                Opacity="0"
                RenderTransformOrigin="0.5,0.5">
                <Grid.RenderTransform>
                    <TransformGroup>
                        <RotateTransform x:Name="layersRotateTransform" />
                        <ScaleTransform x:Name="layersScaleTransform" />
                    </TransformGroup>
                </Grid.RenderTransform>
                <ContentPresenter x:Name="Layer1Control" Content="{TemplateBinding Content1}" RenderTransformOrigin="0.5, 0.5">
                    <ContentPresenter.RenderTransform>
                        <TransformGroup>
                            <RotateTransform x:Name="layer1RotateTransform" />
                            <ScaleTransform x:Name="layer1ScaleTransform" />
                        </TransformGroup>
                    </ContentPresenter.RenderTransform>
                </ContentPresenter>
                <ContentPresenter
                    x:Name="Layer2Control"
                    Content="{TemplateBinding Content2}"
                    IsHitTestVisible="False"
                    Opacity="0"
                    RenderTransformOrigin="0.5,0.5">
                    <ContentPresenter.RenderTransform>
                        <TransformGroup>
                            <RotateTransform x:Name="layer2RotateTransform" />
                            <ScaleTransform x:Name="layer2ScaleTransform" />
                        </TransformGroup>
                    </ContentPresenter.RenderTransform>
                </ContentPresenter>
            </Grid>
            <Grid x:Name="centerButtons">
                <dxb:RadialMenuCenterButton
                    x:Name="PART_CenterButton"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    FocusVisualStyle="{x:Null}"
                    Template="{DynamicResource {dxt:LWKey RadialMenuControl.CenterButtonTemplate}}">
                    <Grid>
                        <dx:MeasurePixelSnapperContentControl
                            x:Name="PART_Glyph1"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            ContentTemplate="{TemplateBinding Glyph1Template}"
                            Focusable="False">
                            <dx:DXImage
                                MaxWidth="32"
                                MaxHeight="32"
                                Focusable="False"
                                Source="{TemplateBinding Glyph1}" />
                        </dx:MeasurePixelSnapperContentControl>
                        <dx:MeasurePixelSnapperContentControl
                            x:Name="PART_Glyph2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            ContentTemplate="{TemplateBinding Glyph2Template}"
                            Focusable="False"
                            Opacity="0">
                            <dx:DXImage
                                MaxWidth="32"
                                MaxHeight="32"
                                Focusable="False"
                                Source="{TemplateBinding Glyph2}" />
                        </dx:MeasurePixelSnapperContentControl>
                    </Grid>
                </dxb:RadialMenuCenterButton>
            </Grid>

        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="ExpandStoryboard" Storyboard="{StaticResource ExpandStoryboard}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="RegularPopupCloseStoryboard" />
                    <BeginStoryboard x:Name="CollapseStoryboard" Storyboard="{StaticResource CollapseStoryboard}" />
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsRegularPopupOpened" Value="True">
                <Trigger.EnterActions>
                    <StopStoryboard BeginStoryboardName="ExpandStoryboard" />
                    <BeginStoryboard x:Name="RegularPopupOpenStoryboard" Storyboard="{StaticResource RegularPopupOpenStoryboard}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard x:Name="RegularPopupCloseStoryboard" Storyboard="{StaticResource RegularPopupCloseStoryboard}" />
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="ActiveContentIndex" Value="2">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="SwitchToContent2Storyboard" Storyboard="{StaticResource SwitchToContent2Storyboard}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard x:Name="SwitchToContent1Storyboard" Storyboard="{StaticResource SwitchToContent1Storyboard}" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ItemsPanelTemplate x:Key="{dxt:LWKey RadialMenuLevelControl.ItemsPanelTemplate}">
        <dxb:RadialMenuItemsPanel FirstSectorIndex="{Binding TemplatedParent.FirstSectorIndex, RelativeSource={RelativeSource TemplatedParent}}" />
    </ItemsPanelTemplate>
    <ControlTemplate x:Key="{dxt:LWKey RadialMenuLevelControl.ControlTemplate}" TargetType="{x:Type dxb:RadialMenuLevelControl}">
        <Grid>
            <dxb:CircleBorder x:Name="PART_Border" Style="{DynamicResource {dxt:LWKey RadialMenuLevelControl.CircleBorderStyle}}" />
            <ItemsPresenter x:Name="PART_ItemsPresenter" />
        </Grid>
    </ControlTemplate>
    <!--#endregion Bars\Themes\Generic\RadialMenuControl.xaml-->

    <!--#region Bars\Themes\Generic\SubMenuBarControl.xaml-->



    <ItemsPanelTemplate x:Key="{dxt:LWKey SubMenuBarControl.ItemsPanelTemplate}">
        <dxb:SubMenuClientPanel Margin="{DynamicResource {dxt:LWKey BarControl.ClientPanelPadding}}" IsItemsHost="True" />
    </ItemsPanelTemplate>

    <Style x:Key="{dxt:LWKey SubMenuBarControl.DropIndicatorStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SubMenuBarControl.DropIndicatorTemplate}}" />
    </Style>

    <Style x:Key="{dxt:LWKey SubMenuBarControl.ScrollViewerStyle}" TargetType="{x:Type dxb:SubMenuScrollViewer}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClipToBounds" Value="True" />
    </Style>

    <ControlTemplate x:Key="{dxt:LWKey SubMenuBarControl.ControlTemplate}" TargetType="{x:Type dxb:SubMenuBarControl}">
        <ContentControl
            FocusVisualStyle="{x:Null}"
            Focusable="False"
            IsTabStop="False"
            Style="{DynamicResource {dxt:LWKey BarControl.MenuContentStyle}}">
            <Grid Background="Transparent">
                <Grid>
                    <ContentControl
                        x:Name="PART_ContentSide"
                        IsTabStop="False"
                        SnapsToDevicePixels="True"
                        Template="{DynamicResource {dxt:LWKey SubMenuBarControl.ContentSideBorderTemplate}}"
                        Visibility="{TemplateBinding ContentSideVisibility}" />
                    <Grid HorizontalAlignment="Left">
                        <dx:DXBorder
                            Width="{Binding Path=MaxGlyphSize.Width, RelativeSource={RelativeSource TemplatedParent}}"
                            Margin="{TemplateBinding GlyphPadding}"
                            HorizontalAlignment="Left"
                            SnapsToDevicePixels="True" />
                    </Grid>
                </Grid>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <RepeatButton
                        x:Name="PART_UpButton"
                        Grid.Row="0"
                        Grid.Column="1"
                        dxb:PopupMenuManager.IgnorePopupItemClickBehaviour="True"
                        Focusable="false"
                        IsTabStop="False"
                        Style="{DynamicResource {dxt:LWKey SubMenuBarControl.ScrollUpButtonStyle}}"
                        Visibility="Collapsed" />
                    <dx:LayoutTransformPanel
                        Grid.Row="1"
                        Grid.Column="0"
                        Focusable="false"
                        Orientation="Horizontal">
                        <RepeatButton
                            x:Name="PART_LeftButton"
                            Grid.Row="1"
                            Grid.Column="0"
                            dxb:PopupMenuManager.IgnorePopupItemClickBehaviour="True"
                            Focusable="false"
                            IsTabStop="False"
                            Style="{DynamicResource {dxt:LWKey SubMenuBarControl.ScrollUpButtonStyle}}"
                            Visibility="Collapsed" />
                    </dx:LayoutTransformPanel>
                    <dxb:SubMenuScrollViewer
                        x:Name="PART_ScrollViewer"
                        Grid.Row="1"
                        Grid.Column="1"
                        Style="{DynamicResource {dxt:LWKey SubMenuBarControl.ScrollViewerStyle}}">
                        <dxb:ReversedPanel>
                            <dxb:GlyphSidePanel
                                x:Name="PART_GlyphSide"
                                HorizontalAlignment="Stretch"
                                SnapsToDevicePixels="True"
                                Visibility="{TemplateBinding GlyphSideVisibility}" />
                            <dx:CompatibilityAdornerContainer x:Name="PART_Adorner">
                                <ItemsPresenter x:Name="PART_ItemsPresenter" />
                            </dx:CompatibilityAdornerContainer>
                        </dxb:ReversedPanel>
                    </dxb:SubMenuScrollViewer>
                    <dx:LayoutTransformPanel
                        Grid.Row="1"
                        Grid.Column="2"
                        Focusable="false"
                        Orientation="Horizontal">
                        <RepeatButton
                            x:Name="PART_RightButton"
                            dxb:PopupMenuManager.IgnorePopupItemClickBehaviour="True"
                            Focusable="false"
                            IsTabStop="False"
                            Style="{DynamicResource {dxt:LWKey SubMenuBarControl.ScrollDownButtonStyle}}"
                            Visibility="Collapsed" />
                    </dx:LayoutTransformPanel>
                    <RepeatButton
                        x:Name="PART_DownButton"
                        Grid.Row="2"
                        Grid.Column="1"
                        dxb:PopupMenuManager.IgnorePopupItemClickBehaviour="True"
                        Focusable="false"
                        IsTabStop="False"
                        Style="{DynamicResource {dxt:LWKey SubMenuBarControl.ScrollDownButtonStyle}}"
                        Visibility="Collapsed" />
                </Grid>
            </Grid>
        </ContentControl>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxt:LWKey MenuBarControl.ControlTemplate}" TargetType="{x:Type dxb:MenuBarControl}">
        <dx:DXBorder Background="{TemplateBinding Background}">
            <dx:DXContentPresenter x:Name="PART_LinksPresenter" />
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxt:LWKey OfficeTabletItemsControl.ControlTemplate}" TargetType="{x:Type dxb:OfficeTabletItemsControl}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid Name="header">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <dx:DXBorder
                    x:Name="PART_Background"
                    Grid.Column="0"
                    Grid.ColumnSpan="2"
                    Style="{DynamicResource {dxt:LWKey OfficeTabletItemsControl.BackgroundStyle}}" />
                <Button
                    x:Name="PART_BackButton"
                    Grid.Column="0"
                    dxb:PopupMenuManager.IgnorePopupItemClickBehaviour="True"
                    Command="{TemplateBinding BackCommand}"
                    Content="{TemplateBinding BackCommandText}"
                    Cursor="Arrow"
                    Style="{DynamicResource {dxt:LWKey OfficeTabletItemsControl.BackButtonStyle}}" />
                <TextBlock
                    x:Name="PART_Caption"
                    Grid.Column="1"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    IsHitTestVisible="False"
                    Style="{DynamicResource {dxt:LWKey OfficeTabletItemsControl.CaptionStyle}}"
                    Text="{TemplateBinding Caption}"
                    TextAlignment="Center" />
            </Grid>
            <ItemsPresenter Name="PART_ItemsPresenter" Grid.Row="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="BackCommandText" Value="{x:Null}">
                <Setter TargetName="PART_BackButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_Caption" Property="HorizontalAlignment" Value="Center" />
            </Trigger>
            <Trigger Property="BackCommandText" Value="">
                <Setter TargetName="PART_BackButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_Caption" Property="HorizontalAlignment" Value="Center" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Bars\Themes\Generic\SubMenuBarControl.xaml-->

    <!--#region Bars\Themes\Generic\DefaultStyles.xaml-->
    <Style x:Key="BaseUndoButtonStyle" TargetType="{x:Type dxb:BarItem}">
        <Setter Property="Glyph" Value="{dx:SvgImageSource Uri={dx:UtilsResource Core/Images/Undo.svg}}" />
        <Setter Property="KeyGesture" Value="Ctrl+Z" />
        <Setter Property="dxb:BarManager.KeyGestureWorkingMode" Value="UnhandledKeyGestureFromRoot" />
        <Setter Property="Content" Value="{dxb:BarsLocalizer HistoryItem_Undo}" />
        <Setter Property="IsEnabled" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command, Converter={dxmvvm:ObjectToBooleanConverter}}" />
    </Style>
    <Style x:Key="BaseRedoButtonStyle" TargetType="{x:Type dxb:BarItem}">
        <Setter Property="Glyph" Value="{dx:SvgImageSource Uri={dx:UtilsResource Core/Images/Redo.svg}}" />
        <Setter Property="KeyGesture" Value="Ctrl+Y" />
        <Setter Property="dxb:BarManager.KeyGestureWorkingMode" Value="UnhandledKeyGestureFromRoot" />
        <Setter Property="Content" Value="{dxb:BarsLocalizer HistoryItem_Redo}" />
        <Setter Property="IsEnabled" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command, Converter={dxmvvm:ObjectToBooleanConverter}}" />
    </Style>
    <Style x:Key="FloatingBarPopupDefaultStyle" TargetType="{x:Type dxb:FloatingBarPopup}">
        <Setter Property="StaysOpen" Value="True" />
        <Setter Property="Placement" Value="Relative" />
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="AllowsTransparency" Value="True" />
    </Style>
    <Style x:Key="ItemBorderControlDefaultStyle" TargetType="{x:Type dxb:ItemBorderControl}">
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="BarDragElementPopupDefaultStyle" TargetType="{x:Type dxbc:BarDragElementPopup}">
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Placement" Value="Relative" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="CursorOffset" Value="8,8" />
    </Style>
    <Style x:Key="BarPopupBaseDefaultStyle" TargetType="{x:Type dxb:BarPopupBase}">
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="MinWidth" Value="80" />
    </Style>
    <Style x:Key="RadialContextMenuDefaultStyle" TargetType="{x:Type dxb:RadialContextMenu}">
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Placement" Value="Custom" />
        <Setter Property="HorizontalOffset" Value="8" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="RadialMenuPopupBorderControlDefaultStyle" TargetType="{x:Type dxb:RadialMenuPopupBorderControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxb:RadialMenuPopupBorderControl}">
                    <ContentPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:ThemeManager.TreeWalker).ThemeName, RelativeSource={RelativeSource Self}}" Value="Office2016Black">
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GalleryItemControlDefaultStyle" TargetType="{x:Type dxb:GalleryItemControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style x:Key="TextSplitterControlDefaultStyle" TargetType="{x:Type dxb:TextSplitterControl}">
        <Setter Property="Focusable" Value="False" />
    </Style>

    <Style x:Key="SubMenuBarControlDefaultStyle" TargetType="{x:Type dxb:SubMenuBarControl}">
        <Setter Property="UseLightweightTemplates" Value="{dxb:BarsUseLightweightTemplates {dxt:LWKey BarItemRender.UseLightweightTemplates}}" />
        <Setter Property="ItemRenderTemplateSelector" Value="{DynamicResource {dxt:LWKey BarItemRender.TemplateSelector}}" />
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:LWKey SubMenuBarControl.ItemsPanelTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SubMenuBarControl.ControlTemplate}}" />
        <Setter Property="DropIndicatorStyle" Value="{DynamicResource {dxt:LWKey SubMenuBarControl.DropIndicatorStyle}}" />
        <Setter Property="GlyphPadding" Value="{DynamicResource {dxt:LWKey SubMenuBarControl.GlyphPadding}}" />
        <Setter Property="MenuHeaderStatesHolder" Value="{DynamicResource {dxt:LWKey BarItemLinkMenuHeader.StatesHolder}}" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey BarSvgPalette.SvgPaletteInMenu}}" />
    </Style>
    <Style x:Key="RadialMenuControlDefaultStyle" TargetType="{x:Type dxb:RadialMenuControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey RadialMenuControl.ControlTemplate}}" />
        <Setter Property="ToolTipVerticalOffset" Value="-4" />
        <Setter Property="DefaultGlyphTemplate" Value="{DynamicResource {dxt:LWKey RadialMenuControl.DefaultGlyphTemplate}}" />
        <Setter Property="DefaultBackButtonGlyphTemplate" Value="{DynamicResource {dxt:LWKey RadialMenuControl.DefaultBackButtonGlyphTemplate}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey BarSvgPalette.SvgPaletteInRadialMenu}}" />
    </Style>
    <Style x:Key="RadialMenuLevelControlDefaultStyle" TargetType="{x:Type dxb:RadialMenuLevelControl}">
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:LWKey RadialMenuLevelControl.ItemsPanelTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey RadialMenuLevelControl.ControlTemplate}}" />
    </Style>
    <Style x:Key="MenuBarControlDefaultStyle" TargetType="{x:Type dxb:MenuBarControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey MenuBarControl.ControlTemplate}}" />
    </Style>

    <Style x:Key="BarControlDefaultStyle" TargetType="{x:Type dxb:BarControl}">
        <Setter Property="UseLightweightTemplates" Value="{dxb:BarsUseLightweightTemplates {dxt:LWKey BarItemRender.UseLightweightTemplates}}" />
        <Setter Property="ItemRenderTemplateSelector" Value="{DynamicResource {dxt:LWKey BarItemRender.TemplateSelector}}" />
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:LWKey BarControl.ItemsPanelTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarControl.ControlTemplate}}" />
        <Setter Property="DropIndicatorStyle" Value="{DynamicResource {dxt:LWKey BarControl.DropIndicatorStyle}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey BarSvgPalette.SvgPaletteInBar}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=LinksHolder.(dxb:Bar.IsStatusBar)}" Value="True">
                <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey BarSvgPalette.SvgPaletteInStatusBar}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=LinksHolder.(dxb:Bar.IsMainMenu)}" Value="True">
                <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:LWKey BarSvgPalette.SvgPaletteInMainMenu}}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LinksHolder.(dxi:AppearanceOptions.HasMargin)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource Self}, Path=LinksHolder.(dxi:AppearanceOptions.Margin)}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BarContainerControlDefaultStyle" TargetType="{x:Type dxb:BarContainerControl}">
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:LWKey BarContainerControl.ItemsPanelTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarContainerControl.ControlTemplate}}" />
        <Setter Property="dxb:BarContainerControlTemplateProvider.BorderTemplate" Value="{DynamicResource {dxt:LWKey BarContainerControl.BorderTemplate}}" />
        <Setter Property="dxb:BarContainerControlTemplateProvider.EmptyBorderTemplate" Value="{DynamicResource {dxt:LWKey BarContainerControl.EmptyBorderTemplate}}" />
        <Setter Property="dxb:BarContainerControlTemplateProvider.BackgroundTemplate" Value="{DynamicResource {dxt:LWKey BarContainerControl.BackgroundTemplate}}" />
        <Setter Property="dxb:BarContainerControlTemplateProvider.HorizontalPadding" Value="{DynamicResource {dxt:LWKey BarContainerControl.HorizontalPadding}}" />
        <Setter Property="dxb:BarContainerControlTemplateProvider.VerticalPadding" Value="{DynamicResource {dxt:LWKey BarContainerControl.VerticalPadding}}" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Padding" Value="{Binding ActualPadding, RelativeSource={RelativeSource Mode=Self}}" />
    </Style>
    <Style x:Key="FloatingBarPopupContentControlDefaultStyle" TargetType="{x:Type dxb:FloatingBarPopupContentControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey FloatingBarPopup.ContentTemplate}}" />
        <Setter Property="DragWidgetStyle" Value="{DynamicResource {dxt:LWKey FloatingBarPopup.DragWidgetStyle}}" />
        <Setter Property="SizeGripStyle" Value="{DynamicResource {dxt:LWKey FloatingBarPopup.SizeGripStyle}}" />
        <Setter Property="CloseButtonStyle" Value="{DynamicResource {dxt:LWKey FloatingBarPopup.CloseButtonStyle}}" />
        <Setter Property="QuickCustomizationButtonStyle" Value="{DynamicResource {dxt:LWKey FloatingBarPopup.QuickCustomizationButtonStyle}}" />
        <Setter Property="CaptionStyle" Value="{DynamicResource {dxt:LWKey FloatingBarPopup.CaptionStyle}}" />
    </Style>
    <Style x:Key="BarItemLinkControlDefaultStyle" TargetType="{x:Type dxb:BarItemLinkControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxb:BarItemLinkControl}">
                    <dxb:BarItemLayoutPanel x:Name="PART_LayoutPanel" />
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="RotateWhenVertical" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="RotateWhenVertical" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_LayoutPanel" Property="GlyphRenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" CenterX="0.5" CenterY="0.5" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ContainerType" Value="RadialMenu">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItem.ControlTemplateInRadialMenu}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BarButtonItemLinkControlDefaultStyle" BasedOn="{StaticResource BarItemLinkControlDefaultStyle}" TargetType="{x:Type dxb:BarButtonItemLinkControl}">
        <Style.Triggers>
            <Trigger Property="ContainerType" Value="RadialMenu">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItem.ControlTemplateInRadialMenu}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BarSubItemLinkControlDefaultStyle" BasedOn="{StaticResource BarItemLinkControlDefaultStyle}" TargetType="{x:Type dxb:BarSubItemLinkControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxb:BarItemLinkControl}">
                    <Grid>
                        <dxb:BarItemLayoutPanel x:Name="PART_LayoutPanel" />
                        <dx:LayoutTransformPanel x:Name="PART_PopupTransformPanel" Clockwise="False" Orientation="Vertical">
                            <dx:DXBorder x:Name="PART_PopupPlacementTarget">
                                <dxb:PopupMenuBase x:Name="PART_Popup" />
                            </dx:DXBorder>
                        </dx:LayoutTransformPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="RotateWhenVertical" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_LayoutPanel" Property="ArrowTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="RotateWhenVertical" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_PopupTransformPanel" Property="Orientation" Value="Horizontal" />
                            <Setter TargetName="PART_LayoutPanel" Property="GlyphRenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" CenterX="0.5" CenterY="0.5" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_LayoutPanel" Property="ArrowTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-180" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ContainerType" Value="RadialMenu">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItem.ControlTemplateInRadialMenu}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BarSplitButtonItemLinkControlDefaultStyle" BasedOn="{StaticResource BarItemLinkControlDefaultStyle}" TargetType="{x:Type dxb:BarSplitButtonItemLinkControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxb:BarItemLinkControl}">
                    <Grid>
                        <dxb:BarItemLayoutPanel x:Name="PART_LayoutPanel" />
                        <dx:LayoutTransformPanel x:Name="PART_PopupTransformPanel" Clockwise="False" Orientation="Vertical">
                            <dx:NonLogicalDecorator x:Name="PART_PopupPlacementTarget" />
                        </dx:LayoutTransformPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="RotateWhenVertical" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_LayoutPanel" Property="ArrowTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="RotateWhenVertical" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_PopupTransformPanel" Property="Orientation" Value="Horizontal" />
                            <Setter TargetName="PART_LayoutPanel" Property="GlyphRenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" CenterX="0.5" CenterY="0.5" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_LayoutPanel" Property="ArrowTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-180" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ContainerType" Value="RadialMenu">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItem.ControlTemplateInRadialMenu}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BarCheckItemLinkControlDefaultStyle" BasedOn="{StaticResource BarItemLinkControlDefaultStyle}" TargetType="{x:Type dxb:BarCheckItemLinkControl}">
        <Style.Triggers>
            <Trigger Property="ContainerType" Value="RadialMenu">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItem.ControlTemplateInRadialMenu}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BarEditItemLinkControlDefaultStyle" BasedOn="{StaticResource BarItemLinkControlDefaultStyle}" TargetType="{x:Type dxb:BarEditItemLinkControl}">
        <Style.Triggers>
            <Trigger Property="ContainerType" Value="RadialMenu">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItem.ControlTemplateInRadialMenu}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BarStaticItemLinkControlDefaultStyle" BasedOn="{StaticResource BarItemLinkControlDefaultStyle}" TargetType="{x:Type dxb:BarStaticItemLinkControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxb:BarStaticItemLinkControl}">
                    <Grid>
                        <ContentControl
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            dx:FocusHelper2.Focusable="False"
                            Template="{DynamicResource {dxt:LWKey BarStaticItem.BorderTemplate}}"
                            Visibility="{Binding ShowBorder, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
                        <dx:DXBorder Padding="{TemplateBinding ActualBorderPadding}">
                            <dxb:BarItemLayoutPanel x:Name="PART_LayoutPanel" />
                        </dx:DXBorder>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderPadding" Value="{DynamicResource {dxt:LWKey BarStaticItem.BorderPadding}}" />
        <Style.Triggers>
            <Trigger Property="ContainerType" Value="RadialMenu">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItem.ControlTemplateInRadialMenu}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BarItemLinkSeparatorControlDefaultStyle" TargetType="{x:Type dxb:BarItemLinkSeparatorControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="dxb:BarItemLinkControlTemplateProvider.Template" Value="{DynamicResource {dxt:LWKey BarItemSeparator.Template}}" />
        <Setter Property="dxb:BarItemLinkControlTemplateProvider.TemplateInMenu" Value="{DynamicResource {dxt:LWKey BarItemSeparator.InMenuTemplate}}" />
        <Setter Property="dxb:BarItemLinkControlTemplateProvider.TemplateInRibbonStatusBarLeftPart" Value="{DynamicResource {dxt:LWKey BarItemSeparator.InRibbonStatusBarLeftPartTemplate}}" />
        <Setter Property="dxb:BarItemLinkControlTemplateProvider.TemplateInRibbonStatusBarRightPart" Value="{DynamicResource {dxt:LWKey BarItemSeparator.InRibbonStatusBarRightPartTemplate}}" />
        <Setter Property="dxb:BarItemLinkControlTemplateProvider.TemplateInStatusBar" Value="{DynamicResource {dxt:LWKey BarItemSeparator.InStatusBarTemplate}}" />
        <Setter Property="dxb:BarItemLinkControlTemplateProvider.TemplateInRibbonPageGroup" Value="{DynamicResource {dxt:LWKey BarItemSeparator.InRibbonPageGroupTemplate}}" />
        <Setter Property="dxb:BarItemLinkControlTemplateProvider.TemplateInRibbonPageHeader" Value="{DynamicResource {dxt:LWKey BarItemSeparator.InRibbonPageHeaderTemplate}}" />
        <Setter Property="dxb:BarItemLinkControlTemplateProvider.TemplateInRibbonQuickAccessToolbar" Value="{DynamicResource {dxt:LWKey BarItemSeparator.InRibbonQuickAccessToolbarTemplate}}" />
        <Setter Property="dxb:BarItemLinkControlTemplateProvider.TemplateInRibbonQuickAccessToolbarFooter" Value="{DynamicResource {dxt:LWKey BarItemSeparator.InRibbonQuickAccessToolbarFooterTemplate}}" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Background" Value="#FF7B7B7B" />
    </Style>

    <Style x:Key="BarItemLinkMenuHeaderControlDefaultStyle" TargetType="{x:Type dxb:BarItemLinkMenuHeaderControl}">
        <Setter Property="UseLightweightTemplates" Value="{dxb:BarsUseLightweightTemplates {dxt:LWKey BarItemRender.UseLightweightTemplates}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItemLinkMenuHeader.Template}}" />
    </Style>

    <Style x:Key="BarSplitCheckItemLinkControlDefaultStyle" BasedOn="{StaticResource BarSplitButtonItemLinkControlDefaultStyle}" TargetType="{x:Type dxb:BarSplitCheckItemLinkControl}">
        <Style.Triggers>
            <Trigger Property="ContainerType" Value="RadialMenu">
                <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItem.ControlTemplateInRadialMenu}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BarItemDragElementContentDefaultStyle" TargetType="{x:Type dxbc:BarItemDragElementContent}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey Customization.DragElementTemplate}}" />
    </Style>
    <Style x:Key="PopupContainerDefaultStyle" TargetType="{x:Type dxb:PopupContainer}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey PopupControlContainer.ControlTemplate}}" />
    </Style>
    <Style x:Key="OfficeTabletItemsControlDefaultStyle" TargetType="{x:Type dxb:OfficeTabletItemsControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey OfficeTabletItemsControl.ControlTemplate}}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="FrameworkElement">
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <TranslateTransform />
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxb:ExpandablePanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AddRemoveAnimationDuration" Value="0:0:0.3" />
        <Setter Property="AddRemoveAnimationAccelerationRatio" Value="0.5" />
        <Setter Property="AddRemoveAnimationDecelerationRation" Value="0.2" />
        <Setter Property="SizeAnimationDuration" Value="0:00:00.2" />
        <Setter Property="SizeAnimationAccelerationRatio" Value="0.3" />
        <Setter Property="SizeAnimationDecelerationRation" Value="0.3" />
        <Setter Property="SizeAnimationBeginTime" Value="0:0:0.2" />
    </Style>

    <Style x:Key="GalleryControlDefaultStyle" TargetType="{x:Type dxb:GalleryControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GalleryControl.StandaloneControlTemplate}}" />
        <Setter Property="DefaultItemMargin" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultItemMargin}}" />
        <Setter Property="DefaultItemGlyphMargin" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultGlyphMargin}}" />
        <Setter Property="DefaultItemCaptionMargin" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultCaptionMargin}}" />
        <Setter Property="DefaultItemDescriptionMargin" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultDescriptionMargin}}" />
        <Setter Property="DefaultGroupCaptionMargin" Value="{DynamicResource {dxt:LWKey GalleryItemGroupControl.DefaultGroupCaptionMargin}}" />
        <Setter Property="DefaultGroupItemsMargin" Value="{DynamicResource {dxt:LWKey GalleryItemGroupControl.DefaultGroupItemsMargin}}" />
        <Setter Property="ItemCaptionTextStyle" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultItemCaptionTextStyle}}" />
        <Setter Property="ItemDescriptionTextStyle" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultItemDescriptionTextStyle}}" />
        <Setter Property="GroupCaptionTextStyle" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultGroupCaptionTextStyle}}" />
        <Setter Property="NormalFilterCaptionTextStyle" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultNormalFilterCaptionTextStyle}}" />
        <Setter Property="SelectedFilterCaptionTextStyle" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultSelectedFilterCaptionTextStyle}}" />
        <Setter Property="HintTextStyle" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultHintTextStyle}}" />
        <Setter Property="HintCaptionTextStyle" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultHintCaptionTextStyle}}" />
        <Setter Property="DefaultItemGlyphBorderTemplate" Value="{DynamicResource {dxt:LWKey GalleryItemControl.StandaloneGlyphBorderTemplate}}" />
        <Setter Property="DefaultItemBorderTemplate" Value="{DynamicResource {dxt:LWKey GalleryItemControl.StandaloneBorderTemplate}}" />
        <Setter Property="DefaultItemControlTemplate" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultControlTemplate}}" />
        <Setter Property="DefaultItemGlyphBorderPadding" Value="{DynamicResource {dxt:LWKey GalleryItemControl.DefaultGlyphBorderPadding}}" />
        <Setter Property="DefaultGroupCaptionControlTemplate" Value="{DynamicResource {dxt:LWKey GalleryItemGroupControl.CaptionTemplate}}" />
        <Setter Property="DefaultFilterControlTemplate" Value="{DynamicResource {dxt:LWKey GalleryControl.StandaloneCaptionTemplate}}" />
        <Setter Property="ItemCaptionTextStyleSelector" Value="{DynamicResource {dxt:LWKey GalleryControl.StandaloneCaptionTextStyleSelector}}" />
        <Setter Property="ItemDescriptionTextStyleSelector" Value="{DynamicResource {dxt:LWKey GalleryControl.StandaloneDescriptionTextStyleSelector}}" />
    </Style>
    <Style x:Key="GalleryItemGroupControlDefaultStyle" TargetType="{x:Type dxb:GalleryItemGroupControl}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:LWKey GalleryItemGroupControl.ItemsPanelTemplate}}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GalleryItemGroupControl.ControlTemplate}}" />
        <Setter Property="ItemsSource" Value="{Binding Path=Group.Items, RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="GalleryItemGroupsControlDefaultStyle" TargetType="{x:Type dxb:GalleryItemGroupsControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GalleryItemGroupsControl.ControlTemplate}}" />
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:LWKey GalleryItemGroupsControl.ItemsPanelTemplate}}" />
    </Style>
    <Style x:Key="GalleryItemHoverToolTipDefaultStyle" TargetType="{x:Type dxb:GalleryItemHoverToolTip}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GalleryItemControl.HoverToolTipTemplate}}" />
    </Style>
    <Style x:Key="GlyphSideControlDefaultStyle" TargetType="{x:Type dxb:GlyphSideControl}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey GlyphSideControl.Template}}" />
    </Style>
    <Style x:Key="PopupMenuColumnSplitterDefaultStyle" TargetType="{x:Type dxb:PopupMenuColumnSplitter}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey SubMenuBarControl.PopupMenuColumnSplitterTemplate}}" />
    </Style>
    <Style x:Key="BarManagerThemeDependentValuesProviderDefaultStyle" TargetType="{x:Type dxb:BarManagerThemeDependentValuesProvider}">
        <Setter Property="ToolbarCaptionEditorWindowFloatSize" Value="{DynamicResource {dxt:LWKey Customization.CaptionEditorFloatSize}}" />
        <Setter Property="CustomizationFormFloatSize" Value="{DynamicResource {dxt:LWKey Customization.CustomizationFormFloatSize}}" />
        <Setter Property="CustomizationFormMinWidth" Value="{DynamicResource {dxt:LWKey Customization.CustomizationFormMinWidth}}" />
        <Setter Property="CustomizationFormMinHeight" Value="{DynamicResource {dxt:LWKey Customization.CustomizationFormMinHeight}}" />
        <Setter Property="ColorizeGlyph" Value="{DynamicResource {dxt:LWKey Customization.ColorizeGlyph}}" />
    </Style>
    <!--#endregion Bars\Themes\Generic\DefaultStyles.xaml-->


    <!--#region DEFAULT STYLES-->
    <Style x:Key="BarItemSearchControlSearchButtonInfo.DefaultStyleBase" TargetType="{x:Type dxbi:BarItemSearchControlSearchButtonInfo}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItemSearchControl.SearchIconButtonInfoTemplate}}" />
        <Setter Property="IsLeft" Value="True"/>
    </Style>
    <Style x:Key="BarItemSearchControlDeleteButtonInfo.DefaultStyleBase" TargetType="{x:Type dxbi:BarItemSearchControlDeleteButtonInfo}">
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItemSearchControl.DeleteButtonInfoTemplate}}" />
    </Style>
    <Style x:Key="BarItemSearchControl.DefaultStyleBase" TargetType="{x:Type dxbi:BarItemSearchControl}">
        <Setter Property="MaxWidth" Value="{DynamicResource {dxt:LWKey ThemedWindowSearchBox.MaxWidth}}" />
        <Setter Property="MinWidth" Value="{DynamicResource {dxt:LWKey ThemedWindowSearchBox.MinWidth}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey BarItemSearchControl.Template}}" />
        <Setter Property="IsTabStop" Value="False"/>
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Collapsed">
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="MaxWidth" Value="Infinity" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BarItemSearchControlAutoSuggestEdit.DefaultStyleBase" BasedOn="{dx:TargetStaticResource AutoSuggestEdit.DefaultStyleBase, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/Editors/Editors.Generic.xaml'}}" TargetType="{x:Type dxbi:BarItemSearchControlAutoSuggestEdit}">
        <Setter Property="ShowNullTextIfFocused" Value="False" />
        <Setter Property="ShowNullValueButtonOnFocusOnly" Value="True" />
        <Setter Property="NullValueButtonPlacement" Value="EditBox" />
        <Setter Property="AllowDefaultButton" Value="False" />
        <Setter Property="PopupMinHeight" Value="0" />
        <Setter Property="ValidateOnTextInput" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxt:LWKey BarItemSearchControl.PopupContentTemplate}}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey BarItemSearchControl.BackgroundBrush}}" />
        <Setter Property="NullTextForeground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource Self}}" />
        <Setter Property="NullText" Value="{dxb:BarsLocalizer BarItemSearchControl_NullText}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey BarItemSearchControl.HoverBackgroundBrush}}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey BarItemSearchControl.HoverBackgroundBrush}}" />
            </Trigger>
            <Trigger Property="IsPopupOpen" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey BarItemSearchControl.HoverBackgroundBrush}}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxt:LWKey BarItemSearchControl.HoverBackgroundBrush}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="UndoSplitButtonItem.DefaultStyleBase" BasedOn="{StaticResource BaseUndoButtonStyle}" TargetType="{x:Type dxbi:UndoSplitButtonItem}" />
    <Style x:Key="UndoButtonItem.DefaultStyleBase" BasedOn="{StaticResource BaseUndoButtonStyle}" TargetType="{x:Type dxbi:UndoButtonItem}" />
    <Style x:Key="RedoSplitButtonItem.DefaultStyleBase" BasedOn="{StaticResource BaseRedoButtonStyle}" TargetType="{x:Type dxbi:RedoSplitButtonItem}" />
    <Style x:Key="RedoButtonItem.DefaultStyleBase" BasedOn="{StaticResource BaseRedoButtonStyle}" TargetType="{x:Type dxbi:RedoButtonItem}" />
    <Style x:Key="BarHistoryListItem.DefaultStyleBase" TargetType="{x:Type dxbi:BarHistoryListItem}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxb:BarButtonItem />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BarHistoryItem.DefaultStyleBase" TargetType="{x:Type dxb:BarHistoryItem}">
        <Setter Property="dxb:BarManager.ShowGlyphsInPopupMenus" Value="False" />
        <Setter Property="ItemStyleSelector">
            <Setter.Value>
                <dxbi:SingleStyleSelector>
                    <Style TargetType="{x:Type dxb:BarButtonItem}">
                        <Setter Property="Content" Value="{Binding}" />
                    </Style>
                </dxbi:SingleStyleSelector>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarControlBase.DefaultStyleBase" TargetType="{x:Type dxb:ToolBarControlBase}">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Template" Value="{DynamicResource {dxt:LWKey ToolBar.Template}}" />
    </Style>
    <Style x:Key="BarItemSearchControlNoResult.DefaultStyleBase" TargetType="{x:Type dxbi:BarItemSearchControlNoResult}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <dx:DXBorder>
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{dxb:BarsLocalizer BarItemSearchControl_NoResult}"
                                   Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type dx:PopupBorderControl}}}"/>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion DEFAULT STYLES-->

</ResourceDictionary>