<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:cs="colorscheme_ignorable_uri"
    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxgtl="clr-namespace:DevExpress.Xpf.Grid.TreeList;assembly=DevExpress.Xpf.Grid.v24.1"
    xmlns:dxfuit="http://schemas.devexpress.com/winfx/2008/xaml/core/filteringui/themekeys"
    xmlns:dxgi="http://schemas.devexpress.com/winfx/2008/xaml/grid/internal"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxfui_local_native="http://schemas.devexpress.com/winfx/2008/xaml/core/filteringui/internal"
    xmlns:dxgn="clr-namespace:DevExpress.Xpf.Grid.Native;assembly=DevExpress.Xpf.Grid.v24.1"
    mc:Ignorable="cs">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Grid/Generic.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <dx:BoolToVisibilityInverseConverter x:Key="BoolToVisibilityInverseConverter" />
    <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverterInverted" Invert="True" />
    <dx:BoolInverseConverter x:Key="BoolInverseConverter" />
    <dxg:DetailLevelToObjectConverter x:Key="DetailLevelToBorderLeftConverter" DetailValue="1,0,0,0" NotDetailValue="0" />
    <dx:BooleanToDoubleConverter x:Key="BooleanToDoubleConverter" />
    <dxgi:TotalSummaryPositionToMarginConverter x:Key="TotalSummaryPositionToItemMarginConverter" TopMargin="3,3,3,4" BottomMargin="3,4,3,3" />


    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\FilteringUI\FilterElements.xaml-->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\FilteringUI\FilterElements.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\HeaderFooterItemsControlStyles.xaml-->
    
    <Style x:Key="{dxgt:LWKey TableView.FixedSummaryTextBlockStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="FontWeight" Value="{StaticResource FixedSummaryTextBlock.FontWeight}" />
        <Setter Property="Margin" Value="{StaticResource FixedSummaryTextBlock.Margin}" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="dxei:TextBlockService.AllowIsTextTrimmed" Value="True" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxei:TextBlockService.IsTextTrimmed), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="ToolTipService.ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\HeaderFooterItemsControlStyles.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\UICustom.xaml-->






    <!-- General -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\UICustom.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\UIPreset.xaml-->
    <sys:Boolean x:Key="{dxgt:LWKey CardView.ClipCellEditor}">False</sys:Boolean>
    <sys:Double x:Key="{dxgt:LWKey CardView.ContainerIndent}">0</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey CardView.LeftGroupAreaIndent}">30</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey CardView.SeparatorThickness}">0</sys:Double>
    <Thickness x:Key="{dxgt:LWKey CardView.HorizontalCardMargin}">3</Thickness>
    <Thickness x:Key="{dxgt:LWKey CardView.VerticalCardMargin}">3</Thickness>
    <Thickness x:Key="{dxgt:LWKey CardView.CellEditorMargin}">0</Thickness>
    <Thickness x:Key="{dxgt:LWKey CardTemplates.CellContentPresenterMargin}">0</Thickness>
    <dx:LWCornerRadius x:Key="{dxgt:LWKey CardTemplates.CellCornerRadius}" Value="0, Win11=4"/>
    <Thickness x:Key="{dxgt:LWKey CardTemplates.CellBorderThickness}">1</Thickness>
    <sys:Boolean x:Key="{dxgt:LWKey TableView.UseGroupShadowIndent}">False</sys:Boolean>
    <sys:Double x:Key="{dxgt:LWKey TableView.LeftDataAreaIndent}">0</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey TableView.RightDataAreaIndent}">0</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey TableView.LeftGroupAreaIndent}">30</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey TableView.RightGroupAreaIndent}">0</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey TableView.FixedLineWidth}">3</sys:Double>
    <dx:LWDouble x:Key="{dxgt:LWKey TableView.IndicatorWidth}" Value="16, Win11=20"/>
    <sys:Double x:Key="{dxgt:LWKey TableView.ExpandDetailButtonWidth}">16</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey TableView.ExpandDetailButtonWidthTouch}">44</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey TableView.SearchPanelTextBoxMinWidth}">226</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey TableView.DataNavigatorTextSize}">11</sys:Double>
    <Thickness x:Key="{dxgt:LWKey TableView.DetailMargin}">16,0,0,0</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.Margin}">0</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.SummaryControlMargin}">0</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.HorizontalScrollbarMargin}">0</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.RowPresenterGridMargin}">0</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.IndicatorMargin}">0</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.SearchPanelWithoutGroupedPanelMargin}">10,8,7,8</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.SearchPanelLeftMargin}">10,8,0,8</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.SearchPanelWithGroupedPanelMargin}">10,12,10,4</Thickness>
    <dx:LWThickness x:Key="{dxgt:LWKey TableView.TotalSummaryPanelMargin}" Value="(12,6,12,6), Win11=(4,6)"/>
    <Thickness x:Key="{dxgt:LWKey TableView.DataNavigatorBorderThickness}">0,1,0,0</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.DataNavigatorBorderMarginText}">0</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.AnnotationMargin}">1,0,0,0</Thickness>
    <Thickness x:Key="{dxgt:LWKey TableView.GroupPanelBorderThickness}">0,0,0,1</Thickness>
    <dx:LWThickness x:Key="{dxgt:LWKey TableView.GroupPanelMargin}" Value="8, Win11=(8,9)"/>
    <Thickness x:Key="{dxgt:LWKey TableView.GroupPanelSeparatorMargin}">0,-23,0,0</Thickness>
    <sys:Double x:Key="{dxgt:LWKey TreeListView.RowIndent}">20</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey TreeListView.RowIndentTouch}">42</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey GridColumnHeader.SortIndicatorWidth}">12</sys:Double>
    <Thickness x:Key="{dxgt:LWKey GridColumnHeader.SortIndicatorUpMargin}">2</Thickness>
    <Thickness x:Key="{dxgt:LWKey GridColumnHeader.SortIndicatorDownMargin}">2</Thickness>
    <dx:LWThickness x:Key="{dxgt:LWKey GridColumnHeader.ContentMargin}" Value="(5,3,5,3), Win11=(6,4,6,5)"/>
    <Thickness x:Key="{dxgt:LWKey GridColumnHeader.CheckBoxSelectorMargin}">-4,-3,-5,-4</Thickness>
    <sys:Double x:Key="{dxgt:LWKey GridRow.RowMinHeight}">20</sys:Double>
    <dx:LWDouble x:Key="{dxgt:LWKey GroupRow.GroupRowMinHeight}" Value="31, Win11=32"/>
    <sys:Double x:Key="{dxgt:LWKey GroupRow.GroupRowFocusOffset}">0</sys:Double>
    <Thickness x:Key="{dxgt:LWKey GridRow.RowOffsetThickness}">0</Thickness>
    <dx:LWDouble x:Key="{dxgt:LWKey GroupRow.BandedViewGroupSummaryMinHeight}" Value="31, Win11=32"/>
    <Thickness x:Key="{dxgt:LWKey GroupRow.GroupRowContentMargin}">0</Thickness>
    <Thickness x:Key="{dxgt:LWKey GroupRow.GroupRowBottomLineThickness}">0,0,0,1</Thickness>
    <dx:LWThickness x:Key="{dxgt:LWKey GroupRow.GroupRowDefaultSummaryMargin}" Value="(0,0,4,0), Win11=(0,0,10,0)"/>
    <dx:LWThickness x:Key="{dxgt:LWKey GroupRow.GroupRowExpandButtonMargin}" Value="(15,0,0,0), Win11=(8,0)"/>
    <dx:LWThickness x:Key="{dxgt:LWKey GroupRow.ExpandButtonMargin}" Value="(15,1,0,0), Win11=(8,1,8,0)"/>
    <Thickness x:Key="{dxgt:LWKey GroupRow.GroupColumnSummaryPadding}">3,7,3,7</Thickness>
    <Thickness x:Key="{dxgt:LWKey GroupRow.GroupBandSummaryPadding}">3</Thickness>
    <Thickness x:Key="{dxgt:LWKey GroupRow.GroupDefaultSummaryPadding}">3,3,4,3</Thickness>
    <Thickness x:Key="{dxgt:LWKey GroupRow.GroupRowDefaultSummaryPadding}">0,3,0,3</Thickness>
    <Thickness x:Key="{dxgt:LWKey GroupRow.GroupValuePresenterMargin}">0</Thickness>
    <Thickness x:Key="{dxgt:LWKey GroupRow.CheckBoxSelectorMargin}">3</Thickness>
    <Thickness x:Key="{dxgt:LWKey GroupRow.BandedGroupValuePresenterMargin}">0,3,30,3</Thickness>
    <FontWeight x:Key="{dxgt:LWKey GroupRow.GroupRowFontWeight}">Bold</FontWeight>
    <Thickness x:Key="{dxgt:LWKey ExcelColumnFilterPopup.ContentMargin}">14</Thickness>
    <Thickness x:Key="{dxgt:LWKey ExcelColumnFilterPopup.ButtonHeaderPaddingTouch}">14,12,14,13</Thickness>
    <Thickness x:Key="{dxgt:LWKey ExcelColumnFilterPopup.ButtonHeaderPadding}">14,3,14,6</Thickness>
    <Thickness x:Key="{dxgt:LWKey ExcelColumnFilterPopup.RowPresenterGridMargin}">0,0,0,0</Thickness>
    <Thickness x:Key="{dxgt:LWKey ExcelColumnFilterPopup.HorizontalScrollbarMargin}">0,0,0,1</Thickness>
    <dx:LWCornerRadius x:Key="{dxgt:LWKey TableView.CompactPanelCornerRadius}" Value="0, Win11=4"/>
    <dx:LWThickness x:Key="{dxgt:LWKey TableView.CompactPanelContentMargin}" Value="2, Win11=4"/>
    <Thickness x:Key="{dxgt:LWKey TableView.HeaderMargin}">8,0,8,0</Thickness>
    <Thickness x:Key="{dxgt:LWKey ExtendedColumnChooser.RowPresenterGridMargin}">0,1,1,1</Thickness>
    <Thickness x:Key="{dxgt:LWKey ExtendedColumnChooser.SearchPanelBorderThickness}">0</Thickness>
    <Thickness x:Key="{dxgt:LWKey ExtendedColumnChooser.SearchPanelMargin}">0,4,0,4</Thickness>
    <Thickness x:Key="{dxgt:LWKey ExtendedColumnChooser.HorizontalScrollbarMargin}">0</Thickness>
    <dx:LWThickness x:Key="{dxgt:LWKey ExtendedColumnChooser.RowMargin}" Value="0, Win11=(0,2)"/>
    <dx:LWThickness x:Key="{dxgt:LWKey ExtendedColumnChooser.RowPadding}" Value="0, Win11=(0,2)"/>






    <!-- Converters -->

    <!-- CardView -->

    <!-- CatdTemplates -->

    <!-- TableView -->

    <!-- TreeList -->

    <dxg:TreeListLineStyle x:Key="{dxgt:LWKey TreeListView.DefaultTreeLineStyle}">None</dxg:TreeListLineStyle>

    <!-- GridColumnHeader -->

    <!-- GridRow -->

    <!-- ExcellColumn -->

    <!-- CompactView -->

    <!-- ExtendedColumnChooser -->

    <dxg:GridColumnWidth x:Key="{dxgt:LWKey ExtendedColumnChooser.CheckBoxColumnWidth}">27</dxg:GridColumnWidth>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\UIPreset.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\UICore.xaml-->
    <Thickness x:Key="{dxgt:LWKey CardView.GroupPanelBorderThickness}">0,0,0,1</Thickness>
    <Thickness x:Key="{dxgt:LWKey CardView.HeadersButtonMargin}">3</Thickness>
    <sys:Double x:Key="{dxgt:LWKey TableView.SearchPanelWidth}">256</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey TableView.SearchPanelWidthTouch}">400</sys:Double>
    <Thickness x:Key="{dxgt:LWKey GridRow.BandSummaryMargin}">0,0,0,-1</Thickness>
    <Thickness x:Key="{dxgt:LWKey GridRow.GroupBandSummaryMargin}">0</Thickness>

    <!-- CardView -->

    <!-- CardTemplates -->

    <!-- GridColumn -->

    <!-- TableView -->

    <!-- Grid Row -->

    <!-- GroupRow -->

    <!-- TreeList -->

    <!-- ExcellColumn -->

    <!-- CompactPanel -->

    <!-- ColumnChooser -->

    <!-- Hover colors -->

    <!-- Other -->

    <dx:EnumToObjectConverter x:Key="EnumToObjectConverter">
        <dx:EnumToObjectConverter.Values>
            <dx:EnumObjectProvider x:Key="None" Value="Transparent" />
            <dx:EnumObjectProvider x:Key="Selected" Value="{StaticResource {dxgt:LWKey GridRow.BorderSelectedBrush}}" />
            <dx:EnumObjectProvider x:Key="Focused" Value="{StaticResource {dxgt:LWKey GridRow.BorderFocusedBrush}}" />
        </dx:EnumToObjectConverter.Values>
    </dx:EnumToObjectConverter>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\UICore.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\TreeViewControl.xaml-->





    <ControlTemplate x:Key="{dxgt:LWKey TreeViewControl.Template}" TargetType="{x:Type dxg:TreeViewControl}">
        <AdornerDecorator>
            <Grid>
                <dxg:DXGridThemesLoader x:Name="PART_ThemesLoader" dxg:GridBorderHelper.ShowBorder="{TemplateBinding ShowBorder}" Template="{DynamicResource {dxgt:LWKey GridControl.BorderTemplate}}" />
            </Grid>
        </AdornerDecorator>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey TreeViewControl.RowMarginControlTemplate}" TargetType="{x:Type dxg:TreeViewRowMarginControl}">
        <Grid x:Name="background" Background="{TemplateBinding Background}">
            <Path x:Name="PART_OffsetPath" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" />
            <Path
                x:Name="PART_TreeLinePath"
                Opacity="{StaticResource TreeViewControl.RowMarginControlOpacity}"
                Stroke="{TemplateBinding Foreground}"
                StrokeThickness="1" />
            <dxg:IndentsPanel HorizontalAlignment="Right" RowIndent="{Binding View.RowIndent}">
                <dxg:TreeViewNodeExpandButton
                    x:Name="PART_ExpandButton"
                    Command="{Binding View.Commands.ChangeNodeExpanded}"
                    CommandParameter="{Binding RowHandle.Value}"
                    Foreground="{TemplateBinding Foreground}"
                    HorizontalAlignment="Left"
                    IsChecked="{Binding IsExpanded}"
                    IsExpandButtonVisible="{Binding Path=IsButtonVisible}" />
                <dxe:CheckEdit
                    x:Name="PART_NodeCheckBox"
                    Focusable="False"
                    IsChecked="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    IsEnabled="{Binding IsCheckBoxEnabled}"
                    IsThreeState="{Binding View.AllowIndeterminateCheckState}"
                    Padding="0"
                    Visibility="{Binding IsCheckBoxVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <dxg:GridViewHitInfoBase.HitTestAcceptor>
                        <dxgtl:TreeListNodeCheckboxHitTestAcceptor />
                    </dxg:GridViewHitInfoBase.HitTestAcceptor>
                </dxe:CheckEdit>
                <dx:MeasurePixelSnapper Visibility="{Binding IsImageVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <dx:DXImage
                        x:Name="PART_NodeImage"
                        Focusable="False"
                        Height="{Binding Path=View.NodeImageSize.Height}"
                        Source="{Binding Image, UpdateSourceTrigger=PropertyChanged}"
                        Width="{Binding Path=View.NodeImageSize.Width}">
                        <dxg:GridViewHitInfoBase.HitTestAcceptor>
                            <dxgtl:TreeListNodeImageHitTestAcceptor />
                        </dxg:GridViewHitInfoBase.HitTestAcceptor>
                        <RenderOptions.BitmapScalingMode>NearestNeighbor</RenderOptions.BitmapScalingMode>
                    </dx:DXImage>
                </dx:MeasurePixelSnapper>
            </dxg:IndentsPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ShowTreeIndentAsCellPart}" Value="true">
                <Setter Property="Background" Value="Transparent" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ShowTreeIndentAsCellPart}" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {dxgt:LWKey GridRow.TextUnfocusedBrush}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IndentSelectionState}" Value="Focused" />
            <DataTrigger Binding="{Binding Path=IndentSelectionState}" Value="Selected" />
            <DataTrigger Binding="{Binding Path=IndentSelectionState}" Value="FocusedAndSelected" />
            <DataTrigger Binding="{Binding Path=IndentSelectionState}" Value="Highlighted" />
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey TreeViewControl.ExpandButtonTemplate}" TargetType="{x:Type dxg:TreeViewNodeExpandButton}">
        <dx:DXExpander AnimationProgress="{Binding IsExpandButtonVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToDoubleConverter}}" HorizontalAlignment="Left">
            <dxg:GridToggleStateButton
                x:Name="toggleButton"
                ClickMode="Press"
                Command="{TemplateBinding Command}"
                CommandParameter="{TemplateBinding CommandParameter}"
                dx:DataObjectBase.DataObject="{Binding}"
                dx:DataObjectBase.NeedsResetEvent="True"
                Foreground="{TemplateBinding Foreground}"
                IsChecked="{Binding Path=IsChecked, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
                <dxg:GridToggleStateButton.Style>
                    <Style TargetType="{x:Type dxg:GridToggleStateButton}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type dxg:GridToggleStateButton}">
                                    <Grid
                                        x:Name="Root"
                                        Background="Transparent"
                                        Height="16"
                                        Width="16">
                                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Path x:Name="Collapsed" Fill="{TemplateBinding Foreground}" Style="{StaticResource UIShape.Expand}" />
                                            <Path
                                                x:Name="Expanded"
                                                Fill="{TemplateBinding Foreground}"
                                                Opacity="0"
                                                Style="{StaticResource UIShape.Collapse}" />
                                        </Grid>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="True">
                                            <Setter Property="Opacity" TargetName="Collapsed" Value="0" />
                                            <Setter Property="Opacity" TargetName="Expanded" Value="1" />
                                        </Trigger>
                                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                            <Setter Property="MinHeight" TargetName="Root" Value="23" />
                                            <Setter Property="MinWidth" TargetName="Root" Value="42" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </dxg:GridToggleStateButton.Style>
            </dxg:GridToggleStateButton>
        </dx:DXExpander>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\TreeViewControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\ExcelColumnFilter.xaml-->
    <Style x:Key="ButtonEditButtonGlyphStyle" TargetType="FrameworkElement">
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>




    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey ExcelColumnFilterPopup.SearchGlyphTemplate}">
        <Grid
            Background="Transparent"
            Height="Auto"
            Margin="4,0,1,0"
            Style="{StaticResource ButtonEditButtonGlyphStyle}"
            VerticalAlignment="Center"
            Width="Auto">
            <Path
                Height="12"
                Stretch="Fill"
                Stroke="{DynamicResource {dxgt:LWKey ExcelColumnFilterPopup.SearchControlAdditionalButtonColor}}"
                StrokeThickness="2"
                Width="12">
                <Path.Data>
                    <GeometryGroup>
                        <EllipseGeometry Center="2,-2" RadiusX="1" RadiusY="1" />
                        <PathGeometry Figures="M0,0 L1.2,-1.2" />
                    </GeometryGroup>
                </Path.Data>
            </Path>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey ExcelColumnFilterPopup.DropDownGlyphTemplate}">
        <Grid
            Background="Transparent"
            Height="Auto"
            Margin="5,0,3,0"
            Style="{StaticResource ButtonEditButtonGlyphStyle}"
            Width="Auto">
            <Path
                Data="M0,0 L1,1 2,0 Z"
                Fill="{DynamicResource {dxgt:LWKey ExcelColumnFilterPopup.SearchControlAdditionalButtonColor}}"
                Height="4"
                HorizontalAlignment="Center"
                Stretch="Fill"
                StrokeThickness="0"
                VerticalAlignment="Center"
                Width="7" />
        </Grid>
    </ControlTemplate>

    <!-- DataPresenter -->

    <ControlTemplate x:Key="{dxgt:LWKey ExcelColumnFilterPopup.DataPresenterTemplate}" TargetType="{x:Type dxg:DataPresenter}">
        <dx:DXBorder Background="{StaticResource Brush.Editor.Background}">
            <ContentPresenter />
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\ExcelColumnFilter.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\ExtendedColumnChooser.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey ExtendedColumnChooser.OuterBorderElementTemplate}" TargetType="{x:Type dxg:OuterBorderElement}">
        <dx:DXBorder BorderBrush="{StaticResource Brush.Border}" BorderThickness="1" CornerRadius="{dx:LWCornerRadius '0, Win11=7'}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey ExtendedColumnChooser.DataPresenterTemplate}" TargetType="{x:Type dxg:DataPresenter}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Editor.Background, VS2019Dark=Brush.Control.Background'}">
            <ContentPresenter />
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey ExtendedColumnChooser.TreeListControlBorderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Border, Win11=#00FFFFFF'}">
            <dx:DXBorder.Padding>
                <Binding Path="(dxg:GridBorderHelper.ShowBorder)" RelativeSource="{RelativeSource TemplatedParent}">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter FalseValue="0" TrueValue="1" />
                    </Binding.Converter>
                </Binding>
            </dx:DXBorder.Padding>
            <dx:DXBorder Background="{DynamicResource {dxgt:LWKey ExtendedColumnChooser.SearchPanelBackground}}" Margin="{dx:LWThickness '0, Win11=(0,1,0,0)'}">
                <ContentPresenter />
            </dx:DXBorder>
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey ExtendedColumnChooser.TreeListControlTemplate}" TargetType="{x:Type dxg:TreeListControl}">
        <AdornerDecorator>
            <Grid>
                <!--<dx:DXArranger>-->
                    <dxg:DXGridThemesLoader x:Name="PART_ThemesLoader" dxg:GridBorderHelper.ShowBorder="{TemplateBinding ShowBorder}" Template="{DynamicResource {dxgt:LWKey ExtendedColumnChooser.TreeListControlBorderTemplate}}" />
                <!--</dx:DXArranger>-->
                <dxg:ErrorPanel x:Name="PART_ErrorPanel" Visibility="Collapsed" />
                <dx:WaitIndicator x:Name="PART_LoadingPanel" DeferedVisibility="{TemplateBinding ShowLoadingPanel}" Style="{Binding Path=View.WaitIndicatorStyle, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
        </AdornerDecorator>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\ExtendedColumnChooser.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\FilteringUI.xaml-->
    <dx:LWCornerRadius x:Key="{dxgt:LWKey FilterEditor.ItemCornerRadius}" Value="0, Win11=4"/>
    <dx:LWCornerRadius x:Key="{dxgt:LWKey FilterEditor.FormatConditionCornerRadius}" Value="0, Win11=4"/>
    <sys:Double x:Key="{dxgt:LWKey FilterEditor.RowMinHeight}">22</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey FilterEditor.InplaceEditorCellMinWidth}">38</sys:Double>
    <Thickness x:Key="{dxgt:LWKey FilterEditor.PropertySelectorContentMargin}">4,1,4,1</Thickness>
    <Thickness x:Key="{dxgt:LWKey ExcelStyleFilterElement.HeaderPadding}">12,3,12,6</Thickness>
    <sys:Double x:Key="{dxgt:LWKey FilteringUI.DatePeriodsFilterElementHeight}">145</sys:Double>
    <sys:Double x:Key="{dxgt:LWKey FilteringUI.DatePeriodsFilterElementHeightTouch}">240</sys:Double>
    <Thickness x:Key="{dxgt:LWKey ExcelStyleFilterElement.FilterValueContainerTopAreaMargin}">0,1</Thickness>
    <Thickness x:Key="{dxgt:LWKey ExcelStyleFilterElement.FilterValueContainerTopAreaMarginTouch}">11,10</Thickness>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\FilteringUI.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewControl.xaml-->




    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey TotalSummary.FootersContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="footersContent">
            <dx:DXBorder x:Name="PART_Background" Background="{DynamicResource {dxgt:LWKey GridRow.FixedSummaryFillBrush}}" BorderBrush="{DynamicResource {dxgt:LWKey GridRow.TotalSummaryBorderBrush}}">
                <dx:DXBorder.BorderThickness>
                    <MultiBinding>
                        <MultiBinding.Bindings>
                            <Binding Path="View.TotalSummaryPosition" />
                            <Binding Path="View.IsRootView" />
                        </MultiBinding.Bindings>
                        <MultiBinding.Converter>
                            <dxgi:TableViewTotalSummaryPanelBorderThicknessConverter />
                        </MultiBinding.Converter>
                    </MultiBinding>
                </dx:DXBorder.BorderThickness>
            </dx:DXBorder>
            <ContentPresenter />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.CurrentView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="PART_Background" Value="{Binding Path=(dxg:GridControl.CurrentView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.CurrentView).DataControl.(dxi:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="PART_Background" Value="{Binding Path=(dxg:GridControl.CurrentView).DataControl.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey TableView.OuterBorderElementTemplate}" TargetType="{x:Type dxg:OuterBorderElement}" />

    <!-- Cell Content -->

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.CellContentPresenterTemplate}" TargetType="{x:Type dxg:CellContentPresenter}">
        <dx:DXBorder x:Name="ContentBorder" BorderThickness="{TemplateBinding BorderState}" Padding="{TemplateBinding Padding}">
            <dx:DXBorder.Background>
                <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}" />
            </dx:DXBorder.Background>
            <dx:DXBorder.BorderBrush>
                <Binding Path="BorderBrush" RelativeSource="{RelativeSource TemplatedParent}" />
            </dx:DXBorder.BorderBrush>
            <dxg:CellEditor x:Name="PART_CellEditor" />
        </dx:DXBorder>
    </ControlTemplate>

    <!-- ColumnChooser -->

    <Style x:Key="{dxgt:LWKey TableView.ColumnChooserDragTextStyle}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="32" />
        <Setter Property="Opacity" Value="0.62" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dxg:GridBorderHelper.ShowBorder" Value="True">
                <Setter Property="Margin" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- CompactPanel -->

    <DataTemplate x:Key="{dxgt:LWKey TableView.CompactPanelDownGlyph}">
        <Grid x:Name="Root" Margin="0,-1,0,0">
            <Path Fill="{TemplateBinding TextBlock.Foreground}" Style="{StaticResource UIShape.Down}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{dxgt:LWKey TableView.CompactPanelSortGlyph}">
        <Grid x:Name="Root">
            <Path Fill="{TemplateBinding TextBlock.Foreground}" Stretch="Fill" Style="{StaticResource UIShape.CompactView.Sort}" />
        </Grid>
    </DataTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewNewItemRow.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.RowNewItemTextControlTemplate}" TargetType="dxg:RowNewItemTextControl">
        <dx:DXBorder x:Name="backgroundBorder" Background="{StaticResource {dxgt:LWKey GridRow.BorderNoneBrush}}" IsHitTestVisible="False">
            <TextBlock
                x:Name="PART_GridNewRowText"
                Foreground="{StaticResource {dxgt:LWKey GridRow.TextUnfocusedBrush}}"
                HorizontalAlignment="Center"
                Margin="0,1,0,2"
                VerticalAlignment="Center">
                <TextBlock.Text>
                    <Binding ConverterParameter="GridNewRowText" Path="View.LocalizationDescriptor" Converter="{StaticResource LocalizationStringValueConverter}" />
                </TextBlock.Text>
            </TextBlock>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="PART_GridNewRowText" Value="12" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="backgroundBorder" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="backgroundBorder" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.NewItemRowTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" Margin="0,0,0,1">
            <dx:DXBorder Background="{StaticResource {dxgt:LWKey GridRow.BorderFocusedBrush}}">
                <dx:DXBorder.Visibility>
                    <Binding Path="SelectionState">
                        <Binding.Converter>
                            <dxg:SelectionStateToVisibilityConverter Value="Focused" />
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.Visibility>
            </dx:DXBorder>
            <ContentControl HorizontalContentAlignment="Stretch">
                <ContentPresenter />
            </ContentControl>
            <dxg:RowNewItemTextControl Visibility="{Binding Path=IsFocused, Converter={StaticResource BooleanToVisibilityConverterInverted}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=SelectionState}" Value="Focused">
                <Setter Property="Foreground" Value="{DynamicResource {dxgt:LWKey GridRow.TextFocusedBrush}}" />
            </DataTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="40" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewNewItemRow.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewFilter.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.FilterRowTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder
            x:Name="PART_RootBorder"
            Background="{DynamicResource {dxgt:LWKey GridRow.BorderNoneBrush}}"
            BorderBrush="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}"
            BorderThickness="0,0,0,1">
            <Grid>
                <dx:DXBorder x:Name="borderFocused">
                    <dx:DXBorder.Visibility>
                        <Binding Path="SelectionState">
                            <Binding.Converter>
                                <dxg:SelectionStateToVisibilityConverter Value="Focused" />
                            </Binding.Converter>
                        </Binding>
                    </dx:DXBorder.Visibility>
                </dx:DXBorder>
                <ContentControl HorizontalContentAlignment="Stretch">
                    <ContentPresenter />
                </ContentControl>
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="PART_RootBorder" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="PART_RootBorder" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsTreeView}" Value="True">
                <Setter Property="Background" TargetName="borderFocused" Value="{DynamicResource {dxgt:LWKey GridRow.CellBorderFocusedBrush}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsTreeView}" Value="False">
                <Setter Property="Background" TargetName="borderFocused" Value="{DynamicResource {dxgt:LWKey GridRow.BorderFocusedBrush}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:LWKey GridColumnHeader.HeaderFilterEditClearButtonTemplate}" TargetType="{x:Type Button}">
        <Grid Background="Transparent">
            <Grid
                Height="16"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Width="16">
                <Path
                    x:Name="Glyph"
                    Data="F1 M 6.5,0.00012207C 10.0899,0.00012207 13,2.91028 13,6.50012C 13,10.09 10.0898,13.0001 6.5,13.0001C 2.91014,13.0001 2.58287e-006,10.09 2.58287e-006,6.50012C 2.58287e-006,2.91028 2.91004,0.00012207 6.5,0.00012207 Z M 3.00002,3.99988L 5.50002,6.49988L 3.00003,8.99988L 3.00003,9.99988L 4.00003,9.99988L 6.49998,7.49988L 9.00001,9.99988L 10,9.99988L 10,8.99988L 7.49994,6.49988L 10,3.99976L 10,2.99988L 9.00003,2.99988L 6.49998,5.49988L 4.00001,2.99988L 3.00001,2.99988L 3.00002,3.99988 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                    Height="12"
                    HorizontalAlignment="Center"
                    Opacity="0.62"
                    Stretch="Fill"
                    VerticalAlignment="Center"
                    Width="12" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Glyph" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Glyph" Property="Opacity" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewFilter.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewFitColumn.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.FitColumnContentTemplate}">
        <dx:DXBorder Background="Transparent" BorderBrush="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}" BorderThickness="1,0,0,0">
            <dx:DXBorder.Opacity>
                <Binding Path="View.ShowVerticalLines">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter FalseValue="0" TrueValue="1" />
                    </Binding.Converter>
                </Binding>
            </dx:DXBorder.Opacity>
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.FitColumnLeftContentTemplate}">
        <dx:DXBorder Background="Transparent" BorderBrush="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}" BorderThickness="0,0,1,0">
            <dx:DXBorder.Opacity>
                <Binding Path="View.ShowVerticalLines">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter FalseValue="0" TrueValue="1" />
                    </Binding.Converter>
                </Binding>
            </dx:DXBorder.Opacity>
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewFitColumn.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewFixedColumn.xaml-->
    <!-- General -->

    <DataTemplate x:Key="{dxgt:LWKey GridColumnHeader.FixedColumnsDelimiterTemplate}">
        <dx:DXBorder Background="{DynamicResource {dxgt:LWKey GridColumnHeader.Background}}" BorderBrush="{DynamicResource {dxgt:LWKey GridColumnHeader.BorderBrush}}" BorderThickness="1,0,1,1" />
    </DataTemplate>

    <DataTemplate x:Key="{dxgt:LWKey GridRow.FixedColumnsDelimiterTemplate}">
        <dx:DXBorder BorderBrush="{DynamicResource {dxgt:LWKey GridRow.BorderBrush}}" BorderThickness="1,0,1,0">
            <dx:DXBorder.Visibility>
                <Binding Path="View.ShowVerticalLines" Converter="{StaticResource BooleanToVisibilityConverter}" />
            </dx:DXBorder.Visibility>
        </dx:DXBorder>
    </DataTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewFixedColumn.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewGroup.xaml-->
    <!-- General -->

    <dxg:DefaultStyle x:Key="{dxgt:LWKey GroupRow.GroupValueContentStyle}" TargetType="{x:Type Border}" />

    <dxg:DefaultDataTemplate x:Key="{dxgt:LWKey GroupRow.GroupValueTemplate}">
        <dx:DXBorder Style="{Binding Path=View.GroupValueContentStyle}" VerticalAlignment="Center">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding Path=GroupColumnHeaderText}" />
                <TextBlock Text="{Binding Path=Value}" />
            </StackPanel>
        </dx:DXBorder>
    </dxg:DefaultDataTemplate>

    <Style x:Key="{dxgt:LWKey TableView.GroupPanelDragTextStyle}" TargetType="TextBlock">
        <Setter Property="FontSize">
            <Setter.Value>
                <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}">
                    <Binding.Converter>
                        <dx:AddDoubleConverter Value="-1" />
                    </Binding.Converter>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Opacity" Value="0.62" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.CurrentView).ActualSearchPanelPosition, RelativeSource={RelativeSource TemplatedParent}}" Value="Default">
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="Margin" Value="11,3,0,3" />
            </DataTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewGroup.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewGroupBandSummary.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GroupRow.GroupBandSummaryTemplate}">
        <dx:DXBorder
            x:Name="Root"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="1"
            MinHeight="22">
            <dx:DXBorder.Margin>
                <Binding Path="HasTopElement" RelativeSource="{RelativeSource TemplatedParent}">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter FalseValue="0,2,2,2" TrueValue="0,0,2,2" />
                    </Binding.Converter>
                </Binding>
            </dx:DXBorder.Margin>
            <ContentPresenter
                x:Name="PART_Content"
                Content="{Binding}"
                ContentTemplate="{Binding View.GroupColumnSummaryItemTemplate}"
                Margin="12"
                VerticalAlignment="Stretch" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
                <Setter Property="Margin" TargetName="PART_Content" Value="14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxgt:LWKey GroupRow.GroupBandSummaryContentStyle}" TargetType="{x:Type dxg:GroupBandSummaryControl}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewGroupBandSummary.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewGroupFooterSummary.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GroupRow.GroupFooterRowContentTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Name="PART_border"
                     Background="{dx:LWBrush 'Win10=Brush.Window.Background, Win11=Brush.Control.Background, Office2019Black=Brush.Control.Background, Office2019Colorful=Brush.Editor.Background, Office2019HighContrast=Brush.Editor.Background, VS2019Blue=Brush.Editor.Background, VS2019Dark=Brush.Control.Background, VS2019Light=Brush.Editor.Background'}"
                     BorderBrush="{DynamicResource {dxgt:LWKey GridRow.BorderBrush}}">
            <dx:DXBorder.BorderThickness>
                <Binding Path="FooterPosition">
                    <Binding.Converter>
                        <dx:EnumToObjectConverter>
                            <dx:EnumToObjectConverter.Values>
                                <dx:EnumObjectProvider x:Key="Top" Value="0,0,0,1" />
                                <dx:EnumObjectProvider x:Key="Bottom" Value="0,0,0,1" />
                                <dx:EnumObjectProvider x:Key="Middle" Value="0,0,0,1" />
                                <dx:EnumObjectProvider x:Key="Single" Value="0,0,0,1" />
                            </dx:EnumToObjectConverter.Values>
                        </dx:EnumToObjectConverter>
                    </Binding.Converter>
                </Binding>
            </dx:DXBorder.BorderThickness>
            <ContentPresenter>
                <ContentPresenter.Margin>
                    <Binding Path="ContentOffset">
                        <Binding.Converter>
                            <dxg:ContentOffsetToMarginConverter />
                        </Binding.Converter>
                    </Binding>
                </ContentPresenter.Margin>
            </ContentPresenter>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=View.ShowHorizontalLines}" Value="false">
                <Setter Property="BorderThickness" TargetName="PART_border" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="PART_border" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="PART_border" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Summary -->

    <ControlTemplate x:Key="{dxgt:LWKey GroupRow.GroupFooterSummaryControlTemplate}">
        <dx:DXBorder
            Name="border"
            Background="Transparent"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{dx:LWCornerRadius '0, Win11=4'}">
            <Grid Name="Root" Margin="{TemplateBinding Padding}">
                <Grid.Visibility>
                    <Binding Path="HasSummary">
                        <Binding.Converter>
                            <dx:BoolToObjectConverter FalseValue="Hidden" TrueValue="Visible" />
                        </Binding.Converter>
                    </Binding>
                </Grid.Visibility>
                <dx:DXBorder
                    x:Name="Border"
                    Background="{dx:LWBrush 'Brush.Editor.Background, Win11=#00000000, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Control.Background'}"
                    BorderBrush="{dx:LWBrush 'Brush.Border, Win11=#00FFFFFF, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Control.Background'}"
                    BorderThickness="{dx:LWThickness '1, Win11=0'}"
                    Margin="3">
                    <dx:DataContentPresenter Content="{Binding}" ContentTemplateSelector="{Binding Path=Column.View.ActualGroupFooterSummaryItemTemplateSelector}" Style="{Binding Path=Column.View.FooterSummaryContentStyle}" />
                </dx:DXBorder>
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
                <Setter Property="Margin" TargetName="Border" Value="3" />
            </Trigger>
            <DataTrigger Binding="{Binding ShowVerticalSeparator}" Value="true">
                <Setter Property="BorderThickness" TargetName="border" Value="0,0,1,0" />
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxgt:LWKey GroupRow.GroupFooterSummaryContentStyle}" TargetType="{x:Type dx:DataContentPresenter}">
        <Setter Property="HorizontalAlignment" Value="{Binding Path=Column.ActualHorizontalContentAlignment}" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="{dxgt:LWKey GroupRow.GroupFooterSummaryItemTemplate}">
        <TextBlock dxg:InlineTextService.InlineInfo="{Binding SummaryTextInfo}" Style="{StaticResource {dxgt:LWKey TotalSummary.TotalSummaryTextControlStyle}}" />
    </DataTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewGroupFooterSummary.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewGroupRow.xaml-->
    <!-- General -->

    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView\GridViewGroupRow.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView.xaml-->
    <!-- General -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridView.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControl.xaml-->
    <!-- General -->
    <ControlTemplate x:Key="{dxgt:LWKey GridControl.Template}" TargetType="{x:Type dxg:DataControlBase}">
        <AdornerDecorator>
            <Grid>
                <dxg:DXGridThemesLoader x:Name="PART_ThemesLoader" dxg:GridBorderHelper.ShowBorder="{TemplateBinding ShowBorder}" Template="{DynamicResource {dxgt:LWKey GridControl.BorderTemplate}}" />
                <dxg:ErrorPanel x:Name="PART_ErrorPanel" Visibility="Collapsed" />
                <dx:WaitIndicator x:Name="PART_LoadingPanel" DeferedVisibility="{TemplateBinding ShowLoadingPanel}" Style="{Binding Path=View.WaitIndicatorStyle, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
        </AdornerDecorator>
    </ControlTemplate>

    <!-- Headers -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlWaitIndicators.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="HighContrastWaitIndicator" TargetType="{x:Type ProgressBar}">
        <Grid x:Name="Root">
            <Path
                x:Name="Content"
                Height="{TemplateBinding Height}"
                Margin="{TemplateBinding Margin}"
                RenderTransformOrigin="0.5,0.5"
                Style="{StaticResource UIShape.WaitIndicator}"
                Width="{TemplateBinding Width}">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform />
                        <SkewTransform />
                        <RotateTransform Angle="0" />
                        <TranslateTransform />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Determinate" />
                    <VisualState x:Name="Indeterminate">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="Content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="359" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <!-- Indicator -->

    <ControlTemplate x:Key="{dxgt:LWKey GridControl.DefaultWaitIndicatorTemplate}">
        <Grid
            x:Name="Root"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Visibility="Collapsed">
            <ProgressBar
                x:Name="progressBar"
                Height="12"
                HorizontalAlignment="Center"
                IsIndeterminate="True"
                Template="{StaticResource HighContrastWaitIndicator}"
                VerticalAlignment="Center"
                Width="12" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="Visibility">
                    <VisualState x:Name="Visible">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="progressBar" Storyboard.TargetProperty="IsIndeterminate">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                                    <DiscreteObjectKeyFrame.Value>
                                        <sys:Boolean>True</sys:Boolean>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Collapsed">
                        <Storyboard>
                            <DoubleAnimation BeginTime="0:0:0.1" Duration="0:0:0.1" From="1" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0" />
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.2">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Collapsed</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="progressBar" Storyboard.TargetProperty="IsIndeterminate">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                                    <DiscreteObjectKeyFrame.Value>
                                        <sys:Boolean>False</sys:Boolean>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <!-- In Header -->

    <ControlTemplate x:Key="{dxgt:LWKey GridColumnHeader.IndicatorColumnHeaderTemplate}">
        <ContentControl HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
            <ContentControl.Visibility>
                <Binding Path="(dxg:GridControl.CurrentView).WaitIndicatorType" RelativeSource="{RelativeSource TemplatedParent}">
                    <Binding.Converter>
                        <dx:EnumToObjectConverter DefaultValue="Collapsed">
                            <dx:EnumToObjectConverter.Values>
                                <dx:EnumObjectProvider x:Key="Default" Value="Visible" />
                            </dx:EnumToObjectConverter.Values>
                        </dx:EnumToObjectConverter>
                    </Binding.Converter>
                </Binding>
            </ContentControl.Visibility>
            <dx:WaitIndicator DeferedVisibility="{Binding Path=(dxg:GridControl.CurrentView).IsWaitIndicatorVisible, RelativeSource={RelativeSource TemplatedParent}}" Template="{DynamicResource {dxgt:LWKey GridControl.DefaultWaitIndicatorTemplate}}" />
        </ContentControl>
    </ControlTemplate>

    <!-- In Button -->

    <ControlTemplate x:Key="{dxgt:LWKey GridControl.ButtonWaitIndicator}" TargetType="{x:Type ProgressBar}">
        <Grid x:Name="Root">
            <Path
                x:Name="Content"
                Height="{TemplateBinding Height}"
                Margin="{TemplateBinding Margin}"
                RenderTransformOrigin="0.5,0.5"
                Style="{StaticResource UIShape.WaitIndicator}"
                Width="{TemplateBinding Width}">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform />
                        <SkewTransform />
                        <RotateTransform Angle="0" />
                        <TranslateTransform />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Determinate" />
                    <VisualState x:Name="Indeterminate">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="Content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="359" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlWaitIndicators.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlScrollBars.xaml-->
    <!-- General -->

    <Style x:Key="{dxgt:LWKey ScrollBar.ScrollingCornerStyle}" TargetType="Border">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Window.Background, Office2019Colorful=Brush.Window.Background, Office2019HighContrast=Brush.Window.Background, VS2019Blue=Brush.Control.Background, Win11=Brush.Button.SimpleButtonBackground'}" />
        <Style.Triggers>
            <Trigger Property="dxg:GridBorderHelper.ShowBorder" Value="True">
                <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Window.Background, Office2019Colorful=Brush.Editor.Background, Office2019HighContrast=Brush.Control.Background, VS2019Blue=Brush.Control.Background, VS2019Dark=Brush.Control.Background, Win10Dark=Brush.Window.Background, Win10Light=Brush.Window.Background, Win11=Brush.Button.SimpleButtonBackground'}" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxg:GridBorderHelper.ShowBorder" Value="False" />
                    <Condition Property="dxg:GridScrollBarHelper.HasFixedRightColumns" Value="True" />
                    <Condition Property="dxg:GridScrollBarHelper.ExtendScrollBarToFixedColumns" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
                    <Setter Property="BorderThickness" Value="0,1,0,0" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Left -->

    <Style x:Key="{dxgt:LWKey ScrollBar.ScrollingCornerLeftStyle}" TargetType="Border">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Window.Background, Office2019Colorful=Brush.Editor.Background, Office2019HighContrast=Brush.Control.Background, VS2019Blue=Brush.Control.Background, VS2019Dark=Brush.Control.Background, Win10Dark=Brush.Window.Background, Win10Light=Brush.Window.Background, Win11=Brush.Button.SimpleButtonBackground'}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="0,1,1,0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="dx:ScrollBarExtensions.ScrollBarMode" Value="TouchOverlap">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxgt:LWKey ScrollBar.ScrollingFixedLeftThumbStyle}" TargetType="Border">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Window.Background, Office2019Colorful=Brush.Editor.Background, Office2019HighContrast=Brush.Control.Background, VS2019Blue=Brush.Control.Background, VS2019Dark=Brush.Control.Background, Win10Dark=Brush.Window.Background, Win10Light=Brush.Window.Background, Win11=Brush.Button.SimpleButtonBackground'}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="dx:ScrollBarExtensions.ScrollBarMode" Value="TouchOverlap">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="dxg:GridBorderHelper.ShowBorder" Value="True">
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Right -->

    <Style x:Key="{dxgt:LWKey ScrollBar.ScrollingFixedRightThumbStyle}" TargetType="Border">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Window.Background, Office2019Colorful=Brush.Editor.Background, Office2019HighContrast=Brush.Control.Background, VS2019Blue=Brush.Control.Background, VS2019Dark=Brush.Control.Background, Win10Dark=Brush.Window.Background, Win10Light=Brush.Window.Background, Win11=Brush.Button.SimpleButtonBackground'}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="dx:ScrollBarExtensions.ScrollBarMode" Value="TouchOverlap">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="dxg:GridBorderHelper.ShowBorder" Value="True">
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxgt:LWKey ScrollBar.ScrollingFixedLineStyle}" TargetType="Border">
        <Setter Property="Background" Value="{dx:LWBrush '#00000000, Office2019Black=Brush.Window.Background, Win11=#00FFFFFF'}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="BorderThickness" Value="1,1,1,0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="dx:ScrollBarExtensions.ScrollBarMode" Value="TouchOverlap">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="dxg:GridBorderHelper.ShowBorder" Value="True">
                <Setter Property="BorderThickness" Value="1,0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Fixed -->

    <Style x:Key="{dxgt:LWKey ScrollBar.ScrollingFixedLineContentTotalSummaryStyle}" TargetType="Border">
        <Setter Property="Background" Value="{dx:LWBrush '#00000000, Office2019Black=Brush.Window.Background, Win11=#00FFFFFF'}" />
        <Setter Property="BorderBrush" Value="{dx:LWBrush 'Brush.Border, Office2019Colorful=Brush.Delimiter, Office2019HighContrast=Brush.Delimiter'}" />
        <Setter Property="BorderThickness" Value="1,1,1,0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <DataTemplate x:Key="{dxgt:LWKey ScrollBar.ScrollingFixedLineTotalSummaryTemplate}">
        <dx:DXBorder Style="{DynamicResource {dxgt:LWKey ScrollBar.ScrollingFixedLineContentTotalSummaryStyle}}" />
    </DataTemplate>

    <Style x:Key="{dxgt:LWKey ScrollBar.FixedLeftLinePlaceHolderTotalSummaryStyle}" TargetType="ContentPresenter" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlScrollBars.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlExpandButtons.xaml-->
    <!-- General -->

    <!-- Expand -->
    <Style x:Key="{dxgt:LWKey GroupRow.ExpandButtonStyle}" TargetType="{x:Type dx:ToggleStateButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Height" Value="16" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource {dxgt:LWKey GroupRow.ExpandButtonTemplate}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="16" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="42" />
                <Setter Property="MinHeight" Value="23" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlExpandButtons.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlErrorPanel.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GridControl.ErrorPanelTemplate}" TargetType="dxg:ErrorPanel">
        <Grid Margin="5">
            <dx:DXBorder
                Background="{StaticResource Brush.Editor.Background}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1"
                Padding="12,3,12,3">
                <Grid Margin="6" Width="262">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Image
                        Grid.RowSpan="2"
                        HorizontalAlignment="Left"
                        Stretch="None"
                        VerticalAlignment="Top">
                        <Image.Source>
                            <Binding Converter="{dx:EmbeddedResourceImageConverter}" Source="DevExpress.Xpf.Core.Core.Images.ErrorIcon.png" />
                        </Image.Source>
                    </Image>
                    <TextBlock
                        Grid.Row="0"
                        Grid.Column="1"
                        FontSize="18"
                        Foreground="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                        Padding="6"
                        Text="Error"
                        TextAlignment="Left" />
                    <TextBlock
                        Grid.Row="1"
                        Grid.Column="1"
                        Foreground="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                        Padding="6"
                        Text="{Binding}"
                        TextAlignment="Left"
                        TextWrapping="Wrap" />
                </Grid>
            </dx:DXBorder>
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlErrorPanel.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlFocusedBorder.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GridControl.FocusedGroupRowBorderTemplate}">
        <Rectangle Stroke="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.ControlLight.Foreground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, Win11=Brush.Accent'}" StrokeDashArray="1 2" StrokeThickness="1" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridControl.VerticalFocusedGroupRowBorderTemplate}">
        <Rectangle Stroke="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.ControlLight.Foreground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, Win11=Brush.Accent'}" StrokeDashArray="1 2" StrokeThickness="1" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridControl.FocusedRowBorderTemplate}">
        <Rectangle Stroke="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.ControlLight.Foreground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, Win11=Brush.Accent'}" StrokeDashArray="1 2" StrokeThickness="1" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridControl.FocusedCellBorderTemplate}">
        <Rectangle Stroke="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.ControlLight.Foreground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, Win11=Brush.Accent'}" StrokeDashArray="1 2" StrokeThickness="1" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridControl.FocusedCellBorderCardViewTemplate}">
        <Rectangle Stroke="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.ControlLight.Foreground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, VS2019Dark=Brush.HoverForeground, Win11=Brush.Accent'}" StrokeDashArray="1 2" StrokeThickness="1" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridControl.FocusedCardBorderTemplate}">
        <Rectangle Stroke="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.ControlLight.Foreground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, Win11=Brush.Accent'}" StrokeDashArray="1 2" StrokeThickness="1" />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlFocusedBorder.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlElements.xaml-->
    <!-- General -->

    <!-- RowSplitter -->

    <!-- OptionToggleButton -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlElements.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlLookUpEdit.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey LookUpEdit.PopupTopAreaBackgroundPanelTemplate}" TargetType="ContentControl">
        <dx:DXBorder BorderBrush="{StaticResource Brush.Editor.Background}" BorderThickness="0,0,0,1">
            <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" />
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlLookUpEdit.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlLightweightStyles.xaml-->
    <!-- General -->

    <dxi:BrushSet x:Key="{dxgt:LWKey GridRow.CellForegroundBrushes}" />

    <dxi:BrushSet x:Key="{dxgt:LWKey GridRow.CellBackgroundBrushes}" />

    <dxi:BrushSet x:Key="{dxgt:LWKey GroupRow.GroupRowColumnSummaryBrushes}">
        <dxi:BrushSet.Elements>
            <dxi:BrushInfo x:Key="Normal" Brush="{StaticResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}" />
            <dxi:BrushInfo x:Key="Focused" Brush="{StaticResource {dxgt:LWKey GroupRow.GroupColumnSummaryFocusedBorderBrush}}" />
        </dxi:BrushSet.Elements>
    </dxi:BrushSet>

    <!-- Fixed Line -->

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.FixedLineSeparatorTemplate}" TargetType="dxg:RowFixedLineSeparatorControl">
        <dx:DXBorder BorderBrush="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}" BorderThickness="1,0,1,0" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GroupRow.GroupRowFixedLineSeparatorTemplate}" TargetType="dxg:GroupRowFixedLineSeparatorControl">
        <dx:DXBorder BorderBrush="{DynamicResource {dxgt:LWKey GridRow.BorderBrush}}" BorderThickness="1,0,1,0" Margin="{DynamicResource {dxgt:LWKey GroupRow.GroupRowBottomLineThickness}}" />
    </ControlTemplate>

    <!-- Row -->

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.RowDetailsTemplate}" TargetType="dxg:RowDetailsControl">
        <Grid x:Name="PART_RootGrid">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <dx:DXBorder
                x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="0,1,0,0" />
            <dx:DataContentPresenter x:Name="Content" Grid.Row="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=View.ShowHorizontalLines}" Value="False">
                <Setter Property="BorderThickness" TargetName="Border" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActualHeight, ElementName=Content}" Value="0">
                <Setter Property="BorderThickness" TargetName="Border" Value="0" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlLightweightStyles.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlTreeListIndentItems.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey TreeListView.IndentItemTemplate}">
        <Path Stroke="{StaticResource Brush.Delimiter}" StrokeThickness="1" Width="{DynamicResource {dxgt:LWKey TreeListView.RowIndent}}">
            <Path.Data>
                <GeometryGroup>
                    <LineGeometry x:Name="PART_Line1" />
                    <LineGeometry x:Name="PART_Line2" />
                    <LineGeometry x:Name="PART_Line3" />
                </GeometryGroup>
            </Path.Data>
        </Path>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlTreeListIndentItems.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlTotalSummary.xaml-->
    <!-- General -->
    <Style x:Key="{dxgt:LWKey TotalSummary.TotalSummaryContentStyle}" TargetType="{x:Type dx:DataContentPresenter}">
        <Setter Property="HorizontalAlignment" Value="{Binding Path=Column.ActualHorizontalContentAlignment}" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxt:LWKey ThemeColors.BlackForegroundColor}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Item -->

    <DataTemplate x:Key="{dxgt:LWKey TotalSummary.TotalSummaryItemTemplate}">
        <TextBlock dxg:InlineTextService.InlineInfo="{Binding Column.TotalSummaryTextInfo}" Style="{StaticResource {dxgt:LWKey TotalSummary.TotalSummaryTextControlStyle}}" />
    </DataTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl\GridControlTotalSummary.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl.xaml-->
    <!-- General -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\GridControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\ColumnHeader\ColumnHeaderControl.xaml-->
    <!-- General -->

    <Style x:Key="{dxgt:LWKey GridColumnHeader.HeaderCustomizationAreaStyle}" TargetType="{x:Type ContentPresenter}" />

    <Style x:Key="{dxgt:LWKey GridColumnHeader.CaptionToArrowIndentBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="15" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxgt:LWKey GridColumnHeader.ControlTemplate}" TargetType="{x:Type dxg:GridColumnHeaderBase}">
        <Grid x:Name="PART_Root">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <dx:DXBorder
                x:Name="headerLeftSeparator"
                Grid.Column="0"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="0,0,1,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Visibility="Collapsed" />
            <dx:DXBorder
                x:Name="headerRightSeparator"
                Grid.Column="2"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Visibility="Collapsed" />
            <dx:DXBorder
                x:Name="PART_Border"
                Grid.Column="1"
                Focusable="True"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="0,0,1,1" />
            <dx:DXBorder x:Name="PART_LayoutBorder" Grid.Column="1">
                <dxg:ColumnHeaderLayout x:Name="PART_Layout" Padding="{dx:LWThickness '(4,2,4,3), Win11=(6,4,6,5)'}" />
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="DataColumnPosition" Value="Left">
                <Setter Property="Visibility" TargetName="headerRightSeparator" Value="Visible" />
                <Setter Property="Width" TargetName="headerRightSeparator" Value="{Binding ActualBandRightSeparatorWidth}" />
                <Setter Property="Background" TargetName="headerRightSeparator">
                    <Setter.Value>
                        <MultiBinding>
                            <MultiBinding.Bindings>
                                <Binding Path="ActualBandHeaderRightSeparatorColor" />
                                <Binding Path="BorderBrush" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding.Bindings>
                            <MultiBinding.Converter>
                                <dxg:BandSeparatorColorConverter />
                            </MultiBinding.Converter>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="DataColumnPosition" Value="Middle">
                <Setter Property="Visibility" TargetName="headerRightSeparator" Value="Visible" />
                <Setter Property="Width" TargetName="headerRightSeparator" Value="{Binding ActualBandRightSeparatorWidth}" />
                <Setter Property="Background" TargetName="headerRightSeparator">
                    <Setter.Value>
                        <MultiBinding>
                            <MultiBinding.Bindings>
                                <Binding Path="ActualBandHeaderRightSeparatorColor" />
                                <Binding Path="BorderBrush" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding.Bindings>
                            <MultiBinding.Converter>
                                <dxg:BandSeparatorColorConverter />
                            </MultiBinding.Converter>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter Property="Visibility" TargetName="headerLeftSeparator" Value="Visible" />
                <Setter Property="Width" TargetName="headerLeftSeparator" Value="{Binding ActualBandLeftSeparatorWidth}" />
                <Setter Property="Background" TargetName="headerLeftSeparator">
                    <Setter.Value>
                        <MultiBinding>
                            <MultiBinding.Bindings>
                                <Binding Path="ActualBandHeaderLeftSeparatorColor" />
                                <Binding Path="BorderBrush" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding.Bindings>
                            <MultiBinding.Converter>
                                <dxg:BandSeparatorColorConverter />
                            </MultiBinding.Converter>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasRightSibling" Value="True" />
                    <Condition Property="HasTopElement" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="headerRightSeparator" Value="0,0,1,0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasRightSibling" Value="True" />
                    <Condition Property="HasTopElement" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="headerRightSeparator" Value="0,0,1,0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasRightSibling" Value="True" />
                    <Condition Property="HasLeftSibling" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="PART_Border" Value="1,0,1,1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasRightSibling" Value="True" />
                    <Condition Property="HasLeftSibling" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="PART_Border" Value="0,0,1,1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasRightSibling" Value="False" />
                    <Condition Property="HasLeftSibling" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="PART_Border" Value="1,0,0,1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasRightSibling" Value="False" />
                    <Condition Property="HasLeftSibling" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="PART_Border" Value="0,0,0,1" />
            </MultiTrigger>
            <Trigger Property="ColumnPosition" Value="Standalone">
                <Setter Property="BorderThickness" TargetName="PART_Border" Value="1" />
                <Setter Property="CornerRadius" TargetName="PART_Border" Value="{dx:LWCornerRadius '0, Win11=5'}"/>
                <Setter Property="Padding" TargetName="PART_Layout" Value="{StaticResource {dxgt:LWKey GridColumnHeader.ContentMargin}}" />
            </Trigger>
            <Trigger Property="ColumnPosition" Value="Right">
                <Setter Property="BorderThickness" TargetName="PART_Border" Value="1,0,0,1" />
            </Trigger>
            <Trigger Property="dxg:ColumnBase.HeaderPresenterType" Value="GroupPanel">
                <Setter Property="Margin" TargetName="PART_Border">
                    <Setter.Value>
                        <Binding Path="(dxg:GridColumn.MergeWithPreviousGroup)">
                            <Binding.Converter>
                                <dx:BoolToObjectConverter FalseValue="0,0,3,0" TrueValue="-5,0,4,0" />
                            </Binding.Converter>
                        </Binding>
                    </Setter.Value>
                </Setter>
                <Setter Property="Padding" TargetName="PART_Layout" Value="{StaticResource {dxgt:LWKey GridColumnHeader.ContentMargin}}" />
                <Setter Property="Margin" TargetName="PART_Root">
                    <Setter.Value>
                        <Binding Path="(dxg:GridColumn.GroupLevel)">
                            <Binding.Converter>
                                <dxg:GroupPanelPaddingConverter Offset="4" />
                            </Binding.Converter>
                        </Binding>
                    </Setter.Value>
                </Setter>
                <Setter Property="VerticalAlignment" TargetName="PART_Root" Value="Top" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" TargetName="PART_Layout" Value="14" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxi:AppearanceOptions.HasPadding), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Padding" TargetName="PART_Layout" Value="{Binding Path=(dxi:AppearanceOptions.Padding), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="BorderThickness" TargetName="PART_Border" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter Property="Margin" TargetName="PART_LayoutBorder" Value="{Binding Path=(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\ColumnHeader\ColumnHeaderControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\ColumnHeader\ColumnHeaderSortArrow.xaml-->
    <!-- General -->

    <Style x:Key="{dxgt:LWKey GridColumnHeader.SortArrowUpStyle}" TargetType="{x:Type Control}">
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <Style x:Key="{dxgt:LWKey GridColumnHeader.SortArrowDownStyle}" TargetType="{x:Type Control}">
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\ColumnHeader\ColumnHeaderSortArrow.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\ColumnHeader\ColumnHeaderFilter.xaml-->
    <!-- General -->

    <!-- Calendar -->

    <ControlTemplate x:Key="{dxgt:LWKey GridColumnHeader.CalendarFilterControlTemplate}" TargetType="dxg:CalendarFilterControl">
        <Grid Background="{StaticResource Brush.Editor.Background}" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <StackPanel x:Name="PART_UpperFiltersPanel" />
            <dxe:DateNavigator
                x:Name="PART_DateNavigator"
                Grid.Row="1"
                ColumnCount="1"
                IsMultiSelect="True"
                Margin="0,12,0,0"
                RowCount="1"
                ShowTodayButton="False" />
            <ScrollViewer Grid.Row="2" VerticalScrollBarVisibility="Auto">
                <StackPanel x:Name="PART_BottomFiltersPanel" />
            </ScrollViewer>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{dxgt:LWKey GridColumnHeader.DateFilterStyle}" TargetType="{x:Type CheckBox}">
        <Setter Property="Margin" Value="10,6,10,6" />
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\ColumnHeader\ColumnHeaderFilter.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\ColumnHeader\ColumnHeaderDragIndicator.xaml-->





    <DataTemplate x:Key="{dxgt:LWKey GridColumnHeader.DragIndicatorTemplate}">
        <dxg:DragIndicatorPanel
            x:Name="panel"
            CanGroupMergeState="{Binding Path=(dxg:GridColumnHeader.CanGroupMergeState), RelativeSource={RelativeSource TemplatedParent}}"
            DropPlaceOrientation="{Binding Path=(dxg:GridColumnHeader.DropPlaceOrientation), RelativeSource={RelativeSource TemplatedParent}}"
            IsGroupPanel="{Binding Path=(dxg:GridColumnHeader.IsGroupPanel), RelativeSource={RelativeSource TemplatedParent}}"
            ShowDownArrow="{Binding Path=(dxg:GridColumnHeader.IsColumnChooser), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolInverseConverter}}">
            <dx:DXDockPanel Name="Content" SnapsToDevicePixels="True">
                <Grid
                    x:Name="GlyphUp"
                    dx:DXDockPanel.Dock="Top"
                    Height="12"
                    HorizontalAlignment="Center"
                    RenderTransformOrigin="0.5,0.5"
                    VerticalAlignment="Top"
                    Width="12">
                    <Grid.RenderTransform>
                        <TranslateTransform x:Name="UpTransform" X="1" Y="0" />
                    </Grid.RenderTransform>
                    <Path
                        Data="F1 M 12,4L 6,10L 0,4L 4,4L 4,0L 8,0L 8,4L 12,4 Z "
                        Fill="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, VS2019Blue=Brush.Foreground, Win11=Brush.Accent'}"
                        Height="10"
                        Stretch="Fill"
                        Width="12" />
                    <Rectangle
                        Fill="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, VS2019Blue=Brush.Foreground, Win11=Brush.Accent'}"
                        Height="1"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Bottom"
                        Visibility="{Binding VisibilityGroupMergeState, ElementName=panel}"
                        Width="12" />
                    <Grid
                        Height="8"
                        HorizontalAlignment="Right"
                        Margin="0,2,-10,0"
                        VerticalAlignment="Top"
                        Visibility="{Binding VisibilityGroupMergeState, ElementName=panel}"
                        Width="8">
                        <Rectangle
                            Fill="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, VS2019Blue=Brush.Foreground, Win11=Brush.Accent'}"
                            Height="8"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="2" />
                        <Rectangle
                            Fill="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, VS2019Blue=Brush.Foreground, Win11=Brush.Accent'}"
                            Height="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="8" />
                    </Grid>
                </Grid>
                <Grid
                    x:Name="GlyphDown"
                    dx:DXDockPanel.Dock="Bottom"
                    Height="12"
                    HorizontalAlignment="Center"
                    RenderTransformOrigin="0.5,0.5"
                    VerticalAlignment="Bottom"
                    Visibility="{Binding ShowDownArrow, ElementName=panel, Converter={dxmvvm:BooleanToVisibilityConverter}}"
                    Width="12">
                    <Grid.RenderTransform>
                        <TranslateTransform x:Name="DownTransform" X="1" Y="0" />
                    </Grid.RenderTransform>
                    <Path
                        Data="F1 M 12,6L 6,0L 0,6L 4,6L 4,10L 8,10L 8,6L 12,6 Z "
                        Fill="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, VS2019Blue=Brush.Foreground, Win11=Brush.Accent'}"
                        Height="10"
                        Stretch="Fill"
                        Width="12" />
                    <Rectangle
                        Fill="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, VS2019Blue=Brush.Foreground, Win11=Brush.Accent'}"
                        Height="1"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Top"
                        Visibility="{Binding VisibilityGroupMergeState, ElementName=panel}"
                        Width="12" />
                </Grid>
                <Grid Height="{TemplateBinding Property=dxg:TableView.ColumnHeaderDragIndicatorSize}" />
                <dx:DXDockPanel.Triggers>
                    <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames
                                    BeginTime="00:00:00"
                                    RepeatBehavior="Forever"
                                    Storyboard.TargetName="UpTransform"
                                    Storyboard.TargetProperty="Y">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                    <SplineDoubleKeyFrame KeySpline="0,0,0.5,1" KeyTime="00:00:00.5" Value="3.5" />
                                    <SplineDoubleKeyFrame KeySpline="0,0,0.5,1" KeyTime="00:00:01" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames
                                    BeginTime="00:00:00"
                                    RepeatBehavior="Forever"
                                    Storyboard.TargetName="DownTransform"
                                    Storyboard.TargetProperty="Y">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="-3.5" />
                                    <SplineDoubleKeyFrame KeyTime="00:00:01" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </dx:DXDockPanel.Triggers>
                <dx:DXDockPanel.RenderTransform>
                    <TranslateTransform x:Name="arrowTransform" X="-7">
                        <TranslateTransform.Y>
                            <Binding ElementName="panel" Path="IsDownOffset">
                                <Binding.Converter>
                                    <dx:BoolToDoubleConverter FalseValue="-12" TrueValue="-10" />
                                </Binding.Converter>
                            </Binding>
                        </TranslateTransform.Y>
                    </TranslateTransform>
                </dx:DXDockPanel.RenderTransform>
            </dx:DXDockPanel>
        </dxg:DragIndicatorPanel>
    </DataTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\ColumnHeader\ColumnHeaderDragIndicator.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\ColumnHeader.xaml-->
    <!-- General -->
    <ControlTemplate x:Key="{dxgt:LWKey GridColumnHeader.Layout}" TargetType="{x:Type Control}">
        <dxg:ColumnHeaderDockPanel x:Name="PART_LayoutPanel" Background="Transparent" ContentMargin="{TemplateBinding Padding}" />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\ColumnHeader.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row\RowControl.xaml-->

    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.RowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid>
            <dx:DXBorder x:Name="RowContentBorder">
                <dx:DXBorder.Background>
                    <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}" />
                </dx:DXBorder.Background>
            </dx:DXBorder>
            <dx:DXBorder
                x:Name="FadeBorder"
                Background="{DynamicResource {dxgt:LWKey GridRow.BorderUnfocusedBrush}}"
                dxg:FadeSelectionHelper.FadeSelectionOnLostFocus="{Binding Path=View.ActualFadeSelectionOnLostFocus}"
                dxg:FadeSelectionHelper.IsKeyboardFocusWithinView="{Binding Path=(dxg:GridControl.ActiveView).IsKeyboardFocusWithin, RelativeSource={RelativeSource Mode=Self}}"
                dxg:FadeSelectionHelper.IsSelected="{Binding SelectionState, Converter={dxg:SelectionStateToBooleanConverter}}"
                dxg:FadeSelectionHelper.Opacity="1"
                Visibility="Collapsed" />
            <dx:DXBorder x:Name="RowBottomLine" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}">
                <dx:DXBorder.BorderThickness>
                    <Binding Path="View.ShowHorizontalLines">
                        <Binding.Converter>
                            <dx:BoolToObjectConverter FalseValue="0" TrueValue="0,0,0,1" />
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.BorderThickness>
            </dx:DXBorder>
            <ContentPresenter />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ShowBottomLine}" Value="True">
                <Setter Property="BorderThickness" TargetName="RowBottomLine" Value="0,0,0,1" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxg:RowData.CurrentRowData).(dxe:BaseEdit.HasValidationError), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxg:RowData.CurrentRowData).IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="RowContentBorder" Value="{StaticResource {dxgt:LWKey GridRow.ValidationErrorBrush}}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ElementName=FadeBorder, Path=Visibility}" Value="Visible">
                <Setter Property="Foreground" Value="{DynamicResource {dxgt:LWKey GridRow.TextUnfocusedBrush}}" />
                <Setter Property="Visibility" TargetName="RowContentBorder" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TotalSummary -->

    <Style x:Key="{dxgt:LWKey GridRow.DetailTotalSummaryIndentBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Delimiter}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
    </Style>

    <!-- InfinityLoading -->
    <ControlTemplate x:Key="LoadingIndicator" TargetType="{x:Type ProgressBar}">
        <Grid x:Name="Root">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Determinate" />
                    <VisualState x:Name="Indeterminate">
                        <Storyboard RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0.38" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.26" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.26" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.38" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0.62" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0.62" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0.62" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.38" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.26" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.26" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0.38" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0.62" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse3" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.62" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.38" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.26" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0.26" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0.38" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.62" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse4" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.62" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.38" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0.26" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0.26" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.38" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.62" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse5" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.62" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0.38" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0.26" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.26" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.38" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0.62" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <StackPanel Orientation="Horizontal">
                    <Ellipse
                        x:Name="Ellipse1"
                        Fill="{TemplateBinding Foreground}"
                        Height="5"
                        Margin="2"
                        Width="5" />
                    <Ellipse
                        x:Name="Ellipse2"
                        Fill="{TemplateBinding Foreground}"
                        Height="5"
                        Margin="2"
                        Width="5" />
                    <Ellipse
                        x:Name="Ellipse3"
                        Fill="{TemplateBinding Foreground}"
                        Height="5"
                        Margin="2"
                        Width="5" />
                    <Ellipse
                        x:Name="Ellipse4"
                        Fill="{TemplateBinding Foreground}"
                        Height="5"
                        Margin="2"
                        Width="5" />
                    <Ellipse
                        x:Name="Ellipse5"
                        Fill="{TemplateBinding Foreground}"
                        Height="5"
                        Margin="2"
                        Width="5" />
                </StackPanel>
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.LoadingRowTemplate}" TargetType="dxg:LoadingRowControl">
        <Grid x:Name="Root" Margin="1" MinHeight="32">
            <ProgressBar
                x:Name="Indicator"
                Foreground="{dx:LWBrush 'Brush.Focused, Win11=Brush.Accent'}"
                HorizontalAlignment="Center"
                IsIndeterminate="{Binding ShowLoadingIndicator}"
                Template="{StaticResource LoadingIndicator}"
                VerticalAlignment="Center"
                Visibility="{Binding ShowLoadingIndicator, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <dxg:LoadingRowButton
                Click="{DXEvent 'LoadMoreRows()'}"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Visibility="{Binding AllowLoadMore, Converter={StaticResource BooleanToVisibilityConverter}}">
                <StackPanel Margin="9,0,9,1" Orientation="Horizontal">
                    <Label Content="{dxg:GridControlStringId LoadingRowLoadMore}" />
                    <Grid Height="16" Margin="3" Width="16">
                        <Path
                            Data="F1 M 10,5L 5,10L 0,5L 3,5L 3,3L 7,3L 7,5L 10,5 Z M 3,2L 3,0L 7,0L 7,2L 3,2 Z "
                            Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                            Height="10"
                            HorizontalAlignment="Center"
                            Margin="0,1,0,0"
                            Stretch="Fill"
                            VerticalAlignment="Center"
                            Width="10" />
                    </Grid>
                </StackPanel>
            </dxg:LoadingRowButton>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.LoadingRowErrorTemplate}" TargetType="dxg:LoadingRowControl">
        <Grid x:Name="Root" Margin="3">
            <Grid
                HorizontalAlignment="Center"
                Margin="96,0,96,0"
                MaxWidth="640"
                VerticalAlignment="Top">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Path
                    Data="F1 M 7,0C 10.866,0 14,3.13401 14,7C 14,10.866 10.866,14 7,14C 3.13401,14 -6.35783e-007,10.866 -6.35783e-007,7C -6.35783e-007,3.13401 3.13401,0 7,0 Z M 2.75736,4.17157L 5.58579,7L 2.75736,9.82843L 4.17157,11.2426L 7,8.41422L 9.82843,11.2426L 11.2426,9.82843L 8.41421,7L 11.2426,4.17157L 9.82843,2.75736L 7,5.58579L 4.17157,2.75736L 2.75736,4.17157 Z "
                    Fill="{StaticResource Brush.Custom.Red}"
                    Height="14"
                    HorizontalAlignment="Center"
                    Margin="4"
                    Stretch="Fill"
                    VerticalAlignment="Top"
                    Width="14" />
                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <TextBlock
                        HorizontalAlignment="Left"
                        Margin="4,3,4,3"
                        Text="{Binding ErrorText}"
                        TextWrapping="Wrap" />
                    <TextBlock HorizontalAlignment="Center" Visibility="{Binding IsLoadingButtonVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <dxe:HyperlinkEdit Command="{Binding LoadRowsCommand}" Text="{Binding LoadingButtonText}" />
                    </TextBlock>
                </StackPanel>
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridRow.LoadingRowButtonTemplate}" TargetType="dxg:LoadingRowButton">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" />
            <ContentPresenter
                x:Name="Content"
                HorizontalAlignment="Center"
                Margin="3"
                TextBlock.Foreground="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Win11=Brush.ListItem.HoverBackground'}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="TextBlock.Foreground" TargetName="Content" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row\RowControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row\RowDetail.xaml-->
    <!-- General -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row\RowDetail.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row\RowGroup.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GroupRow.GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GroupRow.GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder x:Name="ContentBorder" TextBlock.Foreground="{DynamicResource {dxgt:LWKey GroupRow.GroupGridRowHeaderTextBrush}}">
            <ContentPresenter />
        </dx:DXBorder>
    </ControlTemplate>

    <Style x:Key="{dxgt:LWKey GroupRow.GroupRowPresenterStyle}" TargetType="{x:Type dxg:GroupGridRowPresenter}" />

    <ControlTemplate x:Key="{dxgt:LWKey CardView.GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{StaticResource Brush.Editor.Background}" BorderBrush="{StaticResource Brush.Delimiter}">
            <ContentPresenter />
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey CardView.GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Decorator x:Name="ContentDecorator">
            <dx:DXBorder
                x:Name="ContentBorder"
                BorderBrush="{StaticResource Brush.Delimiter}"
                DockPanel.Dock="Top"
                TextBlock.Foreground="{DynamicResource {dxgt:LWKey GroupRow.GroupGridRowHeaderTextBrush}}">
                <ContentPresenter />
            </dx:DXBorder>
        </Decorator>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsPreviewExpanded}" Value="True">
                <Setter Property="BorderThickness" TargetName="ContentBorder" Value="0,1,0,0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsRowVisible}" Value="false">
                <Setter Property="Visibility" TargetName="ContentBorder" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource TemplatedParent}}" Value="Horizontal">
                <Setter Property="DockPanel.Dock" TargetName="ContentBorder" Value="Left" />
                <Setter Property="VerticalAlignment" TargetName="ContentBorder" Value="Stretch" />
                <Setter Property="LayoutTransform" TargetName="ContentDecorator">
                    <Setter.Value>
                        <RotateTransform Angle="-90" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row\RowGroup.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row\RowIndicatorIcons.xaml-->
    <!-- General -->

    <DataTemplate x:Key="{dxgt:LWKey RowIndicator.ChangedIconTemplate}">
        <Path Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Row.Changed}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxgt:LWKey RowIndicator.NewItemRowIconTemplate}">
        <Path Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Row.New}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxgt:LWKey RowIndicator.EditingIconTemplate}">
        <Path Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Row.Edit}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxgt:LWKey RowIndicator.ErrorIconTemplate}">
        <Path Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Row.Error}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxgt:LWKey RowIndicator.AutoFilterRowIconTemplate}">
        <Path Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Filter}" />
    </DataTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row\RowIndicatorIcons.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row\RowIndicator.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey RowIndicator.RowPanelTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey RowIndicator.RowOffsetControlTemplate}" TargetType="{x:Type dxg:RowOffset}">
        <Grid x:Name="PART_RootGrid" Background="{StaticResource {dxgt:LWKey GridRow.BorderNoneBrush}}">
            <Path x:Name="PART_OffsetPath" Stroke="{DynamicResource {dxgt:LWKey GridRow.BorderBrush}}" StrokeThickness="1" />
            <dx:DXBorder x:Name="ContentBorder" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowRowBreak" Value="True">
                <Setter Property="BorderBrush" TargetName="ContentBorder" Value="{DynamicResource {dxgt:LWKey GridRow.RowBreakBrush}}" />
                <Setter Property="BorderThickness" TargetName="ContentBorder" Value="{DynamicResource {dxgt:LWKey GridRow.RowBreakThickness}}" />
            </Trigger>
            <Trigger Property="IsLastFixedRow" Value="True">
                <Setter Property="BorderBrush" TargetName="ContentBorder" Value="{DynamicResource {dxgt:LWKey GridRow.RowBreakBrush}}" />
                <Setter Property="BorderThickness" TargetName="ContentBorder" Value="0,1,0,1" />
                <Setter Property="Height" TargetName="ContentBorder" Value="{Binding Path=View.FixedLineHeight}" />
                <Setter Property="VerticalAlignment" TargetName="ContentBorder" Value="Bottom" />
            </Trigger>
            <Trigger Property="FixedRowPosition" Value="Bottom">
                <Setter Property="VerticalAlignment" TargetName="ContentBorder" Value="Top" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="PART_RootGrid" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="PART_RootGrid" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey RowIndicator.GroupRowOffsetControlTemplate}" TargetType="{x:Type dxg:GroupRowOffset}">
        <dx:DXBorder x:Name="groupRowBorderFocused" Background="{StaticResource {dxgt:LWKey GridRow.BorderFocusedBrush}}">
            <dx:DXBorder.Visibility>
                <Binding Path="SelectionState">
                    <Binding.Converter>
                        <dxg:SelectionStateToVisibilityConverter Value="Focused" />
                    </Binding.Converter>
                </Binding>
            </dx:DXBorder.Visibility>
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey RowIndicator.RowOffsetTemplate}" TargetType="{x:Type ContentControl}">
        <dxg:RowOffset
            AllowHorizontalLines="{Binding IsMasterRowExpanded, Converter={StaticResource BoolInverseConverter}}"
            AllowVerticalLines="False"
            BorderBrush="Transparent"
            FixedRowPosition="{Binding Path=FixedRowPosition}"
            IsLastFixedRow="{Binding Path=IsLastFixedRow}"
            NextRowLevel="{Binding Path=NextRowLevel}"
            Offset="{Binding Path=View.LeftGroupAreaIndent}"
            RowLevel="{Binding Path=Level}"
            ShowRowBreak="{Binding Path=ShowRowBreak}"
            Template="{DynamicResource {dxgt:LWKey RowIndicator.RowOffsetControlTemplate}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey RowIndicator.GroupRowOffsetTemplate}" TargetType="{x:Type ContentControl}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row\RowIndicator.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row.xaml-->
    <!-- General -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable\Row.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable.xaml-->
    <!-- General -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridTable.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardTemplates.xaml-->
    <!-- General -->

    <Style x:Key="{dxgt:LWKey CardTemplates.CardRowHeaderTextStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="Margin" Value="3" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <dxg:DefaultStyle x:Key="{dxgt:LWKey CardTemplates.CellStyle}" TargetType="{x:Type dxg:CellContentPresenter}" />

    <DataTemplate x:Key="{dxgt:LWKey CardTemplates.SeparatorTemplate}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="Delimiter"
                Background="{StaticResource Brush.Delimiter}"
                MinHeight="1"
                MinWidth="1" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="Delimiter" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.ControlLight.Foreground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, Win11=Brush.Accent'}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource TemplatedParent}}" Value="Horizontal">
                <Setter Property="Margin" TargetName="Delimiter" Value="0,3,0,3" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource TemplatedParent}}" Value="Vertical">
                <Setter Property="Margin" TargetName="Delimiter" Value="3,0,3,0" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardTemplates.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardShowHeadersButton.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey CardView.ShowHeadersButtonTemplate}" TargetType="{x:Type ToggleButton}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" BorderBrush="Transparent" />
            <StackPanel
                x:Name="Group"
                HorizontalAlignment="Center"
                Margin="4,4,1,4"
                Orientation="Horizontal"
                VerticalAlignment="Center">
                <Path x:Name="Icon" Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.CardShowHeaders}" />
                <Grid x:Name="Arrow" Margin="3">
                    <Path
                        x:Name="Expanded"
                        Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}"
                        Opacity="0"
                        Style="{StaticResource UIShape.Up}" />
                    <Path x:Name="Collapsed" Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Down}" />
                </Grid>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="Collapsed" Value="{dx:LWBrush 'Brush.HoverForeground, Office2019Black=Brush.ForegroundDark, VS2019Light=Brush.Focused, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Fill" TargetName="Expanded" Value="{dx:LWBrush 'Brush.HoverForeground, Office2019Black=Brush.ForegroundDark, VS2019Light=Brush.Focused, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Fill" TargetName="Icon" Value="{dx:LWBrush 'Brush.HoverForeground, Office2019Black=Brush.ForegroundDark, VS2019Light=Brush.Focused, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Colorful=Brush.HoverAltBackground, Win11=Brush.ListItem.HoverBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.Border, Office2019Colorful=Brush.HoverAltBackground'}" />
                <Setter Property="BorderThickness" TargetName="IsDefault" Value="0" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Fill" TargetName="Collapsed" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Fill" TargetName="Expanded" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Fill" TargetName="Icon" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Border}" />
                <Setter Property="BorderThickness" TargetName="IsDefault" Value="0" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Opacity" TargetName="Collapsed" Value="0" />
                <Setter Property="Opacity" TargetName="Expanded" Value="1" />
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.Window.Background'}" />
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{StaticResource Brush.Border}" />
                <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,1,1,0" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
                <Setter Property="Margin" TargetName="Group" Value="14,0,1,0" />
                <Setter Property="Margin" TargetName="Arrow" Value="3,0,14,0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="IsDefault" Value="1,0,0,0" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardShowHeadersButton.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardContainer.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey CardView.ScrollViewerTemplate}">
        <Grid dxg:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}">
            <dx:ScrollBarExtensions.ScrollBehavior>
                <Binding Path="(dxg:GridControl.CurrentView).UseExtendedMouseScrolling" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter FalseValue="{dx:NativeScrollBehavior}" TrueValue="{dxg:CardDataPresenterScrollBehavior}" />
                    </Binding.Converter>
                </Binding>
            </dx:ScrollBarExtensions.ScrollBehavior>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ContentControl Grid.Row="0" dxg:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}" Template="{DynamicResource {dxgt:LWKey CardView.TopPanel}}" />
            <dx:DXBorder
                x:Name="GroupPanelBorder"
                Grid.Row="1"
                Grid.ColumnSpan="2"
                Background="Transparent"
                BorderBrush="{DynamicResource {dxgt:LWKey CardView.GroupPanelBorderBrush}}"
                BorderThickness="{DynamicResource {dxgt:LWKey CardView.GroupPanelBorderThickness}}"
                Visibility="Collapsed" />
            <dx:DXBorder
                x:Name="PART_FooterItemsControlBorder"
                Grid.Row="{Binding Path=(dxg:GridControl.CurrentView).TotalSummaryPosition, RelativeSource={RelativeSource TemplatedParent}, Converter={dxgi:TotalSummaryPositionToRowConverter TopRow=2, BottomRow=4}}"
                Grid.ColumnSpan="2"
                Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.Window.Background, Win10Dark=Brush.Window.Background, Win10Light=Brush.Window.Background'}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="{Binding Path=(dxg:GridControl.CurrentView).TotalSummaryPosition, RelativeSource={RelativeSource TemplatedParent}, Converter={dxgi:CardViewTotalSummaryPanelBorderThicknessConverter}}"
                Visibility="{Binding Path=(dxg:DataControlBase.ActiveView).ShowTotalSummary, RelativeSource={RelativeSource Self}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <dxg:GridViewHitInfoBase.HitTestAcceptor>
                    <dxgi:TotalSummaryPanelTableViewHitTestAcceptor />
                </dxg:GridViewHitInfoBase.HitTestAcceptor>
                <dxg:TotalSummaryItemsControl
                    x:Name="footerItemsControl"
                    HorizontalAlignment="Right"
                    Margin="3"
                    Style="{DynamicResource {dxgt:LWKey CardView.TotalSummaryItemsControlStyle}}"
                    Visibility="Collapsed" />
            </dx:DXBorder>
            <Grid Grid.Row="3" Grid.ColumnSpan="2">
                <dx:DXBorder x:Name="borderFrame" BorderBrush="{DynamicResource {dxgt:LWKey TableView.SearchPanelBorderBottomBrush}}" BorderThickness="0,1,0,0">
                    <Grid dxg:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ScrollContentPresenter Name="PART_ScrollContentPresenter" CanContentScroll="True" dxg:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}">
                            <dxg:GridControl.CurrentViewChangedListener>
                                <dxg:ScrollContentPresenterInitializer />
                            </dxg:GridControl.CurrentViewChangedListener>
                            <Grid.RowSpan>
                                <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <dx:EnumToObjectConverter DefaultValue="1">
                                            <dx:EnumToObjectConverter.Values>
                                                <dx:EnumObjectProvider x:Key="TouchOverlap" Value="2" />
                                            </dx:EnumToObjectConverter.Values>
                                        </dx:EnumToObjectConverter>
                                    </Binding.Converter>
                                </Binding>
                            </Grid.RowSpan>
                            <Grid.ColumnSpan>
                                <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <dx:EnumToObjectConverter DefaultValue="1">
                                            <dx:EnumToObjectConverter.Values>
                                                <dx:EnumObjectProvider x:Key="TouchOverlap" Value="2" />
                                            </dx:EnumToObjectConverter.Values>
                                        </dx:EnumToObjectConverter>
                                    </Binding.Converter>
                                </Binding>
                            </Grid.ColumnSpan>
                            <dxg:FocusRectPresenter.IsVerticalScrollHost>True</dxg:FocusRectPresenter.IsVerticalScrollHost>
                            <ScrollContentPresenter.Content>
                                <dxg:CardDataPresenter Background="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Window.Background'}" dxg:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}" />
                            </ScrollContentPresenter.Content>
                        </ScrollContentPresenter>
                        <ScrollBar
                            Name="PART_VerticalScrollBar"
                            Grid.Column="1"
                            Cursor="Arrow"
                            dxgn:ScrollBarAttachedBehavior.UpdateThumbOrientation="{Binding Path=(dxg:GridControl.CurrentView).ScrollMode, RelativeSource={RelativeSource TemplatedParent}, Converter={dxgn:ScrollModeToBoolConverter Orientation=Vertical}}"
                            Maximum="{Binding ScrollableHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                            Value="{Binding VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                            ViewportSize="{Binding ViewportHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                            Visibility="{Binding ComputedVerticalScrollBarVisibility, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                            <dxg:GridViewHitInfoBase.HitTestAcceptor>
                                <dxgi:VerticalScrollBarTableViewHitTestAcceptor />
                            </dxg:GridViewHitInfoBase.HitTestAcceptor>
                            <Grid.RowSpan>
                                <MultiBinding>
                                    <MultiBinding.Bindings>
                                        <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource Self}" />
                                        <Binding Path="(dx:ScrollBarExtensions.ScrollViewerOrientation)" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding.Bindings>
                                    <MultiBinding.Converter>
                                        <dxg:VerticalScrollBarRowSpanCardViewConverter />
                                    </MultiBinding.Converter>
                                </MultiBinding>
                            </Grid.RowSpan>
                        </ScrollBar>
                        <Grid Grid.Row="1" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}">
                            <Grid.ColumnSpan>
                                <MultiBinding>
                                    <MultiBinding.Bindings>
                                        <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource Self}" />
                                        <Binding Path="(dx:ScrollBarExtensions.ScrollViewerOrientation)" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding.Bindings>
                                    <MultiBinding.Converter>
                                        <dxg:HorizontalScrollBarColumnSpanConverter />
                                    </MultiBinding.Converter>
                                </MultiBinding>
                            </Grid.ColumnSpan>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ScrollBar
                                Name="PART_HorizontalScrollBar"
                                Grid.Column="0"
                                Cursor="Arrow"
                                dxgn:ScrollBarAttachedBehavior.UpdateThumbOrientation="{Binding Path=(dxg:GridControl.CurrentView).ScrollMode, RelativeSource={RelativeSource TemplatedParent}, Converter={dxgn:ScrollModeToBoolConverter Orientation=Horizontal}}"
                                Maximum="{Binding ScrollableWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                Orientation="Horizontal"
                                Value="{Binding HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                ViewportSize="{Binding ViewportWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                Visibility="{Binding ComputedHorizontalScrollBarVisibility, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <dxg:GridViewHitInfoBase.HitTestAcceptor>
                                    <dxgi:HorizontalScrollBarTableViewHitTestAcceptor />
                                </dxg:GridViewHitInfoBase.HitTestAcceptor>
                            </ScrollBar>
                            <dx:DXBorder
                                x:Name="PART_HorizontalScrollCorner"
                                Grid.Column="1"
                                Height="{dx:LWDouble '17, Win11=12'}"
                                Style="{DynamicResource {dxgt:LWKey ScrollBar.ScrollingCornerStyle}}"
                                Width="{dx:LWDouble '17, Win11=12'}">
                                <dx:DXBorder.Visibility>
                                    <MultiBinding>
                                        <MultiBinding.Bindings>
                                            <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="(ScrollViewer.ComputedVerticalScrollBarVisibility)" RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding.Bindings>
                                        <MultiBinding.Converter>
                                            <dxg:ScrollCornerCardViewConverter />
                                        </MultiBinding.Converter>
                                    </MultiBinding>
                                </dx:DXBorder.Visibility>
                            </dx:DXBorder>
                        </Grid>
                    </Grid>
                </dx:DXBorder>
                <dxg:NoRecordsControl Style="{DynamicResource {dxgt:LWKey TableView.NoRecordsControlStyle}}" />
            </Grid>
            <dx:DXExpander
                Name="headerItemsContainer"
                Grid.RowSpan="8"
                Grid.ColumnSpan="2"
                AnimationProgress="0"
                dx:DragManager.DropTargetFactory="{x:Static dx:EmptyDropTarget.Instance}"
                dxg:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="Right"
                HorizontalExpand="None"
                MaxHeight="{Binding Path=(dx:OrderPanelBase.Panel).ActualHeight, ElementName=headerItemsControl, Converter={dx:AddDoubleValueConverter}, ConverterParameter=39}"
                StretchChild="True"
                VerticalAlignment="Top"
                VerticalExpand="FromTopToBottom">
                <dxg:GridControl.CurrentViewChangedListener>
                    <dxg:HeadersPanelInitializer />
                </dxg:GridControl.CurrentViewChangedListener>
                <dxg:GridViewHitInfoBase.HitTestAcceptor>
                    <dxgi:ColumnHeaderPanelTableViewHitTestAcceptor />
                </dxg:GridViewHitInfoBase.HitTestAcceptor>
                <dx:DXBorder>
                    <Grid x:Name="WindowRoot" Margin="0,21,0,0">
                        <Grid x:Name="Window" HorizontalAlignment="Right" Margin="3">
                            <dx:DXBorder
                                x:Name="ExpanderBorder"
                                Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.Window.Background'}"
                                BorderBrush="{StaticResource Brush.Border}"
                                BorderThickness="1"
                                Padding="3">
                                <dx:DXExpander
                                    Name="headerItemsContainer1"
                                    AnimationProgress="0"
                                    HorizontalAlignment="Center"
                                    HorizontalExpand="FromLeftToRight"
                                    Margin="1"
                                    MinWidth="35"
                                    VerticalAlignment="Top"
                                    VerticalExpand="None">
                                    <ItemsControl x:Name="headerItemsControl" MinWidth="200" Style="{DynamicResource {dxgt:LWKey CardView.HeaderItemsControlStyle}}" />
                                </dx:DXExpander>
                            </dx:DXBorder>
                        </Grid>
                    </Grid>
                </dx:DXBorder>
            </dx:DXExpander>
            <ToggleButton
                Name="ShowHeadersButton"
                Grid.Column="1"
                HorizontalAlignment="Right"
                IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={dxg:IsDesignTimeConverter}, Mode=OneTime}"
                Margin="{DynamicResource {dxgt:LWKey CardView.HeadersButtonMargin}}"
                Template="{DynamicResource {dxgt:LWKey CardView.ShowHeadersButtonTemplate}}"
                VerticalAlignment="Top"
                Visibility="{Binding Path=(dxg:GridControl.CurrentView).ShowColumnHeaders, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Grid.RowSpan>
                    <MultiBinding>
                        <MultiBinding.Bindings>
                            <Binding Path="(dxg:GridControl.CurrentView).ShowGroupPanel" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(dxg:GridControl.CurrentView).ActualShowSearchPanel" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding.Bindings>
                        <MultiBinding.Converter>
                            <dxg:ColumnHeadersRowSpanConverter />
                        </MultiBinding.Converter>
                    </MultiBinding>
                </Grid.RowSpan>
                <dxg:GridViewHitInfoBase.HitTestAcceptor>
                    <dxgi:ColumnPanelShowButtonCardViewHitTestAcceptor />
                </dxg:GridViewHitInfoBase.HitTestAcceptor>
            </ToggleButton>
            <dxg:FixedTotalSummaryContainerControl
                Grid.Row="5"
                Grid.ColumnSpan="2"
                DataContext="{Binding Path=(dxg:GridControl.CurrentView).HeadersData, RelativeSource={RelativeSource TemplatedParent}}"
                dxb:BarManager.DXContextMenu="{Binding Path=(dxg:GridControl.CurrentView).DataControlMenu, RelativeSource={RelativeSource TemplatedParent}}"
                dxg:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}"
                dxg:GridPopupMenu.GridMenuType="FixedTotalSummary"
                Visibility="{Binding Path=(dxg:GridControl.CurrentView).ShowFixedTotalSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <dxfui_local_native:FilterPanelControlAdapter
                x:Name="PART_FilterPanel"
                Grid.Row="6"
                Grid.ColumnSpan="2"
                Context="{Binding Path=DataControl.FilteringContext}"
                DataContext="{Binding Path=(dxg:GridControl.ActiveView), RelativeSource={RelativeSource Self}}"
                FilteringPanelStyle="{Binding Path=FilteringPanelStyle}"
                LegacyFilterPanelType="{x:Type dxg:FilterPanelControl}"
                UseLegacyFilterPanel="{Binding Path=UseLegacyFilterPanel}"
                Visibility="{Binding Path=ActualShowFilterPanel, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <dxg:FocusRectPresenter
                x:Name="PART_FocusRectPresenter"
                Grid.RowSpan="8"
                Grid.ColumnSpan="2"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                View="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" SourceName="ShowHeadersButton" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard SpeedRatio="5">
                            <DoubleAnimation Duration="0:0:1" Storyboard.TargetName="headerItemsContainer" Storyboard.TargetProperty="AnimationProgress" To="1" />
                            <DoubleAnimation BeginTime="0:0:1" Duration="0:0:1" Storyboard.TargetName="headerItemsContainer1" Storyboard.TargetProperty="AnimationProgress" To="1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard SpeedRatio="5">
                            <DoubleAnimation Duration="0:0:1" Storyboard.TargetName="headerItemsContainer1" Storyboard.TargetProperty="AnimationProgress" To="0" />
                            <DoubleAnimation BeginTime="0:0:1" Duration="0:0:1" Storyboard.TargetName="headerItemsContainer" Storyboard.TargetProperty="AnimationProgress" To="0" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <DataTrigger Binding="{Binding Path=ShowTotalSummary, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Visibility" TargetName="footerItemsControl" Value="Visible" />
                <Setter Property="BorderThickness" TargetName="borderFrame" Value="0,0,0,0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ShowColumnHeaders, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                <Setter Property="Visibility" TargetName="headerItemsContainer" Value="Collapsed" />
                <Setter Property="BorderThickness" TargetName="borderFrame" Value="0,0,0,0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ShowGroupPanel, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="BorderThickness" TargetName="borderFrame" Value="0,0,0,0" />
                <Setter Property="Visibility" TargetName="GroupPanelBorder" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActualShowSearchPanel, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="BorderThickness" TargetName="borderFrame" Value="0,0,0,0" />
                <Setter Property="Visibility" TargetName="GroupPanelBorder" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActualSearchPanelPosition, RelativeSource={RelativeSource TemplatedParent}}" Value="Default">
                <Setter Property="BorderThickness" TargetName="borderFrame" Value="0,0,0,0" />
                <Setter Property="Visibility" TargetName="GroupPanelBorder" Value="Visible" />
            </DataTrigger>
            <Trigger Property="Opacity" SourceName="headerItemsContainer" Value="0">
                <Setter Property="Visibility" TargetName="headerItemsContainer" Value="Collapsed" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="ShowHeadersButton" Value="0" />
                <Setter Property="Padding" TargetName="ExpanderBorder" Value="14" />
                <Setter Property="Margin" TargetName="Window" Value="0" />
                <Setter Property="Margin" TargetName="WindowRoot" Value="0,43,0,0" />
                <Setter Property="BorderThickness" TargetName="ExpanderBorder" Value="1,1,0,1" />
                <Setter Property="MaxHeight" TargetName="headerItemsContainer" Value="{Binding Path=(dx:OrderPanelBase.Panel).ActualHeight, ElementName=headerItemsControl, Converter={dx:AddDoubleValueConverter}, ConverterParameter=77}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardContainer.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardButtons.xaml-->
    <!-- General -->

    <Style x:Key="{dxgt:LWKey GridCard.ContentExpandButtonStyle}" TargetType="{x:Type dxg:GridCardExpandButton}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxgt:LWKey GridCard.ExpanderContentTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardButtons.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardControl.xaml-->

    <!-- General -->

    <Style x:Key="{dxgt:LWKey CardTemplates.CardStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="dxg:GridViewBase.IsFocusedRow" Value="False" />
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="dxg:GridViewBase.IsFocusedRow" Value="True" />
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxgt:LWKey GridCard.ControlTemplate}">
        <ContentControl x:Name="card" Style="{Binding Path=(dxg:GridControl.ActiveView).CardStyle, RelativeSource={RelativeSource TemplatedParent}}" Template="{DynamicResource {dxgt:LWKey GridCard.ContainerTemplate}}">
            <dxg:GridCardPanel x:Name="Panel" IsExpanded="{Binding Path=IsExpanded}">
                <dxg:GridCardPanel.Header>
                    <dxg:GridCardHeaderControl x:Name="Header" Foreground="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentControl Grid.Column="0" Template="{DynamicResource {dxgt:LWKey GridCard.HeaderContentTemplate}}">
                                <dxg:GridCardHeaderContentPresenter Style="{DynamicResource {dxgt:LWKey GridCard.HeaderPresenterStyle}}" />
                            </ContentControl>
                            <ContentControl Grid.Column="1" Template="{DynamicResource {dxgt:LWKey GridCard.ExpanderContentTemplate}}" Visibility="{Binding Path=View.ShowCardExpandButton, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <dxg:GridCardExpandButton Style="{DynamicResource {dxgt:LWKey GridCard.ContentExpandButtonStyle}}" />
                            </ContentControl>
                        </Grid>
                    </dxg:GridCardHeaderControl>
                </dxg:GridCardPanel.Header>
                <dxg:GridCardPanel.Body>
                    <ContentControl Template="{DynamicResource {dxgt:LWKey GridCard.DataContentTemplate}}">
                        <dxg:GridCardContentPresenter x:Name="Content" Style="{DynamicResource {dxgt:LWKey GridCard.ContentPresenterStyle}}" />
                    </ContentControl>
                </dxg:GridCardPanel.Body>
            </dxg:GridCardPanel>
        </ContentControl>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=View.CollapsedCardOrientation}" Value="Vertical">
                <Setter Property="RotateOnCollapse" TargetName="Panel" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=SelectionState}" Value="Selected">
                <Setter Property="Foreground" TargetName="Header" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.Foreground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, VS2019Dark=Brush.Focused, VS2019Light=Brush.Focused, Win11=Brush.Foreground.Primary'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=SelectionState}" Value="Focused">
                <Setter Property="Foreground" TargetName="Header" Value="{dx:LWBrush 'Brush.SelectionForeground, Office2019Black=Brush.Foreground, VS2019Dark=Brush.Backstage.Focused, Win11=Brush.Foreground.Primary'}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Infinity Loading -->

    <ControlTemplate x:Key="{dxgt:LWKey GridCard.LoadingCardTemplate}" TargetType="dxg:LoadingCardControl">
        <Grid x:Name="Root" MinHeight="216" MinWidth="216">
            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                <ProgressBar
                    x:Name="Indicator"
                    Foreground="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                    HorizontalAlignment="Center"
                    IsIndeterminate="{Binding ShowLoadingIndicator}"
                    Template="{StaticResource LoadingIndicator}"
                    VerticalAlignment="Center"
                    Visibility="{Binding ShowLoadingIndicator, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <dxg:LoadingRowButton
                    Click="{DXEvent 'LoadMoreRows()'}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Visibility="{Binding AllowLoadMore, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <StackPanel Margin="9,0,9,1" Orientation="Horizontal">
                        <Label Content="{dxg:GridControlStringId LoadingRowLoadMore}" />
                        <Grid Height="16" Margin="3" Width="16">
                            <Path
                                Data="F1 M 10,5L 5,10L 0,5L 3,5L 3,3L 7,3L 7,5L 10,5 Z M 3,2L 3,0L 7,0L 7,2L 3,2 Z "
                                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                                Height="10"
                                HorizontalAlignment="Center"
                                Margin="0,1,0,0"
                                Stretch="Fill"
                                VerticalAlignment="Center"
                                Width="10" />
                        </Grid>
                    </StackPanel>
                </dxg:LoadingRowButton>
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:LWKey GridCard.LoadingCardErrorTemplate}" TargetType="dxg:LoadingCardControl">
        <Grid x:Name="Root" MinHeight="216" MinWidth="216">
            <Grid
                HorizontalAlignment="Center"
                Margin="96,0,96,0"
                MaxWidth="192"
                VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Path
                    Data="F1 M 7,0C 10.866,0 14,3.13401 14,7C 14,10.866 10.866,14 7,14C 3.13401,14 -6.35783e-007,10.866 -6.35783e-007,7C -6.35783e-007,3.13401 3.13401,0 7,0 Z M 2.75736,4.17157L 5.58579,7L 2.75736,9.82843L 4.17157,11.2426L 7,8.41422L 9.82843,11.2426L 11.2426,9.82843L 8.41421,7L 11.2426,4.17157L 9.82843,2.75736L 7,5.58579L 4.17157,2.75736L 2.75736,4.17157 Z "
                    Fill="{StaticResource Brush.Custom.Red}"
                    Height="14"
                    HorizontalAlignment="Center"
                    Margin="4"
                    Stretch="Fill"
                    VerticalAlignment="Top"
                    Width="14" />
                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <TextBlock
                        HorizontalAlignment="Left"
                        Margin="4,3,4,3"
                        Text="{Binding ErrorText}"
                        TextWrapping="Wrap" />
                    <TextBlock HorizontalAlignment="Center" Visibility="{Binding IsLoadingButtonVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <dxe:HyperlinkEdit Command="{Binding LoadRowsCommand}" Text="{Binding LoadingButtonText}" />
                    </TextBlock>
                </StackPanel>
            </Grid>
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardContent.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GridCard.ContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.Window.Background, Office2019Colorful=Brush.Window.Background, Office2019HighContrast=Brush.Window.Background'}"
                BorderBrush="{dx:LWBrush 'Brush.Border, Win10Dark=Brush.AltBorder'}"
                CornerRadius="{dx:LWCornerRadius '0, Win11=7'}"
                BorderThickness="1">
                <ContentPresenter
                    dx:FrameworkElementHelper.ClipCornerRadius="{dx:LWDouble '0, Win11=7'}"/>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="dxg:GridViewBase.IsFocusedRow" Value="False" />
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:RowData.RowData).SelectionState, RelativeSource={RelativeSource TemplatedParent}}" Value="Focused">
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.Focused, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverBorder, VS2019Blue=Brush.Border, Win11=Brush.Accent'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:RowData.RowData).SelectionState, RelativeSource={RelativeSource TemplatedParent}}" Value="Selected">
                <Setter Property="BorderBrush" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.Focused, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverBorder, VS2019Blue=Brush.Border, Win11=Brush.Accent'}" />
            </DataTrigger>
            <Trigger Property="dxg:GridViewBase.IsFocusedRow" Value="True" />
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxgt:LWKey GridCard.ContentPresenterStyle}" TargetType="{x:Type dxg:GridCardContentPresenter}">
        <Setter Property="Margin" Value="8" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14,14,14,14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxgt:LWKey GridCard.DataContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid>
            <dx:DXBorder x:Name="Root" Background="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Window.Background, VS2019Blue=Brush.Button.Background'}">
                <ContentPresenter />
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="dxg:GridViewBase.IsFocusedRow" Value="False" />
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="dxg:GridViewBase.IsFocusedRow" Value="True">
                <Setter Property="Background" TargetName="Root" Value="{dx:LWBrush 'Brush.Editor.Background, Office2019Black=Brush.Window.Background, VS2019Blue=Brush.Button.Background'}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxg:RowData.RowData).SelectionState, RelativeSource={RelativeSource TemplatedParent}}" Value="Focused" />
            <DataTrigger Binding="{Binding Path=(dxg:RowData.RowData).SelectionState, RelativeSource={RelativeSource TemplatedParent}}" Value="Selected" />
            <DataTrigger Binding="{Binding Path=IsExpanded}" Value="False" />
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardContent.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardHeader.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxgt:LWKey GridCard.HeaderPanelTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.Control.Background, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Control.Background, VS2019Blue=Brush.ControlDark.Background, VS2019Dark=Brush.Border, Win11=Brush.Button.SimpleButtonBackground'}" CornerRadius="{dx:LWCornerRadius '0, Win11=(7, 7, 0, 0)'}" />
            <ContentPresenter />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dxg:GridViewBase.IsFocusedRow" Value="True" />
            <DataTrigger Binding="{Binding Path=(dxg:RowData.RowData).SelectionState, RelativeSource={RelativeSource TemplatedParent}}" Value="Focused">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Black=Brush.Backstage.SelectionBackground, VS2019Blue=Brush.ControlLight.SelectionBackground, Win11=Brush.ListItem.SelectionBackground'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:RowData.RowData).SelectionState, RelativeSource={RelativeSource TemplatedParent}}" Value="Selected">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Black=Brush.Control.HoverBackground, VS2019Blue=Brush.ControlLight.HoverBackground, VS2019Dark=Brush.Control.Background, Win11=Brush.ListItem.HoverBackground'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsExpanded}" Value="False" />
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Content -->

    <ControlTemplate x:Key="{dxgt:LWKey GridCard.HeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter x:Name="Content" Margin="11,3,11,3" />
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="Content" Value="14" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxgt:LWKey GridCard.HeaderPresenterStyle}" TargetType="{x:Type dxg:GridCardHeaderContentPresenter}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCard\GridCardHeader.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base.xaml-->
    <!-- General -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\Constants.xaml-->
    <!-- General -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\Constants.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCardView.xaml-->
    <!-- General -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Grid\Base\GridCardView.xaml-->


    <!--#region DEFAULT STYLES-->

    <Style x:Key="GroupSummaryContentPresenter.DefaultStyle" TargetType="{x:Type dxg:GroupSummaryContentPresenter}">
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="DetailHeaderControl.DefaultStyle" TargetType="{x:Type dxg:DetailHeaderControl}">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="Template" Value="{DynamicResource {dxgt:LWKey GridControl.DetailHeaderControlTemplate}}" />
    </Style>
    <Style x:Key="GroupPanelCaptionControl.DefaultStyle" TargetType="{x:Type dxg:GroupPanelCaptionControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ForegroundDark, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="Margin" Value="0,0,4,0" />
        <Setter Property="Template" Value="{DynamicResource {dxgt:LWKey GridControl.GroupPanelCaptionTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="0,0,12,0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BackgroundBorderControl.DefaultStyle" TargetType="{x:Type dxg:BackgroundBorderControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxg:BackgroundBorderControl}">
                    <dx:DXBorder
                        x:Name="PART_Background"
                        Background="{StaticResource Brush.Editor.Background}"
                        BorderBrush="{StaticResource Brush.Editor.Background}"
                        BorderThickness="0,0,0,1"
                        Margin="0,0,1,0" />
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Background" TargetName="PART_Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="BorderBrush" TargetName="PART_Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Background" TargetName="PART_Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="BorderBrush" TargetName="PART_Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Level}" Value="0">
                            <Setter Property="Margin" TargetName="PART_Background" Value="0"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GridToggleStateButton.DefaultStyle" TargetType="{x:Type dxg:GridToggleStateButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource {dxgt:LWKey GroupRow.ExpandDetailButtonTemplate}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="RowDetailContainerControl.DefaultStyle" TargetType="{x:Type dxg:RowDetailContainerControl}">
        <Setter Property="Background" Value="{dx:LWBrush 'Brush.Editor.Background, VS2019Dark=Brush.Control.Background'}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border}" />
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" />
    </Style>
    <Style x:Key="RowSplitter.DefaultStyle" TargetType="{x:Type dxg:RowSplitter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxg:RowSplitter}">
                    <Grid x:Name="Root" Cursor="SizeNS">
                        <dx:DXBorder
                            x:Name="IsDefault"
                            Background="{dx:LWBrush 'Brush.Button.Background, Win11=Brush.Button.SimpleButtonBackground'}"
                            BorderBrush="{StaticResource Brush.Border}"
                            BorderThickness="0,1,0,1" />
                        <Path Margin="3" Style="{StaticResource UIShape.SizeGrip.Horizontal}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionsToggleButton.DefaultStyle" TargetType="{x:Type dxg:OptionsToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxg:OptionsToggleButton}">
                    <Grid x:Name="Root" Background="Transparent" Margin="0,0,0,-1">
                        <Path x:Name="Content" Opacity="0.62" Style="{StaticResource UIShape.OptionsToggleButton}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="Content" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="Content" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DetailIndentControl.DefaultStyle" TargetType="{x:Type dxg:DetailIndentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <dxg:BackgroundBorderControl
                            IsDetailMargin="{Binding Path=IsDetailMargin}"
                            IsMasterRowExpanded="{Binding Path=(dx:DataObjectBase.DataObject).IsMasterRowExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                            ItemLevel="{Binding Path=Level}"
                            LineLevel="{Binding Path=(dx:DataObjectBase.DataObject).LineLevel, RelativeSource={RelativeSource TemplatedParent}}"
                            RowLevel="{Binding Path=(dx:DataObjectBase.DataObject).DetailLevel, RelativeSource={RelativeSource TemplatedParent}}" />
                        <dx:DXBorder
                            x:Name="detailLeftLine"
                            BorderBrush="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}"
                            BorderThickness="1,0,0,0"
                            dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"
                            Width="1" 
                            HorizontalAlignment="Right" />
                        <dx:DXBorder x:Name="detailBottomLine" BorderBrush="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsDetailMargin}" Value="True">
                            <Setter Property="BorderBrush" TargetName="detailLeftLine" Value="{DynamicResource {dxgt:LWKey GridColumnHeader.BorderBrush}}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Level}" Value="0">
                            <Setter Property="Width" TargetName="detailLeftLine" Value="0"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ShowLastDetailMargin, RelativeSource={RelativeSource FindAncestor, AncestorType=dxg:DetailRowsIndentControl}}" Value="False" />
                                <Condition Binding="{Binding Path=IsLast}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="detailLeftLine" Value="Collapsed" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ShowBottomLine, RelativeSource={RelativeSource FindAncestor, AncestorType=dxg:DetailRowsIndentControl}}" Value="True" />
                                <Condition Binding="{Binding Path=IsLast}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="detailBottomLine" Value="0,0,0,1" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DetailRowsIndentControl.DefaultStyle" TargetType="{x:Type dxg:DetailRowsIndentControl}">
        <Setter Property="dxg:DetailSummaryControlBase.SummaryDetailLevel" Value="{Binding Path=(dxg:DetailSummaryControlBase.SummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxg:DetailIndentControl dx:DataObjectBase.DataObject="{Binding Path=(dx:DataObjectBase.DataObject), RelativeSource={RelativeSource TemplatedParent}}" dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding Path=Width}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsLeft" Value="False">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <dxg:DetailIndentControl dx:DataObjectBase.DataObject="{Binding Path=(dx:DataObjectBase.DataObject), RelativeSource={RelativeSource TemplatedParent}}" dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding Path=WidthAtRight}" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="-1" ScaleY="1" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GridDetailExpandButtonContainer.DefaultStyle" TargetType="{x:Type dxg:GridDetailExpandButtonContainer}">
        <Setter Property="IsMasterRowExpanded" Value="{Binding IsMasterRowExpanded}" />
        <Setter Property="RowPosition" Value="Single" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxg:GridDetailExpandButtonContainer">
                    <Grid>
                        <dxg:GridDetailExpandButton
                            Name="PART_ExpandButton"
                            Command="{Binding View.Commands.ChangeMasterRowExpanded}"
                            CommandParameter="{Binding Path=RowHandle.Value}"
                            dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible="{Binding Path=(dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible), RelativeSource={RelativeSource TemplatedParent}}"
                            IsChecked="{Binding Path=IsRowExpanded, Mode=OneWay}" />
                        <dx:DXBorder
                            x:Name="detailRightLine"
                            BorderBrush="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}"
                            BorderThickness="0,0,1,0"
                            HorizontalAlignment="Right"
                            Visibility="Collapsed" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RowIndicatorControl.DefaultStyle" TargetType="{x:Type dxg:RowIndicatorControl}">
        <Setter Property="Foreground" Value="{StaticResource {dxgt:LWKey RowIndicator.ForegroundBrush}}" />
    </Style>
    <Style x:Key="{dxgt:LWKey GridColumnHeader.HeaderFilterSearchIconStyle}" TargetType="Path">
        <Setter Property="Data" Value="M6.3667 7.22498C5.7041 7.71216 4.88574 8 4 8C1.79102 8 0 6.20911 0 4C0 1.79089 1.79102 0 4 0C6.20898 0 8 1.79089 8 4C8 4.88562 7.7124 5.70398 7.2251 6.3667L9.5957 8.73767C9.83301 8.97461 9.83301 9.35889 9.5957 9.59595C9.35889 9.83301 8.97461 9.83301 8.73779 9.59595L6.3667 7.22498ZM7 4C7 5.65686 5.65674 7 4 7C2.34326 7 1 5.65686 1 4C1 2.34314 2.34326 1 4 1C5.65674 1 7 2.34314 7 4Z" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Stretch" Value="Fill" />
        <Setter Property="Height" Value="{dx:LWDouble '9, Win11=14'}" />
        <Setter Property="Width" Value="{dx:LWDouble '9, Win11=14'}" />
    </Style>
    <!--#endregion DEFAULT STYLES-->


</ResourceDictionary>