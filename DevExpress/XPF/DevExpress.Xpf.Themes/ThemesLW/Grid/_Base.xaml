<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys" xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" xmlns:dxgi="http://schemas.devexpress.com/winfx/2008/xaml/grid/internal">
    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Grid/_{ThemeName}.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <sys:Boolean x:Key="{dxgt:LWKey ScrollBar.AllowSetScrollHeight}">False</sys:Boolean>
    <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverterInverted" Invert="True" />
    <Geometry x:Key="FilterEditor.AddChildSplitButtonPathStyle.Data">F1 M 0,0 8,0 4,4 0,0 Z </Geometry>
    <Style x:Key="TreeListBorderStyle" TargetType="{x:Type Border}"/>
    <sys:Boolean x:Key="FilterElement.ShowBorder">True</sys:Boolean>
    <ControlTemplate x:Key="{dxgt:LWKey GridRow.AutoFilterRowClearButtonTemplate}" TargetType="{x:Type Button}">
        <Grid Background="Transparent">
            <Grid
                Height="16"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Width="16">
                <Path
                    x:Name="Glyph"
                    Data="F1 M 6.5,0.00012207C 10.0899,0.00012207 13,2.91028 13,6.50012C 13,10.09 10.0898,13.0001 6.5,13.0001C 2.91014,13.0001 2.58287e-006,10.09 2.58287e-006,6.50012C 2.58287e-006,2.91028 2.91004,0.00012207 6.5,0.00012207 Z M 3.00002,3.99988L 5.50002,6.49988L 3.00003,8.99988L 3.00003,9.99988L 4.00003,9.99988L 6.49998,7.49988L 9.00001,9.99988L 10,9.99988L 10,8.99988L 7.49994,6.49988L 10,3.99976L 10,2.99988L 9.00003,2.99988L 6.49998,5.49988L 4.00001,2.99988L 3.00001,2.99988L 3.00002,3.99988 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                    Height="12"
                    HorizontalAlignment="Center"
                    Opacity="{DynamicResource {dx:LWDouble '0.62, Win11=1'}}"
                    Stretch="Fill"
                    VerticalAlignment="Center"
                    Width="12" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxg:GridViewBase.IsFocusedRow" Value="True" />
                    <Condition Property="dxg:GridViewBase.IsFocusedCell" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Glyph" Property="Fill" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.HoverBackground, VS2019Light=#FFFFFFFF'}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxg:GridViewBase.IsFocusedRow" Value="True" />
                    <Condition Property="dxg:GridViewBase.IsFocusedCell" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Glyph" Property="Fill" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=#FFFFFFFF, VS2019Light=#FFFFFFFF'}" />
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Glyph" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Glyph" Property="Opacity" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:LWKey GridColumnHeader.HeaderFilterDisplayClearButtonTemplate}" TargetType="{x:Type Button}">
        <Grid Background="Transparent">
            <Grid
                Height="16"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Width="16">
                <Path
                    x:Name="Glyph"
                    Data="F1 M 6.5,0.00012207C 10.0899,0.00012207 13,2.91028 13,6.50012C 13,10.09 10.0898,13.0001 6.5,13.0001C 2.91014,13.0001 2.58287e-006,10.09 2.58287e-006,6.50012C 2.58287e-006,2.91028 2.91004,0.00012207 6.5,0.00012207 Z M 3.00002,3.99988L 5.50002,6.49988L 3.00003,8.99988L 3.00003,9.99988L 4.00003,9.99988L 6.49998,7.49988L 9.00001,9.99988L 10,9.99988L 10,8.99988L 7.49994,6.49988L 10,3.99976L 10,2.99988L 9.00003,2.99988L 6.49998,5.49988L 4.00001,2.99988L 3.00001,2.99988L 3.00002,3.99988 Z "
                    Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                    Height="12"
                    HorizontalAlignment="Center"
                    Opacity="0.62"
                    Stretch="Fill"
                    VerticalAlignment="Center"
                    Width="12" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type dxg:GridColumnHeader}}}" Value="True">
                <Setter TargetName="Glyph" Property="Fill" Value="{dx:LWBrush 'Brush.Foreground, Office2019HighContrast=Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType={x:Type dxg:GridColumnHeader}}}" Value="True">
                <Setter TargetName="Glyph" Property="Fill" Value="{dx:LWBrush 'Brush.Foreground, VS2019Light=Brush.SelectionForeground, Office2019HighContrast=Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Glyph" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Glyph" Property="Opacity" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:LWKey GroupRow.ExpandDetailButtonTemplate}" TargetType="{x:Type dxg:GridToggleStateButton}">
        <Grid x:Name="Root" Background="Transparent" dx:FrameworkElementHelper.IsVisible="{Binding Path=(dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible), RelativeSource={RelativeSource TemplatedParent}}">
            <dx:DXBorder
                x:Name="BottomBorder"
                Background="{StaticResource Brush.Delimiter}"
                BorderBrush="{StaticResource Brush.Editor.Background}"
                BorderThickness="0,0,0,1"
                Margin="0,0,1,0"
                VerticalAlignment="Bottom"
                Visibility="Collapsed" />
            <Grid Background="{StaticResource Brush.Editor.Background}" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Path Style="{StaticResource UIShape.MasterDetailMinus}" Visibility="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <Path Style="{StaticResource UIShape.MasterDetailPlus}" Visibility="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverterInverted}}" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ShowRowBreak" Value="False" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="BottomBorder" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="42" />
                <Setter Property="MinWidth" TargetName="Root" Value="42" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="BorderBrush" TargetName="BottomBorder" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:LWKey GridControl.BorderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder x:Name="border1" Background="{StaticResource Brush.Border}">
            <dx:DXBorder.Padding>
                <Binding Path="(dxg:GridBorderHelper.ShowBorder)" RelativeSource="{RelativeSource TemplatedParent}">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter FalseValue="0" TrueValue="1" />
                    </Binding.Converter>
                </Binding>
            </dx:DXBorder.Padding>
            <dx:DXBorder x:Name="border2"
                         Background="{StaticResource {dxgt:LWKey TableView.SearchPanelBackground}}">
                <ContentPresenter />
            </dx:DXBorder>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Background" TargetName="border1" Value="{Binding Path=TemplatedParent.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter Property="Background" TargetName="border2" Value="{Binding Path=Background, ElementName=border1}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Background" TargetName="border1" Value="{Binding Path=TemplatedParent.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter Property="Background" TargetName="border2" Value="{Binding Path=Background, ElementName=border1}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:LWKey TotalSummary.TotalSummaryControlTemplate}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <dx:DXBorder
                x:Name="leftBandSeparator"
                Background="{Binding Column.ActualBandCellLeftSeparatorColor}"
                BorderBrush="{DynamicResource {dxgt:LWKey GridRow.TotalSummaryBorderBrush}}"
                BorderThickness="1,0,1,0">
                <dx:DXBorder.Margin>
                    <Binding Path="Column.HasTopElement">
                        <Binding.Converter>
                            <dxg:TotalSummarySeparatorMarginConverter Left="-1" />
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.Margin>
                <dx:DXBorder.Width>
                    <Binding Path="Column.ActualBandLeftSeparatorWidth">
                        <Binding.Converter>
                            <dxg:BandSeparatorAddWidthConverter />
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.Width>
            </dx:DXBorder>
            <dx:DXBorder Grid.Column="1" Background="Transparent">
                <Grid x:Name="Root" Margin="{TemplateBinding Padding}">
                    <Grid.Visibility>
                        <Binding Path="Column.HasTotalSummaries">
                            <Binding.Converter>
                                <dx:BoolToObjectConverter FalseValue="Hidden" TrueValue="Visible" />
                            </Binding.Converter>
                        </Binding>
                    </Grid.Visibility>
                    <dx:DXBorder
                        x:Name="Border"
                        Background="{dx:LWBrush 'Brush.Editor.Background, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Control.Background, Win11=#00FFFFFF'}"
                        BorderBrush="{DynamicResource {dxgt:LWKey GridRow.TotalSummaryBorderBrush}}"
                        BorderThickness="{dx:LWThickness '1, Win11=0'}"
                        Margin="3,4,3,3">
                        <dxg:TotalSummaryContentPresenter
                            Content="{Binding}"
                            ContentTemplateSelector="{Binding Path=Column.View.ActualTotalSummaryItemTemplateSelector}"
                            DataContext="{TemplateBinding DataContext}"
                            Style="{Binding Path=Column.ActualTotalSummaryContentStyle}" />
                    </dx:DXBorder>
                </Grid>
            </dx:DXBorder>
            <dx:DXBorder
                x:Name="rightBandSeparator"
                Grid.Column="2"
                Background="{Binding Column.ActualBandCellRightSeparatorColor}"
                BorderBrush="{DynamicResource {dxgt:LWKey GridRow.TotalSummaryBorderBrush}}"
                BorderThickness="1,0,1,0">
                <dx:DXBorder.Margin>
                    <Binding Path="Column.HasTopElement">
                        <Binding.Converter>
                            <dxg:TotalSummarySeparatorMarginConverter Left="0" />
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.Margin>
                <dx:DXBorder.Width>
                    <Binding Path="Column.ActualBandRightSeparatorWidth">
                        <Binding.Converter>
                            <dxg:BandSeparatorAddWidthConverter />
                        </Binding.Converter>
                    </Binding>
                </dx:DXBorder.Width>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Column.ActualBandCellLeftSeparatorColor}" Value="{x:Null}">
                <Setter Property="Background" TargetName="leftBandSeparator" Value="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Column.ActualBandCellRightSeparatorColor}" Value="{x:Null}">
                <Setter Property="Background" TargetName="rightBandSeparator" Value="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:LWKey GridRow.FilterCellContentPresenterTemplate}" TargetType="{x:Type dxg:FilterCellContentPresenter}">
        <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderState}" Padding="{TemplateBinding Padding}">
            <dx:DXBorder.Background>
                <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}" />
            </dx:DXBorder.Background>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <dx:DXBorder
                    x:Name="leftBandSeparator"
                    Background="{Binding Column.ActualBandCellLeftSeparatorColor}"
                    BorderBrush="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}"
                    BorderThickness="0,0,1,0"
                    Margin="0,0,0,-1"
                    Width="{Binding Column.ActualBandLeftSeparatorWidth}" />
                <dxg:FilterCriteriaControl Grid.Column="1" Column="{Binding Column}" Visibility="{Binding Path=Column.ActualShowCriteriaInAutoFilterRow, Converter={dx:BooleanToVisibilityConverter}}" />
                <dxg:FilterRowCellEditor x:Name="PART_CellEditor" Grid.Column="2" />
                <Button
                    Name="PART_ClearButton"
                    Grid.Column="3"
                    Height="18"
                    Visibility="Collapsed"
                    Background="#00000000"
                    dx:FocusHelper2.Focusable="False"
                    Template="{DynamicResource {dxgt:LWKey GridRow.AutoFilterRowClearButtonTemplate}}">
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand EventName="PreviewMouseLeftButtonDown" Command="{Binding Path=ClearCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxg:FilterCellContentPresenter}}" />
                    </dxmvvm:Interaction.Behaviors>
                </Button>
                <dx:DXBorder
                    x:Name="rightBandSeparator"
                    Grid.Column="4"
                    Background="{Binding Column.ActualBandCellRightSeparatorColor}"
                    BorderBrush="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}"
                    BorderThickness="1,0,0,0"
                    Margin="0,0,0,-1"
                    Width="{Binding Column.ActualBandRightSeparatorWidth}" />
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Column.ActualBandCellLeftSeparatorColor}" Value="{x:Null}">
                <Setter Property="Background" TargetName="leftBandSeparator" Value="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Column.ActualBandCellRightSeparatorColor}" Value="{x:Null}">
                <Setter Property="Background" TargetName="rightBandSeparator" Value="{DynamicResource {dxgt:LWKey GridRow.GridDataRowDelimiterBrush}}" />
            </DataTrigger>
            <Trigger Property="dxg:TableView.IsFocusedRow" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxgt:LWKey GridRow.TextRowSelectedBrush}}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsFocusedCell}" Value="False" />
                    <Condition Binding="{Binding View.DataControl.SelectionMode}" Value="None" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Foreground" Value="{DynamicResource {dxgt:LWKey GridRow.TextFocusedBrush}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsFocusedCell}" Value="True" />
                    <Condition Binding="{Binding View.DataControl.SelectionMode}" Value="Row" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <Trigger Property="dxg:TableView.IsFocusedRow" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {dxgt:LWKey GridRow.TextUnfocusedBrush}}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Column.ActualAllowAutoFilterClearButton}" Value="True" />
                    <Condition Binding="{Binding Column.AutoFilterValue, Converter={dxgi:StringToBoolConverter}}" Value="True" />
                    <Condition Binding="{Binding View.AutoFilterRowClearButtonMode}" Value="Always" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Column.ActualAllowAutoFilterClearButton}" Value="True" />
                    <Condition Binding="{Binding Column.AutoFilterValue, Converter={dxgi:StringToBoolConverter}}" Value="True" />
                    <Condition Binding="{Binding View.AutoFilterRowClearButtonMode}" Value="Display" />
                    <Condition Binding="{Binding IsFocusedCell, ElementName=PART_CellEditor}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Column.ActualAllowAutoFilterClearButton}" Value="True" />
                    <Condition Binding="{Binding Column.AutoFilterValue, Converter={dxgi:StringToBoolConverter}}" Value="True" />
                    <Condition Binding="{Binding View.AutoFilterRowClearButtonMode}" Value="Edit" />
                    <Condition Binding="{Binding IsFocusedCell, ElementName=PART_CellEditor}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>