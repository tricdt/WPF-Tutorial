<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:cs="colorscheme_ignorable_uri"
    xmlns:dxr="http://schemas.devexpress.com/winfx/2008/xaml/ribbon"
    xmlns:dxri="http://schemas.devexpress.com/winfx/2008/xaml/ribbon/internal"
    xmlns:dxrt="http://schemas.devexpress.com/winfx/2008/xaml/ribbon/themekeys"
    xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
    mc:Ignorable="cs">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Ribbon/_{ThemeCategory}.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <dxri:RibbonPageCategoryCornerRadiusToThicknessConverter x:Key="CornerRadiusToThicknessConverter" />
    <dxri:RibbonPageCategoryThicknessConverter x:Key="ThicknessConverter" />
    <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverterInverted" Invert="True" />

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonOverflowButton.xaml-->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.PageGroupsControlDropDownButtonTemplate}" TargetType="{x:Type dxri:RibbonOverflowButton}">
        <dx:DXBorder
            x:Name="IsDefault"
            Background="Transparent"
            Padding="{TemplateBinding Padding}"
            CornerRadius="{dx:LWCornerRadius '0, Win11=4'}"
            Margin="{dx:LWThickness '0, Win11=1'}">
            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                <Path x:Name="Path" Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.DropDownDots}" />
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Colorful=Brush.HoverAltBackground, VS2019Blue=Brush.ControlDark.HoverBackground, Win11=Brush.Button.HoverBackground'}" />
                <Setter Property="Fill" TargetName="Path" Value="{dx:LWBrush 'Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsLeftButtonPressed" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Colorful=Brush.SelectionAltBackground, VS2019Blue=Brush.ControlDark.SelectionBackground, Win11=Brush.Button.PressedBackground'}" />
                <Setter Property="Fill" TargetName="Path" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Muted'}" />
            </Trigger>
            <Trigger Property="AppFocusValue" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.HoverBackground, Office2019Colorful=Brush.HoverAltBackground, Win11=Brush.Button.HoverBackground'}" />
                <Setter Property="Fill" TargetName="Path" Value="{dx:LWBrush 'Brush.HoverForeground, Win11=Brush.Foreground.Primary'}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" TargetName="IsDefault" Value="{dx:LWBrush 'Brush.SelectionBackground, Office2019Colorful=Brush.SelectionAltBackground, VS2019Blue=Brush.ControlDark.SelectionBackground, Win11=Brush.Button.CheckedBackground'}" />
                <Setter Property="Fill" TargetName="Path" Value="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Alt'}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonOverflowButton.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroQuickAccessToolbar\InAeroQuickAccessToolbarRight.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarRightContentTemplateInAeroHeader}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding Content}" Margin="3" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarRightContentTemplate2010InAeroHeader}" TargetType="ContentControl">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter Grid.Column="0" Content="{TemplateBinding Content}" />
            <Control
                x:Name="PART_LastSeparator"
                Grid.Column="1"
                Margin="{DynamicResource {dxrt:LWKey QuickAccessToolbar.RibbonToolbarLastSeparatorMargin}}"
                Template="{DynamicResource {dxt:LWKey BarItemSeparator.InRibbonQuickAccessToolbarCommonTemplate}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).IsInRibbonWindow, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="PART_LastSeparator" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroQuickAccessToolbar\InAeroQuickAccessToolbarRight.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroQuickAccessToolbar\InAeroQuickAccessToolbarLeft.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarLeftContentTemplateInAeroHeader}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding Content}" Margin="3" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarLeftContentTemplate2010InAeroHeader}" TargetType="ContentControl">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Control
                x:Name="PART_FirstSeparator"
                Grid.Column="0"
                Margin="{DynamicResource {dxrt:LWKey QuickAccessToolbar.RibbonToolbarFirstSeparatorMargin}}"
                Template="{DynamicResource {dxt:LWKey BarItemSeparator.InRibbonQuickAccessToolbarCommonTemplate}}" />
            <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).IsInRibbonWindow, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="PART_FirstSeparator" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding VisibleItemsCount, RelativeSource={RelativeSource AncestorType=dxr:RibbonQuickAccessToolbarControl}}" Value="0">
                <Setter Property="Visibility" TargetName="PART_FirstSeparator" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:DXWindowsHelper.WindowKind), RelativeSource={RelativeSource Self}}" Value="{x:Static dxi:DXWindowsHelper.ThemedWindow}">
                <Setter Property="Margin" TargetName="PART_FirstSeparator" Value="0" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroQuickAccessToolbar\InAeroQuickAccessToolbarLeft.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPageCategory\InAeroRibbonPageCategoryButtons.xaml-->
    <!-- General -->

    <Style x:Key="{dxrt:LWKey RibbonPageCategory.AeroCollapseButtonStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Root">
                        <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush 'Brush.Button.Background, Win11=Brush.Button.SimpleButtonBackground'}" CornerRadius="62" />
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path x:Name="Collapsed" Opacity="0" Style="{StaticResource UIShape.Up}" />
                            <Path x:Name="Expanded" Opacity="0" Style="{StaticResource UIShape.Down}" />
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Hover">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckedStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Expanded" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Collapsed" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPageCategory\InAeroRibbonPageCategoryButtons.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPageCategory\RibbonPageCategory.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageCategory.HighlightedHeadersBackgroundTemplateInAeroWindow}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <dx:DXBorder Background="{Binding Converter={StaticResource ColorOverlayConverter}, ConverterParameter=#FF808080}" />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPageCategory\RibbonPageCategory.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPageCategory\InAeroRibbonPageCategoryHeader.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageCategory.HeaderBackgroundTemplateInAeroWindow}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid Margin="0,0,1,0">
            <Grid x:Name="Grid">
                <dx:DXBorder Background="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorOverlayConverter}, ConverterParameter=#FF3E3E3E}" />
                <dx:DXBorder Background="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorOverlayConverter}, ConverterParameter=#FF3E3E3E}" Height="4" VerticalAlignment="Top" />
                <ContentPresenter x:Name="Content" Margin="4,0,4,0" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="Placement">
                    <VisualState x:Name="RibbonWindow">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Grid" Storyboard.TargetProperty="Margin">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Thickness>0,-1,0,0</Thickness>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Margin">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Thickness>4,0,4,0</Thickness>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Standalone">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Grid" Storyboard.TargetProperty="Margin">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Thickness>0</Thickness>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Margin">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Thickness>4,0,4,1</Thickness>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageCategory.HeadersBackgroundTemplateInAeroWindow}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPageCategory\InAeroRibbonPageCategoryHeader.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPage\InAeroHighlightedRibbonPageCaption.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPage.HighlightedCaptionBackgroundTemplateInAeroWindow}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background'}" Opacity="0" />
            <ContentPresenter />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStateGroup">
                    <VisualState x:Name="NormalUnchecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="NormalChecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverUnchecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="PressedChecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0.62" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPage.HighlightedCaptionBackgroundTemplateInAeroWindowInMinimizedRibbon}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background'}" Opacity="0" />
            <ContentPresenter />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStateGroup">
                    <VisualState x:Name="NormalUnchecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="NormalChecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverUnchecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="PressedChecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0.62" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPage\InAeroHighlightedRibbonPageCaption.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPage\InAeroRibbonPageControl.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPage.SeparatorTemplateInAeroWindow}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Delimiter, Win10Dark=Brush.AltBorder'}" Width="1" />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPage\InAeroRibbonPageControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPage\InAeroRibbonPageCaption.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPage.CaptionBackgroundTemplateInAeroWindow}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" />
            <ContentPresenter />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStateGroup">
                    <VisualState x:Name="NormalUnchecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="NormalChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Control.Background, Office2019Black=Color.ControlLight.Background'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverUnchecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, VS2019Dark=Color.Border, Win11=Color.Backstage.ItemHoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Control.Background, Office2019Black=Color.ControlLight.Background, VS2019Dark=#00000000'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="PressedChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Control.Background, Office2019Black=Color.ControlLight.Background, VS2019Dark=#00000000'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, VS2019Dark=Color.Control.Background, Win11=Color.Backstage.ItemHoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPage.CaptionBackgroundTemplateInAeroWindowInMinimizedRibbon}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" />
            <ContentPresenter />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStateGroup">
                    <VisualState x:Name="NormalUnchecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="NormalChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Control.Background, Office2019Black=Color.ControlLight.Background'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverUnchecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, VS2019Dark=Color.Border, Win11=Color.Backstage.ItemHoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Control.Background, Office2019Black=Color.ControlLight.Background, VS2019Dark=#00000000'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="PressedChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Control.Background, Office2019Black=Color.ControlLight.Background, VS2019Dark=#00000000'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, VS2019Dark=Color.Control.Background, Win11=Color.Backstage.ItemHoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonPage\InAeroRibbonPageCaption.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonWindow\InAeroRibbonWindowButtons.xaml-->
    <!-- General -->

    <Style x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowControlBoxStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="0" />
    </Style>

    <ControlTemplate x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowControlBoxTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonWindow\InAeroRibbonWindowButtons.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonWindow\InAeroRibbonWindowBody.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowContentTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Backstage.Window.Background, Win11=Brush.Backstage.Background'}" Padding="1,0,1,1">
            <dx:DXBorder Background="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerBackground}}">
                <ContentPresenter />
            </dx:DXBorder>
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowBodyTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>

    <Style x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowContentStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="5,0,5,5" />
    </Style>

    <Style x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowBodyStyle}" TargetType="{x:Type ContentControl}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonWindow\InAeroRibbonWindowBody.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonWindow\InAeroRibbonWindowCaption.xaml-->
    <!-- General -->

    <DataTemplate x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowCaptionTemplate}">
        <dxb:ContentViewport ClipToBounds="True" KeepPositiveLeftContentPosition="True">
            <TextBlock
                Foreground="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Win11=Brush.Foreground.Alt'}"
                HorizontalAlignment="Center"
                IsHitTestVisible="False"
                Margin="3"
                Text="{Binding}"
                TextWrapping="Wrap"
                VerticalAlignment="Center" />
        </dxb:ContentViewport>
    </DataTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowHeaderBorderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder x:Name="PART_Header" Background="{dx:LWBrush 'Brush.Backstage.Window.Background, Win11=Brush.Backstage.Background'}" />
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False" />
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowCaptionStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Win11=Brush.Foreground.Alt'}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowIconAndCaptionAreaStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="3" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowIconStyle}" TargetType="{x:Type Image}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Stretch" Value="None" />
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbonWindow\InAeroRibbonWindowCaption.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbon\InAeroRibbonControl.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.CollapsedSelectedPageBorderTemplateInAeroWindow}" TargetType="ContentControl">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Backstage.Window.Background, VS2019Dark=Brush.Window.Background, Win11=Brush.Backstage.Background'}" Height="1" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.BackgroundTemplateInRibbonAeroWindow}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Backstage.Window.Background, VS2019Dark=Brush.Window.Background, Win11=Brush.Backstage.Background'}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.HeaderBorderTemplateInRibbonAeroWindow}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Backstage.Window.Background, VS2019Dark=Brush.Window.Background, Win11=Brush.Backstage.Background'}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.TabPartBorderTemplateInRibbonAeroWindow}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Backstage.Window.Background, VS2019Dark=Brush.Window.Background, Win11=Brush.Backstage.Background'}" />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbon\InAeroRibbonControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbon\InAeroRibbonButtons.xaml-->
    <!-- General -->
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbon\InAeroRibbonButtons.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbon\InAeroRibbonButtonMinimization.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.MinimizationButtonTemplateInRibbonAeroWindow}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush 'Brush.Button.Background, Win11=Brush.Button.SimpleButtonBackground'}" CornerRadius="62" />
            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                <Path x:Name="Collapsed" Opacity="0" Style="{StaticResource UIShape.Up}" />
                <Path x:Name="Expanded" Opacity="0" Style="{StaticResource UIShape.Down}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckedStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Expanded" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Collapsed" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{dxrt:LWKey Ribbon.MinimizationButtonStyleInRibbonAeroWindow}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Setter Property="Height" Value="16" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Width" Value="16" />
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbon\InAeroRibbonButtonMinimization.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbon\InAeroRibbonCaption.xaml-->
    <!-- General -->

    <Style x:Key="{dxrt:LWKey Ribbon.CaptionStyleInRibbonAeroWindow}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Win11=Brush.Foreground.Alt'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Grid x:Name="Root">
                        <TextBlock
                            x:Name="PART_Text"
                            Background="{x:Null}"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{TemplateBinding Content}"
                            TextTrimming="CharacterEllipsis" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbon\InAeroRibbonCaption.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbon\InAeroRibbonArrows.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonCustomization.UpArrowThemeKey}">
        <Path Style="{StaticResource UIShape.Up}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonCustomization.DownArrowThemeKey}">
        <Path Style="{StaticResource UIShape.Down}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonCustomization.CustomizationArrowControlTemplate}" TargetType="{x:Type dxr:CustomizationArrowControl}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent">
                <Grid x:Name="Content">
                    <Path x:Name="Left" Opacity="0" Style="{StaticResource UIShape.Left}" />
                    <Path x:Name="Right" Opacity="0" Style="{StaticResource UIShape.Right}" />
                    <Path x:Name="Up" Opacity="0" Style="{StaticResource UIShape.Up}" />
                    <Path x:Name="Down" Opacity="0" Style="{StaticResource UIShape.Down}" />
                </Grid>
            </dx:DXBorder>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Collapsed" Storyboard.TargetName="Root" Storyboard.TargetProperty="Visibility" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="Rotations">
                    <VisualState x:Name="Left">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Left" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Right">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Right" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Up">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Up" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Down">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Down" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonCustomization.CustomizationSeparatorControlTemplate}" TargetType="{x:Type dxr:CustomizationSeparatorControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Delimiter, Win10Dark=Brush.Border'}" Height="1" HorizontalAlignment="Stretch" />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonInAero\InAeroRibbon\InAeroRibbonArrows.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageCategory\RibbonPageCategoryButtons.xaml-->
    <!-- General -->

    <Style x:Key="{dxrt:LWKey RibbonPageCategory.CollapseButtonStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Root">
                        <dx:DXBorder x:Name="IsDefault" Background="{dx:LWBrush 'Brush.Button.Background, Win11=Brush.Button.SimpleButtonBackground'}" CornerRadius="62" />
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path x:Name="Collapsed" Opacity="0" Style="{StaticResource UIShape.Up}" />
                            <Path x:Name="Expanded" Opacity="0" Style="{StaticResource UIShape.Down}" />
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Hover">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckedStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Expanded" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Collapsed" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageCategory\RibbonPageCategoryButtons.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\UIPreset.xaml-->
    <sys:Double x:Key="{dxrt:LWKey Ribbon.ApplicationMenuHorizontalOffset}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.ApplicationMenuVerticalOffset}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.RowIndent}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.ColumnIndent}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.DefaultRightPaneWidth}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.MaxPageCaptionTextIndent}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.HeaderMinHeight}">32</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.HeaderMinHeightTouch}">0</sys:Double>
    <Thickness x:Key="{dxrt:LWKey Ribbon.SelectedPagePopupMargin}">0</Thickness>
    <Thickness x:Key="{dxrt:LWKey Ribbon.ResizeBorderThickness}">5</Thickness>
    <Thickness x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarFirstSeparatorMargin}">0</Thickness>
    <Thickness x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarLastSeparatorMargin}">0</Thickness>
    <sys:Double x:Key="{dxrt:LWKey RibbonStatusBar.MinHeight}">24</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey RibbonPage.MinHeight}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey RibbonPage.HeaderTextIndent}">0</sys:Double>
    <Thickness x:Key="{dxrt:LWKey RibbonPage.CaptionControlMargin}">0</Thickness>
    <Thickness x:Key="{dxrt:LWKey RibbonPage.SelectedPagePopupBorderMargin}">0</Thickness>
    <sys:Double x:Key="{dxrt:LWKey RibbonPageGroup.PopupVerticalOffset}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey RibbonPageGroup.PopupHorizontalOffset}">0</sys:Double>
    <Thickness x:Key="{dxrt:LWKey RibbonPageGroup.PopupBorderMargin}">0</Thickness>
    <Thickness x:Key="{dxrt:LWKey RibbonPageGroup.ContentMargin}">3,3,2,0</Thickness>
    <sys:Double x:Key="{dxrt:LWKey ApplicationButton.PopupHorizontalOffset}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey ApplicationButton.PopupVerticalOffset}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey ApplicationButton.Popup2010HorizontalOffset}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey ApplicationButton.Popup2010VerticalOffset}">0</sys:Double>
    <sys:Boolean x:Key="{dxrt:LWKey Backstage.DisableDefaultBackgroundGlyph}">True</sys:Boolean>
    <sys:Boolean x:Key="{dxrt:LWKey Backstage.IsFullScreen}">True</sys:Boolean>
    <sys:Boolean x:Key="{dxrt:LWKey Backstage.EnableWindowTitleShrink}">True</sys:Boolean>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.AeroHeaderMinHeight}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.AeroHeaderMinHeightTouch}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.AeroBorderTopOffset}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.CollapsedRibbonAeroBorderTopOffset}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.ApplicationMenuHorizontalOffsetInAeroWindow}">0</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey Ribbon.ApplicationMenuVerticalOffsetInAeroWindow}">24</sys:Double>
    <sys:Double x:Key="{dxrt:LWKey RibbonPage.AeroMinHeight}">0</sys:Double>
    <Thickness x:Key="{dxrt:LWKey RibbonPage.CaptionControlMarginInAeroWindow}">0</Thickness>
    <sys:Double x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroBorderSize}">5</sys:Double>
    <Thickness x:Key="{dxrt:LWKey DXRibbonAeroWindow.AeroWindowResizeBorderThickness}">8</Thickness>


    <!-- Converters -->

    <!-- QuickAccessToolbar -->

    <!-- RibbonStatusBar -->

    <!-- RibbonPage -->

    <!-- RibbonPageGroup -->

    <!-- ApplicationButton -->

    <!-- Backstage -->

    <!-- In Aero -->

    <dxr:RibbonStyle x:Key="{dxrt:LWKey Ribbon.AeroBorderRibbonStyle}">Office2007</dxr:RibbonStyle>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\UIPreset.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\DropDownGallery\DropDownGalleryResizeMode.xaml-->
    <!-- General -->

    <Style x:Key="{dxrt:LWKey GalleryDropDownControl.GalleryScrollBarContainerStyle}" TargetType="{x:Type ContentControl}" />

    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.SizeGripContainerTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder
            Background="{dx:LWBrush 'Brush.Button.Background, Win11=#00FFFFFF'}"
            BorderBrush="{dx:LWBrush 'Brush.Delimiter, Win10Dark=Brush.AltBorder, Win11=Brush.FlyoutBorder'}"
            BorderThickness="0,1,0,0"
            MinHeight="22">
            <ContentPresenter Margin="1" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.ThumbForBothResizeModeTemplate}" TargetType="{x:Type Thumb}">
        <Path Style="{StaticResource UIShape.SizeGrip}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.ThumbForVertResizeModeTemplate}" TargetType="{x:Type Thumb}">
        <Grid Background="Transparent" Cursor="SizeNS">
            <Path Style="{StaticResource UIShape.SizeGrip.Vertical}" />
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\DropDownGallery\DropDownGalleryResizeMode.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\DropDownGallery\DropDownGalleryPopup.xaml-->
    <!-- General -->
    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.MenuBorderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder
            Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background, Win11=Brush.FlyoutBackground'}"
            BorderBrush="{dx:LWBrush 'Brush.Border, Win11=Brush.FlyoutBorder'}"
            BorderThickness="{dx:LWThickness '(0,1,0,0), Win11=0'}"
            Margin="{dx:LWThickness '0, Win11=(0,0,0,-1)'}">
            <ContentPresenter />
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.GalleryCaptionTemplate}" TargetType="{x:Type ToggleButton}">
        <Grid>
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Button.Background, Office2019Black=Brush.ControlLight.Background, VS2019Blue=Brush.ControlDark.Background, Win11=Brush.Control.Background'}"
                BorderBrush="{dx:LWBrush 'Brush.Delimiter, Win10Dark=Brush.AltBorder'}"
                BorderThickness="0,0,0,1"
                Margin="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=(6,6,0,0)'}">
                <ContentPresenter />
            </dx:DXBorder>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, VS2019Blue=Color.ControlLight.HoverBackground, Win11=Color.Button.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, VS2019Blue=Color.ControlLight.SelectionBackground, Win11=Color.Button.PressedBackground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckedStates">
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, VS2019Blue=Color.ControlLight.SelectionBackground, Win11=Color.Button.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.MenuGlyphSideBorderTemplate}" TargetType="{x:Type ContentControl}" />

    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.MenuContentSideBorderTemplate}" TargetType="{x:Type ContentControl}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\DropDownGallery\DropDownGalleryPopup.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\DropDownGallery\DropDownGalleryItem.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.GalleryItemBorderTemplate}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, VS2019Blue=Color.ControlLight.HoverBackground, Win11=Color.ListItem.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBorder, VS2019Blue=Color.ControlLight.HoverBorder, Win11=Color.ListItem.HoverBorder'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, Win11=Color.ListItem.SelectionBorder'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, VS2019Blue=Color.ControlLight.SelectionBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, VS2019Blue=Color.ControlLight.SelectionBorder, Win11=Color.ListItem.SelectionBorder'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, VS2019Blue=Color.ControlLight.HoverBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, VS2019Blue=Color.ControlLight.HoverBorder, Win11=Color.ListItem.SelectionBorder'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Focused, Win11=Color.Accent'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.GalleryItemGlyphBorderTemplate}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" />
            <ContentPresenter />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBorder, Win11=Color.ListItem.HoverBorder'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, Win11=Color.ListItem.SelectionBorder'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, Win11=Color.ListItem.SelectionBorder'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, Win11=Color.ListItem.SelectionBorder'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Focused, Win11=Color.Accent'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\DropDownGallery\DropDownGalleryItem.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\DropDownGallery\DropDownGalleryControl.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.GalleryBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Editor.Background, Win11=#00FFFFFF'}">
            <ContentPresenter />
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey GalleryDropDownControl.GalleryGroupsBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\DropDownGallery\DropDownGalleryControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\InRibbonGallery\InRibbonGalleryButtons.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey InRibbonGallery.UpButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1" />
            <Path x:Name="Content" Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}" Style="{StaticResource UIShape.Up}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, VS2019Blue=Color.ControlDark.HoverBackground, Win11=Color.ListItem.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBorder, VS2019Blue=Color.ControlDark.HoverBackground, Win11=Color.ListItem.HoverBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, VS2019Blue=Color.ControlDark.SelectionBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, VS2019Blue=Color.ControlDark.SelectionBackground, Win11=Color.ListItem.SelectionBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey InRibbonGallery.DownButtonTemplate}" TargetType="{x:Type Button}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <Path
                x:Name="Content"
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Margin="4"
                Style="{StaticResource UIShape.Down}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, VS2019Blue=Color.ControlDark.HoverBorder, Win11=Color.ListItem.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBorder, VS2019Blue=Color.ControlDark.HoverBackground, Win11=Color.ListItem.HoverBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, VS2019Blue=Color.ControlDark.SelectionBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, VS2019Blue=Color.ControlDark.SelectionBackground, Win11=Color.ListItem.SelectionBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey InRibbonGallery.DropDownButtonTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1" />
            <Path
                x:Name="Content"
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Margin="4"
                Style="{StaticResource UIShape.DropDown}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, VS2019Blue=Color.ControlDark.HoverBackground, Win11=Color.ListItem.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBorder, VS2019Blue=Color.ControlDark.HoverBackground, Win11=Color.ListItem.HoverBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, VS2019Blue=Color.ControlDark.SelectionBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, VS2019Blue=Color.ControlDark.SelectionBackground, Win11=Color.ListItem.SelectionBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, VS2019Blue=Color.ControlDark.SelectionBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, VS2019Blue=Color.ControlDark.SelectionBackground, Win11=Color.ListItem.SelectionBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.Foreground, VS2019Light=Color.Window.Background, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey InRibbonGallery.DropDownButtonTemplateTouch}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1" />
            <Path
                x:Name="Content"
                Fill="{dx:LWBrush 'Brush.Foreground, Office2019Black=Brush.ControlLight.Foreground, Win11=Brush.Foreground.Primary'}"
                Margin="4"
                Style="{StaticResource UIShape.DropDown}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBorder, Win11=Color.ListItem.HoverBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, Win11=Color.ListItem.SelectionBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBorder, Win11=Color.ListItem.SelectionBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Office2019Black=Color.ControlLight.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\InRibbonGallery\InRibbonGalleryButtons.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\InRibbonGallery\InRibbonGalleryItem.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey InRibbonGallery.GalleryItemGlyphBorderTemplate}" TargetType="{x:Type dxb:ItemBorderControl}">
        <dx:DXBorder Name="Root" BorderBrush="Transparent">
            <ContentPresenter />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="State" Value="Checked">
                <Setter Property="BorderBrush" TargetName="Root" Value="{dx:LWBrush 'Brush.Focused, Office2019Black=Brush.ControlLight.Foreground, Office2019Colorful=Brush.HoverForeground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, Win11=Brush.Accent'}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\InRibbonGallery\InRibbonGalleryItem.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\InRibbonGallery\InRibbonGalleryControl.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey InRibbonGallery.BorderTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" Margin="0,0,3,0">
            <dx:DXBorder
                x:Name="PART_Border"
                Background="{StaticResource Brush.Editor.Background}"
                BorderBrush="{dx:LWBrush 'Brush.Border, Win11=Brush.PanelBorder'}"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=7'}">
                <ContentPresenter />
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Background" TargetName="PART_Border" Value="{Binding Path=TemplatedParent.(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:AppearanceOptions.HasBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="BorderBrush" TargetName="PART_Border" Value="{Binding Path=TemplatedParent.(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="BorderThickness" TargetName="PART_Border" Value="{Binding Path=TemplatedParent.(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="CornerRadius" TargetName="PART_Border" Value="{Binding Path=TemplatedParent.(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:AppearanceOptions.HasPadding), RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Padding" TargetName="PART_Border" Value="{Binding Path=TemplatedParent.(dxi:AppearanceOptions.Padding), RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey InRibbonGallery.GalleryBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey InRibbonGallery.GalleryGroupsBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonGallery\InRibbonGallery\InRibbonGalleryControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonQuickAccessToolbar\QuickAccessToolbarPopupBorder.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarPopupBorderTemplate}" TargetType="{x:Type dxr:RibbonQuickAccessToolbarPopupBorderControl}">
        <dx:DXBorder
            Background="{dx:LWBrush 'Brush.Window.Background, Office2019Colorful=Brush.Editor.Background, Office2019HighContrast=Brush.Editor.Background, VS2019Blue=Brush.Control.Background, VS2019Dark=Brush.Control.Background, Win11=Brush.WindowBackground'}"
            BorderBrush="{dx:LWBrush 'Brush.Delimiter, VS2019Dark=Brush.Border, Win10Dark=Brush.AltBorder'}"
            BorderThickness="1"
            CornerRadius="{dx:LWCornerRadius '0, Win11=7'}">
            <ContentPresenter Content="{TemplateBinding Content}" Margin="1,1,0,0" />
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonQuickAccessToolbar\QuickAccessToolbarPopupBorder.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonQuickAccessToolbar\QuickAccessToolbarDropDownButton.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarDropDownButtonTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root" Background="Transparent" Margin="0,0,1,1">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <Path
                x:Name="Content"
                Fill="{dx:LWBrush 'Brush.Backstage.Foreground, Win10Dark=Brush.Foreground, Win10Light=Brush.Foreground, Win11=Brush.Foreground.Secondary'}"
                Margin="10,8,10,8"
                Style="{StaticResource UIShape.QuickAccessToolbar.DropDown}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, Win10Dark=Color.HoverBackground, Win10Light=Color.HoverBackground, Win11=Color.Button.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, Win10Dark=Color.HoverBorder, Win10Light=Color.HoverBorder, Win11=Color.Button.HoverBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.Foreground, Office2019HighContrast=Color.HoverForeground, VS2019Blue=Color.HoverForeground, Win10Dark=Color.Foreground, Win10Light=Color.Foreground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Button.PressedBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Button.PressedBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.Foreground, Office2019HighContrast=Color.SelectionForeground, VS2019Blue=Color.SelectionForeground, Win10Dark=Color.Foreground, Win10Light=Color.Foreground, Win11=Color.Foreground.Muted'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.SelectionBackground, Win10Dark=Color.SelectionBackground, Win10Light=Color.SelectionBackground, Win11=Color.Button.CheckedBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.SelectionBackground, Win10Dark=Color.SelectionBorder, Win10Light=Color.SelectionBorder, Win11=Color.Button.CheckedBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.Foreground, Office2019HighContrast=Color.SelectionForeground, VS2019Blue=Color.SelectionForeground, Win10Dark=Color.Foreground, Win10Light=Color.Foreground, Win11=Color.Foreground.Alt'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarDropDownButtonTemplateInFooter}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root" Background="Transparent" Margin="0,0,1,1">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <Path
                x:Name="Content"
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Secondary'}"
                Margin="10,8,10,8"
                Style="{StaticResource UIShape.QuickAccessToolbar.DropDown}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.Button.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Colorful=Color.HoverAltBorder, Win11=Color.Button.HoverBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverForeground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.Button.PressedBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Colorful=Color.SelectionAltBorder, Win11=Color.Button.PressedBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Win11=Color.Foreground.Muted'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.Button.CheckedBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Colorful=Color.SelectionAltBorder, Win11=Color.Button.CheckedBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Win11=Color.Foreground.Alt'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonQuickAccessToolbar\QuickAccessToolbarDropDownButton.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonQuickAccessToolbar\QuickAccessToolbarCustomizationButton.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarCustomizationButtonTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root" Background="Transparent" Margin="0,0,1,1">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <Path
                x:Name="Content"
                Fill="{dx:LWBrush 'Brush.Backstage.Foreground, Win10Dark=Brush.Foreground, Win10Light=Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Margin="10,8,10,8"
                Style="{StaticResource UIShape.DropDown}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.HoverBackground, Win11=Color.Button.HoverBackground'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="BorderBrush">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.HoverBackground, Win11=Color.Button.HoverBorder'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.Foreground, Office2019HighContrast=Color.HoverForeground, VS2019Blue=Color.HoverForeground, Win11=Color.Foreground.Primary'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Button.PressedBackground'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="BorderBrush">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Button.PressedBorder'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.Foreground, VS2019Blue=Color.HoverForeground, Win11=Color.Foreground.Primary'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Button.CheckedBackground'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="BorderBrush">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Button.CheckedBorder'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.Foreground, VS2019Blue=Color.SelectionForeground, Win11=Color.Foreground.Alt'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarCustomizationButtonTemplateInFooter}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root" Background="Transparent" Margin="0,0,1,1">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <Path
                x:Name="Content"
                Fill="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
                Margin="10,8,10,8"
                Style="{StaticResource UIShape.DropDown}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, VS2019Blue=Color.ControlDark.HoverBackground, Win11=Color.Button.HoverBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBorder, Office2019Colorful=Color.HoverAltBorder, VS2019Blue=Color.ControlDark.HoverBorder, Win11=Color.Button.HoverBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverForeground, Win11=Color.Foreground.Primary'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, VS2019Blue=Color.ControlDark.SelectionBackground, Win11=Color.Button.PressedBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Colorful=Color.SelectionAltBorder, VS2019Blue=Color.ControlDark.SelectionBorder, Win11=Color.Button.PressedBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Win11=Color.Foreground.Muted'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.Button.CheckedBackground'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBorder, Office2019Colorful=Color.SelectionAltBorder, Win11=Color.Button.CheckedBorder'}" />
                            <ColorAnimation Duration="0" Storyboard.TargetName="Content" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionForeground, Win11=Color.Foreground.Alt'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonQuickAccessToolbar\QuickAccessToolbarCustomizationButton.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonQuickAccessToolbar\QuickAccessToolbarContentRight.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarRightContentTemplate}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding Content}" Margin="2" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarRightContentTemplateInPopup}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding Content}" Margin="2" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarRightContentTemplateInFooter}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding Content}" Margin="2" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarRightContentTemplateInTitle}" TargetType="ContentControl">
        <Grid x:Name="Root">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter
                x:Name="contentPresenter"
                Grid.Column="0"
                Content="{TemplateBinding Content}"
                Margin="0,2,0,1" />
            <Control
                x:Name="PART_LastSeparator"
                Grid.Column="1"
                Margin="{DynamicResource {dxrt:LWKey QuickAccessToolbar.RibbonToolbarLastSeparatorMargin}}"
                Template="{DynamicResource {dxt:LWKey BarItemSeparator.InRibbonQuickAccessToolbarCommonTemplate}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).IsInRibbonWindow, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Visibility" TargetName="PART_LastSeparator" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).ToolbarShowCustomizationButton, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="PART_LastSeparator" Value="Collapsed" />
                <Setter Property="Visibility" TargetName="contentPresenter" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- 2010 -->

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarRightContentTemplate2010}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding Content}" />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonQuickAccessToolbar\QuickAccessToolbarContentRight.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonQuickAccessToolbar\QuickAccessToolbarContentLeft.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarLeftContentTemplate}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding ContentControl.Content}" Margin="2" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarLeftContentTemplateInPopup}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding Content}" Margin="2" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarLeftContentTemplateInFooter}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding Content}" Margin="2" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarLeftContentTemplateInTitle}" TargetType="ContentControl">
        <Grid x:Name="Root" Margin="0,1,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Control
                x:Name="PART_FirstSeparator"
                Grid.Column="0"
                Margin="{DynamicResource {dxrt:LWKey QuickAccessToolbar.RibbonToolbarFirstSeparatorMargin}}"
                Template="{DynamicResource {dxt:LWKey BarItemSeparator.InRibbonQuickAccessToolbarCommonTemplate}}" />
            <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).IsInRibbonWindow, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="PART_FirstSeparator" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding VisibleItemsCount, RelativeSource={RelativeSource AncestorType=dxr:RibbonQuickAccessToolbarControl}}" Value="0">
                <Setter Property="Visibility" TargetName="PART_FirstSeparator" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxi:DXWindowsHelper.WindowKind), RelativeSource={RelativeSource Self}}" Value="{x:Static dxi:DXWindowsHelper.ThemedWindow}">
                <Setter Property="Margin" TargetName="PART_FirstSeparator" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).ToolbarHideSeparators, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Visibility" TargetName="PART_FirstSeparator" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- 2010 -->

    <ControlTemplate x:Key="{dxrt:LWKey QuickAccessToolbar.RibbonToolbarLeftContentTemplate2010}" TargetType="ContentControl">
        <ContentPresenter Content="{TemplateBinding ContentControl.Content}" />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonQuickAccessToolbar\QuickAccessToolbarContentLeft.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageCategory\RibbonPageCategoryHeaderBackground.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageCategory.HeadersBackgroundTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}" />

    <Style x:Key="{dxrt:LWKey RibbonPageCategory.HeadersPresenterStyle}" TargetType="{x:Type ItemsPresenter}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageCategory\RibbonPageCategoryHeaderBackground.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageCategory\RibbonPageCategoryTextStyle.xaml-->
    <!-- General -->

    <Style x:Key="{dxrt:LWKey Ribbon.NormalPageCategoryTextStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, Win10Dark=Brush.Foreground, Win10Light=Brush.Foreground, Win11=Brush.Foreground.Primary'}" />
    </Style>

    <Style x:Key="{dxrt:LWKey Ribbon.SelectedPageCategoryTextStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />
    </Style>

    <!-- In Aero -->

    <Style x:Key="{dxrt:LWKey Ribbon.NormalPageCategoryTextStyleInAeroWindow}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.NormalPageCategoryTextStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey Ribbon.SelectedPageCategoryTextStyleInAeroWindow}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.SelectedPageCategoryTextStyle}}" TargetType="{x:Type ContentControl}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageCategory\RibbonPageCategoryTextStyle.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonHighlighted\HighlightedRibbonPageGroupBorder.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.HighlightedBorderTemplateInPopup}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background'}" BorderBrush="{StaticResource Brush.Border}" BorderThickness="1"
                         CornerRadius="{dx:LWCornerRadius '0, Win11=7'}" />
            <ContentPresenter Margin="1,1,1,0" />
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonHighlighted\HighlightedRibbonPageGroupBorder.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageGroup\RibbonPageGroupTextSplitter.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.NormalArrowTemplateInTextSplitter}" TargetType="{x:Type ContentControl}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.Down}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.SelectedArrowTemplateInTextSplitter}" TargetType="{x:Type ContentControl}">
        <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" Style="{StaticResource UIShape.Down}" />
    </ControlTemplate>

    <!-- Other -->

    <dxb:FontSettings
        x:Key="{dxrt:LWKey RibbonPageGroup.PopupButtonFontSettings}"
        Checked="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}"
        Hover="{dx:LWBrush 'Brush.HoverForeground, Win11=Brush.Foreground.Primary'}"
        HoverChecked="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}"
        Normal="{dx:LWBrush 'Brush.Foreground, Win11=Brush.Foreground.Primary'}"
        Pressed="{dx:LWBrush 'Brush.SelectionForeground, Win11=Brush.Foreground.Primary'}" />

    <Style x:Key="{dxrt:LWKey RibbonPageGroup.TextSplitterStyle}" TargetType="{x:Type dxb:TextSplitterControl}">
        <Setter Property="FirstStringHorizontalAlignment" Value="Center" />
        <Setter Property="FirstStringMargin" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="SecondStringHorizontalAlignment" Value="Center" />
        <Setter Property="SecondStringMargin" Value="0" />
    </Style>

    <Style x:Key="{dxrt:LWKey RibbonPageGroup.BottomSideArrowContainerStyleInTextSplitter}" TargetType="{x:Type ContentControl}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="4" />
    </Style>

    <Style x:Key="{dxrt:LWKey RibbonPageGroup.RightSideArrowContainerStyleInTextSplitter}" TargetType="{x:Type ContentControl}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="2" />
    </Style>

    <Style x:Key="{dxrt:LWKey RibbonPageGroup.SelectedTextStyleInTextSplitter}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey RibbonPageGroup.NormalTextStyleInTextSplitter}" TargetType="{x:Type ContentControl}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageGroup\RibbonPageGroupTextSplitter.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageGroup\RibbonPageGroupControl.xaml-->
    <!-- General -->

    <Style x:Key="{dxrt:LWKey RibbonPageGroup.ContentStyle}" TargetType="{x:Type ItemsPresenter}">
        <Setter Property="Margin" Value="{StaticResource {dxrt:LWKey RibbonPageGroup.ContentMargin}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsTabletMode, RelativeSource={RelativeSource AncestorType={x:Type dxr:RibbonPageGroupControl}}}" Value="True">
                <Setter Property="Margin" Value="2" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).IsSimplified, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxr:RibbonPageGroupControl}}}" Value="True">
                <Setter Property="Margin" Value="0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey RibbonPageGroup.LayoutPanelStyle}" TargetType="{x:Type dx:Items2Panel}">
        <Setter Property="Alignment" Value="Top" />
        <Setter Property="Content1Padding" Value="5" />
        <Setter Property="Content2Padding" Value="5" />
        <Setter Property="HorizontalIndent" Value="2" />
        <Setter Property="HorizontalPadding" Value="5" />
        <Setter Property="VerticalIndent" Value="2" />
        <Setter Property="VerticalPadding" Value="5" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Content1Padding" Value="14" />
                <Setter Property="Content2Padding" Value="14" />
                <Setter Property="HorizontalPadding" Value="14" />
                <Setter Property="VerticalPadding" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageGroup\RibbonPageGroupControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageGroup\RibbonPageGroupPopupButton.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.PopupButtonBorderTemplate}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid x:Name="Root">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <dx:DXBorder
                x:Name="IsDefault"
                Background="Transparent"
                Margin="{dx:LWThickness '(0,0,0,1), Win11=(2,2,2,3)'}"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}" />
            <dx:DXBorder
                x:Name="IsCustomization"
                BorderBrush="{dx:LWBrush 'Brush.Focused, Win11=Brush.Accent'}"
                BorderThickness="1"
                Opacity="0"
                CornerRadius="{dx:LWCornerRadius '0, Win11=4'}"
                Margin="{dx:LWThickness '0, Win11=(2,2,2,3)'}" />
            <ContentPresenter Content="{TemplateBinding Content}" Margin="0,0,1,0" />
            <dx:DXBorder
                x:Name="Delimiter"
                Grid.Column="1"
                Background="{StaticResource Brush.Border}"
                Width="1" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="Transparent" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.Button.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.Button.PressedBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" />
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.Button.PressedBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Black=Color.ControlLight.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.Button.PressedBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Black=Color.ControlLight.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.Button.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Customization">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsCustomization" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.PopupControlTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>

    <!-- Other -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.PopupButtonGlyphBorderTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter x:Name="Content" Height="32" Width="32" />
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Content" Value="44" />
                <Setter Property="MinWidth" TargetName="Content" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.PopupButtonContentBorderTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageGroup\RibbonPageGroupPopupButton.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageGroup\RibbonPageGroupCaption.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.CaptionBorderTemplate}" TargetType="{x:Type ContentControl}">
        <StackPanel>
            <ContentPresenter Content="{TemplateBinding Content}" Margin="0,0,0,1" />
            <dx:DXBorder x:Name="Delimiter" Background="{dx:LWBrush 'Brush.Delimiter, Win10Dark=Brush.AltBorder'}" Width="1" />
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).RibbonStyle, RelativeSource={RelativeSource Self}}" Value="OfficeSlim">
                <Setter Property="Opacity" TargetName="Delimiter" Value="1" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Other -->

    <Style x:Key="{dxrt:LWKey RibbonPageGroup.CaptionPanelStyle}" TargetType="{x:Type dxb:SplitLayoutPanel}">
        <Setter Property="LeftContent1Margin" Value="3" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="MaximizeContent1" Value="True" />
        <Setter Property="RightContent2Margin" Value="0" />
        <Setter Property="SingleContent1Margin" Value="3" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="LeftContent1Margin" Value="14" />
                <Setter Property="SingleContent1Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageGroup\RibbonPageGroupCaption.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageGroup\RibbonPageGroupBorder.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.BorderTemplateInPopup}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder
                Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background, VS2019Blue=Brush.ControlDark.Background'}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1"
                CornerRadius="{dx:LWCornerRadius '0, Win11=7'}" />
            <ContentPresenter Margin="1,1,1,0" />
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPageGroup\RibbonPageGroupBorder.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonHighlighted\HighlightedRibbonPageGroupCaption.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.HighlightedCaptionBorderTemplate}" TargetType="{x:Type ContentControl}">
        <StackPanel>
            <ContentPresenter Content="{TemplateBinding Content}" Margin="0,0,0,1" />
            <dx:DXBorder x:Name="Delimiter" Background="{dx:LWBrush 'Brush.Delimiter, Win10Dark=Brush.AltBorder'}" Width="1" />
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).RibbonStyle, RelativeSource={RelativeSource Self}}" Value="OfficeSlim">
                <Setter Property="Opacity" TargetName="Delimiter" Value="1" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonHighlighted\HighlightedRibbonPageGroupCaption.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonHighlighted\HighlightedRibbonPageGroupPopupButton.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.HighlightedPopupButtonBorderTemplate}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid x:Name="Root">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" Margin="0,0,0,1" />
            <dx:DXBorder
                x:Name="IsCustomization"
                BorderBrush="{dx:LWBrush 'Brush.Focused, Win11=Brush.Accent'}"
                BorderThickness="1"
                Opacity="0" />
            <ContentPresenter Content="{TemplateBinding Content}" Margin="0,0,1,0" />
            <dx:DXBorder
                x:Name="Delimiter"
                Grid.Column="1"
                Background="{StaticResource Brush.Border}"
                Width="1" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="Transparent" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" />
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.SelectionBackground, Office2019Colorful=Color.SelectionAltBackground, Win11=Color.ListItem.SelectionBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Customization">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsCustomization" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.HighlightedPopupButtonGlyphBorderTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter x:Name="Content" Height="32" Width="32" />
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Content" Value="44" />
                <Setter Property="MinWidth" TargetName="Content" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.HighlightedPopupButtonContentBorderTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonHighlighted\HighlightedRibbonPageGroupPopupButton.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPage\RibbonPageControl.xaml-->
    <!-- General -->

    <Style x:Key="{dxrt:LWKey RibbonPage.CaptionContentContainerStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid Background="Transparent" Margin="14,0">
                        <ContentPresenter Margin="0,7" />
                        <dxi:SelectionIndicator
                            IsHighlighted="{TemplateBinding IsMouseOver}"
                            IsSelected="{Binding Page.IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxr:RibbonPageHeaderControl}}"
                            Orientation="Horizontal"
                            VerticalAlignment="Bottom" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey RibbonPage.HighlightedCaptionContentContainerStyle}" BasedOn="{StaticResource {dxrt:LWKey RibbonPage.CaptionContentContainerStyle}}" TargetType="{x:Type ContentControl}" />

    <!-- Background -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPage.BackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPage\RibbonPageControl.xaml-->


    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPage\RibbonPageSeparator.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPage.SeparatorTemplate}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPage\RibbonPageSeparator.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPage\RibbonPageRepeatButtons.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPage.RightRepeatButtonTemplate}" TargetType="{x:Type RepeatButton}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Button.Background, Win11=Brush.Button.SimpleButtonBackground'}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="1,0,0,0" />
            <Path Margin="6" Style="{StaticResource UIShape.Right}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey RibbonPage.LeftRepeatButtonTemplate}" TargetType="{x:Type RepeatButton}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder
                x:Name="IsDefault"
                Background="{dx:LWBrush 'Brush.Button.Background, Win11=Brush.Button.SimpleButtonBackground'}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="0,0,1,0" />
            <Path Margin="6" Style="{StaticResource UIShape.Left}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.HoverBackground, Office2019Colorful=Color.HoverAltBackground, Win11=Color.ListItem.HoverBackground'}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <!-- Styles -->

    <Style x:Key="{dxrt:LWKey RibbonPage.RightRepeatButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="Template" Value="{DynamicResource {dxrt:LWKey RibbonPage.RightRepeatButtonTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey RibbonPage.LeftRepeatButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="Template" Value="{DynamicResource {dxrt:LWKey RibbonPage.LeftRepeatButtonTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonPage\RibbonPageRepeatButtons.xaml-->


    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonWindow\ButtonsAdditional.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.RibbonShowModeSelectorItemTemplate}" TargetType="{x:Type dxr:RibbonShowModeSelectorItem}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" />
            <Path Style="{StaticResource UIShape.ShowModeSelector}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, Win11=Color.Backstage.ItemHoverBackground'}" />
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Backstage.ItemSelectionBackground'}" />
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.ShowAutoHidePopupButtonTemplate}" TargetType="{x:Type ToggleButton}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" />
            <Path Style="{StaticResource UIShape.ShowAutoHidePopup}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.HoverBackground, Win11=Color.Backstage.ItemHoverBackground'}" />
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Backstage.ItemSelectionBackground'}" />
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Styles -->

    <Style x:Key="{dxrt:LWKey Ribbon.RibbonShowModeSelectorItemStyle}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="32" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Width" Value="46" />
        <Setter Property="Template" Value="{DynamicResource {dxrt:LWKey Ribbon.RibbonShowModeSelectorItemTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonWindow\ButtonsAdditional.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonWindow\FloatingContainer.xaml-->
    <!-- General -->

    <!-- Header -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.FloatingContainerHeaderBorderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder
            x:Name="PART_Header"
            Background="{dx:LWBrush 'Brush.Backstage.Window.Background, Office2019Black=Brush.Window.Background, VS2019Dark=Brush.Window.Background, Win11=Brush.Backstage.Background'}"
            BorderBrush="{dx:LWBrush 'Brush.Backstage.Window.Background, Win11=Brush.PanelBorder'}"
            BorderThickness="1,1,1,0" />
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False" />
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Border -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.FloatingContainerBorderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Window.Background, Win11=Brush.WindowBackground'}">
            <ContentPresenter />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False" />
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsMaximized)}" Value="True" />
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Content -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.FloatingContainerContentTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{DynamicResource {dxt:LWKey FloatingContainer.FloatingContainerBackground}}" BorderBrush="{dx:LWBrush 'Brush.Backstage.Window.Background, Win11=Brush.PanelBorder'}" BorderThickness="1,0,1,1">
            <ContentPresenter />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False" />
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Other -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.FloatingContainerBodyTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.FloatingContainerControlBoxTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>

    <!-- Styles -->

    <Style x:Key="{dxrt:LWKey Ribbon.FloatingContainerContentStyle}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey Ribbon.FloatingContainerBodyStyle}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey Ribbon.FloatingContainerControlBoxStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="1" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey Ribbon.FloatingContainerCaptionStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Win11=Brush.Foreground.Alt'}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="{dxrt:LWKey Ribbon.FloatingContainerIconAndCaptionAreaStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="8" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey Ribbon.FloatingContainerIconStyle}" TargetType="{x:Type Image}">
        <Setter Property="Height" Value="16" />
        <Setter Property="Margin" Value="8" />
        <Setter Property="Stretch" Value="None" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Width" Value="16" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonWindow\FloatingContainer.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonKeyTip.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey KeyTipControl.BorderTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root" SnapsToDevicePixels="True">
            <dx:DXBorder Background="{dx:LWBrush 'Brush.Backstage.Window.Background, Win10Dark=Brush.Focused, Win10Light=Brush.Focused, Win11=Brush.Backstage.Background'}">
                <ContentPresenter />
            </dx:DXBorder>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="EnabledStated">
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{dxrt:LWKey KeyTipControl.ContentStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Win10Light=Brush.HighlightedForeground, Win11=Brush.Foreground.Alt'}" />
        <Setter Property="Margin" Value="2" />
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonKeyTip.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonHeader.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.StandaloneHeaderBorderTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Backstage.Window.Background, Win11=Brush.Backstage.Background'}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.HeaderBorderTemplateInRibbonWindow}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder x:Name="PART_Header" Background="{dx:LWBrush 'Brush.Backstage.Window.Background, VS2019Dark=Brush.Window.Background, Win10Dark=Brush.Control.Background, Win10Light=Brush.Control.Background, Win11=Brush.WindowBackground'}" />
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive), RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="False">
                <Setter Property="Background" TargetName="PART_Header" Value="{dx:LWBrush 'Brush.Backstage.Window.Background, VS2019Dark=Brush.Window.Background, Win11=Brush.WindowBackground'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsMaximized), RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True" />
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonHeader.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonControl.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.BackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Window.Background, VS2019Blue=Brush.ControlDark.Background, Win11=Brush.WindowBackground'}" MinHeight="32" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.TabPartBorderTemplate}" TargetType="{x:Type ContentControl}">
        <Grid Name="Root" MinHeight="32">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <dx:DXBorder
                x:Name="CategoryBackground"
                Grid.Row="0"
                Background="{dx:LWBrush 'Brush.Backstage.Window.Background, VS2019Dark=Brush.Window.Background, Win10Dark=Brush.Window.Header.ActiveBackground, Win10Light=Brush.Window.Background, Win11=Brush.WindowBackground'}"
                MinHeight="{DynamicResource {dxrt:LWKey Ribbon.HeaderMinHeight}}" />
            <dx:DXBorder
                x:Name="SeparatorBackground"
                Grid.Row="1"
                Background="{dx:LWBrush 'Brush.Backstage.Window.Background, Office2019Black=Brush.ControlLight.Background, Office2019Colorful=Brush.Control.Background, VS2019Dark=Brush.Window.Background, Win10Dark=Brush.Window.Header.ActiveBackground, Win10Light=Brush.Window.Background, Win11=Brush.WindowBackground'}"
                Height="1" />
            <dx:DXBorder x:Name="PageHeaderBackground" Grid.Row="2" Background="{dx:LWBrush 'Brush.Backstage.Window.Background, Office2019Black=Brush.ControlLight.Background, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Control.Background, VS2019Dark=Brush.Window.Background, Win10Dark=Brush.Window.Header.ActiveBackground, Win10Light=Brush.Window.Background, Win11=Brush.WindowBackground'}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).IsInRibbonWindow, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Visibility" TargetName="CategoryBackground" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).IsRibbonTitleBarActualVisible, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="CategoryBackground" Value="Collapsed" />
                <Setter Property="Visibility" TargetName="SeparatorBackground" Value="Collapsed" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxi:DXWindowsHelper.Window).(dx:ThemedWindow.IsActive)}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxi:DXWindowsHelper.Window).(dx:ThemedWindow.ActualWindowKind)}" Value="Ribbon" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" TargetName="SeparatorBackground" Value="{dx:LWBrush 'Brush.Backstage.Window.Background, Office2019Black=Brush.ControlLight.Background, Office2019Colorful=Brush.Control.Background, VS2019Dark=Brush.Window.Background, Win10Dark=Brush.Window.Header.ActiveBackground, Win10Light=Brush.Window.Background, Win11=Brush.WindowBackground'}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxi:DXWindowsHelper.Window).(dx:ThemedWindow.IsActive)}" Value="False">
                <Setter Property="Background" TargetName="SeparatorBackground" Value="{dx:LWBrush 'Brush.Backstage.Window.Background, Office2019Black=Brush.ControlLight.Background, Office2019Colorful=Brush.Control.Background, Office2019HighContrast=Brush.Border, VS2019Dark=Brush.Window.Background, Win10Dark=Brush.Window.Background, Win10Light=Brush.Window.Background, Win11=Brush.WindowBackground'}" />
                <Setter Property="Visibility" TargetName="CategoryBackground" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" TargetName="PageHeaderBackground" Value="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
                <Setter Property="Background" TargetName="SeparatorBackground" Value="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="BorderThickness" TargetName="PageHeaderBackground" Value="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource Self}, Converter={StaticResource ThicknessConverter}, ConverterParameter=Top}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.HasBorderBrush), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="BorderBrush" TargetName="PageHeaderBackground" Value="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.BorderBrush), RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Margin" TargetName="SeparatorBackground" Value="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource Self}, Converter={StaticResource CornerRadiusToThicknessConverter}}" />
                <Setter Property="CornerRadius" TargetName="PageHeaderBackground" Value="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource Self}, Converter={StaticResource CornerRadiusConverter}, ConverterParameter=Top}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonControl.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonStyles.xaml-->
    <!-- General -->

    <Style x:Key="{dxrt:LWKey Ribbon.ApplicationIconContainerStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="8" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey Ribbon.CaptionStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Win10Dark=Brush.Foreground, Win10Light=Brush.Foreground, Win11=Brush.Foreground.Primary'}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!-- Header Quick Access Toolbar -->

    <Style x:Key="{dxrt:LWKey Ribbon.HeaderQuickAccessToolbar2007ContainerStyle}" TargetType="ContentControl">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="1,1,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey Ribbon.HeaderQuickAccessToolbar2007ContainerStyleInRibbonWindow}" TargetType="ContentControl">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="1,1,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey Ribbon.HeaderQuickAccessToolbarContainerStyleWithoutApplicationIcon}" TargetType="ContentControl">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="1,1,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey Ribbon.HeaderQuickAccessToolbar2010ContainerStyle}" TargetType="ContentControl">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="1,1,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey Ribbon.HeaderQuickAccessToolbar2010ContainerStyleInRibbonWindow}" TargetType="ContentControl">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="1,1,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- In Aero -->

    <Style x:Key="{dxrt:LWKey Ribbon.ApplicationIconContainerStyleInRibbonAeroWindow}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.ApplicationIconContainerStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey Ribbon.IconAndCaptionAreaStyleInRibbonAeroWindow}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.IconAndCaptionAreaStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey Ribbon.HeaderQuickAccessToolbarContainerStyleWithoutAppIconInAeroWindow}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.HeaderQuickAccessToolbar2007ContainerStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey Ribbon.HeaderQuickAccessToolbar2007ContainerStyleInAeroWindow}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.HeaderQuickAccessToolbar2007ContainerStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey Ribbon.HeaderQuickAccessToolbar2010ContainerStyleInAeroWindow}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.HeaderQuickAccessToolbar2007ContainerStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey RibbonPage.NormalTextStyleInAeroWindow}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.NormalPageCaptionTextStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey RibbonPage.HoverTextStyleInAeroWindow}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.HoverPageCaptionTextStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey RibbonPage.SelectedTextStyleInAeroWindow}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.NormalPageCaptionTextStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey RibbonPage.NormalTextStyleInAeroWindowInMinimizedRibbon}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.NormalPageCaptionTextStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey RibbonPage.HoverTextStyleInAeroWindowInMinimizedRibbon}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.HoverPageCaptionTextStyle}}" TargetType="{x:Type ContentControl}" />

    <Style x:Key="{dxrt:LWKey RibbonPage.SelectedTextStyleInAeroWindowInMinimizedRibbon}" BasedOn="{StaticResource {dxrt:LWKey Ribbon.SelectedPageCaptionTextStyle}}" TargetType="{x:Type ContentControl}" />
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonStyles.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonRepeatButtons.xaml-->
    <!-- General -->

    <!-- Styles -->

    <Style x:Key="{dxrt:LWKey Ribbon.RightRepeatButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Template" Value="{DynamicResource {dxrt:LWKey Ribbon.RightRepeatButtonTemplate}}" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey Ribbon.LeftRepeatButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Template" Value="{DynamicResource {dxrt:LWKey Ribbon.LeftRepeatButtonTemplate}}" />
        <Setter Property="Width" Value="22" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="44" />
                <Setter Property="MinWidth" Value="44" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonRepeatButtons.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonApplicationMenu\ApplicationMenu.xaml-->
    <Thickness x:Key="{dxrt:LWKey Backstage.BorderThickness}">1</Thickness>
    <Thickness x:Key="{dxrt:LWKey Backstage.BorderThicknessNoFullscreen}">0,1,0,0</Thickness>


    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.ApplicationMenuBackgroundTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder
            x:Name="background" 
            Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background, Win11=Brush.FlyoutBackground'}"
            CornerRadius="{dx:LWCornerRadius '0, Win11=7'}"
            />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey Backstage.BorderTemplate}">
        <dx:DXBorder Background="{DynamicResource {dxt:LWKey ThemedWindow.WindowActiveBorderBrush}}" SnapsToDevicePixels="True" CornerRadius="{dx:LWCornerRadius '0, Win11=6'}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.ApplicationMenuContentControlBorderTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter Content="{TemplateBinding Content}" />
    </ControlTemplate>

    <!-- Border -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.ApplicationMenuBarControlBorderTemplate2010}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder
            x:Name="background"
            Background="{StaticResource Brush.Editor.Background}"
            BorderBrush="{dx:LWBrush 'Brush.Backstage.Window.Background, Win11=Brush.FlyoutBorder'}"
            CornerRadius="{dx:LWCornerRadius '0, Win11=7'}"
            BorderThickness="1">
            <ContentPresenter />
        </dx:DXBorder>
    </ControlTemplate>

    <!-- Sides -->

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.ApplicationMenuRightPaneTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{StaticResource Brush.Editor.Background}" BorderBrush="{dx:LWBrush 'Brush.Delimiter, Win10Dark=Brush.AltBorder'}" BorderThickness="1,0,0,0">
            <ContentPresenter />
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.ApplicationMenuBottomPaneTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder
            Background="{dx:LWBrush 'Brush.Control.Background, Office2019Black=Brush.ControlLight.Background'}"
            BorderBrush="{StaticResource Brush.Border}"
            BorderThickness="0,1,0,0"
            MinHeight="28">
            <ContentPresenter HorizontalAlignment="Right" Margin="3" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Popup.BottomPane, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonApplicationMenu\ApplicationMenu.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonBackstageView\BackstageButtonItem.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey BackstageButtonItem.BorderTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" />
            <ContentPresenter />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.HoverBackground, Win11=Color.Backstage.ItemHoverBackground'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Backstage.ItemSelectionBackground'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.HoverBackground, Win11=Color.Backstage.ItemHoverBackground'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <!-- Styles -->

    <Style x:Key="{dxrt:LWKey BackstageButtonItem.BorderStyle}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Setter Property="Template" Value="{DynamicResource {dxrt:LWKey BackstageButtonItem.BorderTemplate}}" />
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageButtonItem.NormalTextStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Win11Dark=Brush.Foreground.Primary, Win11Light=Brush.Foreground.Alt'}" />
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageButtonItem.HoverTextStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, Win11Dark=Brush.Foreground.Primary, Win11Light=Brush.Foreground.Alt'}" />
    </Style>

    <!-- Content -->

    <Style x:Key="{dxrt:LWKey BackstageButtonItem.GlyphContainerStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="10" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="22" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageButtonItem.GlyphStyle}" TargetType="{x:Type Image}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageButtonItem.ContentStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="0,10,24,10" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="0,22,44,22" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Tablet Office -->

    <Style x:Key="{dxrt:LWKey BackstageButtonItem.GlyphContainerTabletOfficeStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Grid.ColumnSpan" Value="2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="10" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageButtonItem.ContentTabletOfficeStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Grid.Column" Value="0" />
        <Setter Property="Grid.ColumnSpan" Value="2" />
        <Setter Property="Grid.Row" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="24,10,24,10" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="22" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonBackstageView\BackstageButtonItem.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonBackstageView\BackstageSeparatorItem.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey BackstageSeparatorItem.BorderTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <dx:DXBorder Background="{dx:LWBrush 'Brush.Backstage.Delimiter, Win11=Brush.Backstage.Separator'}" Height="1" />
    </ControlTemplate>

    <Style x:Key="{dxrt:LWKey BackstageSeparatorItem.BorderStyle}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Setter Property="Margin" Value="26,10,26,10" />
        <Setter Property="Template" Value="{DynamicResource {dxrt:LWKey BackstageSeparatorItem.BorderTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="44,14,44,14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonBackstageView\BackstageSeparatorItem.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonBackstageView\BackstageTabItem.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey BackstageTabItem.BorderTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root" Background="Transparent">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" />
            <ContentPresenter />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.HoverBackground, Win11=Color.Backstage.ItemHoverBackground'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Backstage.ItemSelectionBackground'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{dx:LWColor 'Color.Backstage.SelectionBackground, Win11=Color.Backstage.ItemSelectionBackground'}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.38" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <!-- Styles -->

    <Style x:Key="{dxrt:LWKey BackstageTabItem.BorderStyle}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Setter Property="Template" Value="{DynamicResource {dxrt:LWKey BackstageTabItem.BorderTemplate}}" />
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageTabItem.GlyphContainerStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="10" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="22" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageTabItem.GlyphStyle}" TargetType="{x:Type Image}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageTabItem.NormalTextStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Win11Dark=Brush.Foreground.Primary, Win11Light=Brush.Foreground.Alt'}" />
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageTabItem.HoverTextStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Office2019HighContrast=Brush.HoverForeground, VS2019Blue=Brush.HoverForeground, Win11Dark=Brush.Foreground.Primary, Win11Light=Brush.Foreground.Alt'}" />
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageTabItem.SelectedTextStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.Foreground, Office2019HighContrast=Brush.SelectionForeground, VS2019Blue=Brush.SelectionForeground, Win11Dark=Brush.Foreground.Primary, Win11Light=Brush.Foreground.Alt'}" />
    </Style>

    <!-- Content -->

    <Style x:Key="{dxrt:LWKey BackstageTabItem.GlyphContainerTabletOfficeStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Grid.ColumnSpan" Value="2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="10" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageTabItem.ContentStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,10,24,10" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="0,22,44,22" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxrt:LWKey BackstageTabItem.ContentTabletOfficeStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="24,10,24,10" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="44,22,44,22" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\RibbonBackstageView\BackstageTabItem.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonBarItems.xaml-->
    <!-- General -->

    <ControlTemplate x:Key="{dxrt:LWKey BarButtonGroup.SeparatorTemplate}" TargetType="{x:Type dxb:ItemBorderControl}" />

    <ControlTemplate x:Key="{dxrt:LWKey BarButtonGroup.ResourceHolderTemplateInPageGroup}" TargetType="{x:Type ContentControl}">
        <ContentPresenter Content="{TemplateBinding Content}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxrt:LWKey BarButtonGroup.CustomizationButtonTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <TextBlock Text="{TemplateBinding Content}" />
    </ControlTemplate>

    <Style x:Key="{dxrt:LWKey BarButtonGroup.CustomizationButtonStyle}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Setter Property="Template" Value="{DynamicResource {dxrt:LWKey BarButtonGroup.CustomizationButtonTemplate}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonBarItems.xaml-->

    <!--#region c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonStatusBar.xaml-->
    <!-- General -->
    <ControlTemplate x:Key="{dxrt:LWKey RibbonStatusBar.SizeGripTemplate}" TargetType="{x:Type Thumb}">
        <dx:DXBorder Background="Transparent">
            <Path
                Fill="{dx:LWBrush 'Brush.Backstage.Foreground, Office2019Black=Brush.ForegroundDark, Office2019Colorful=Brush.Foreground, Office2019HighContrast=Brush.Foreground, Win11=Brush.Foreground.Alt'}"
                HorizontalAlignment="Right"
                Margin="3"
                Style="{StaticResource UIShape.SizeGrip}"
                VerticalAlignment="Bottom" />
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion c:\work\2023.1\XPF\DevExpress.Xpf.Themes\Base\Ribbon\Base\Ribbon\RibbonStatusBar.xaml-->

</ResourceDictionary>