<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxr="http://schemas.devexpress.com/winfx/2008/xaml/ribbon"
    xmlns:dxri="http://schemas.devexpress.com/winfx/2008/xaml/ribbon/internal"
    xmlns:dxrt="http://schemas.devexpress.com/winfx/2008/xaml/ribbon/themekeys"
    xmlns:dxbi="http://schemas.devexpress.com/winfx/2008/xaml/bars/internal"
    xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm">
    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Common/{ThemeName}/Common.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <!--#region Svg-->
    <!--#endregion Svg-->
    <!--#region UIPreset.xaml-->
    <!--#endregion UIPreset.xaml-->
    <!--#region RibbonFooterQuickAccessToolbar.xaml-->
    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.FooterQuickAccessToolbarContainerTemplate}" TargetType="ContentControl">
        <dx:DXBorder
            x:Name="Border"
            Background="{StaticResource Brush.Control.Background}"
            BorderBrush="{StaticResource Brush.Border}"
            BorderThickness="0,0,0,1">
            <ContentPresenter HorizontalAlignment="Left" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).IsMinimized, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="BorderThickness" TargetName="Border" Value="0,1,0,1" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion RibbonFooterQuickAccessToolbar.xaml-->
    <!--#region RibbonMinimizationButton.xaml-->
    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.MinimizationButtonTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root">
            <dx:DXBorder x:Name="IsDefault" Background="Transparent" />
            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                <Path
                    x:Name="Collapsed"
                    Fill="{StaticResource Brush.Foreground}"
                    Opacity="0"
                    Style="{StaticResource UIShape.ArrowUp}" />
                <Path
                    x:Name="Expanded"
                    Fill="{StaticResource Brush.Foreground}"
                    Opacity="0"
                    Style="{StaticResource UIShape.ArrowDown}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.HoverAltBackground}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.SelectionAltBackground}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.HoverAltBackground}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckedStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Expanded" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Collapsed" Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <!--#endregion RibbonMinimizationButton.xaml-->
    <!--#region RibbonStatusBar.xaml-->
    <ControlTemplate x:Key="{dxrt:LWKey RibbonStatusBar.LeftPartTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{StaticResource Brush.Control.Background}" BorderBrush="{StaticResource Brush.Border}" BorderThickness="0,1,0,0">
            <ContentPresenter Margin="1,1,0,0" />
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxrt:LWKey RibbonStatusBar.RightPartTemplate}" TargetType="{x:Type ContentControl}">
        <dx:DXBorder Background="{StaticResource Brush.Control.Background}" BorderBrush="{StaticResource Brush.Border}" BorderThickness="0,1,0,0">
            <ContentPresenter Margin="1,1,0,0" />
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion RibbonStatusBar.xaml-->
    <!--#region RibbonStyles.xaml-->
    <Style x:Key="{dxrt:LWKey Ribbon.NormalPageCaptionTextStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.PageCategory.IsDefault}" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Brush.Backstage.SelectionBackground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxrt:LWKey Ribbon.HoverPageCaptionTextStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.PageCategory.IsDefault}" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Brush.Backstage.SelectionBackground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxrt:LWKey Ribbon.SelectedPageCaptionTextStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Foreground}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.PageCategory.IsDefault}" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Brush.Backstage.SelectionBackground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion RibbonStyles.xaml-->
    <!--#region ApplicationButton2010.xaml-->
    <!--#endregion ApplicationButton2010.xaml-->
    <!--#region ApplicationButtonSlim.xaml-->
    <!--#endregion ApplicationButtonSlim.xaml-->
    <!--#region ApplicationButtonStyles.xaml-->
    <!--#endregion ApplicationButtonStyles.xaml-->
    <!--#region ApplicationButtonTablet.xaml-->
    <ControlTemplate x:Key="{dxrt:LWKey ApplicationButton.BorderTemplateTablet}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root" Background="Transparent">
            <Path x:Name="Content" Opacity="0.62" Style="{StaticResource UIShape.TabletApplicationButton}" />
            <dx:DXImage
                x:Name="Image"
                HorizontalAlignment="Center"
                Source="{Binding Path=(dxr:RibbonControl.Ribbon).ActualApplicationButtonSmallIcon, RelativeSource={RelativeSource Self}}"
                Stretch="None"
                VerticalAlignment="Center"
                Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxr:RibbonControl.Ribbon).ActualApplicationButtonSmallIcon, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                <Setter Property="Visibility" TargetName="Content" Value="Collapsed" />
                <Setter Property="Visibility" TargetName="Image" Value="Visible" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Opacity" TargetName="Content" Value="1" />
                <Setter Property="Opacity" TargetName="Image" Value="1" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
                <Setter Property="MinWidth" TargetName="Root" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion ApplicationButtonTablet.xaml-->
    <!--#region BackstageView.xaml-->
    <ControlTemplate x:Key="RibbonBackstageButton">
        <Grid Background="Transparent">
            <dx:DXBorder x:Name="IsDefault" Background="{StaticResource Brush.Backstage.Window.Background}" />
            <dx:DXBorder
                x:Name="InnerBorder"
                HorizontalAlignment="Left"
                Margin="11,10,24,10"
                VerticalAlignment="Center">
                <dx:DXBorder
                    x:Name="Circle"
                    Background="Transparent"
                    BorderBrush="{StaticResource Brush.Backstage.Foreground}"
                    BorderThickness="1"
                    CornerRadius="96"
                    Height="20"
                    Width="20">
                    <Path
                        x:Name="Content"
                        Fill="{StaticResource Brush.Backstage.Foreground}"
                        Height="8"
                        Style="{StaticResource UIShape.RibbonBackThin}"
                        Width="10" />
                </dx:DXBorder>
            </dx:DXBorder>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="Common">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{StaticResource Color.Backstage.HoverBackground}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{StaticResource Color.Backstage.Foreground}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{StaticResource Color.Backstage.SelectionBackground}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <SolidColorBrush Color="{StaticResource Color.Backstage.Foreground}" />
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" TargetName="InnerBorder" Value="44,14,44,14" />
                <Setter Property="Width" TargetName="Circle" Value="44" />
                <Setter Property="Height" TargetName="Circle" Value="44" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion BackstageView.xaml-->
    <!--#region HighlightedRibbonPageCaption.xaml-->
    <ControlTemplate x:Key="{dxrt:LWKey RibbonPage.HighlightedCaptionBackgroundTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="PART_Root">
            <dx:DXBorder x:Name="OuterBorder">
                <Grid>
                    <dx:DXBorder x:Name="IsDefault" Background="Transparent" CornerRadius="{Binding ElementName=OuterBorder, Path=CornerRadius}" />
                    <dx:DXBorder x:Name="BackgroundBorder" CornerRadius="{Binding ElementName=OuterBorder, Path=CornerRadius}" />
                </Grid>
            </dx:DXBorder>
            <ContentPresenter x:Name="PART_ContentPresenter" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStateGroup">
                    <VisualState x:Name="NormalUnchecked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="NormalChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.Control.Background}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverUnchecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.Button.Background}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.Control.Background}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="PressedChecked">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.Control.Background}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="IsDefault" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource Color.Button.Background}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasBorderThickness)}" Value="True">
                <Setter Property="BorderThickness" TargetName="OuterBorder" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Page.(dxi:AppearanceOptions.BorderThickness)}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasBorderBrush)}" Value="True">
                <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Page.(dxi:AppearanceOptions.BorderBrush)}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasBackground)}" Value="True">
                <Setter Property="Background" TargetName="BackgroundBorder" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DataContext.(dxi:AppearanceOptions.Background)}" />
                <Setter Property="Visibility" TargetName="IsDefault" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasCornerRadius)}" Value="True">
                <Setter Property="CornerRadius" TargetName="OuterBorder" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Page.(dxi:AppearanceOptions.CornerRadius)}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasMargin)}" Value="True">
                <Setter Property="Margin" TargetName="PART_Root" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Page.(dxi:AppearanceOptions.Margin)}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Page.(dxi:AppearanceOptions.HasPadding)}" Value="True">
                <Setter Property="Margin" TargetName="PART_ContentPresenter" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Page.(dxi:AppearanceOptions.Padding)}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion HighlightedRibbonPageCaption.xaml-->
    <!--#region HighlightedRibbonPageCategoryHeaderBackground.xaml-->
    <!--#endregion HighlightedRibbonPageCategoryHeaderBackground.xaml-->
    <!--#region HighlightedRibbonPageGroupBorder.xaml-->
    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageGroup.HighlightedBorderTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter Grid.Column="0" />
            <TextBlock
                Name="PART_DesignTimeCaption"
                Grid.Column="1"
                Text="[PageGroup]"
                Visibility="Collapsed" />
            <dx:DXBorder
                x:Name="Separator"
                Grid.Column="2"
                Background="{StaticResource Brush.Delimiter}"
                Margin="0,4,0,5"
                SnapsToDevicePixels="True"
                Width="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsInSimplifiedRibbon, RelativeSource={RelativeSource AncestorType=dxr:RibbonPageGroupControl}}" Value="True">
                <Setter Property="Margin" TargetName="Separator" Value="3,4,2,5" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsDesignTimeCaptionVisible, RelativeSource={RelativeSource AncestorType=dxr:RibbonPageGroupControl}}" Value="True">
                <Setter Property="Visibility" TargetName="PART_DesignTimeCaption" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsSeparatorVisible, RelativeSource={RelativeSource AncestorType=dxr:RibbonPageGroupControl}}" Value="False">
                <Setter Property="Visibility" TargetName="Separator" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=PageGroup.(dxi:AppearanceOptions.HasMargin), RelativeSource={RelativeSource AncestorType=dxr:RibbonPageGroupControl}}" Value="True">
                <Setter Property="Visibility" TargetName="Separator" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=PageGroup.(dxi:AppearanceOptions.HasPadding), RelativeSource={RelativeSource AncestorType=dxr:RibbonPageGroupControl}}" Value="True">
                <Setter Property="Visibility" TargetName="Separator" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=PageGroup.(dxi:AppearanceOptions.HasBorderBrush), RelativeSource={RelativeSource AncestorType=dxr:RibbonPageGroupControl}}" Value="True">
                <Setter Property="Visibility" TargetName="Separator" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=PageGroup.(dxi:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource AncestorType=dxr:RibbonPageGroupControl}}" Value="True">
                <Setter Property="Visibility" TargetName="Separator" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion HighlightedRibbonPageGroupBorder.xaml-->
    <!--#region RibbonPageControl.xaml-->
    <!--#endregion RibbonPageControl.xaml-->
    <!--#region RibbonPageCategoryHeaderBackground.xaml-->
    <dxri:RibbonPageCategoryCornerRadiusConverter x:Key="CornerRadiusConverter" />
    <ControlTemplate x:Key="{dxrt:LWKey RibbonPageCategory.HeaderBackgroundTemplate}" TargetType="{x:Type dxr:RibbonCheckedBorderControl}">
        <Grid x:Name="Root" MinHeight="32">
            <dx:DXBorder x:Name="IsDefault" Background="{StaticResource Brush.Backstage.SelectionBackground}" />
            <ContentPresenter x:Name="Content" Margin="3" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="Placement">
                    <VisualState x:Name="RibbonWindow" />
                    <VisualState x:Name="Standalone" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).IsInRibbonWindow, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="31" />
            </DataTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" TargetName="Root" Value="44" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Category.(dxi:AppearanceOptions.HasBackground)}" Value="True">
                <Setter Property="Background" TargetName="IsDefault" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Category.(dxi:AppearanceOptions.Background)}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Category.(dxi:AppearanceOptions.HasCornerRadius)}" Value="True">
                <Setter Property="CornerRadius" TargetName="IsDefault" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplatedParent.Category.(dxi:AppearanceOptions.CornerRadius), Converter={StaticResource CornerRadiusConverter}, ConverterParameter=Top}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion RibbonPageCategoryHeaderBackground.xaml-->
    <!--#region RibbonPageGroupBorder.xaml-->
    <!--#endregion RibbonPageGroupBorder.xaml-->
    <!--#region RibbonPageGroupCaptionButton.xaml-->
    <!--#endregion RibbonPageGroupCaptionButton.xaml-->
    <!--#region InRibbonGalleryItem.xaml-->
    <!--#endregion InRibbonGalleryItem.xaml-->
    <!--#region DropDownGalleryPopup.xaml-->
    <!--#endregion DropDownGalleryPopup.xaml-->
    <!--#region RibbonSelectedPage.xaml-->
    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.SelectedPageBorderTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder
                x:Name="Border"
                Background="{StaticResource Brush.Control.Background}"
                BorderBrush="{StaticResource Brush.Border}"
                BorderThickness="0,0,0,1" />
            <ContentPresenter />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="CornerRadius" TargetName="Border" Value="{Binding Path=(dxr:RibbonControl.Ribbon).(dxi:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource Self}, Converter={StaticResource CornerRadiusConverter}, ConverterParameter=Bottom}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.SelectedPageBorderTemplateInPopup}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder Background="{StaticResource Brush.Control.Background}" BorderBrush="{StaticResource Brush.Border}" BorderThickness="0,0,0,1">
                <dx:DXBorder Background="{StaticResource Brush.Control.Background}" Height="1" VerticalAlignment="Top" />
            </dx:DXBorder>
            <ContentPresenter />
        </Grid>
    </ControlTemplate>
    <!--#endregion RibbonSelectedPage.xaml-->
    <!--#region HighlightedRibbonSelectedPage.xaml-->
    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.HighlightedSelectedPageBorderTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder Background="{StaticResource Brush.Control.Background}" BorderBrush="{StaticResource Brush.Border}" BorderThickness="0,0,0,1" />
            <ContentPresenter />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxrt:LWKey Ribbon.HighlightedSelectedPageBorderTemplateInPopup}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Root">
            <dx:DXBorder Background="{StaticResource Brush.Control.Background}" BorderBrush="{StaticResource Brush.Border}" BorderThickness="0,0,0,1">
                <dx:DXBorder Background="{StaticResource Brush.Control.Background}" Height="1" VerticalAlignment="Top" />
            </dx:DXBorder>
            <ContentPresenter />
        </Grid>
    </ControlTemplate>
    <!--#endregion HighlightedRibbonSelectedPage.xaml-->
    <!--#region RibbonPageCaption.xaml-->
    <!--#endregion RibbonPageCaption.xaml-->
    <!--#region RibbonOverflowButton.xaml-->
    <!--#endregion RibbonOverflowButton.xaml-->
</ResourceDictionary>