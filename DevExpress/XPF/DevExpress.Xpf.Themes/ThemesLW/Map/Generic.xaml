<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxm="clr-namespace:DevExpress.Xpf.Map;assembly=DevExpress.Xpf.Map.v24.1"
    xmlns:dxmcl="clr-namespace:DevExpress.Map.Localization;assembly=DevExpress.Map.v24.1.Core"
    xmlns:dxmt="clr-namespace:DevExpress.Xpf.Map.Themes;assembly=DevExpress.Xpf.Map.v24.1"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">


    <dxm:MarkerTypeToModelConverter x:Key="MarkerTypeToModelConverter" />
    <dxm:StrokeDashArrayConverter x:Key="StrokeDashArrayConverter" />
    <dxm:DXMapImages x:Key="MapImages" />
    <dxm:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
    <dxm:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <dxm:SystemParametersWrapper x:Key="SystemParametersWrapper" />
    <dxm:PushpinTooltipMenuDropAlignmentToLayoutTransformConverter x:Key="PushpinTooltipMenuDropAlignmentToLayoutTransformConverter" />
    <dxm:PushpinTooltipMenuDropAlignmentToHorizontalAlignmentConverter x:Key="PushpinTooltipMenuDropAlignmentToHorizontalAlignmentConverter" />
    <dxm:PushpinTooltipMenuDropAlignmentToHorizontalOffsetConverter x:Key="PushpinTooltipMenuDropAlignmentToHorizontalOffsetConverter" />
    <dxm:PushpinTooltipMenuDropAlignmentToMarginConverter x:Key="PushpinTooltipMenuDropAlignmentToMarginConverter" />
    <dxm:BoolToVisibilityConverter x:Key="VisibilityConverter" />
    <dxm:NavigationElementHorizontalAlignmentToHorizontalAlignmentConverter x:Key="HorizontalAlignmentConverter" />
    <dxm:NavigationElementVerticalAlignmentToVerticalAlignmentConverter x:Key="VerticalAlignmentConverter" />
    <dxm:TrackbarOrientationToVisibilityConverter x:Key="TrackbarOrientationConverter" />
    <dxm:VisibilityToCornerRadiusConverter x:Key="CornerRadiusConverter" />
    <dxm:LocationInformationToTooltipConverter x:Key="LocationInformationToTooltipConverter" />
    <dxm:FixedWidthToWidthConverter x:Key="FixedWidthToWidthConverter" />
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>
    <Color x:Key="ControlLightColor">White</Color>
    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>
    <Color x:Key="GlyphColor">#FF444444</Color>
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>
    <dxm:VisibilityToBoolConverter x:Key="visibilityToBoolConverter" />
    <dx:ObjectToVisibilityConverter x:Key="objectToVisibilityConverter" HandleList="False" />
    <dxm:ActiveActionToIsActiveConverter x:Key="ActiveActionToIsActiveConverter" />
    <dxm:MeasurementToolbarActionToIsActiveConverter x:Key="MeasurementToolbarActionToIsActiveConverter" />
    <dxm:LocalizedStringConverter x:Key="LocalizedStringConverter" />
    <dxm:TextToVisibilityConverter x:Key="textToVisibilityConverter" />
    <dxm:TickMarkVisibilityConverter x:Key="tickMarkVisibilityConverter" />
    <dxm:BoolToVisibilityConverter x:Key="boolToVisibilityConverter" />


    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\MiniMap.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\MiniMap.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Charts\BubbleMarkers.xaml-->



    <Style x:Key="shapeStyle" TargetType="Shape">
        <Setter Property="Fill" Value="{Binding Fill}" />
        <Setter Property="Stroke" Value="{Binding Stroke}" />
        <Setter Property="StrokeThickness" Value="{Binding StrokeThickness}" />
        <Setter Property="StrokeDashArray" Value="{Binding StrokeDashArray, Converter={StaticResource StrokeDashArrayConverter}}" />
        <Setter Property="StrokeDashCap" Value="{Binding StrokeDashCap}" />
        <Setter Property="StrokeDashOffset" Value="{Binding StrokeDashOffset}" />
        <Setter Property="StrokeEndLineCap" Value="{Binding StrokeEndLineCap}" />
        <Setter Property="StrokeStartLineCap" Value="{Binding StrokeStartLineCap}" />
        <Setter Property="StrokeLineJoin" Value="{Binding StrokeLineJoin}" />
        <Setter Property="StrokeMiterLimit" Value="{Binding StrokeMiterLimit}" />
        <Setter Property="Effect" Value="{Binding Effect}" />
        <Setter Property="Visibility" Value="{Binding ContentVisibility}" />
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Charts\BubbleMarkers.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Charts\PieModels.xaml-->



    <Style x:Key="pieShapeStyle" TargetType="Shape">
        <Setter Property="Stroke" Value="{Binding PieInfo.Stroke}" />
        <Setter Property="StrokeThickness" Value="{Binding PieInfo.StrokeThickness}" />
        <Setter Property="StrokeDashArray" Value="{Binding PieInfo.StrokeDashArray, Converter={StaticResource StrokeDashArrayConverter}}" />
        <Setter Property="StrokeDashCap" Value="{Binding PieInfo.StrokeDashCap}" />
        <Setter Property="StrokeDashOffset" Value="{Binding PieInfo.StrokeDashOffset}" />
        <Setter Property="StrokeEndLineCap" Value="{Binding PieInfo.StrokeEndLineCap}" />
        <Setter Property="StrokeStartLineCap" Value="{Binding PieInfo.StrokeStartLineCap}" />
        <Setter Property="StrokeLineJoin" Value="{Binding PieInfo.StrokeLineJoin}" />
        <Setter Property="StrokeMiterLimit" Value="{Binding PieInfo.StrokeMiterLimit}" />
        <Setter Property="Effect" Value="{Binding PieInfo.Effect}" />
        <Setter Property="Visibility" Value="{Binding PieInfo.ContentVisibility}" />
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Charts\PieModels.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Graphics\Pushpin.xaml-->



    <Style x:Key="PushpinTooltipStyle" TargetType="ToolTip">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Grid
                        Margin="12"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Visibility="{Binding Path=MapItem.Information, Converter={StaticResource NullToVisibilityConverter}}">
                        <dx:DXBorder Background="{DynamicResource {dxmt:LWKey MapBrushes.ToolTipBackground}}">
                            <ContentPresenter
                                Margin="{TemplateBinding Padding}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Cursor="{TemplateBinding Cursor}" />
                        </dx:DXBorder>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Graphics\Pushpin.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Navigation\MapScrollButtons.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Navigation\MapScrollButtons.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Navigation\MapCoordinatesPanel.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Navigation\MapCoordinatesPanel.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Navigation\MapScalePanel.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Navigation\MapScalePanel.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Navigation\MapZoomTrackbar.xaml-->

    <Style x:Key="PlusButton" TargetType="dxm:MapZoomTrackbarButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapZoomTrackbarButton">
                    <Grid Background="Transparent">
                        <Path
                            x:Name="path"
                            Width="10"
                            Height="10"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="F1 M 1233,754C 1233.55,754 1234,754.448 1234,755L 1234,758L 1237,758C 1237.55,758 1238,758.448 1238,759C 1238,759.552 1237.55,760 1237,760L 1234,760L 1234,763C 1234,763.552 1233.55,764 1233,764C 1232.45,764 1232,763.552 1232,763L 1232,760L 1229,760C 1228.45,760 1228,759.552 1228,759C 1228,758.448 1228.45,758 1229,758L 1232,758L 1232,755C 1232,754.448 1232.45,754 1233,754 Z "
                            Fill="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                            Stretch="Fill"
                            UseLayoutRounding="False" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.62" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementPressedColor}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.38" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MinusButton" TargetType="dxm:MapZoomTrackbarButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapZoomTrackbarButton">
                    <Grid Background="Transparent">
                        <Path
                            x:Name="path"
                            Width="10"
                            Height="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="F1 M 1238,772L 1238,772C 1238,772.552 1237.55,773 1237,773L 1229,773C 1228.45,773 1228,772.552 1228,772L 1228,772C 1228,771.448 1228.45,771 1229,771L 1237,771C 1237.55,771 1238,771.448 1238,772 Z "
                            Fill="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                            Stretch="Fill"
                            UseLayoutRounding="False" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.62" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementPressedColor}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.38" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Thumb" TargetType="dxm:MapZoomTrackbarButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapZoomTrackbarButton">
                    <Grid>
                        <Ellipse Margin="-10" Fill="Transparent" />
                        <dxm:MapZoomTrackbarButton>
                            <dxm:MapZoomTrackbarButton.Template>
                                <ControlTemplate>
                                    <Grid x:Name="innerGrid">
                                        <Ellipse x:Name="ellipse1" Margin="1" Fill="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}" />
                                        <Ellipse x:Name="ellipse" Margin="4" Fill="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" />
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="FocusStates">
                                                <VisualState x:Name="Focused">
                                                    <Storyboard>
                                                        <ColorAnimation Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Unfocused" />
                                            </VisualStateGroup>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualState x:Name="Normal" />
                                                <VisualState x:Name="MouseOver">
                                                    <Storyboard>
                                                        <ColorAnimation Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Pressed">
                                                    <Storyboard>
                                                        <ColorAnimation Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Disabled">
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.25" Duration="0" />
                                                        <DoubleAnimation Storyboard.TargetName="ellipse1" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.15" Duration="0" />
                                                    </Storyboard>
                                                </VisualState>
                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                    </Grid>
                                </ControlTemplate>
                            </dxm:MapZoomTrackbarButton.Template>
                        </dxm:MapZoomTrackbarButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Navigation\MapZoomTrackbar.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\DataProvidersControls\MapSearchPanel.xaml-->
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <dx:DXBorder Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="ClearButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Width="16" Height="16" Background="Transparent">
                        <Path
                            x:Name="path"
                            Margin="1"
                            Data="F1 M 25,69C 28.866,69 32,72.134 32,76C 32,79.866 28.866,83 25,83C 21.134,83 18,79.866 18,76C 18,72.134 21.134,69 25,69 Z M 29,73L 28,72L 25,75L 22,72L 21,73L 24,76L 21,79L 22,80L 25,77L 28,80L 29,79L 26,76L 29,73 Z "
                            Fill="{DynamicResource {dxmt:LWKey MapBrushes.SearchPanelClearButtonFill}}"
                            Opacity="0.62"
                            Stretch="Fill" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Opacity)" To="1.0" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Opacity)" To="1.0" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="Transparent">
                        <Grid
                            x:Name="grid"
                            Width="14"
                            Height="14"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RenderTransformOrigin="0.5,0.5">
                            <Grid.RenderTransform>
                                <RotateTransform />
                            </Grid.RenderTransform>
                            <Path
                                Width="14"
                                Height="7"
                                VerticalAlignment="Top"
                                Data="F1 M 49,49C 52.866,49 56,52.134 56,56L 53,56C 53,53.7909 51.2091,52 49,52C 46.7908,52 45,53.7909 45,56L 42,56C 42,52.134 45.134,49 49,49 Z "
                                Fill="{DynamicResource {dxmt:LWKey MapBrushes.SearchPanelLoadingBrush}}"
                                Stretch="Fill"
                                UseLayoutRounding="False">
                                <Path.OpacityMask>
                                    <LinearGradientBrush StartPoint="1,0.5" EndPoint="0,0.5">
                                        <GradientStop Offset="0" Color="#FF000000" />
                                        <GradientStop Offset="1" Color="#00000000" />
                                    </LinearGradientBrush>
                                </Path.OpacityMask>
                            </Path>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="grid" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="180" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="359" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <dx:DXBorder
                        x:Name="Border"
                        Margin="1"
                        BorderThickness="1"
                        CornerRadius="2">
                        <dx:DXBorder.BorderBrush>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Offset="0.0" Color="{StaticResource BorderMediumColor}" />
                                        <GradientStop Offset="1.0" Color="{StaticResource BorderDarkColor}" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </dx:DXBorder.BorderBrush>
                        <dx:DXBorder.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{StaticResource ControlLightColor}" />
                                        <GradientStop Offset="1.0" Color="{StaticResource ControlMediumColor}" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </dx:DXBorder.Background>
                        <Path
                            x:Name="Arrow"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}">
                            <Path.Fill>
                                <SolidColorBrush Color="{StaticResource GlyphColor}" />
                            </Path.Fill>
                        </Path>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).                     (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Shape.Fill).                     (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Grid x:Name="ThumbVisual" Background="Transparent">
                            <dx:DXBorder
                                x:Name="Background"
                                Width="6"
                                HorizontalAlignment="Center"
                                Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                CornerRadius="3"
                                Opacity="0.62" />
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.38" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ThumbVisual" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="0" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="4" />
            </Grid.RowDefinitions>
            <RepeatButton
                Grid.Row="0"
                Height="18"
                Command="ScrollBar.LineUpCommand"
                Content="M 0 4 L 8 4 L 4 0 Z"
                Style="{StaticResource ScrollBarLineButton}"
                Visibility="Collapsed" />
            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButton}" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Margin="1,0,1,0" Style="{StaticResource ScrollBarThumb}">
                        <Thumb.BorderBrush>

                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Offset="0.0" Color="{StaticResource BorderLightColor}" />
                                        <GradientStop Offset="1.0" Color="{StaticResource BorderDarkColor}" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>

                        </Thumb.BorderBrush>
                        <Thumb.Background>

                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Offset="0.0" Color="{StaticResource ControlLightColor}" />
                                        <GradientStop Offset="1.0" Color="{StaticResource ControlMediumColor}" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>

                        </Thumb.Background>
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButton}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton
                Grid.Row="3"
                Height="18"
                Command="ScrollBar.LineDownCommand"
                Content="M 0 0 L 4 4 L 8 0 Z"
                Style="{StaticResource ScrollBarLineButton}"
                Visibility="Collapsed" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="18" />
            </Grid.ColumnDefinitions>
            <dx:DXBorder Grid.ColumnSpan="3" Background="#F0F0F0" CornerRadius="2" />
            <RepeatButton
                Grid.Column="0"
                Width="18"
                Command="ScrollBar.LineLeftCommand"
                Content="M 4 0 L 4 8 L 0 4 Z"
                Style="{StaticResource ScrollBarLineButton}" />
            <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{StaticResource ScrollBarPageButton}" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Margin="0,1,0,1" Style="{StaticResource ScrollBarThumb}">

                        <Thumb.BorderBrush>

                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Offset="0.0" Color="{StaticResource BorderLightColor}" />
                                        <GradientStop Offset="1.0" Color="{StaticResource BorderDarkColor}" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>

                        </Thumb.BorderBrush>
                        <Thumb.Background>

                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Offset="0.0" Color="{StaticResource ControlLightColor}" />
                                        <GradientStop Offset="1.0" Color="{StaticResource ControlMediumColor}" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>

                        </Thumb.Background>
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageRightCommand" Style="{StaticResource ScrollBarPageButton}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton
                Grid.Column="3"
                Width="18"
                Command="ScrollBar.LineRightCommand"
                Content="M 0 0 L 4 4 L 0 8 Z"
                Style="{StaticResource ScrollBarLineButton}" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="SearchVerticalScrollbarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="18" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SearchScrollViewerStyle" TargetType="ScrollViewer">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="VerticalScrollBarVisibility" Value="Visible" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Offset="0" Color="#FFA3AEB9" />
                    <GradientStop Offset="0.375" Color="#FF8399A9" />
                    <GradientStop Offset="0.375" Color="#FF718597" />
                    <GradientStop Offset="1" Color="#FF617584" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter
                            x:Name="ScrollContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Cursor="{TemplateBinding Cursor}" />
                        <Rectangle Grid.Row="1" Grid.Column="1" Fill="#FFE9EEF4" />
                        <ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Grid.Row="0"
                            Grid.Column="1"
                            Width="18"
                            Margin="0,-1,-1,-1"
                            IsTabStop="False"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Minimum="0"
                            Orientation="Vertical"
                            Style="{StaticResource SearchVerticalScrollbarStyle}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{TemplateBinding VerticalOffset}" />
                        <ScrollBar
                            x:Name="PART_HorizontalScrollBar"
                            Grid.Row="1"
                            Grid.Column="0"
                            Height="18"
                            Margin="-1,0,-1,-1"
                            IsTabStop="False"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Minimum="0"
                            Orientation="Horizontal"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{TemplateBinding HorizontalOffset}" />
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SearchListBoxStyle" TargetType="{x:Type dxm:MapSearchListBox}">
        <Setter Property="Padding" Value="6,0,0,6" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxm:MapSearchListBox}">
                    <Grid>
                        <ScrollViewer
                            x:Name="ScrollViewer"
                            Margin="0,0,0,0"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            Style="{StaticResource SearchScrollViewerStyle}">
                            <ItemsPresenter />
                        </ScrollViewer>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidUnfocused" />
                                <VisualState x:Name="InvalidFocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\DataProvidersControls\MapSearchPanel.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\MapControl.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\MapControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\MapEditorAdorner.xaml-->



    <Style x:Key="ResizeBoxStyle" TargetType="Rectangle">
        <Setter Property="Width" Value="{DynamicResource {dxmt:LWKey Adorners.ResizePointSize}}" />
        <Setter Property="Height" Value="{DynamicResource {dxmt:LWKey Adorners.ResizePointSize}}" />
        <Setter Property="Fill" Value="{DynamicResource {dxmt:LWKey Adorners.ResizeBoxBackground}}" />
        <Setter Property="Stroke" Value="{DynamicResource {dxmt:LWKey Adorners.SelectionAdornerStroke}}" />
    </Style>

    <Style x:Key="AdditionalPointStyle" TargetType="Ellipse">
        <Setter Property="Width" Value="{DynamicResource {dxmt:LWKey Adorners.EditablePointSize}}" />
        <Setter Property="Height" Value="{DynamicResource {dxmt:LWKey Adorners.EditablePointSize}}" />
        <Setter Property="Fill" Value="{DynamicResource {dxmt:LWKey Adorners.EditablePointBackground}}" />
        <Setter Property="Stroke" Value="{DynamicResource {dxmt:LWKey Adorners.EditablePointStroke}}" />
    </Style>
    <Style x:Key="EditablePointStyle" BasedOn="{StaticResource AdditionalPointStyle}" TargetType="Ellipse">
        <Setter x:Name="scaleTransform" Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.2" Duration="0:0:0.05" />
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.2" Duration="0:0:0.05" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" Duration="0:0:0.05" />
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" Duration="0:0:0.05" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\MapEditorAdorner.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\MapEditorPanel.xaml-->



    <Style x:Key="MapToggleButtonStyle" TargetType="{x:Type dxm:MapToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxm:MapToggleButton}">
                    <Grid>
                        <Grid Margin="0,1,0,1">
                            <dx:DXBorder
                                Name="hover"
                                Background="{DynamicResource {dxmt:LWKey ButtonPanel.ItemBackground}}"
                                CornerRadius="1"
                                Opacity="0" />
                            <dx:DXBorder
                                Name="pressed"
                                Background="{DynamicResource {dxmt:LWKey ButtonPanel.ItemBackground}}"
                                CornerRadius="1"
                                Opacity="0" />
                            <dx:DXBorder
                                Name="active"
                                Background="{DynamicResource {dxmt:LWKey ButtonPanel.ItemBackground}}"
                                CornerRadius="1"
                                Opacity="0" />
                        </Grid>
                        <dx:DXBorder
                            Name="border"
                            Margin="2,0,2,0"
                            Background="{TemplateBinding Background}"
                            ToolTip="{TemplateBinding ToolTip}"
                            ToolTipService.ShowOnDisabled="True">
                            <StackPanel Margin="{DynamicResource {dxmt:LWKey ButtonPanel.ItemMargin}}" Orientation="Horizontal">
                                <Image Width="{DynamicResource {dxmt:LWKey ButtonPanel.ItemSize}}" Height="{DynamicResource {dxmt:LWKey ButtonPanel.ItemSize}}" Source="{TemplateBinding Tag}" />
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </StackPanel>
                        </dx:DXBorder>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="pressed" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="{DynamicResource {dxmt:LWKey ButtonPanel.PressedItemOpacity}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Active">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="active" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="{DynamicResource {dxmt:LWKey ButtonPanel.ActiveItemOpacity}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="{DynamicResource {dxmt:LWKey ButtonPanel.DisabledItemOpacity}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SeparatorStyle" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxm:MapEditorPanelButton}">
                    <Rectangle
                        Width="1"
                        Height="{DynamicResource {dxmt:LWKey ButtonPanel.ItemSize}}"
                        Margin="{DynamicResource {dxmt:LWKey ButtonPanel.ItemMargin}}"
                        Stroke="{DynamicResource {dxmt:LWKey ButtonPanel.SeparatorColor}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UndoButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorUndo}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/Undo.svg}" />
    </Style>
    <Style x:Key="RedoButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorRedo}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/Redo.svg}" />
    </Style>
    <Style x:Key="ResetModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorDefault}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/Default.svg}" />
    </Style>
    <Style x:Key="SetTransformModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorTransform}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/Transform.svg}" />
    </Style>
    <Style x:Key="SetEditModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorEdit}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/Edit.svg}" />
    </Style>
    <Style x:Key="SetCreatePushpinModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddPushpin}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddPushpin.svg}" />
    </Style>
    <Style x:Key="SetCreatePolygonModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddPath}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddPath.svg}" />
    </Style>
    <Style x:Key="SetCreatePolylineModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddPolyline}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddPolyline.svg}" />
    </Style>
    <Style x:Key="SetCreateSplineModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddSpline}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddSpline.svg}" />
    </Style>
    <Style x:Key="SetCreateDotModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddDot}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddDot.svg}" />
    </Style>
    <Style x:Key="SetCreateEllipseModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddEllipse}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddEllipse.svg}" />
    </Style>
    <Style x:Key="SetCreateRectangleModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddRectangle}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddRectangle.svg}" />
    </Style>
    <Style x:Key="SetCreateLineModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddLine}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddLine.svg}" />
    </Style>
    <Style x:Key="SetCreateCustomElementModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MapEditorPanelButton}">
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddCustomElement}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddCustomElement.svg}" />
    </Style>
    <Style x:Key="SetCreateDistanceRulerButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MeasurementToolbarButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.AddDistanceRuler}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddDistanceRuler.svg}" />
    </Style>
    <Style x:Key="SetCreateAreaRulerButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type dxm:MeasurementToolbarButton}">
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.AddAreaRuler}}" />
        <Setter Property="Tag" Value="{dxm:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddAreaRuler.svg}" />
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\MapEditorPanel.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\ImageLayer.xaml-->
    <DataTemplate x:Key="multiScaleTileImage">
        <dxm:MultiScaleImage
            x:Name="PART_MapImage"
            CacheOptions="{Binding Path=DataProvider.CacheOptions, RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            Layer="{Binding RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            Source="{Binding Path=DataProvider.ImageSource, RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            TileCacheNamePrefix="{Binding Path=DataProvider.TileCacheNamePrefix, RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            UseSprings="False" />
    </DataTemplate>
    <DataTemplate x:Key="multiScaleWmsImage">
        <dxm:MultiScaleWmsImage
            x:Name="PART_MapImage"
            ContextProvider="{Binding Path=DataProvider, RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            Image="{Binding Path=DataProvider.ImageSource.Image, RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            Layer="{Binding RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            Source="{Binding Path=DataProvider.ImageSource, RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            UseSprings="False" />
    </DataTemplate>
    <DataTemplate x:Key="multiScaleTileImageBase">
        <dxm:MultiScaleImage
            x:Name="PART_MapImage"
            Layer="{Binding RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            Source="{Binding Path=DataProvider.ImageSource, RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            UseSprings="False" />
    </DataTemplate>
    <DataTemplate x:Key="multiScaleHeatImage">
        <dxm:MultiScaleHeatImage
            x:Name="PART_MapImage"
            ContextProvider="{Binding Path=DataProvider, RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            Image="{Binding Path=DataProvider.ImageSource.Image, RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            Layer="{Binding RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            Source="{Binding Path=DataProvider.ImageSource, RelativeSource={RelativeSource AncestorType=dxm:ImageLayer}}"
            UseSprings="False" />
    </DataTemplate>



    <dxm:MultiScaleImageTemplateSelector
        x:Key="multiScaleImageTemplateSelector"
        HeatImage="{StaticResource multiScaleHeatImage}"
        TileImage="{StaticResource multiScaleTileImage}"
        TileImageBase="{StaticResource multiScaleTileImageBase}"
        WmsImage="{StaticResource multiScaleWmsImage}" />
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\ImageLayer.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\VectorLayer.xaml-->
    <Style x:Key="VectorLayerBaseStyle" TargetType="dxm:VectorLayerBase">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:VectorLayerBase">
                    <Canvas x:Name="PART_RootVisual" UseLayoutRounding="False">
                        <ItemsControl x:Name="PART_Elements">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTipContentTemplate">
            <Setter.Value>
                <DataTemplate x:Name="toolTipContentTemplate">
                    <dxm:MapToolTipTextBlock
                        x:Name="toolTipTextElement"
                        Margin="20,15,20,18"
                        FontSize="21"
                        Foreground="{DynamicResource {dxmt:LWKey MapBrushes.ToolTipForeground}}"
                        Text="{Binding ToolTipText}"
                        TextWrapping="Wrap" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ShapeFill" Value="{DynamicResource {dxmt:LWKey MapBrushes.ShapeFill}}" />
        <Setter Property="ShapeStroke" Value="{DynamicResource {dxmt:LWKey MapBrushes.ShapeStroke}}" />
        <Setter Property="HighlightShapeStroke" Value="{DynamicResource {dxmt:LWKey MapBrushes.HighlightShapeStroke}}" />
        <Setter Property="HighlightShapeStrokeStyle" Value="{DynamicResource {dxmt:LWKey Map.HighlightShapeStroke}}" />
        <Setter Property="SelectedShapeStroke" Value="{DynamicResource {dxmt:LWKey MapBrushes.SelectedShapeStroke}}" />
        <Setter Property="SelectedShapeStrokeStyle" Value="{DynamicResource {dxmt:LWKey Map.SelectedShapeStroke}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxmt:LWKey MapBrushes.VectorLayerForeground}}" />
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\VectorLayer.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\ColorLegend.xaml-->
    <DataTemplate x:Key="DefaultLegendItemLabelTemplate">
        <TextBlock Text="{Binding ActualText}" />
    </DataTemplate>
    <DataTemplate x:Key="ColorScaleLegendItemTemplate">
        <StackPanel Orientation="Vertical">
            <StackPanel HorizontalAlignment="Stretch" Orientation="Horizontal">
                <dx:DXBorder
                    Width="1"
                    Height="18"
                    Margin="0,0,4,2"
                    Background="#FF808080" />
                <ContentControl
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    Content="{Binding}"
                    ContentTemplate="{Binding LabelTemplate}" />
            </StackPanel>
            <Rectangle Height="12" HorizontalAlignment="Stretch" Fill="{Binding Fill}" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="GradientLegendItemLabelTemplate">
        <ContentControl
            HorizontalAlignment="Left"
            VerticalAlignment="Center"
            Content="{Binding}"
            ContentTemplate="{Binding LabelTemplate}" />
    </DataTemplate>
    <Style x:Key="legendShapeStyle" TargetType="Shape">
        <Setter Property="Fill" Value="{Binding Fill}" />
        <Setter Property="Stroke" Value="{Binding Stroke}" />
    </Style>
    <DataTemplate x:Key="NestedSizeLegendItemTemplate">
        <dxm:NestedItemPresentationControl VerticalAlignment="Bottom" />
    </DataTemplate>


    <DataTemplate x:Key="ColorListLegendItemTemplate">
        <StackPanel Margin="3" Orientation="Horizontal">
            <Rectangle
                Width="32"
                Height="12"
                Fill="{Binding Fill}"
                Stroke="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                StrokeThickness="1" />
            <ContentControl
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                Content="{Binding}"
                ContentTemplate="{Binding LabelTemplate}" />
        </StackPanel>
    </DataTemplate>

    <Style x:Key="legendStyleBase" TargetType="dxm:MapLegendBase">
        <Setter Property="Alignment" Value="TopRight" />
        <Setter Property="ItemLabelTemplate" Value="{StaticResource DefaultLegendItemLabelTemplate}" />
    </Style>

    <Style x:Key="TickMarkStyle" TargetType="Border">
        <Setter Property="Background" Value="{Binding Stroke}" />
        <Setter Property="Height" Value="1" />
        <Setter Property="Visibility" Value="{Binding ActualTickMarkVisibility, Converter={StaticResource tickMarkVisibilityConverter}}" />
        <Setter Property="RenderOptions.EdgeMode" Value="Aliased" />
    </Style>

    <Style x:Key="LegendLabelStyle" TargetType="ContentControl">
        <Setter Property="Visibility" Value="{Binding ShowLabel, Converter={StaticResource tickMarkVisibilityConverter}}" />
    </Style>

    <DataTemplate x:Key="InlineSizeLegendItemTemplate">
        <StackPanel Margin="0,6,0,0" Orientation="Horizontal">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding MaxItemSize}" />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="{Binding MarkerSize}" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Grid.Column="1" Height="{Binding MarkerSize}" Content="{Binding Path=MarkerType, Converter={StaticResource MarkerTypeToModelConverter}, ConverterParameter={StaticResource legendShapeStyle}}" />
                    <dx:DXBorder
                        Grid.Column="2"
                        Margin="3,0,-3,0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"
                        Style="{StaticResource TickMarkStyle}" />
                </Grid>
                <dx:DXBorder
                    Grid.Column="1"
                    Margin="3,0,0,0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    Style="{StaticResource TickMarkStyle}" />
            </Grid>
            <ContentControl
                MinWidth="20"
                Margin="6,0,0,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Content="{Binding}"
                ContentTemplate="{Binding LabelTemplate}"
                Style="{StaticResource LegendLabelStyle}" />
        </StackPanel>
    </DataTemplate>

    <Style x:Key="sizeLegendItemsControlStyle" TargetType="ItemsControl">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Type, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="Inline">
                <Setter Property="ItemTemplate" Value="{StaticResource InlineSizeLegendItemTemplate}" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <StackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Type, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="Nested">
                <Setter Property="ItemTemplate" Value="{StaticResource NestedSizeLegendItemTemplate}" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <dxm:NestedSizeLegendPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <ControlTemplate x:Key="ColorScaleLegendTemplate" TargetType="dxm:ColorScaleLegend">
        <dx:DXBorder
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            CornerRadius="{DynamicResource {dxmt:LWKey Map.OverlayRadius}}"
            Visibility="{Binding Path=ActualVisibility, RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Orientation="Vertical">
                <TextBlock FontSize="24" Text="{TemplateBinding Header}" Visibility="{Binding Text, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource textToVisibilityConverter}}" />
                <TextBlock
                    Padding="0,0,0,15"
                    HorizontalAlignment="Left"
                    FontSize="12"
                    Text="{TemplateBinding Description}"
                    TextWrapping="Wrap"
                    Visibility="{Binding Text, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource textToVisibilityConverter}}" />

                <dxm:LabeledItemsControl
                    x:Name="PART_ItemsControl"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    ItemLabelTemplate="{TemplateBinding ItemLabelTemplate}"
                    ItemTemplate="{TemplateBinding ItemTemplate}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <dxm:ColorScalePanel HorizontalAlignment="Stretch" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </dxm:LabeledItemsControl>
            </StackPanel>
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="GradientColorScaleLegendTemplate" TargetType="dxm:ColorScaleLegend">
        <dx:DXBorder
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            CornerRadius="{DynamicResource {dxmt:LWKey Map.OverlayRadius}}"
            Visibility="{Binding Path=ActualVisibility, RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Orientation="Vertical">
                <TextBlock FontSize="24" Text="{TemplateBinding Header}" Visibility="{Binding Text, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource textToVisibilityConverter}}" />
                <TextBlock
                    Padding="0,0,0,15"
                    HorizontalAlignment="Left"
                    FontSize="12"
                    Text="{TemplateBinding Description}"
                    TextWrapping="Wrap"
                    Visibility="{Binding Text, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource textToVisibilityConverter}}" />

                <dxm:GradientPanel x:Name="gradientPanel" Margin="0,0,0,15">
                    <dxm:LabeledItemsControl
                        x:Name="PART_ItemsControl"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        ItemLabelTemplate="{TemplateBinding ItemLabelTemplate}"
                        ItemTemplate="{TemplateBinding ItemTemplate}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <dxm:GradientItemsPanel />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </dxm:LabeledItemsControl>
                    <Rectangle
                        x:Name="PART_GradientRect"
                        Height="12"
                        HorizontalAlignment="Stretch"
                        Fill="{Binding Path=Fill, ElementName=gradientPanel}" />
                </dxm:GradientPanel>
            </StackPanel>
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\ColorLegend.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\PrintingTemplates.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\PrintingTemplates.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Measurements.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic\Measurements.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Map\DevExpress.Xpf.Map\Themes\Generic.xaml-->


    <!--#region DEFAULT STYLES-->

    <Style x:Key="MiniMap.DefaultStyleBase" TargetType="dxm:MiniMap">
        <Setter Property="Width" Value="200" />
        <Setter Property="Height" Value="200" />
        <Setter Property="Margin" Value="16" />
        <Setter Property="Background" Value="#FFC9E9F4" />
        <Setter Property="ViewportTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <dx:DXBorder Background="#204ACBFC" BorderBrush="#FF4ACBFC" BorderThickness="2" />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MiniMap">
                    <Grid>
                        <dx:DXBorder Background="Black" CornerRadius="3" Opacity="0.25" />
                        <dx:DXBorder Margin="1" Background="White" CornerRadius="2" />
                        <dx:DXBorder Margin="2" Background="{TemplateBinding Background}" CornerRadius="1">
                            <Grid>
                                <ItemsControl x:Name="PART_LayersContainer" ClipToBounds="True" ItemsSource="{TemplateBinding Layers}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <Grid />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                                <Grid
                                    x:Name="PART_InvalidKeyPanel"
                                    Width="400"
                                    MinHeight="29"
                                    Margin="2,2,0,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Visibility="Collapsed">
                                    <dx:DXBorder Background="#FFDD0000" CornerRadius="5" Opacity="0.75" />
                                    <TextBlock
                                        Margin="32"
                                        FontSize="14.667"
                                        Foreground="White"
                                        Text="{Binding}"
                                        TextAlignment="Center"
                                        TextWrapping="Wrap" />
                                </Grid>
                                <dxm:MiniMapViewportPanel x:Name="PART_ViewportPanel" ClipToBounds="True">
                                    <ContentPresenter ContentTemplate="{TemplateBinding ViewportTemplate}" />
                                </dxm:MiniMapViewportPanel>
                            </Grid>
                        </dx:DXBorder>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MiniMapImageTilesLayer.DefaultStyleBase" TargetType="dxm:MiniMapImageTilesLayer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MiniMapImageTilesLayer">
                    <dxm:ImageLayer x:Name="PART_Layer" DataProvider="{TemplateBinding DataProvider}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MiniMapVectorLayer.DefaultStyleBase" TargetType="dxm:MiniMapVectorLayer">
        <Setter Property="ShapeFill" Value="#FFF9F3E1" />
        <Setter Property="ShapeStroke" Value="#FF898989" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MiniMapVectorLayer">
                    <dxm:VectorLayer
                        x:Name="PART_Layer"
                        Data="{TemplateBinding Data}"
                        EnableHighlighting="False"
                        EnableSelection="False"
                        ShapeFill="{TemplateBinding ShapeFill}"
                        ShapeStroke="{TemplateBinding ShapeStroke}"
                        ShapeStrokeStyle="{TemplateBinding ShapeStrokeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapBubbleControl.DefaultStyleBase" TargetType="dxm:MapBubbleControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapBubbleControl">
                    <ContentPresenter Content="{Binding Path=MapItem.MarkerType, Converter={StaticResource MarkerTypeToModelConverter}, ConverterParameter={StaticResource shapeStyle}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CircleMarkerModelControl.DefaultStyleBase" TargetType="dxm:CircleMarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:CircleMarkerModelControl">
                    <Ellipse Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SquareMarkerModelControl.DefaultStyleBase" TargetType="dxm:SquareMarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:SquareMarkerModelControl">
                    <Rectangle Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiamondMarkerModelControl.DefaultStyleBase" TargetType="dxm:DiamondMarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:DiamondMarkerModelControl">
                    <Path Data="F1 M 0.5,1L 0,0.5L 0.5,0L 1,0.5L 0.5,1 Z" Stretch="Fill" Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CrossMarkerModelControl.DefaultStyleBase" TargetType="dxm:CrossMarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:CrossMarkerModelControl">
                    <Path Data="F1 M 6.5,3.5L 3.5,0.5L 0.5,3.5L 3.5,6.5L 0.5,9.5L 3.5,12.5L 6.5,9.5L 9.5,12.5L 12.5,9.5L 9.5,6.5L 12.5,3.5L 9.5,0.5L 6.5,3.5 Z" Stretch="Fill" Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="InvertedTriangleMarkerModelControl.DefaultStyleBase" TargetType="dxm:InvertedTriangleMarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:InvertedTriangleMarkerModelControl">
                    <Path Data="F1 M 459,1059L 473,1059L 465.999,1069L 459,1059 Z" Stretch="Fill" Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TriangleMarkerModelControl.DefaultStyleBase" TargetType="dxm:TriangleMarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:TriangleMarkerModelControl">
                    <Path Data="F1 M 459,1069L 473,1069L 465.999,1059L 459,1069 Z" Stretch="Fill" Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PlusMarkerModelControl.DefaultStyleBase" TargetType="dxm:PlusMarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:PlusMarkerModelControl">
                    <Path Data="F1 M 0.33,0L 0.66,0L 0.66,0.33L 1,0.33L 1,0.66L 0.66,0.66L 0.66,1L 0.33,1L0.33,0.66L 0,0.66L 0,0.33L 0.33,0.33L 0.33,0 Z" Stretch="Fill" Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Star5MarkerModelControl.DefaultStyleBase" TargetType="dxm:Star5MarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:Star5MarkerModelControl">
                    <Path Data="F1 M 0.5,0L 0.626,0.326L 0.975,0.346L 0.704,0.566L 0.794,0.904L 0.5,0.715L 0.206,0.905L 0.296,0.566L 0.024,0.345L 0.374,0.326L 0.5,0 Z" Stretch="Fill" Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Star6MarkerModelControl.DefaultStyleBase" TargetType="dxm:Star6MarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:Star6MarkerModelControl">
                    <Path Data="F1 M 0.5,0L 0.607,0.313L 0.933,0.250L 0.715,0.5L 0.933,0.750L 0.607,0.686L 0.5,1L 0.392,0.686L 0.067,0.750L 0.285,0.5L 0.067,0.25L 0.392,0.313L 0.5,0 Z" Stretch="Fill" Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Star8MarkerModelControl.DefaultStyleBase" TargetType="dxm:Star8MarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:Star8MarkerModelControl">
                    <Path Data="F1 M 0.5,0L 0.582,0.301L 0.853,0.146L 0.699,0.418L 1,0.5L 0.699,0.582L 0.856,0.854L 0.582,0.697L 0.5,1L 0.418,0.697L 0.146,0.854L 0.301,0.582L 0,0.5L 0.301,0.418L 0.146,0.146,0.418,0.301L 0.5,0 Z" Stretch="Fill" Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PentagonMarkerModelControl.DefaultStyleBase" TargetType="dxm:PentagonMarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:PentagonMarkerModelControl">
                    <Path Data="F1 M 0.5,0L 1.026,0.381L 0.825,1L 0.175,1L -0.026,0.382L 0.5,0 Z" Stretch="Fill" Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HexagonMarkerModelControl.DefaultStyleBase" TargetType="dxm:HexagonMarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:HexagonMarkerModelControl">
                    <Path Data="F1 M 0.5,0L 0.933,0.25L 0.933,0.75L 0.5,1L 0.067,0.75L 0.067,0.25L 0.5,0 Z" Stretch="Fill" Style="{TemplateBinding ShapeStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CustomMarkerModelControl.DefaultStyleBase" TargetType="dxm:CustomMarkerModelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:CustomMarkerModelControl">
                    <ContentPresenter Content="{Binding}" ContentTemplate="{Binding Path=MapItem.CustomMarkerTemplate}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PieSegmentPresentationControl.DefaultStyleBase" TargetType="dxm:PieSegmentPresentationControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:PieSegmentPresentationControl">
                    <Ellipse Fill="{Binding Fill}" Style="{StaticResource pieShapeStyle}" UseLayoutRounding="False" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapPieControl.DefaultStyleBase" TargetType="dxm:MapPieControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapPieControl">
                    <dxm:MapPieItemsControl ItemsSource="{Binding MapItem.Segments}">
                        <dxm:MapPieItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Grid />
                                <!-- TODO Replace Grid with panel -->
                            </ItemsPanelTemplate>
                        </dxm:MapPieItemsControl.ItemsPanel>
                    </dxm:MapPieItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PushpinMarkerControl.DefaultStyleBase" TargetType="dxm:PushpinMarkerControl">
        <Setter Property="Item" Value="{Binding MapItem}" />
        <Setter Property="State" Value="{Binding MapItem.State}" />
        <Setter Property="IsHighlighted" Value="{Binding MapItem.IsHighlighted}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
        <Setter Property="Background" Value="{DynamicResource {dxmt:LWKey MapBrushes.PushpinBackground}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxmt:LWKey MapBrushes.PushpinForeground}}" />
        <Setter Property="StrokeBrush" Value="{DynamicResource {dxmt:LWKey MapBrushes.MapBackground}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:PushpinMarkerControl">
                    <Grid
                        x:Name="ContainerGrid"
                        Width="64"
                        Height="64"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform X="-32" Y="-52" />
                                <RotateTransform x:Name="PointerRotation" Angle="0" />
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <ToolTipService.ToolTip>
                            <ToolTip HorizontalOffset="{Binding Source={StaticResource SystemParametersWrapper}, Path=MenuDropAlignment, Converter={StaticResource PushpinTooltipMenuDropAlignmentToHorizontalOffsetConverter}}" Placement="Top" Style="{StaticResource PushpinTooltipStyle}">
                                <ToolTip.Content>
                                    <TextBlock
                                        Margin="24,16"
                                        Foreground="{DynamicResource {dxmt:LWKey MapBrushes.ToolTipForeground}}"
                                        Text="{Binding MapItem.Information}"
                                        TextWrapping="Wrap" />
                                </ToolTip.Content>
                            </ToolTip>
                        </ToolTipService.ToolTip>
                        <Grid Width="36" Height="44" Background="Transparent">
                            <Path
                                x:Name="Pin"
                                Data="F1 M 55,43C 59.9706,43 64,47.0294 64,52C 64,56.9706 59.9706,61 55,61C 50.0294,61 46,56.9706 46,52C 46,47.0294 50.0294,43 55,43 Z M 55,35C 64.3888,35 72,42.6112 72,52C 72,56.195 70.4805,60.0351 67.962,63L 55,77L 42.038,63C 39.5194,60.0351 38,56.195 38,52C 38,42.6112 45.6111,35 55,35 Z M 55,39C 47.8203,39 42,44.8203 42,52C 42,59.1797 47.8203,65 55,65C 62.1797,65 68,59.1797 68,52C 68,44.8203 62.1797,39 55,39 Z"
                                Fill="{Binding MapItem.ActualBrush}"
                                Stretch="Fill"
                                Stroke="{Binding MapItem.ActualStrokeBrush}"
                                StrokeThickness="1"
                                UseLayoutRounding="False" />
                            <Grid
                                x:Name="Loading"
                                Width="24"
                                Height="24"
                                Margin="6"
                                VerticalAlignment="Top"
                                RenderTransformOrigin="0.5,0.5">
                                <Grid.RenderTransform>
                                    <RotateTransform x:Name="LoadingRotation" Angle="0" />
                                </Grid.RenderTransform>
                                <Path
                                    x:Name="LoadingIndicator"
                                    Width="24"
                                    Height="12"
                                    VerticalAlignment="Top"
                                    Data="F1 M 55,40C 61.6274,40 67,45.3726 67,52L 65,52C 65,46.4772 60.5228,42 55,42C 49.4771,42 45,46.4772 45,52L 43,52C 43,45.3726 48.3726,40 55,40 Z "
                                    Fill="{DynamicResource {dxmt:LWKey MapBrushes.PushpinBackground}}"
                                    RenderTransformOrigin="0.5,1"
                                    Stretch="Fill"
                                    UseLayoutRounding="False">
                                    <Path.OpacityMask>
                                        <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                                            <GradientStop Offset="0" Color="#00000000" />
                                            <GradientStop Offset="1" Color="#FF000000" />
                                        </LinearGradientBrush>
                                    </Path.OpacityMask>
                                </Path>
                            </Grid>
                            <TextBlock
                                x:Name="Label"
                                Margin="0,0,0,10"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontSize="12"
                                FontWeight="Bold"
                                Foreground="{Binding MapItem.ActualForeground}"
                                Opacity="0.75"
                                Text="{Binding MapItem.Text}"
                                TextWrapping="Wrap" />
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="Selection">
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Pin" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxmt:LWKey MapBrushes.PushpinSelectionBrush}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Pin" Storyboard.TargetProperty="(Path.Stroke)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxmt:LWKey MapBrushes.MapBackground}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LoadingIndicator" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxmt:LWKey MapBrushes.PushpinSelectionBrush}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Label" Storyboard.TargetProperty="(TextBlock.Foreground)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxmt:LWKey MapBrushes.PushpinSelectionForeground}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="NotSelected" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="State">
                                <VisualState x:Name="Busy">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Loading" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0" />
                                        <DoubleAnimation RepeatBehavior="Forever" Storyboard.TargetName="LoadingRotation" Storyboard.TargetProperty="Angle" To="360" Duration="0:0:1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Loading" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="MouseStates">
                                <VisualState x:Name="Highlighted">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="Pin" Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.40" Value="0.62" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.80" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="NonHighlighted">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Pin" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.40" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PushpinControl.DefaultStyleBase" TargetType="dxm:PushpinControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:PushpinControl">
                    <Grid>
                        <dxm:PushpinPanel x:Name="PART_Container">
                            <dxm:PushpinTraceControl x:Name="PART_Trace" Item="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemInfo.MapItem}" />
                            <ContentPresenter x:Name="PART_Marker" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemInfo}" ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemInfo.MapItem.MarkerTemplate}" />
                        </dxm:PushpinPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PushpinTraceControl.DefaultStyleBase" TargetType="dxm:PushpinTraceControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:PushpinTraceControl">
                    <Grid Name="PART_Canvas" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapScrollButtonsLayoutControl.DefaultStyleBase" TargetType="dxm:MapScrollButtonsLayoutControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapScrollButtonsLayoutControl">
                    <dxm:MapScrollButtons
                        x:Name="PART_ScrollButtons"
                        Command="{Binding Path=Command}"
                        IsEnabled="{Binding Path=Map.EnableScrolling}"
                        IsManipulationEnabled="{Binding Path=Map.IsManipulationEnabled}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapScrollButtons.DefaultStyleBase" TargetType="dxm:MapScrollButtons">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapScrollButtons">
                    <Grid Width="64" Height="64">
                        <Ellipse Fill="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" />
                        <Grid x:Name="Arrows">
                            <Path
                                x:Name="Right"
                                Width="6"
                                Height="12"
                                Margin="0,0,6,0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                Data="F1 M 1252,756L 1258,762L 1252,768L 1252,756 Z "
                                Fill="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                Stretch="Fill"
                                UseLayoutRounding="False" />
                            <Path
                                x:Name="Down"
                                Width="12"
                                Height="6"
                                Margin="0,0,0,6"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Bottom"
                                Data="F1 M 1280,775L 1274,781L 1268,775L 1280,775 Z "
                                Fill="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                Stretch="Fill"
                                UseLayoutRounding="False" />
                            <Path
                                x:Name="Left"
                                Width="6"
                                Height="12"
                                Margin="6,0,0,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Data="F1 M 1291,765L 1285,759L 1291,753L 1291,765 Z "
                                Fill="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                Stretch="Fill"
                                UseLayoutRounding="False" />
                            <Path
                                x:Name="Up"
                                Width="12"
                                Height="6"
                                Margin="0,6,0,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Top"
                                Data="F1 M 1265,758L 1271,752L 1277,758L 1265,758 Z "
                                Fill="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                Stretch="Fill"
                                UseLayoutRounding="False" />
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Right" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Down" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Left" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Up" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Right" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Down" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Left" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Up" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementHotColor}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrows" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.5" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Right" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementPressedColor}}" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Down" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementPressedColor}}" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Left" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementPressedColor}}" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Up" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementPressedColor}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrows" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.15" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OverlayPresentationControl.DefaultStyleBase" TargetType="dxm:OverlayPresentationControl">
        <Setter Property="HorizontalAlignment" Value="{Binding Path=Options.HorizontalAlignment, Converter={StaticResource HorizontalAlignmentConverter}}" />
        <Setter Property="VerticalAlignment" Value="{Binding Path=Options.VerticalAlignment, Converter={StaticResource VerticalAlignmentConverter}}" />
        <Setter Property="Margin" Value="{Binding Path=Options.Margin}" />
        <Setter Property="Visibility" Value="{Binding Path=Options.Visible, Converter={StaticResource VisibilityConverter}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:OverlayPresentationControl">
                    <ContentPresenter Content="{TemplateBinding Content}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapCoordinatesPanelLayoutControl.DefaultStyleBase" TargetType="dxm:MapCoordinatesPanelLayoutControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapCoordinatesPanelLayoutControl">
                    <ContentPresenter Content="{Binding}">
                        <ContentPresenter.ContentTemplateSelector>
                            <dxm:CoordinatesPanelTemplateSelector>
                                <dxm:CoordinatesPanelTemplateSelector.GeoCoordinatesPanelTemplate>
                                    <DataTemplate>
                                        <dxm:MapGeoCoordinatesPanel CoordPoint="{Binding CoordPoint}" />
                                    </DataTemplate>
                                </dxm:CoordinatesPanelTemplateSelector.GeoCoordinatesPanelTemplate>
                                <dxm:CoordinatesPanelTemplateSelector.CartesianCoordinatesPanelTemplate>
                                    <DataTemplate>
                                        <dxm:MapCartesianCoordinatesPanel CoordPoint="{Binding CoordPoint}" MeasureUnit="{Binding MeasureUnit}" />
                                    </DataTemplate>
                                </dxm:CoordinatesPanelTemplateSelector.CartesianCoordinatesPanelTemplate>
                            </dxm:CoordinatesPanelTemplateSelector>
                        </ContentPresenter.ContentTemplateSelector>
                    </ContentPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapGeoCoordinatesPanel.DefaultStyleBase" TargetType="dxm:MapGeoCoordinatesPanel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapGeoCoordinatesPanel">
                    <Grid MinHeight="29" Margin="2">
                        <dx:DXBorder Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" CornerRadius="{DynamicResource {dxmt:LWKey Map.OverlayRadius}}" />
                        <Grid Margin="16,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="30" />
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="30" />
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="60" />
                                <ColumnDefinition Width="16" />
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="40" />
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="30" />
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="60" />
                                <ColumnDefinition Width="16" />
                            </Grid.ColumnDefinitions>
                            <TextBlock
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                FontSize="16"
                                Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementAccentColor}}"
                                Text="{TemplateBinding LatitudeDegrees}"
                                TextWrapping="Wrap" />
                            <TextBlock
                                Grid.Column="2"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                FontSize="16"
                                Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementAccentColor}}"
                                Text="{TemplateBinding LatitudeMinutes}"
                                TextWrapping="Wrap" />
                            <TextBlock
                                Grid.Column="4"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                FontSize="16"
                                Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                Text="{TemplateBinding LatitudeSeconds}"
                                TextWrapping="Wrap" />
                            <TextBlock
                                Grid.Column="5"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                FontSize="16"
                                Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                Opacity="0.62"
                                Text="{TemplateBinding LatitudeCardinalPoint}"
                                TextWrapping="Wrap" />
                            <TextBlock
                                Grid.Column="7"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                FontSize="16"
                                Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementAccentColor}}"
                                Text="{TemplateBinding LongitudeDegrees}"
                                TextWrapping="Wrap" />
                            <TextBlock
                                Grid.Column="9"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                FontSize="16"
                                Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementAccentColor}}"
                                Text="{TemplateBinding LongitudeMinutes}"
                                TextWrapping="Wrap" />
                            <TextBlock
                                Grid.Column="11"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                FontSize="16"
                                Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                Text="{TemplateBinding LongitudeSeconds}"
                                TextWrapping="Wrap" />
                            <TextBlock
                                Grid.Column="13"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                FontSize="16"
                                Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                Opacity="0.62"
                                Text="{TemplateBinding LongitudeCardinalPoint}"
                                TextWrapping="Wrap" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapCartesianCoordinatesPanel.DefaultStyleBase" TargetType="dxm:MapCartesianCoordinatesPanel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapCartesianCoordinatesPanel">
                    <Grid MinHeight="29" Margin="2">
                        <dx:DXBorder Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" CornerRadius="{DynamicResource {dxmt:LWKey Map.OverlayRadius}}" />
                        <Grid Margin="16,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock
                                    Margin="4,0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    FontSize="16"
                                    Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementAccentColor}}"
                                    Text="{TemplateBinding CoordX}"
                                    TextWrapping="Wrap" />
                                <TextBlock
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    FontSize="16"
                                    Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                    Opacity="0.62"
                                    Text="{TemplateBinding MeasureUnit}"
                                    TextWrapping="Wrap" />
                                <TextBlock
                                    Margin="32,0,0,0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    FontSize="16"
                                    Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementAccentColor}}"
                                    Text="{TemplateBinding CoordY}"
                                    TextWrapping="Wrap" />
                                <TextBlock
                                    Margin="4,0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    FontSize="16"
                                    Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                    Opacity="0.62"
                                    Text="{TemplateBinding MeasureUnit}"
                                    TextWrapping="Wrap" />
                            </StackPanel>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapScalePanelLayoutControl.DefaultStyleBase" TargetType="dxm:MapScalePanelLayoutControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapScalePanelLayoutControl">
                    <dxm:MapScalePanel
                        x:Name="PART_ScalePanel"
                        KilometersScale="{Binding Path=KilometersScale}"
                        ShowKilometersScale="{Binding Path=Options.ShowKilometersScale}"
                        ShowMilesScale="{Binding Path=Options.ShowMilesScale}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapScalePanel.DefaultStyleBase" TargetType="dxm:MapScalePanel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapScalePanel">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid
                            x:Name="PART_KilometersScale"
                            Grid.Row="0"
                            MinHeight="29"
                            Margin="2"
                            HorizontalAlignment="{Binding Path=Options.HorizontalAlignment, Converter={StaticResource HorizontalAlignmentConverter}}"
                            Visibility="{Binding ShowKilometersScale, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource VisibilityConverter}}">
                            <dx:DXBorder Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" CornerRadius="{DynamicResource {dxmt:LWKey Map.OverlayRadius}}" />
                            <StackPanel
                                Margin="16,6"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Orientation="Vertical">
                                <TextBlock
                                    Margin="0,-3,0,-2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                    Text="{TemplateBinding KilometersScaleText}"
                                    TextWrapping="Wrap" />
                                <dx:DXBorder
                                    Width="{TemplateBinding KilometersScaleBarWidth}"
                                    Height="6"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    BorderBrush="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                    BorderThickness="1,0,1,2" />
                            </StackPanel>
                        </Grid>
                        <Grid
                            x:Name="PART_MilesScale"
                            Grid.Row="1"
                            MinHeight="29"
                            Margin="2"
                            HorizontalAlignment="{Binding Path=Options.HorizontalAlignment, Converter={StaticResource HorizontalAlignmentConverter}}"
                            Visibility="{Binding ShowMilesScale, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource VisibilityConverter}}">
                            <dx:DXBorder Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" CornerRadius="{DynamicResource {dxmt:LWKey Map.OverlayRadius}}" />
                            <StackPanel
                                Margin="16,6"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Orientation="Vertical">
                                <TextBlock
                                    Margin="0,-3,0,-2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                    Text="{TemplateBinding MilesScaleText}"
                                    TextWrapping="Wrap" />
                                <dx:DXBorder
                                    Width="{TemplateBinding MilesScaleBarWidth}"
                                    Height="6"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    BorderBrush="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                    BorderThickness="1,0,1,2" />
                            </StackPanel>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapZoomTrackbarLayoutControl.DefaultStyleBase" TargetType="dxm:MapZoomTrackbarLayoutControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapZoomTrackbarLayoutControl">
                    <Grid>
                        <dxm:MapVerticalZoomTrackbar
                            x:Name="PART_VerticalZoomTrackbar"
                            Command="{Binding Path=Command}"
                            IsEnabled="{Binding Path=Map.EnableZooming}"
                            IsManipulationEnabled="{Binding Path=Map.IsManipulationEnabled}"
                            MaxZoomLevel="{Binding Path=Map.MaxZoomLevel, Mode=TwoWay}"
                            MinZoomLevel="{Binding Path=Map.MinZoomLevel, Mode=TwoWay}"
                            Visibility="{Binding Path=Options.Orientation, Converter={StaticResource TrackbarOrientationConverter}, ConverterParameter=V}"
                            ZoomLevel="{Binding Path=Map.ZoomLevel}"
                            ZoomingStep="{Binding Path=Options.ZoomingStep}" />
                        <dxm:MapHorizontalZoomTrackbar
                            x:Name="PART_HorizontalZoomTrackbar"
                            Command="{Binding Path=Command}"
                            IsEnabled="{Binding Path=Map.EnableZooming}"
                            IsManipulationEnabled="{Binding Path=Map.IsManipulationEnabled}"
                            MaxZoomLevel="{Binding Path=Map.MaxZoomLevel, Mode=TwoWay}"
                            MinZoomLevel="{Binding Path=Map.MinZoomLevel, Mode=TwoWay}"
                            Visibility="{Binding Path=Options.Orientation, Converter={StaticResource TrackbarOrientationConverter}, ConverterParameter=H}"
                            ZoomLevel="{Binding Path=Map.ZoomLevel}"
                            ZoomingStep="{Binding Path=Options.ZoomingStep}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapVerticalZoomTrackbar.DefaultStyleBase" TargetType="dxm:MapVerticalZoomTrackbar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapVerticalZoomTrackbar">
                    <Grid Width="22" Height="180">
                        <dx:DXBorder Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" CornerRadius="{DynamicResource {dxmt:LWKey Map.OverlayRadius}}" />
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="22" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="22" />
                            </Grid.RowDefinitions>
                            <dxm:MapZoomTrackbarButton
                                x:Name="PART_ZoomInButton"
                                Grid.Row="0"
                                IsManipulationEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsManipulationEnabled}"
                                Style="{StaticResource PlusButton}" />
                            <dx:DXBorder
                                Grid.Row="1"
                                Width="4"
                                HorizontalAlignment="Center"
                                Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                CornerRadius="2" />
                            <dxm:MapZoomTrackbarButton
                                x:Name="PART_ZoomOutButton"
                                Grid.Row="2"
                                IsManipulationEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsManipulationEnabled}"
                                Style="{StaticResource MinusButton}" />
                            <Rectangle
                                x:Name="PART_TrackBar"
                                Grid.Row="1"
                                Fill="Transparent"
                                IsManipulationEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsManipulationEnabled}" />
                            <Grid Grid.Row="1">
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <dxm:MapZoomTrackbarButton
                                    x:Name="PART_Thumb"
                                    Grid.Row="0"
                                    Width="16"
                                    Height="16"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Bottom"
                                    IsManipulationEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsManipulationEnabled}"
                                    Style="{StaticResource Thumb}" />
                                <Rectangle Grid.Row="1" Height="{TemplateBinding Position}" />
                            </Grid>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapHorizontalZoomTrackbar.DefaultStyleBase" TargetType="dxm:MapHorizontalZoomTrackbar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapHorizontalZoomTrackbar">
                    <Grid Width="180" Height="22">
                        <dx:DXBorder Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" CornerRadius="{DynamicResource {dxmt:LWKey Map.OverlayRadius}}" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="22" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="22" />
                            </Grid.ColumnDefinitions>
                            <dxm:MapZoomTrackbarButton
                                x:Name="PART_ZoomInButton"
                                Grid.Column="2"
                                IsManipulationEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsManipulationEnabled}"
                                Style="{StaticResource PlusButton}" />
                            <dx:DXBorder
                                Grid.Column="1"
                                Height="4"
                                VerticalAlignment="Center"
                                Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                                CornerRadius="2" />
                            <dxm:MapZoomTrackbarButton x:Name="PART_ZoomOutButton" IsManipulationEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsManipulationEnabled}" Style="{StaticResource MinusButton}" />
                            <Rectangle
                                x:Name="PART_TrackBar"
                                Grid.Column="1"
                                Fill="Transparent"
                                IsManipulationEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsManipulationEnabled}" />
                            <Grid Grid.Column="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0" Width="{TemplateBinding Position}" />
                                <dxm:MapZoomTrackbarButton
                                    x:Name="PART_Thumb"
                                    Grid.Column="1"
                                    Width="16"
                                    Height="16"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    IsManipulationEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsManipulationEnabled}"
                                    Style="{StaticResource Thumb}" />
                            </Grid>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates1">
                                <VisualState x:Name="Focused1" />
                                <VisualState x:Name="Unfocused1" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates1">
                                <VisualState x:Name="Normal1" />
                                <VisualState x:Name="MouseOver1" />
                                <VisualState x:Name="Pressed1" />
                                <VisualState x:Name="Disabled1" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapSearchListBoxItem.DefaultStyleBase" TargetType="{x:Type dxm:MapSearchListBoxItem}">
        <Setter Property="Padding" Value="6,3" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocationInformationToTooltipConverter}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxm:MapSearchListBoxItem}">
                    <Grid Background="{TemplateBinding Background}">
                        <dx:DXBorder
                            x:Name="fillColor"
                            Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                            CornerRadius="2"
                            Opacity="0" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                        <Rectangle x:Name="FocusVisualElement" Stroke="Transparent" Visibility="Collapsed" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="fillColor" Storyboard.TargetProperty="Opacity" To="0.38" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity" To="0.16" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="fillColor" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.26" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapSearchPanel.DefaultStyleBase" TargetType="dxm:MapSearchPanel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapSearchPanel">
                    <Grid MinWidth="250" MaxWidth="{TemplateBinding FixedWidth, Converter={StaticResource FixedWidthToWidthConverter}}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" MinHeight="30" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <dx:DXBorder
                            Grid.RowSpan="2"
                            Grid.ColumnSpan="2"
                            Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}"
                            CornerRadius="{Binding ElementName=PART_ResultsList, Path=Visibility, Converter={StaticResource CornerRadiusConverter}}" />
                        <dx:DXBorder Margin="3" Background="{DynamicResource {dxmt:LWKey MapBrushes.SearchPanelBackground}}" CornerRadius="11" />
                        <Grid Margin="12,4,7,4">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <dxe:TextEdit
                                x:Name="PART_TextInput"
                                VerticalAlignment="Center"
                                Foreground="{DynamicResource {dxmt:LWKey MapBrushes.SearchPanelForeground}}"
                                NullTextForeground="{DynamicResource {dxmt:LWKey MapBrushes.SearchPanelNullTextForeground}}"
                                ShowBorder="False"
                                ShowNullText="True"
                                ShowNullTextForEmptyValue="True"
                                TextWrapping="NoWrap" />
                            <Button
                                x:Name="PART_ClearButton"
                                Grid.Column="1"
                                Style="{StaticResource ClearButton}"
                                Visibility="Collapsed" />
                            <Button
                                x:Name="PART_LoadingButton"
                                Grid.Column="1"
                                Style="{StaticResource LoadingButton}"
                                Visibility="{Binding Path=IsBusy, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource VisibilityConverter}}" />
                        </Grid>
                        <dxm:MapSearchListBox
                            x:Name="PART_ResultsList"
                            Grid.Row="1"
                            Grid.ColumnSpan="2"
                            MaxHeight="164"
                            Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}"
                            Foreground="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}"
                            ItemsSource="{TemplateBinding SearchResults}"
                            Style="{StaticResource SearchListBoxStyle}"
                            Visibility="Collapsed" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapControl.DefaultStyleBase" TargetType="dxm:MapControl">
        <Setter Property="ToolTipTemplate">
            <Setter.Value>
                <DataTemplate x:Name="ToolTipTemplate">
                    <Grid
                        x:Name="Tooltip"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        UseLayoutRounding="True">
                        <Grid x:Name="Shadow" Margin="0,4,0,-4" Opacity="0.1">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="12" />
                            </Grid.RowDefinitions>
                            <Path
                                x:Name="Arrow"
                                Grid.Row="1"
                                Width="26"
                                Height="13"
                                Margin="0,-1,0,0"
                                HorizontalAlignment="Center"
                                Data="F1 M 461,303L 474,316L 487,303L 461,303 Z "
                                Fill="{DynamicResource {dxmt:LWKey MapBrushes.ToolTipBackground}}"
                                Opacity="0.7"
                                Stretch="Fill" />
                            <dx:DXBorder x:Name="ContentBack" Background="{DynamicResource {dxmt:LWKey MapBrushes.ToolTipBackground}}" Opacity="0.7" />
                        </Grid>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="12" />
                            </Grid.RowDefinitions>
                            <Path
                                x:Name="Arrow1"
                                Grid.Row="1"
                                Width="26"
                                Height="13"
                                Margin="0,-1,0,0"
                                HorizontalAlignment="Center"
                                Data="F1 M 461,303L 474,316L 487,303L 461,303 Z "
                                Fill="{DynamicResource {dxmt:LWKey MapBrushes.ToolTipBackground}}"
                                Stretch="Fill" />
                            <dx:DXBorder x:Name="ContentBack1" Background="{DynamicResource {dxmt:LWKey MapBrushes.ToolTipBackground}}" />
                            <ContentPresenter Content="{Binding}" ContentTemplate="{Binding ContentTemplate}" />
                        </Grid>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ZoomRegionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dx:DXBorder
                        x:Name="zoomRegionBorder"
                        Background="#204ACBFC"
                        BorderBrush="#FF4ACBFC"
                        BorderThickness="2" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapControl">
                    <Grid FlowDirection="LeftToRight">
                        <dx:ScrollBarExtensions.ScrollBehavior>
                            <dx:NativeScrollBehavior />
                        </dx:ScrollBarExtensions.ScrollBehavior>
                        <Rectangle x:Name="PART_DraggingElement" Fill="Transparent" Stretch="Fill" />
                        <dx:DXBorder Background="{TemplateBinding Background}">
                            <ItemsControl x:Name="PART_LayersContainer">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Grid ClipToBounds="True" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </dx:DXBorder>

                        <Canvas ClipToBounds="True">
                            <dxm:MapEditorAdorner x:Name="PART_EditorAdorner" SnapsToDevicePixels="False" UseLayoutRounding="False" />
                            <ContentPresenter
                                x:Name="PART_RectangleToZoomIn"
                                ContentTemplate="{TemplateBinding ZoomRegionTemplate}"
                                SnapsToDevicePixels="True"
                                Visibility="Collapsed" />
                        </Canvas>

                        <dxm:OverlayItemsControl x:Name="PART_OverlaysContainer">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <dxm:MapOverlaysPanel />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </dxm:OverlayItemsControl>
                        <dxm:ToolTipPanel
                            x:Name="PART_ToolTipPanel"
                            Clip="{Binding Path=ToolTipInfo.Clip, RelativeSource={RelativeSource TemplatedParent}}"
                            Position="{Binding Path=ToolTipInfo.ToolTipPosition, RelativeSource={RelativeSource TemplatedParent}}"
                            Visibility="{Binding Path=ToolTipInfo.Visibility, RelativeSource={RelativeSource TemplatedParent}}">
                            <Popup
                                x:Name="PART_Popup"
                                AllowsTransparency="True"
                                DataContext="{Binding Path=ToolTipInfo, RelativeSource={RelativeSource TemplatedParent}}"
                                IsOpen="{Binding Visibility, Mode=OneWay, Converter={StaticResource visibilityToBoolConverter}}"
                                Placement="Center">
                                <ContentPresenter Content="{Binding Path=ToolTipInfo, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ToolTipTemplate}" />
                            </Popup>
                        </dxm:ToolTipPanel>
                        <Grid
                            x:Name="PART_InvalidKeyPanel"
                            Width="400"
                            MinHeight="29"
                            Margin="2,2,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Visibility="Collapsed">
                            <dx:DXBorder Background="#FFDD0000" CornerRadius="5" Opacity="0.75" />
                            <TextBlock
                                Margin="32"
                                FontSize="14.667"
                                Foreground="White"
                                Text="{Binding}"
                                TextAlignment="Center"
                                TextWrapping="Wrap" />
                        </Grid>
                        <dxm:MapSearchPanel
                            x:Name="PART_SearchPanel"
                            Margin="20"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top" />
                        <dxm:MeasurementsControl x:Name="PART_Measurements" />
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {dxmt:LWKey MapBrushes.MapBackground}}" />
        <Setter Property="ZoomToRegionBehavior">
            <Setter.Value>
                <dxm:ZoomToRegionBehavior />
            </Setter.Value>
        </Setter>
        <Setter Property="SelectItemsByRegionBehavior">
            <Setter.Value>
                <dxm:SelectItemsByRegionBehavior />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MultiScaleImageBase.DefaultStyleBase" TargetType="{x:Type dxm:MultiScaleImageBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxm:MultiScaleImageBase}">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Canvas
                            x:Name="PART_Canvas"
                            RenderOptions.EdgeMode="Aliased"
                            SnapsToDevicePixels="True"
                            UseLayoutRounding="False" />
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapEditorAdorner.DefaultStyleBase" TargetType="{x:Type dxm:MapEditorAdorner}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxm:MapEditorAdorner}">
                    <Grid Name="root">
                        <Image
                            x:Name="RotationIcon"
                            Width="21"
                            Height="21"
                            Margin="{DynamicResource {dxmt:LWKey Adorners.RotationAdornerMargin}}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Top"
                            Source="{dxm:MapCoreSvgImage Size='21,21', Path=Images/Svg/Rotate.svg}" />
                        <Grid>
                            <Rectangle x:Name="EditRect" Stroke="{DynamicResource {dxmt:LWKey Adorners.SelectionAdornerStroke}}" />
                            <Canvas>
                                <Ellipse
                                    x:Name="AdditionalPoint"
                                    Canvas.Left="{DXBinding 'X - @e(AdditionalPoint).ActualWidth * 0.5'}"
                                    Canvas.Top="{DXBinding 'Y - @e(AdditionalPoint).ActualHeight * 0.5'}"
                                    DataContext="{TemplateBinding AdditionalPoint}"
                                    Style="{StaticResource AdditionalPointStyle}"
                                    Visibility="{TemplateBinding AdditionalPoint, Converter={StaticResource objectToVisibilityConverter}}" />
                            </Canvas>
                            <ItemsControl x:Name="Points" ItemsSource="{TemplateBinding EditablePoints}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <dxm:EditablePointsPanel />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Ellipse dxm:MapEditorUIInput.MapEditorInputElement="{Binding InputElement}" Style="{StaticResource EditablePointStyle}" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                            <ItemsControl Margin="-3" ItemsSource="{TemplateBinding ResizeModes}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Grid />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Rectangle
                                            HorizontalAlignment="{Binding HorizontalAlignment}"
                                            VerticalAlignment="{Binding VerticalAlignment}"
                                            dxm:MapEditorUIInput.MapEditorInputElement="{Binding InputElement}"
                                            Style="{StaticResource ResizeBoxStyle}" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="CanTransform" Value="False">
                            <Setter TargetName="RotationIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="CanRotate" Value="False">
                            <Setter TargetName="RotationIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ShowEditRect" Value="False">
                            <Setter TargetName="EditRect" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapEditorPanelControl.DefaultStyleBase" TargetType="dxm:MapEditorPanelControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:MapEditorPanelControl">
                    <dx:DXBorder Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}">
                        <StackPanel x:Name="buttonsPanel" Orientation="Horizontal">
                            <dxm:MapEditorPanelButton Command="{Binding Editor.UndoCommand}" Style="{StaticResource UndoButtonStyle}" />
                            <dxm:MapEditorPanelButton Command="{Binding Editor.RedoCommand}" Style="{StaticResource RedoButtonStyle}" />
                            <dxm:MapEditorPanelButton Style="{StaticResource SeparatorStyle}" />
                            <dxm:MapEditorPanelButton Command="{Binding Editor.ResetModeCommand}" IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.Default}, Converter={StaticResource ActiveActionToIsActiveConverter}}" Style="{StaticResource ResetModeButtonStyle}" />
                            <dxm:MapEditorPanelButton
                                Command="{Binding Editor.SetTransformModeCommand}"
                                CommandParameter="{x:Static dxm:MapItemTransform.All}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.Transform}, Converter={StaticResource ActiveActionToIsActiveConverter}}"
                                Style="{StaticResource SetTransformModeButtonStyle}" />
                            <dxm:MapEditorPanelButton Command="{Binding Editor.SetEditModeCommand}" IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.Edit}, Converter={StaticResource ActiveActionToIsActiveConverter}}" Style="{StaticResource SetEditModeButtonStyle}" />
                            <dxm:MapEditorPanelButton Style="{StaticResource SeparatorStyle}" />
                            <dxm:MapEditorPanelButton
                                Command="{Binding Editor.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:MapPushpinSettings.Default}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.AddPushpin}, Converter={StaticResource ActiveActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreatePushpinModeButtonStyle}" />
                            <dxm:MapEditorPanelButton
                                Command="{Binding Editor.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:MapPathSettings.Default}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.AddPath}, Converter={StaticResource ActiveActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreatePolygonModeButtonStyle}" />
                            <dxm:MapEditorPanelButton
                                Command="{Binding Editor.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:MapPolylineSettings.Default}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.AddPolyline}, Converter={StaticResource ActiveActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreatePolylineModeButtonStyle}" />
                            <dxm:MapEditorPanelButton
                                Command="{Binding Editor.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:MapSplineSettings.Default}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.AddSpline}, Converter={StaticResource ActiveActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreateSplineModeButtonStyle}" />
                            <dxm:MapEditorPanelButton
                                Command="{Binding Editor.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:MapDotSettings.Default}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.AddDot}, Converter={StaticResource ActiveActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreateDotModeButtonStyle}" />
                            <dxm:MapEditorPanelButton
                                Command="{Binding Editor.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:MapEllipseSettings.Default}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.AddEllipse}, Converter={StaticResource ActiveActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreateEllipseModeButtonStyle}" />
                            <dxm:MapEditorPanelButton
                                Command="{Binding Editor.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:MapRectangleSettings.Default}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.AddRectangle}, Converter={StaticResource ActiveActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreateRectangleModeButtonStyle}" />
                            <dxm:MapEditorPanelButton
                                Command="{Binding Editor.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:MapLineSettings.Default}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.AddLine}, Converter={StaticResource ActiveActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreateLineModeButtonStyle}" />
                            <dxm:MapEditorPanelButton
                                Command="{Binding Editor.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:MapCustomElementSettings.Default}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:ItemsEditorPanelAction.AddCustomElement}, Converter={StaticResource ActiveActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreateCustomElementModeButtonStyle}" />
                        </StackPanel>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MeasurementToolbarControl.DefaultStyleBase" TargetType="dxm:MeasurementToolbarControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <dx:DXBorder Background="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}">
                        <StackPanel x:Name="buttonsPanel" Orientation="Horizontal">
                            <dxm:MeasurementToolbarButton
                                Command="{Binding Measurements.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:RulerType.Distance}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:MeasurementToolbarAction.AddDistanceRuler}, Converter={StaticResource MeasurementToolbarActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreateDistanceRulerButtonStyle}"
                                UndoCommand="{Binding Measurements.SetEditModeCommand}"
                                Visibility="{Binding Options.ShowDistanceButton, Converter={dxm:BoolToVisibilityConverter}}" />
                            <dxm:MeasurementToolbarButton
                                Command="{Binding Measurements.SetCreateModeCommand}"
                                CommandParameter="{x:Static dxm:RulerType.Area}"
                                IsActive="{Binding ActiveAction, ConverterParameter={x:Static dxm:MeasurementToolbarAction.AddAreaRuler}, Converter={StaticResource MeasurementToolbarActionToIsActiveConverter}}"
                                Style="{StaticResource SetCreateAreaRulerButtonStyle}"
                                UndoCommand="{Binding Measurements.SetEditModeCommand}"
                                Visibility="{Binding Options.ShowAreaButton, Converter={dxm:BoolToVisibilityConverter}}" />
                        </StackPanel>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ImageLayer.DefaultStyleBase" TargetType="dxm:ImageLayer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:ImageLayer">
                    <Grid x:Name="PART_RootVisual">
                        <ContentControl Content="{Binding Path=DataProvider.DataType, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplateSelector="{StaticResource multiScaleImageTemplateSelector}" />
                        <Grid
                            x:Name="PART_ErrorPanel"
                            Width="400"
                            MinHeight="29"
                            Margin="2,2,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Visibility="Collapsed">
                            <dx:DXBorder CornerRadius="5" Opacity="0.75" />
                            <TextBlock
                                Margin="32"
                                Text="{Binding}"
                                TextAlignment="Center"
                                TextWrapping="Wrap" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VectorLayer.DefaultStyleBase" BasedOn="{StaticResource VectorLayerBaseStyle}" TargetType="dxm:VectorLayer" />
    <Style x:Key="InformationLayer.DefaultStyleBase" BasedOn="{StaticResource VectorLayerBaseStyle}" TargetType="dxm:InformationLayer" />
    <Style x:Key="VectorLayerRenderControl.DefaultStyleBase" TargetType="dxm:VectorLayerRenderControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:VectorLayerRenderControl">
                    <Grid>
                        <dxm:ItemsRenderControl x:Name="PART_Items" />
                        <dxm:HighlightedItemRenderControl x:Name="PART_HighlightedItem" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ShapeTitleTextControl.DefaultStyleBase" TargetType="{x:Type dxm:ShapeTitleTextControl}">
        <Setter Property="Foreground" Value="{DynamicResource {dxmt:LWKey MapBrushes.ShapeTitleForeground}}" />
        <Setter Property="Stroke" Value="{DynamicResource {dxmt:LWKey MapBrushes.ShapeTitleStroke}}" />
    </Style>
    <Style x:Key="NestedItemPresentationControl.DefaultStyleBase" TargetType="dxm:NestedItemPresentationControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:NestedItemPresentationControl">
                    <Grid Margin="0,6,0,0" VerticalAlignment="Bottom">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentControl
                            x:Name="PART_Text"
                            Grid.Row="0"
                            Grid.RowSpan="2"
                            Grid.Column="1"
                            MinWidth="20"
                            Margin="6,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            Content="{Binding}"
                            ContentTemplate="{Binding LabelTemplate}"
                            Style="{StaticResource LegendLabelStyle}" />
                        <Grid Grid.Row="1" Grid.RowSpan="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding MaxItemSize}" />
                                <ColumnDefinition Width="20" />
                            </Grid.ColumnDefinitions>

                            <Grid VerticalAlignment="Top">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <dx:DXBorder
                                    Grid.Column="1"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Top"
                                    Style="{StaticResource TickMarkStyle}" />
                                <ContentPresenter
                                    Grid.ColumnSpan="2"
                                    Width="{Binding MarkerSize}"
                                    Height="{Binding MarkerSize}"
                                    VerticalAlignment="Center"
                                    Content="{Binding Path=MarkerType, Converter={StaticResource MarkerTypeToModelConverter}, ConverterParameter={StaticResource legendShapeStyle}}" />
                            </Grid>
                            <dx:DXBorder
                                Grid.Column="1"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Top"
                                Style="{StaticResource TickMarkStyle}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ColorListLegend.DefaultStyleBase" BasedOn="{StaticResource legendStyleBase}" TargetType="dxm:ColorListLegend">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:ColorListLegend">
                    <dx:DXBorder
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{DynamicResource {dxmt:LWKey Map.OverlayRadius}}"
                        Visibility="{Binding Path=ActualVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                        <StackPanel Orientation="Vertical">
                            <TextBlock FontSize="24" Text="{TemplateBinding Header}" Visibility="{Binding Text, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource textToVisibilityConverter}}" />
                            <TextBlock
                                Padding="0,0,0,15"
                                HorizontalAlignment="Left"
                                FontSize="12"
                                Text="{TemplateBinding Description}"
                                TextWrapping="Wrap"
                                Visibility="{Binding Text, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource textToVisibilityConverter}}" />
                            <dxm:LabeledItemsControl x:Name="PART_ItemsControl" ItemLabelTemplate="{TemplateBinding ItemLabelTemplate}" ItemTemplate="{TemplateBinding ItemTemplate}" />
                        </StackPanel>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate" Value="{StaticResource ColorListLegendItemTemplate}" />
        <Setter Property="Margin" Value="16" />
        <Setter Property="Padding" Value="16" />
        <Setter Property="Background" Value="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}" />
    </Style>
    <Style x:Key="SizeLegend.DefaultStyleBase" BasedOn="{StaticResource legendStyleBase}" TargetType="dxm:SizeLegend">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxm:SizeLegend">
                    <dx:DXBorder
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{DynamicResource {dxmt:LWKey Map.OverlayRadius}}"
                        Visibility="{Binding Path=ActualVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                        <StackPanel Orientation="Vertical">
                            <TextBlock
                                Padding="0,0,0,15"
                                FontSize="24"
                                Text="{TemplateBinding Header}"
                                Visibility="{Binding Text, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource textToVisibilityConverter}}" />
                            <TextBlock
                                Padding="0,0,0,15"
                                HorizontalAlignment="Left"
                                FontSize="12"
                                Text="{TemplateBinding Description}"
                                TextWrapping="Wrap"
                                Visibility="{Binding Text, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource textToVisibilityConverter}}" />
                            <dxm:LabeledItemsControl x:Name="PART_ItemsControl" ItemLabelTemplate="{TemplateBinding ItemLabelTemplate}" Style="{StaticResource sizeLegendItemsControlStyle}" />
                        </StackPanel>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="16" />
        <Setter Property="Padding" Value="16" />
        <Setter Property="Background" Value="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}" />
        <Setter Property="ItemFill" Value="Transparent" />
        <Setter Property="ItemStroke" Value="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}" />
    </Style>
    <Style x:Key="ColorScaleLegend.DefaultStyleBase" BasedOn="{StaticResource legendStyleBase}" TargetType="dxm:ColorScaleLegend">
        <Setter Property="Margin" Value="16" />
        <Setter Property="Padding" Value="16" />
        <Setter Property="Background" Value="{DynamicResource {dxmt:LWKey MapBrushes.OverlayBackground}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxmt:LWKey MapBrushes.OverlayElementForeground}}" />
        <Style.Triggers>
            <Trigger Property="EnableGradientScale" Value="false">
                <Setter Property="Template" Value="{StaticResource ColorScaleLegendTemplate}" />
                <Setter Property="ItemTemplate" Value="{StaticResource ColorScaleLegendItemTemplate}" />
                <Setter Property="MinWidth" Value="300" />
            </Trigger>
            <Trigger Property="EnableGradientScale" Value="true">
                <Setter Property="Template" Value="{StaticResource GradientColorScaleLegendTemplate}" />
                <Setter Property="ItemTemplate" Value="{StaticResource GradientLegendItemLabelTemplate}" />
                <Setter Property="MinWidth" Value="50" />
            </Trigger>
        </Style.Triggers>

    </Style>
    <Style x:Key="PrintContainer.DefaultStyleBase" TargetType="dxm:PrintContainer">
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <dx:DXBorder Background="Transparent">
                            <ItemsControl x:Name="PART_PrintLayersContainer">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Grid />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </dx:DXBorder>
                        <dxm:OverlayItemsControl x:Name="PART_PrintLegendsContainer">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <dxm:MapOverlaysPanel />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </dxm:OverlayItemsControl>
                        <dxm:MapOverlaysPanel x:Name="PART_MiniMap" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MeasurementLabelPresentation.DefaultStyleBase" TargetType="{x:Type dxm:MeasurementLabelPresentation}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxm:MeasurementLabelPresentation}">
                    <dx:DXBorder
                        Background="{DynamicResource {dxmt:LWKey Measurements.LabelFill}}"
                        BorderBrush="{DynamicResource {dxmt:LWKey Measurements.LabelFill}}"
                        BorderThickness="2"
                        CornerRadius="5">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Padding="2" Text="{TemplateBinding Text}" />
                            <Button x:Name="Part_DeleteButton" Visibility="{TemplateBinding DeleteButtonVisibility}">
                                <Button.Template>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Canvas Width="20" Height="20" Background="{DynamicResource {dxmt:LWKey Measurements.LabelFill}}">
                                            <Path
                                                x:Name="deleteCross"
                                                Canvas.Left="2"
                                                Canvas.Top="10"
                                                Fill="{DynamicResource {dxmt:LWKey Measurements.DeleteCrossFill}}">
                                                <Path.Data>
                                                    <GeometryGroup FillRule="Nonzero">
                                                        <RectangleGeometry Rect="0, 0 15, 2">
                                                            <RectangleGeometry.Transform>
                                                                <RotateTransform Angle="45" CenterX="7.5" CenterY="1" />
                                                            </RectangleGeometry.Transform>
                                                        </RectangleGeometry>
                                                        <RectangleGeometry Rect="0, 0 15, 2">
                                                            <RectangleGeometry.Transform>
                                                                <RotateTransform Angle="-45" CenterX="7.5" CenterY="1" />
                                                            </RectangleGeometry.Transform>
                                                        </RectangleGeometry>
                                                    </GeometryGroup>
                                                </Path.Data>
                                            </Path>
                                        </Canvas>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="deleteCross" Property="Fill" Value="{DynamicResource {dxmt:LWKey Measurements.DeleteCrossHighlightedFill}}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Button.Template>
                            </Button>
                        </StackPanel>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform X="10" Y="-30" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MeasurementsControl.DefaultStyleBase" TargetType="{x:Type dxm:MeasurementsControl}">
        <Setter Property="Fill" Value="{DynamicResource {dxmt:LWKey Measurements.RulerFill}}" />
        <Setter Property="AreaOpacity" Value="{DynamicResource {dxmt:LWKey Measurements.AreaRulerOpacity}}" />
        <Setter Property="Stroke" Value="{DynamicResource {dxmt:LWKey Measurements.RulerStroke}}" />
        <Setter Property="StrokeThickness" Value="{DynamicResource {dxmt:LWKey Measurements.RulerBorderThickness}}" />
    </Style>
    <!--#endregion DEFAULT STYLES-->
</ResourceDictionary>