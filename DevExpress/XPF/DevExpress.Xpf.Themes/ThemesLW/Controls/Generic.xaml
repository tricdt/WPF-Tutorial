<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxco="clr-namespace:DevExpress.Xpf.Controls;assembly=DevExpress.Xpf.Controls.v24.1"
    xmlns:dxcoi="clr-namespace:DevExpress.Xpf.Controls.Internal;assembly=DevExpress.Xpf.Controls.v24.1"
    xmlns:dxcon="clr-namespace:DevExpress.Xpf.Controls.Native;assembly=DevExpress.Xpf.Controls.v24.1"
    xmlns:dxcop="clr-namespace:DevExpress.Xpf.Controls.Primitives;assembly=DevExpress.Xpf.Controls.v24.1"
    xmlns:dxcot="clr-namespace:DevExpress.Xpf.Controls.ThemeKeys;assembly=DevExpress.Xpf.Controls.v24.1"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxef="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxefi="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
    xmlns:dxnav="clr-namespace:DevExpress.Xpf.Navigation;assembly=DevExpress.Xpf.Controls.v24.1"
    xmlns:dxnavi="clr-namespace:DevExpress.Xpf.Navigation.Internal;assembly=DevExpress.Xpf.Controls.v24.1"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxwui="clr-namespace:DevExpress.Xpf.WindowsUI;assembly=DevExpress.Xpf.Controls.v24.1"
    xmlns:dxwuii="clr-namespace:DevExpress.Xpf.WindowsUI.Internal;assembly=DevExpress.Xpf.Controls.v24.1"
    xmlns:dxwuit="clr-namespace:DevExpress.Xpf.WindowsUI.ThemeKeys;assembly=DevExpress.Xpf.Controls.v24.1">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Controls/_{ThemeCategory}.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <sys:Double x:Key="trackHeight">7</sys:Double>
    <LinearGradientBrush x:Key="ProgressBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="White" />
        <GradientStop Offset="0.7" Color="Blue" />
        <GradientStop Offset="1" Color="White" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ElapsedBackground" Opacity="0.7" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="White" />
        <GradientStop Offset="0.7" Color="Gray" />
        <GradientStop Offset="1" Color="White" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ThumbBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="White" />
        <GradientStop Offset="0.7" Color="Blue" />
        <GradientStop Offset="1" Color="White" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="DownloadBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="White" />
        <GradientStop Offset="0.3" Color="LightGoldenrodYellow" />
        <GradientStop Offset="0.7" Color="Orange" />
        <GradientStop Offset="1" Color="White" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="HintBackground" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="White" />
        <GradientStop Offset="0.3" Color="WhiteSmoke" />
        <GradientStop Offset="0.7" Color="LightGray" />
        <GradientStop Offset="1" Color="White" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ChapterBackground" Opacity="0.4" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="White" />
        <GradientStop Offset="0.5" Color="#FF3DBAFF" />
        <GradientStop Offset="1" Color="White" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ChaptersPanelBackGround">
        <GradientStop Offset="0" Color="#77C0C0C0" />
        <GradientStop Offset="1" Color="#77808080" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ChaptersPanelBorder" Color="Transparent" />
    <Thickness x:Key="ChaptersPanelBorderThickness">0</Thickness>
    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#FFF" />
                <GradientStop Offset="1.0" Color="#CCC" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#FFF" />
                <GradientStop Offset="1.0" Color="#CCC" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#FFF" />
                <GradientStop Offset="1.0" Color="#EEE" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#FFF" />
                <GradientStop Offset="1.0" Color="#EEE" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#FFF" />
                <GradientStop Offset="1.0" Color="#AAA" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#BBB" />
                <GradientStop Offset="0.1" Color="#EEE" />
                <GradientStop Offset="0.9" Color="#EEE" />
                <GradientStop Offset="1.0" Color="#FFF" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />
    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#CCC" />
                <GradientStop Offset="1.0" Color="#444" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#CCC" />
                <GradientStop Offset="1.0" Color="#444" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#777" />
                <GradientStop Offset="1.0" Color="#000" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#444" />
                <GradientStop Offset="1.0" Color="#888" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />
    <dxco:WizardStringIdConverter x:Key="WizardStringIdConverter" />
    <dxmvvm:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <dx:BoolToVisibilityInverseConverter x:Key="boolToVisibilityInverseConverter" />
    <dx:BoolToVisibilityConverter x:Key="boolToVisibilityConverter" />
    <ItemsPanelTemplate x:Key="SlideViewDefaultPanel">
        <dxwuii:SlideViewItemsPanel ItemSizeMode="AutoSize" Orientation="{Binding RelativeSource={RelativeSource AncestorType=dxwui:SlideView}, Path=Orientation}" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="AppBarPanel">
        <dxwuii:AnimatedPanel Alignment="{Binding Alignment, RelativeSource={RelativeSource AncestorType=dxwui:AppBar}}" IsAnimationEnabled="{Binding RelativeSource={RelativeSource AncestorType=dxwui:AppBar}, Path=IsAnimationEnabled}" ItemSpacing="{Binding RelativeSource={RelativeSource AncestorType=dxwui:AppBar}, Path=ItemSpacing}" />
    </ItemsPanelTemplate>
    <dxwui:HamburgerMenuStringIdConverter x:Key="HamburgerMenuStringIdConverter" />
    <dxwuii:DoubleToGridLengthConverter x:Key="DoubleToGridLengthConverter" />
    <dxmvvm:ObjectToObjectConverter x:Key="ColorModeConverter" DefaultTarget="Default">
        <dxmvvm:MapItem Source="Inverted" Target="Inverted" />
    </dxmvvm:ObjectToObjectConverter>
    <BooleanToVisibilityConverter x:Key="VisibleIfTrueConverter" />
    <dxmvvm:NumericToVisibilityConverter x:Key="NumericToVisibilityConverter" />
    <dx:ObjectToVisibilityConverter x:Key="ObjectToVisibilityConverter" HandleList="False" />

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\MediaManager\MediaSliderControl.xaml-->
    <Style x:Key="PositionTipTextStyle" TargetType="TextBlock" />


    <!-- PositionSlider -->
    <ControlTemplate x:Key="ThumbTemplate" TargetType="{x:Type Thumb}">
        <dx:DXBorder
            Width="18"
            Height="12"
            Background="{StaticResource ThumbBackground}"
            BorderBrush="Black"
            BorderThickness="1"
            CornerRadius="5" />
    </ControlTemplate>
    <!-- PositionSliderItem -->
    <!-- MediaSliderControl -->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\MediaManager\MediaSliderControl.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\MediaManager\PlayListControl.xaml-->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\MediaManager\PlayListControl.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\MediaManager\Controls.xaml-->
    <!-- IsMutedControl -->
    <!-- PlayPauseControl -->
    <!-- StopMediaButton -->
    <!-- FullscreenControl -->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\MediaManager\Controls.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\MediaManager\MediaManager.xaml-->
    <Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <dx:DXBorder Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- MediaManager -->
    <!-- Border Brushes -->
    <!-- Miscellaneous Brushes -->
    <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <!--<Setter Property="OverridesDefaultStyle" Value="true"/>-->
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Ellipse
                        Name="Ellipse"
                        Fill="{StaticResource NormalBrush}"
                        Stroke="{StaticResource NormalBorderBrush}"
                        StrokeThickness="1" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{StaticResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{StaticResource DisabledBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- BalanceMediaSlider -->
    <!-- HorizontalControlPanel -->
    <!-- VerticalControlPanel -->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\MediaManager\MediaManager.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\WizardControl\Generic.xaml-->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\WizardControl\Generic.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Wizard\Themes\Generic\WizardControl.xaml-->
    <Style x:Key="ButtonsContainerStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
        <Style.Triggers>
            <Trigger Property="dx:DXDialogWindow.ActualDialogWindow" Value="{x:Null}">
                <Setter Property="Margin" Value="6,12,12,12" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <DataTemplate x:Key="{dxcot:LWKey Wizard.FooterTemplate}">
        <dxco:WizardDialogFooter>
            <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                <dxco:WizardButton dxco:Wizard.IsButtonBack="True" Content="{Binding ConverterParameter=BackButtonText, Converter={StaticResource WizardStringIdConverter}, RelativeSource={RelativeSource Self}}" />
                <dxco:WizardButton dxco:Wizard.IsButtonNext="True" Content="{Binding ConverterParameter=NextButtonText, Converter={StaticResource WizardStringIdConverter}, RelativeSource={RelativeSource Self}}" />
                <dxco:WizardButton dxco:Wizard.IsButtonFinish="True" Content="{Binding ConverterParameter=FinishButtonText, Converter={StaticResource WizardStringIdConverter}, RelativeSource={RelativeSource Self}}" />
                <dxco:WizardButton Margin="19,0,0,0" dxco:Wizard.IsButtonCancel="True" Content="{Binding ConverterParameter=CancelButtonText, Converter={StaticResource WizardStringIdConverter}, RelativeSource={RelativeSource Self}}" />
            </StackPanel>
        </dxco:WizardDialogFooter>
    </DataTemplate>

    <Style x:Key="WizardPageBase" TargetType="{x:Type dxco:WizardPage}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:WizardPage">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <DockPanel>
                            <ContentPresenter ContentSource="SideContent" DockPanel.Dock="Left" Visibility="{Binding ShowSideContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                            <dx:DXBorder Background="{TemplateBinding HeaderBackground}" DockPanel.Dock="Top" Visibility="{Binding IsHeaderVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <StackPanel Margin="16,8,4,4">
                                        <TextBlock
                                            FontFamily="Segoe UI"
                                            FontSize="16"
                                            FontWeight="Bold"
                                            Text="{TemplateBinding Title}"
                                            TextWrapping="Wrap" />
                                        <ContentPresenter ContentSource="Header" />
                                    </StackPanel>
                                    <dxco:WizardHeaderSeparator Grid.Row="1" />
                                </Grid>
                            </dx:DXBorder>
                            <ContentPresenter />
                        </DockPanel>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Wizard\Themes\Generic\WizardControl.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Wizard\Themes\Generic\WizardButton.xaml-->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Wizard\Themes\Generic\WizardButton.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Wizard\Themes\Generic.xaml-->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Wizard\Themes\Generic.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\FadingButtonGeneric.xaml-->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\FadingButtonGeneric.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\FlipViewGeneric.xaml-->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\FlipViewGeneric.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\NavigationHeaderControl.xaml-->
    <ControlTemplate x:Key="DefaultHeaderControlTemplate" TargetType="dxwuii:NavigationHeaderControl">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <dxwuii:BackButton
                x:Name="PART_BackButton"
                Margin="0,0,10,0"
                Command="{TemplateBinding ActualBackCommand}"
                CommandParameter="{TemplateBinding BackCommandParameter}" />
            <ContentPresenter x:Name="PART_Content" Grid.Column="1" VerticalAlignment="Center" />
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\NavigationHeaderControl.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\PageView.xaml-->
    <ItemsPanelTemplate x:Key="{dxcot:LWKey PageViewElements.ItemsPanel}">
        <dxwuii:PageViewStackPanel ClipToBounds="True" ItemSpacing="1" />
    </ItemsPanelTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey PageViewElements.Template}" TargetType="dxwui:PageView">
        <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <dxwuii:NavigationHeaderControl
                        x:Name="PART_NavigationHeader"
                        Margin="{TemplateBinding Padding}"
                        VerticalAlignment="Center"
                        BackCommand="{TemplateBinding BackCommand}"
                        BackCommandParameter="{TemplateBinding BackCommandParameter}"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        ShowBackButton="{TemplateBinding ShowBackButton}" />
                    <dxcop:ScrollableControl
                        Grid.Column="1"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        IsScrollable="{TemplateBinding IsScrollable}"
                        Orientation="{Binding Orientation, RelativeSource={RelativeSource TemplatedParent}}">
                        <ItemsPresenter x:Name="PART_ItemsPresenter" />
                    </dxcop:ScrollableControl>
                </Grid>
                <dxwuii:PageViewContentPanel
                    Grid.Row="1"
                    AnimationDirection="{TemplateBinding AnimationDirection}"
                    AnimationSpeedRatio="{TemplateBinding AnimationSpeedRatio}"
                    AnimationType="{TemplateBinding AnimationType}"
                    ItemCacheMode="{TemplateBinding ItemCacheMode}" />
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxcot:LWKey PageViewElements.TemplateLeft}" TargetType="dxwui:PageView">
        <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid Grid.ColumnSpan="2">
                    <dxwuii:NavigationHeaderControl
                        x:Name="PART_NavigationHeader"
                        Margin="{TemplateBinding Padding}"
                        VerticalAlignment="Center"
                        BackCommand="{TemplateBinding BackCommand}"
                        BackCommandParameter="{TemplateBinding BackCommandParameter}"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        ShowBackButton="{TemplateBinding ShowBackButton}" />
                </Grid>
                <dxcop:ScrollableControl
                    Grid.Row="1"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    IsScrollable="{TemplateBinding IsScrollable}"
                    Orientation="{Binding Orientation, RelativeSource={RelativeSource TemplatedParent}}">
                    <ItemsPresenter x:Name="PART_ItemsPresenter" />
                </dxcop:ScrollableControl>
                <dxwuii:PageViewContentPanel
                    Grid.Row="1"
                    Grid.Column="1"
                    AnimationDirection="{TemplateBinding AnimationDirection}"
                    AnimationSpeedRatio="{TemplateBinding AnimationSpeedRatio}"
                    AnimationType="{TemplateBinding AnimationType}"
                    ItemCacheMode="{TemplateBinding ItemCacheMode}" />
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxcot:LWKey PageViewElements.TemplateRight}" TargetType="dxwui:PageView">
        <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <dxwuii:NavigationHeaderControl
                        x:Name="PART_NavigationHeader"
                        Margin="{TemplateBinding Padding}"
                        VerticalAlignment="Center"
                        BackCommand="{TemplateBinding BackCommand}"
                        BackCommandParameter="{TemplateBinding BackCommandParameter}"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        ShowBackButton="{TemplateBinding ShowBackButton}" />
                </Grid>
                <dxwuii:PageViewContentPanel
                    Grid.Row="1"
                    AnimationDirection="{TemplateBinding AnimationDirection}"
                    AnimationSpeedRatio="{TemplateBinding AnimationSpeedRatio}"
                    AnimationType="{TemplateBinding AnimationType}"
                    ItemCacheMode="{TemplateBinding ItemCacheMode}" />
                <dxcop:ScrollableControl
                    Grid.Row="2"
                    Grid.Column="1"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    IsScrollable="{TemplateBinding IsScrollable}"
                    Orientation="{Binding Orientation, RelativeSource={RelativeSource TemplatedParent}}">
                    <ItemsPresenter x:Name="PART_ItemsPresenter" />
                </dxcop:ScrollableControl>
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxcot:LWKey PageViewElements.TemplateBottom}" TargetType="dxwui:PageView">
        <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <dxwuii:NavigationHeaderControl
                        x:Name="PART_NavigationHeader"
                        Margin="{TemplateBinding Padding}"
                        VerticalAlignment="Center"
                        BackCommand="{TemplateBinding BackCommand}"
                        BackCommandParameter="{TemplateBinding BackCommandParameter}"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        ShowBackButton="{TemplateBinding ShowBackButton}" />
                </Grid>
                <dxwuii:PageViewContentPanel
                    Grid.Row="1"
                    AnimationDirection="{TemplateBinding AnimationDirection}"
                    AnimationSpeedRatio="{TemplateBinding AnimationSpeedRatio}"
                    AnimationType="{TemplateBinding AnimationType}"
                    ItemCacheMode="{TemplateBinding ItemCacheMode}" />
                <dxcop:ScrollableControl
                    Grid.Row="2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    IsScrollable="{TemplateBinding IsScrollable}"
                    Orientation="{Binding Orientation, RelativeSource={RelativeSource TemplatedParent}}">
                    <ItemsPresenter x:Name="PART_ItemsPresenter" />
                </dxcop:ScrollableControl>
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\PageView.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\SlideViewGeneric.xaml-->


    <ControlTemplate x:Key="{dxcot:LWKey SlideViewElements.Template}" TargetType="dxwui:SlideView">
        <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <dxwuii:SlideViewScrollPanel
                    x:Name="PART_ScrollPanel"
                    Grid.RowSpan="2"
                    dx:ScrollViewerTouchBehavior.IsEnabled="{Binding Path=(dx:ScrollViewerTouchBehavior.IsEnabled), RelativeSource={RelativeSource TemplatedParent}}"
                    Orientation="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Orientation}">
                    <ItemsPresenter />
                </dxwuii:SlideViewScrollPanel>
                <dx:DXBorder x:Name="PART_HeaderHost" Padding="{TemplateBinding Padding}">
                    <dxwuii:NavigationHeaderControl
                        x:Name="PART_NavigationHeader"
                        VerticalAlignment="Top"
                        BackCommand="{TemplateBinding BackCommand}"
                        BackCommandParameter="{TemplateBinding BackCommandParameter}"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        ShowBackButton="{TemplateBinding ShowBackButton}" />
                </dx:DXBorder>
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\SlideViewGeneric.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\ViewPresenter.xaml-->
    <Storyboard x:Key="defaultStoryboard">
        <DoubleAnimation Storyboard.TargetProperty="NewContentOpacity" From="0" To="1" Duration="00:00:00.50" />
        <DoubleAnimation Storyboard.TargetProperty="OldContentOpacity" From="1" To="0" Duration="00:00:00.50" />
    </Storyboard>
    <dxwuii:StoryboardCollection x:Key="storyboards">
        <Storyboard dxwuii:AnimationProvider.StoryboardName="FromRight">
            <DoubleAnimation Storyboard.TargetProperty="NewContentOpacity" To="1" Duration="0" />
            <DoubleAnimation Storyboard.TargetProperty="OldContentTranslateX" To="-1" Duration="00:00:00.50" />
            <DoubleAnimation Storyboard.TargetProperty="NewContentTranslateX" To="0" Duration="00:00:00.50" />
        </Storyboard>
        <Storyboard dxwuii:AnimationProvider.StoryboardName="FromLeft">
            <DoubleAnimation Storyboard.TargetProperty="NewContentOpacity" To="1" Duration="0" />
            <DoubleAnimation Storyboard.TargetProperty="OldContentTranslateX" To="1" Duration="00:00:00.50" />
            <DoubleAnimation Storyboard.TargetProperty="NewContentTranslateX" To="0" Duration="00:00:00.50" />
        </Storyboard>
        <Storyboard dxwuii:AnimationProvider.StoryboardName="FromBottom">
            <DoubleAnimation Storyboard.TargetProperty="NewContentOpacity" To="1" Duration="0" />
            <DoubleAnimation Storyboard.TargetProperty="OldContentTranslateY" To="-1" Duration="00:00:00.50" />
            <DoubleAnimation Storyboard.TargetProperty="NewContentTranslateY" To="0" Duration="00:00:00.50" />
        </Storyboard>
        <Storyboard dxwuii:AnimationProvider.StoryboardName="FromTop">
            <DoubleAnimation Storyboard.TargetProperty="NewContentOpacity" To="1" Duration="0" />
            <DoubleAnimation Storyboard.TargetProperty="OldContentTranslateY" To="1" Duration="00:00:00.50" />
            <DoubleAnimation Storyboard.TargetProperty="NewContentTranslateY" To="0" Duration="00:00:00.50" />
        </Storyboard>
        <Storyboard dxwuii:AnimationProvider.StoryboardName="FadeRight">
            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="NewContentOpacity">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                <SplineDoubleKeyFrame KeyTime="00:00:00.400" Value="1" />
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimation BeginTime="00:00:00" Storyboard.TargetProperty="NewContentTranslateX" From="1" To="0" Duration="00:00:00.500">
                <DoubleAnimation.EasingFunction>
                    <CubicEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="OldContentOpacity">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="0" />
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard dxwuii:AnimationProvider.StoryboardName="FadeLeft">
            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="NewContentOpacity">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                <SplineDoubleKeyFrame KeyTime="00:00:00.400" Value="1" />
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimation BeginTime="00:00:00" Storyboard.TargetProperty="NewContentTranslateX" From="-1" To="0" Duration="00:00:00.500">
                <DoubleAnimation.EasingFunction>
                    <CubicEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="OldContentOpacity">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="0" />
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
    </dxwuii:StoryboardCollection>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\ViewPresenter.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\DXFrame.xaml-->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\DXFrame.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\PageAdornerControl.xaml-->
    <ControlTemplate x:Key="{dxcot:LWKey WindowsUIElements.PageAdornerControlTemplate}" TargetType="dxwui:PageAdornerControl">
        <dx:DXBorder
            Margin="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid Margin="40,30,40,20">
                    <dxwuii:NavigationHeaderControl
                        x:Name="PART_NavigationHeader"
                        VerticalAlignment="Center"
                        BackCommand="{TemplateBinding BackCommand}"
                        BackCommandParameter="{TemplateBinding BackCommandParameter}"
                        Content="{TemplateBinding Header}"
                        ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                        ShowBackButton="{TemplateBinding ShowBackButton}" />
                </Grid>
                <ContentPresenter Grid.Row="1" />
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\PageAdornerControl.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\AppBar.xaml-->
    <Style x:Key="AppBarButtonStyle" TargetType="{x:Type dxwui:AppBarButton}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey AppBarElements.AppBarButtonTemplate}}" />
        <Setter Property="ContentFontFamily" Value="Segoe UI Symbol" />
        <Setter Property="Padding" Value="0,14,0,13" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="dxb:ImageColorizer.Color" Value="{DynamicResource {dxcot:LWKey AppBarElements.AppBarButtonForegroundColor}}" />
        <Setter Property="Width" Value="{DynamicResource {dxcot:LWKey AppBarElements.AppBarButtonDefaultWidth}}" />
        <Setter Property="StrokeThickness" Value="{DynamicResource {dxcot:LWKey AppBarElements.AppBarButtonStrokeThickness}}" />
        <Setter Property="Background" Value="Transparent" />
        <!--SPECIFICTHEME TouchlineDark <Setter Property="FontSize" Value="12" /> SPECIFICTHEME-->

        <Style.Triggers>
            <Trigger Property="IsCompact" Value="True">
                <Setter Property="Width" Value="60" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- This button not used in any controls -->
    <!-- This button not used in any controls -->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\AppBar.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\NavigationPageGeneric.xaml-->
    <ControlTemplate x:Key="NavigationPageDefaultTemplate" TargetType="{x:Type dxwui:NavigationPage}">
        <Grid x:Name="PART_Grid" Background="{TemplateBinding Background}">
            <ContentPresenter />
            <ContentPresenter VerticalAlignment="Top" Content="{TemplateBinding TopAppBar}" />
            <ContentPresenter VerticalAlignment="Bottom" Content="{TemplateBinding BottomAppBar}" />
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\NavigationPageGeneric.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\CommandButtonGeneric.xaml-->
    <SolidColorBrush x:Key="HoverForeBrush" Color="{DynamicResource {dxcot:LWKey CommandButtonElements.HoverForeColor}}" />
    <SolidColorBrush x:Key="PressedForeBrush" Color="{DynamicResource {dxcot:LWKey CommandButtonElements.PressedForeColor}}" />
    <SolidColorBrush x:Key="NormalForeBrush" Color="{DynamicResource {dxcot:LWKey CommandButtonElements.NormalForeColor}}" />



    <ControlTemplate x:Key="CommandButtonTemplate" TargetType="dxwui:CommandButton">
        <Grid
            x:Name="RootGrid"
            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
            Background="Transparent">
            <dx:DXBorder x:Name="panel" Margin="{TemplateBinding Padding}">
                <dx:DXBorder Width="{TemplateBinding EllipseDiameter}" Height="{TemplateBinding EllipseDiameter}" Padding="1">
                    <Grid x:Name="PART_ContentGrid">
                        <Ellipse x:Name="back" Fill="{DynamicResource {dxcot:LWKey CommandButtonElements.NormalBackBrush}}" UseLayoutRounding="False" />
                        <Ellipse
                            x:Name="border"
                            Stroke="{DynamicResource {dxcot:LWKey CommandButtonElements.NormalBorderBrush}}"
                            StrokeThickness="{TemplateBinding StrokeThickness}"
                            Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsEllipseEnabled, Converter={StaticResource boolToVisibilityConverter}}" />
                        <Grid Width="{TemplateBinding GlyphWidth}" Height="{TemplateBinding GlyphHeight}">
                            <dxwuii:ShapeContentPresenter
                                x:Name="content"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                AccentColor="{Binding Path=(dxb:ImageColorizer.Color), RelativeSource={RelativeSource TemplatedParent}}"
                                Foreground="{StaticResource NormalForeBrush}"
                                Visibility="{Binding IsGlyphVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityInverseConverter}}" />
                            <dxwuii:ImagePresenter
                                x:Name="glyph"
                                AccentColor="{Binding Path=(dxb:ImageColorizer.Color), RelativeSource={RelativeSource TemplatedParent}}"
                                AllowAccent="{TemplateBinding AllowGlyphTheming}"
                                Source="{TemplateBinding Glyph}"
                                Stretch="{TemplateBinding GlyphStretch}"
                                Visibility="{Binding IsGlyphVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
                        </Grid>
                    </Grid>
                </dx:DXBorder>
            </dx:DXBorder>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Stroke">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.HoverBorderBrush}}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.HoverBackBrush}}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource HoverForeBrush}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.HoverForeColor}}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="glyph" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.HoverForeColor}}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Stroke">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.PressedBorderBrush}}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.PressedBackBrush}}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PressedForeBrush}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.PressedForeColor}}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="glyph" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.PressedForeColor}}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="panel" Storyboard.TargetProperty="Opacity" To="0.6" Duration="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <Style x:Key="commandButtonStyle" TargetType="dxwui:CommandButton">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.Template}}" />
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\CommandButtonGeneric.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\MessageBoxGeneric.xaml-->
    <Style x:Key="textBoxStyle" TargetType="TextBox">
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="MaxWidth" Value="{x:Static SystemParameters.MaximizedPrimaryScreenWidth}" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="IsReadOnlyCaretVisible" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsHitTestVisible" Value="False" />
    </Style>


    <Style x:Key="titleStyle" BasedOn="{StaticResource textBoxStyle}" TargetType="TextBox">
        <Setter Property="FontSize" Value="24" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey MessageBoxElements.TitleForeground}}" />
    </Style>

    <ControlTemplate x:Key="DXMessageBoxTemplate" TargetType="{x:Type dxwui:WinUIMessageBox}">
        <dx:DXBorder Background="{DynamicResource {dxcot:LWKey MessageBoxElements.Background}}">
            <Grid MinWidth="350" VerticalAlignment="Center" Background="{DynamicResource {dxcot:LWKey MessageBoxElements.WindowBackground}}">
                <Grid Margin="0,8" HorizontalAlignment="Center">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBox Style="{StaticResource titleStyle}" Text="{TemplateBinding Caption}" />
                    <Grid Grid.Row="1" Margin="0,18,0,0" HorizontalAlignment="Left">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <dx:DXImage
                            x:Name="PART_MessageBoxImage"
                            Width="48"
                            Height="48"
                            Margin="-6,-1,4,-4"
                            VerticalAlignment="Top"
                            SnapsToDevicePixels="True"
                            Source="{TemplateBinding ImageSource}"
                            Stretch="UniformToFill" />
                        <TextBox
                            Grid.Column="1"
                            VerticalAlignment="Center"
                            FontSize="18"
                            Foreground="{DynamicResource {dxcot:LWKey MessageBoxElements.Foreground}}"
                            Style="{StaticResource textBoxStyle}"
                            Text="{TemplateBinding Text}"
                            TextWrapping="Wrap" />
                    </Grid>
                    <Grid Grid.Row="2" Margin="0,18,0,0" HorizontalAlignment="Right">
                        <Grid x:Name="okGrid" Visibility="Collapsed">
                            <Button
                                x:Name="PART_OkButton"
                                MinWidth="65"
                                Margin="6,0,0,0"
                                Content="{dx:DXMessageBoxStringId StringId=Ok}" />
                        </Grid>
                        <Grid x:Name="okCancelGrid" Visibility="Collapsed">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button
                                x:Name="PART_OkButton1"
                                MinWidth="65"
                                Margin="6,0,0,0"
                                Content="{dx:DXMessageBoxStringId StringId=Ok}" />
                            <Button
                                x:Name="PART_CancelButton"
                                Grid.Column="1"
                                MinWidth="65"
                                Margin="6,0,0,0"
                                Content="{dx:DXMessageBoxStringId StringId=Cancel}" />
                        </Grid>
                        <Grid x:Name="yesNoGrid" Visibility="Collapsed">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button
                                x:Name="PART_YesButton"
                                MinWidth="65"
                                Margin="6,0,0,0"
                                Content="{dx:DXMessageBoxStringId StringId=Yes}" />
                            <Button
                                x:Name="PART_NoButton"
                                Grid.Column="1"
                                MinWidth="65"
                                Margin="6,0,0,0"
                                Content="{dx:DXMessageBoxStringId StringId=No}" />
                        </Grid>
                        <Grid x:Name="yesNoCancelGrid" Visibility="Collapsed">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button
                                x:Name="PART_YesButton1"
                                MinWidth="65"
                                Margin="6,0,0,0"
                                Content="{dx:DXMessageBoxStringId StringId=Yes}" />
                            <Button
                                x:Name="PART_NoButton1"
                                Grid.Column="1"
                                MinWidth="65"
                                Margin="6,0,0,0"
                                Content="{dx:DXMessageBoxStringId StringId=No}" />
                            <Button
                                x:Name="PART_CancelButton1"
                                Grid.Column="2"
                                MinWidth="65"
                                Margin="6,0,0,0"
                                Content="{dx:DXMessageBoxStringId StringId=Cancel}" />
                        </Grid>
                    </Grid>
                </Grid>
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="group1">
                    <VisualState x:Name="OK">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Visible" Storyboard.TargetName="okGrid" Storyboard.TargetProperty="Visibility" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="OKCancel">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Visible" Storyboard.TargetName="okCancelGrid" Storyboard.TargetProperty="Visibility" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="YesNo">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Visible" Storyboard.TargetName="yesNoGrid" Storyboard.TargetProperty="Visibility" />
                        </Storyboard>
                    </VisualState>

                    <VisualState x:Name="YesNoCancel">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Visible" Storyboard.TargetName="yesNoCancelGrid" Storyboard.TargetProperty="Visibility" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </dx:DXBorder>
    </ControlTemplate>


    <ControlTemplate x:Key="WinUIDialogWindowTemplate" TargetType="{x:Type dx:DXDialogWindow}">
        <Grid x:Name="Root_Grid">
            <Grid.Resources>
                <Label x:Key="DefaultDXDialogContent" />
                <dxwuii:WindowStorage x:Key="windowStorage" Window="{Binding RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.Resources>
            <AdornerDecorator x:Name="PART_WindowAdornerDecorator" ClipToBounds="True">
                <dx:DXBorder Background="{DynamicResource {dxcot:LWKey MessageBoxElements.Background}}">
                    <ContentPresenter x:Name="PART_RootContentPresenter" ContentTemplate="{Binding Window.ActualWindowTemplate, Source={StaticResource windowStorage}}" DataContext="{Binding Window.DataContext, Source={StaticResource windowStorage}}">
                        <ContentPresenter.Content>
                            <Grid>
                                <Grid.Resources>
                                    <dxmvvm:BooleanToObjectConverter x:Key="DialogFooterMarginConverter">
                                        <dxmvvm:BooleanToObjectConverter.TrueValue>
                                            <Thickness>6,12,12,12</Thickness>
                                        </dxmvvm:BooleanToObjectConverter.TrueValue>
                                        <dxmvvm:BooleanToObjectConverter.FalseValue>
                                            <Thickness>0</Thickness>
                                        </dxmvvm:BooleanToObjectConverter.FalseValue>
                                    </dxmvvm:BooleanToObjectConverter>
                                </Grid.Resources>
                                <dx:DXBorder
                                    MinWidth="350"
                                    VerticalAlignment="Center"
                                    Background="{Binding Window.Background, Source={StaticResource windowStorage}}"
                                    BorderBrush="{Binding Window.BorderBrush, Source={StaticResource windowStorage}}"
                                    BorderThickness="{Binding Window.BorderThickness, Source={StaticResource windowStorage}}">
                                    <Grid Style="{Binding Window.ContentStyle, Source={StaticResource windowStorage}}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <ContentControl
                                            x:Name="PART_Title"
                                            Content="{Binding Window.Title, Source={StaticResource windowStorage}}"
                                            Focusable="False"
                                            Style="{Binding Window.TitleStyle, Source={StaticResource windowStorage}}"
                                            Visibility="{Binding Window.ShowTitle, Source={StaticResource windowStorage}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                        <dx:DXWindowBackgroundPanel
                                            x:Name="PART_ContainerContent"
                                            Grid.Row="1"
                                            MaxWidth="{x:Static SystemParameters.MaximizedPrimaryScreenWidth}"
                                            Margin="0,18,0,0"
                                            HorizontalAlignment="{Binding Window.HorizontalContentAlignment, Source={StaticResource windowStorage}}"
                                            VerticalAlignment="{Binding Window.VerticalContentAlignment, Source={StaticResource windowStorage}}"
                                            Background="{x:Null}">
                                            <dx:DXWindowBackgroundPanel.ContentTemplate>
                                                <Binding Path="Window.ContentTemplate" Source="{StaticResource windowStorage}" />
                                            </dx:DXWindowBackgroundPanel.ContentTemplate>
                                            <dx:DXWindowBackgroundPanel.Content>
                                                <PriorityBinding>
                                                    <Binding Path="Window.Content" Source="{StaticResource windowStorage}" />
                                                    <Binding Source="{StaticResource DefaultDXDialogContent}" />
                                                </PriorityBinding>
                                            </dx:DXWindowBackgroundPanel.Content>
                                        </dx:DXWindowBackgroundPanel>
                                        <ItemsControl
                                            x:Name="Footer"
                                            Grid.Row="2"
                                            Focusable="False"
                                            ItemsPanel="{Binding Window.CommandButtonsPanel, Source={StaticResource windowStorage}}"
                                            ItemsSource="{Binding Window.CommandButtons, Source={StaticResource windowStorage}}" />
                                        <ContentPresenter Grid.Row="2" Margin="{Binding HasFooterButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DialogFooterMarginConverter}}" Content="{TemplateBinding ActualFooter}" />
                                    </Grid>
                                </dx:DXBorder>
                            </Grid>
                        </ContentPresenter.Content>
                    </ContentPresenter>
                </dx:DXBorder>
            </AdornerDecorator>
        </Grid>
    </ControlTemplate>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\MessageBoxGeneric.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\HamburgerMenuGeneric.xaml-->
    <DataTemplate x:Key="SubMenuThemeSelectorButton">
        <dxwui:HamburgerSubMenuNavigationButton
            Content="{Binding Theme.FullName}"
            IsSelected="{Binding IsSelected}"
            RightContent="{Binding Theme.SvgGlyph}"
            ShowInPreview="{Binding ShowInPreview}">
            <dxwui:HamburgerSubMenuNavigationButton.RightContentTemplate>
                <DataTemplate>
                    <dx:DXImage
                        Width="20"
                        Height="20"
                        Source="{Binding Converter={dx:SvgUriToImageSourceConverter SvgWidth=20, SvgHeight=20}}"
                        Stretch="Uniform" />
                </DataTemplate>
            </dxwui:HamburgerSubMenuNavigationButton.RightContentTemplate>
        </dxwui:HamburgerSubMenuNavigationButton>
    </DataTemplate>



    <!-- begin SplitView template -->
    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.SplitViewTemplate}" TargetType="{x:Type dxwuii:SplitView}">
        <Grid Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="LeftColumn" Width="{Binding ActualOpenPaneWidth, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource DoubleToGridLengthConverter}}" />
                <ColumnDefinition x:Name="RightColumn" Width="*" />
            </Grid.ColumnDefinitions>
            <Grid x:Name="PART_ContentRoot" Grid.ColumnSpan="2">
                <dx:DXBorder
                    x:Name="PART_Content"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    KeyboardNavigation.TabIndex="1"
                    KeyboardNavigation.TabNavigation="Local" />
                <Rectangle x:Name="LightDismissLayer" Fill="Transparent" Visibility="Collapsed" />
            </Grid>
            <Grid
                x:Name="PART_PaneRoot"
                Grid.ColumnSpan="2"
                Width="{Binding TemplateSettings.OpenPaneWidth, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                HorizontalAlignment="Left"
                dx:WpfSvgPalette.Palette="{TemplateBinding PaneSvgPalette}"
                Background="{TemplateBinding PaneBackground}">
                <Grid.Clip>
                    <RectangleGeometry x:Name="PaneClipRectangle">
                        <RectangleGeometry.Transform>
                            <TranslateTransform x:Name="PaneClipRectangleTransform" />
                        </RectangleGeometry.Transform>
                    </RectangleGeometry>
                </Grid.Clip>
                <Grid.RenderTransform>
                    <TranslateTransform x:Name="PaneTransform" />
                </Grid.RenderTransform>
                <dx:DXBorder
                    x:Name="PART_Pane"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    KeyboardNavigation.TabIndex="0"
                    KeyboardNavigation.TabNavigation="Local" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ActualState" Value="Closed">
                <Setter TargetName="PART_PaneRoot" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ActualState" Value="ClosedCompactLeft">
                <Setter TargetName="LeftColumn" Property="Width" Value="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_ContentRoot" Property="Grid.Column" Value="1" />
                <Setter TargetName="PART_ContentRoot" Property="Grid.ColumnSpan" Value="1" />
            </Trigger>
            <Trigger Property="ActualState" Value="ClosedCompactRight">
                <Setter TargetName="LeftColumn" Property="Width" Value="*" />
                <Setter TargetName="RightColumn" Property="Width" Value="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_ContentRoot" Property="Grid.ColumnSpan" Value="1" />
                <Setter TargetName="PART_PaneRoot" Property="Grid.ColumnSpan" Value="2" />
                <Setter TargetName="PART_PaneRoot" Property="HorizontalAlignment" Value="Right" />
            </Trigger>
            <Trigger Property="ActualState" Value="OpenOverlayLeft">
                <Setter TargetName="LightDismissLayer" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="ActualState" Value="OpenOverlayRight">
                <Setter TargetName="LightDismissLayer" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_PaneRoot" Property="HorizontalAlignment" Value="Right" />
            </Trigger>
            <Trigger Property="ActualState" Value="OpenCompactOverlayLeft">
                <Setter TargetName="LightDismissLayer" Property="Visibility" Value="Visible" />
                <Setter TargetName="LeftColumn" Property="Width" Value="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_ContentRoot" Property="Grid.Column" Value="1" />
                <Setter TargetName="PART_ContentRoot" Property="Grid.ColumnSpan" Value="1" />
            </Trigger>
            <Trigger Property="ActualState" Value="OpenCompactOverlayRight">
                <Setter TargetName="LightDismissLayer" Property="Visibility" Value="Visible" />
                <Setter TargetName="LeftColumn" Property="Width" Value="*" />
                <Setter TargetName="RightColumn" Property="Width" Value="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_ContentRoot" Property="Grid.ColumnSpan" Value="1" />
                <Setter TargetName="PART_PaneRoot" Property="Grid.ColumnSpan" Value="2" />
                <Setter TargetName="PART_PaneRoot" Property="HorizontalAlignment" Value="Right" />
            </Trigger>
            <Trigger Property="ActualState" Value="OpenInlineLeft">
                <Setter TargetName="PART_ContentRoot" Property="Grid.Column" Value="1" />
                <Setter TargetName="PART_ContentRoot" Property="Grid.ColumnSpan" Value="1" />
                <Setter TargetName="PART_PaneRoot" Property="Grid.ColumnSpan" Value="1" />
            </Trigger>
            <Trigger Property="ActualState" Value="OpenInlineRight">
                <Setter TargetName="LeftColumn" Property="Width" Value="*" />
                <Setter TargetName="RightColumn" Property="Width" Value="{Binding TemplateSettings.OpenPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_ContentRoot" Property="Grid.ColumnSpan" Value="1" />
                <Setter TargetName="PART_PaneRoot" Property="Grid.Column" Value="1" />
                <Setter TargetName="PART_PaneRoot" Property="Grid.ColumnSpan" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- end -->

    <!-- begin Hamburger templates -->
    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.MenuTemplate}" TargetType="{x:Type dxwui:HamburgerMenu}">
        <Grid x:Name="PART_RootGrid" Background="{TemplateBinding Background}">
            <dxwuii:SplitView
                x:Name="PART_SplitView"
                AnimationSettings="{Binding AnimationSettings, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                CompactPaneWidth="{TemplateBinding CompactWidth}"
                OpenPaneWidth="{TemplateBinding OpenPaneWidth}"
                PaneBackground="{TemplateBinding PaneBackground}"
                TabIndex="1">
                <dxwuii:SplitView.Pane>
                    <Grid MinWidth="{TemplateBinding OpenPaneMinWidth}" KeyboardNavigation.TabIndex="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding CompactWidth, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={dxwuii:DoubleToGridLengthConverter}}" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <dx:DXBorder
                            x:Name="PART_MenuHeader"
                            Grid.Column="1"
                            Height="{TemplateBinding HeaderHeight}"
                            Padding="{TemplateBinding HeaderPadding}"
                            dx:WpfSvgPalette.Palette="{DynamicResource {dxcot:LWKey HamburgerMenuSvgPalette.SvgPaletteInMenu}}">
                            <ContentPresenter
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Header}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                TextBlock.FontSize="{TemplateBinding HeaderFontSize}"
                                TextBlock.Foreground="{TemplateBinding HeaderForeground}" />
                        </dx:DXBorder>
                        <ScrollViewer Grid.Row="1" Grid.ColumnSpan="2" dx:ScrollBarExtensions.ScrollBarMode="TouchOverlap">
                            <dxwuii:HamburgerMenuItemsPanel
                                x:Name="PART_TopItemsPanel"
                                CompactItemWidth="{TemplateBinding CompactWidth}"
                                IsCompact="{TemplateBinding IsCompact}"
                                ItemsSource="{Binding TopItems, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneTime}"
                                MediateBorderCommand="{Binding ToggleViewStateCommand, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneTime}"
                                ShowSpecialElements="{TemplateBinding ShowMenuOnEmptySpaceBarClick}" />
                        </ScrollViewer>
                        <dxwuii:HamburgerMenuItemsPanel
                            x:Name="PART_BottomItemsPanel"
                            Grid.Row="2"
                            Grid.ColumnSpan="2"
                            CompactItemWidth="{TemplateBinding CompactWidth}"
                            IsCompact="{TemplateBinding IsCompact}"
                            ItemsSource="{Binding BottomItems, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneTime}" />
                        <dxwuii:HamburgerMenuBottomBarItemsPanel
                            x:Name="PART_BottomBarItemsPanel"
                            Grid.Row="3"
                            Grid.ColumnSpan="2"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Bottom"
                            Background="{TemplateBinding BottomBarBackground}"
                            CompactItemWidth="{TemplateBinding CompactWidth}"
                            IsCompact="{TemplateBinding IsCompact}"
                            ItemsSource="{Binding BottomBarItems, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneTime}"
                            ShowSpecialElements="True" />
                    </Grid>
                </dxwuii:SplitView.Pane>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding CompactWidth, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={dxwuii:DoubleToGridLengthConverter}}" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Rectangle
                        x:Name="PART_HorizontalHeaderBackground"
                        Grid.ColumnSpan="2"
                        Fill="{TemplateBinding HorizontalHeaderBackground}"
                        Visibility="Collapsed" />
                    <dx:DXBorder
                        x:Name="PART_HorizontalHeader"
                        Grid.Column="1"
                        Height="{TemplateBinding HeaderHeight}"
                        Padding="{TemplateBinding HeaderPadding}"
                        Visibility="Collapsed">
                        <ContentPresenter
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Header}"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                            TextBlock.FontSize="{TemplateBinding HeaderFontSize}"
                            TextBlock.Foreground="{TemplateBinding HeaderForeground}" />
                    </dx:DXBorder>
                    <ContentPresenter
                        x:Name="PART_HamburgerContent"
                        Grid.Row="1"
                        Grid.ColumnSpan="2"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                </Grid>
            </dxwuii:SplitView>
            <dxwui:HamburgerMenuToggleStateButton
                x:Name="PART_ToggleStateButton"
                Width="{TemplateBinding CompactWidth}"
                Height="{TemplateBinding HeaderHeight}"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Command="{Binding ToggleViewStateCommand, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneTime}"
                TabIndex="0" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ViewState" Value="Closed">
                <Setter TargetName="PART_SplitView" Property="DisplayMode" Value="Overlay" />
                <Setter TargetName="PART_SplitView" Property="IsPaneOpen" Value="False" />
                <Setter TargetName="PART_ToggleStateButton" Property="IsInFlyout" Value="True" />
            </Trigger>
            <Trigger Property="ViewState" Value="Opened">
                <Setter TargetName="PART_SplitView" Property="DisplayMode" Value="Overlay" />
                <Setter TargetName="PART_SplitView" Property="IsPaneOpen" Value="True" />
                <Setter TargetName="PART_HamburgerContent" Property="KeyboardNavigation.TabNavigation" Value="None" />
                <Setter TargetName="PART_HamburgerContent" Property="KeyboardNavigation.ControlTabNavigation" Value="None" />
                <Setter TargetName="PART_HamburgerContent" Property="KeyboardNavigation.DirectionalNavigation" Value="None" />
                <Setter TargetName="PART_HorizontalHeader" Property="KeyboardNavigation.TabNavigation" Value="None" />
                <Setter TargetName="PART_HorizontalHeader" Property="KeyboardNavigation.ControlTabNavigation" Value="None" />
                <Setter TargetName="PART_HorizontalHeader" Property="KeyboardNavigation.DirectionalNavigation" Value="None" />
                <Setter TargetName="PART_RootGrid" Property="KeyboardNavigation.TabNavigation" Value="Cycle" />
                <Setter TargetName="PART_RootGrid" Property="KeyboardNavigation.ControlTabNavigation" Value="Cycle" />
                <Setter TargetName="PART_RootGrid" Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle" />
            </Trigger>
            <Trigger Property="ViewState" Value="CompactOverlay">
                <Setter TargetName="PART_SplitView" Property="DisplayMode" Value="CompactOverlay" />
                <Setter TargetName="PART_SplitView" Property="IsPaneOpen" Value="False" />
            </Trigger>
            <Trigger Property="ViewState" Value="Overlay">
                <Setter TargetName="PART_SplitView" Property="DisplayMode" Value="CompactOverlay" />
                <Setter TargetName="PART_SplitView" Property="IsPaneOpen" Value="True" />
                <Setter TargetName="PART_HamburgerContent" Property="KeyboardNavigation.TabNavigation" Value="None" />
                <Setter TargetName="PART_HamburgerContent" Property="KeyboardNavigation.ControlTabNavigation" Value="None" />
                <Setter TargetName="PART_HamburgerContent" Property="KeyboardNavigation.DirectionalNavigation" Value="None" />
                <Setter TargetName="PART_HorizontalHeader" Property="KeyboardNavigation.TabNavigation" Value="None" />
                <Setter TargetName="PART_HorizontalHeader" Property="KeyboardNavigation.ControlTabNavigation" Value="None" />
                <Setter TargetName="PART_HorizontalHeader" Property="KeyboardNavigation.DirectionalNavigation" Value="None" />
                <Setter TargetName="PART_RootGrid" Property="KeyboardNavigation.TabNavigation" Value="Cycle" />
                <Setter TargetName="PART_RootGrid" Property="KeyboardNavigation.ControlTabNavigation" Value="Cycle" />
                <Setter TargetName="PART_RootGrid" Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle" />
            </Trigger>
            <Trigger Property="ViewState" Value="CompactInline">
                <Setter TargetName="PART_SplitView" Property="DisplayMode" Value="CompactInline" />
                <Setter TargetName="PART_SplitView" Property="IsPaneOpen" Value="False" />
            </Trigger>
            <Trigger Property="ViewState" Value="Inline">
                <Setter TargetName="PART_SplitView" Property="DisplayMode" Value="CompactInline" />
                <Setter TargetName="PART_SplitView" Property="IsPaneOpen" Value="True" />
            </Trigger>
            <Trigger Property="ActualIsMenuVisible" Value="False">
                <Setter TargetName="PART_ToggleStateButton" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ActualIsHorizontalHeaderVisible" Value="True">
                <Setter TargetName="PART_HorizontalHeader" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_HorizontalHeaderBackground" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_MenuHeader" Property="Visibility" Value="Hidden" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.NavigationButtonTemplate}" TargetType="{x:Type dxwui:HamburgerMenuNavigationButton}">
        <Grid x:Name="root">
            <dx:DXBorder
                x:Name="border"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True" />
            <dx:DXBorder BorderThickness="{TemplateBinding BorderThickness}">
                <DockPanel>
                    <dx:DXBorder
                        x:Name="PART_SelectionIndicator"
                        MinWidth="{DynamicResource {dxcot:LWKey HamburgerMenuElements.ItemSelectionIndicatorThickness}}"
                        Background="{TemplateBinding SelectionIndicatorBrush}"
                        DockPanel.Dock="Left"
                        Visibility="Collapsed" />
                    <Grid Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).CompactWidth, RelativeSource={RelativeSource Mode=Self}, Converter={dxwuii:DoubleToGridLengthConverter}}" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Image
                            x:Name="PART_IconContainer"
                            Width="{TemplateBinding GlyphWidth}"
                            Height="{TemplateBinding GlyphHeight}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            dxb:ImageColorizer.Color="{TemplateBinding ActualGlyphColor}"
                            dxb:ImageColorizer.IsEnabled="{TemplateBinding AllowGlyphTheming}"
                            Source="{TemplateBinding Glyph}"
                            Stretch="{TemplateBinding GlyphStretch}" />
                        <ContentPresenter
                            x:Name="PART_IconTemplateContainer"
                            Width="{TemplateBinding GlyphWidth}"
                            Height="{TemplateBinding GlyphHeight}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            ContentTemplate="{TemplateBinding GlyphTemplate}"
                            Visibility="Collapsed" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{DynamicResource {dxcot:LWKey HamburgerMenuElements.NavigationItemContentPadding}}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <ContentPresenter
                            x:Name="PART_RightContent"
                            Grid.Column="2"
                            Margin="{TemplateBinding RightContentMargin}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding RightContent}"
                            ContentTemplate="{TemplateBinding RightContentTemplate}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            TextBlock.Foreground="{TemplateBinding RightForeground}"
                            Visibility="Collapsed" />
                    </Grid>
                </DockPanel>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsRightContentVisible" Value="True">
                <Setter TargetName="PART_RightContent" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="root" Property="Opacity" Value="0.3" />
            </Trigger>
            <DataTrigger Binding="{Binding GlyphTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                <Setter TargetName="PART_IconTemplateContainer" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_IconContainer" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="border" Property="dxwui:RevealHighlightOptions.Mode" Value="BackgroundAndBorder" />
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="ShowSelectionIndicator" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_SelectionIndicator" Property="Visibility" Value="Visible" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.SubMenuPreviewNavigationButtonTemplate}" TargetType="{x:Type dxwui:HamburgerSubMenuPreviewNavigationButton}">
        <Grid x:Name="root">
            <dx:DXBorder
                x:Name="border"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True" />
            <dx:DXBorder BorderThickness="{TemplateBinding BorderThickness}">
                <DockPanel>
                    <dx:DXBorder
                        x:Name="PART_SelectionIndicator"
                        MinWidth="{DynamicResource {dxcot:LWKey HamburgerMenuElements.ItemSelectionIndicatorThickness}}"
                        Background="{TemplateBinding SelectionIndicatorBrush}"
                        DockPanel.Dock="Left"
                        Visibility="Collapsed" />
                    <Grid Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).CompactWidth, RelativeSource={RelativeSource Mode=Self}, Converter={dxwuii:DoubleToGridLengthConverter}}" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{DynamicResource {dxcot:LWKey HamburgerMenuElements.NavigationItemContentPadding}}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <ContentPresenter
                            x:Name="PART_RightContent"
                            Grid.Column="2"
                            Margin="{TemplateBinding RightContentMargin}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding RightContent}"
                            ContentTemplate="{TemplateBinding RightContentTemplate}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            TextBlock.Foreground="{TemplateBinding RightForeground}"
                            Visibility="Collapsed" />
                    </Grid>
                </DockPanel>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsRightContentVisible" Value="True">
                <Setter TargetName="PART_RightContent" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter TargetName="contentPresenter" Property="TextBlock.FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="root" Property="Opacity" Value="0.3" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="border" Property="dxwui:RevealHighlightOptions.Mode" Value="BackgroundAndBorder" />
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="ShowSelectionIndicator" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_SelectionIndicator" Property="Visibility" Value="Visible" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.SubMenuTemplate}" TargetType="{x:Type dxwui:HamburgerSubMenu}">
        <dx:DXBorder
            x:Name="border"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <dxwuii:HamburgerSubMenuButton
                    x:Name="PART_Button"
                    AllowGlyphTheming="{TemplateBinding AllowGlyphTheming}"
                    Content="{TemplateBinding Content}"
                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                    Glyph="{TemplateBinding Glyph}"
                    GlyphColor="{TemplateBinding GlyphColor}"
                    GlyphHeight="{TemplateBinding GlyphHeight}"
                    GlyphStretch="{TemplateBinding GlyphStretch}"
                    GlyphTemplate="{TemplateBinding GlyphTemplate}"
                    GlyphWidth="{TemplateBinding GlyphWidth}"
                    IsSelected="{Binding IsOpen, ElementName=PART_SubMenuFlyout}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <dxwuii:HamburgerSubMenuPanel x:Name="PART_PreviewPanel" Grid.Row="1" ItemsSource="{Binding PreviewItems, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneTime}" />
                <dxwuii:HamburgerSubMenuMoreButton
                    x:Name="PART_MoreButton"
                    Grid.Row="2"
                    Grid.Column="1"
                    IsOwnerSubMenuOpened="{Binding IsOpen, ElementName=PART_SubMenuFlyout}"
                    IsSelected="{TemplateBinding IsMoreButtonSelected}"
                    Visibility="Collapsed" />
                <dxwuii:HamburgerSubMenuFlyoutControl
                    x:Name="PART_SubMenuFlyout"
                    Padding="0"
                    VerticalAlignment="Stretch"
                    AlwaysOnTop="True"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    BorderThickness="0">
                    <dxwuii:HamburgerSubMenuPane
                        x:Name="PART_FlyoutPane"
                        Width="{TemplateBinding FlyoutPaneWidth}"
                        MinWidth="{TemplateBinding ActualFlyoutPaneMinWidth}"
                        HorizontalAlignment="Left"
                        BackCommand="{Binding HideFlyoutCommand, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneTime}"
                        Header="{TemplateBinding FlyoutHeader}"
                        HeaderFontSize="{TemplateBinding FlyoutHeaderFontSize}"
                        HeaderHeight="{TemplateBinding ActualFlyoutHeaderHeight}"
                        HeaderPadding="{TemplateBinding FlyoutHeaderPadding}"
                        HeaderTemplate="{TemplateBinding FlyoutHeaderTemplate}"
                        IsBackButtonVisible="{TemplateBinding IsFlyoutBackButtonVisible}"
                        ItemsSource="{Binding Items, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneTime}"
                        ScrollViewer.CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                        ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                        ScrollViewer.IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
                        ScrollViewer.PanningDeceleration="{TemplateBinding ScrollViewer.PanningDeceleration}"
                        ScrollViewer.PanningMode="{TemplateBinding ScrollViewer.PanningMode}"
                        ScrollViewer.PanningRatio="{TemplateBinding ScrollViewer.PanningRatio}"
                        ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" />
                </dxwuii:HamburgerSubMenuFlyoutControl>
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="border" Property="Opacity" Value="0.3" />
            </Trigger>
            <Trigger Property="IsMoreButtonVisible" Value="True">
                <Setter TargetName="PART_MoreButton" Property="Visibility" Value="Visible" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).IsCompact, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter TargetName="PART_MoreButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_PreviewPanel" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.SubMenuButtonTemplate}" TargetType="{x:Type dxwuii:HamburgerSubMenuButton}">
        <Grid x:Name="root">
            <dx:DXBorder
                x:Name="border"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True" />
            <dx:DXBorder Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).CompactWidth, RelativeSource={RelativeSource Mode=Self}, Converter={dxwuii:DoubleToGridLengthConverter}}" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Image
                        x:Name="PART_IconContainer"
                        Width="{TemplateBinding GlyphWidth}"
                        Height="{TemplateBinding GlyphHeight}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        dxb:ImageColorizer.Color="{TemplateBinding ActualGlyphColor}"
                        dxb:ImageColorizer.IsEnabled="{TemplateBinding AllowGlyphTheming}"
                        Source="{TemplateBinding Glyph}"
                        Stretch="{TemplateBinding GlyphStretch}" />
                    <ContentPresenter
                        x:Name="PART_IconTemplateContainer"
                        Width="{TemplateBinding GlyphWidth}"
                        Height="{TemplateBinding GlyphHeight}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        ContentTemplate="{TemplateBinding GlyphTemplate}"
                        Visibility="Collapsed" />
                    <ContentPresenter
                        x:Name="contentPresenter"
                        Grid.Column="1"
                        Margin="{DynamicResource {dxcot:LWKey HamburgerMenuElements.NavigationItemContentPadding}}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Focusable="False"
                        RecognizesAccessKey="True"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Grid>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="root" Property="Opacity" Value="0.3" />
            </Trigger>
            <DataTrigger Binding="{Binding GlyphTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                <Setter TargetName="PART_IconTemplateContainer" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_IconContainer" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="border" Property="dxwui:RevealHighlightOptions.Mode" Value="BackgroundAndBorder" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.SubMenuPaneTemplate}" TargetType="{x:Type dxwuii:HamburgerSubMenuPane}">
        <dx:DXBorder
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <dxwuii:HamburgerSubMenuPaneBackButton x:Name="PART_BackButton" Command="{TemplateBinding BackCommand}" KeyboardNavigation.DirectionalNavigation="Local" />
                <dx:DXBorder
                    x:Name="PART_PaneHeader"
                    Grid.Column="1"
                    Height="{TemplateBinding HeaderHeight}"
                    Padding="{TemplateBinding HeaderPadding}">
                    <ContentPresenter
                        VerticalAlignment="Center"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        TextBlock.FontSize="{TemplateBinding HeaderFontSize}" />
                </dx:DXBorder>
                <ScrollViewer Grid.Row="1" Grid.ColumnSpan="2" dx:ScrollBarExtensions.ScrollBarMode="TouchOverlap">
                    <dxwuii:HamburgerSubMenuPanel
                        x:Name="PART_Panel"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        ItemsSource="{TemplateBinding ItemsSource}"
                        KeyboardNavigation.ControlTabNavigation="Once"
                        KeyboardNavigation.DirectionalNavigation="Cycle"
                        KeyboardNavigation.TabNavigation="Once" />
                </ScrollViewer>
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="IsBackButtonVisible" Value="False">
                <Setter TargetName="PART_BackButton" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsBackButtonVisible" Value="True">
                <Setter TargetName="PART_PaneHeader" Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.HeaderWithIconPadding}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.SubMenuMoreButtonTemplate}" TargetType="{x:Type dxwuii:HamburgerSubMenuMoreButton}">
        <Grid x:Name="root">
            <dx:DXBorder
                x:Name="border"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True" />
            <dx:DXBorder Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).CompactWidth, RelativeSource={RelativeSource Mode=Self}, Converter={dxwuii:DoubleToGridLengthConverter}}" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter
                        x:Name="contentPresenter"
                        Grid.Column="1"
                        Margin="{DynamicResource {dxcot:LWKey HamburgerMenuElements.NavigationItemContentPadding}}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Focusable="False"
                        RecognizesAccessKey="True"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Grid>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="root" Property="Opacity" Value="0.3" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="border" Property="dxwui:RevealHighlightOptions.Mode" Value="BackgroundAndBorder" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.SubMenuNavigationButtonTemplate}" TargetType="{x:Type dxwui:HamburgerSubMenuNavigationButton}">
        <Grid x:Name="root">
            <dx:DXBorder
                x:Name="border"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True" />
            <dx:DXBorder BorderThickness="{TemplateBinding BorderThickness}">
                <DockPanel>
                    <dx:DXBorder
                        x:Name="PART_SelectionIndicator"
                        MinWidth="{DynamicResource {dxcot:LWKey HamburgerMenuElements.FlyoutItemSelectionIndicatorThickness}}"
                        Background="{TemplateBinding SelectionIndicatorBrush}"
                        DockPanel.Dock="Left"
                        Visibility="Collapsed" />
                    <Grid Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <ContentPresenter
                            x:Name="PART_Mark"
                            Grid.Column="2"
                            Margin="4,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding PreviewMarkTemplate}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            Visibility="Collapsed" />
                        <ContentPresenter
                            x:Name="PART_RightContent"
                            Grid.Column="3"
                            Margin="{TemplateBinding RightContentMargin}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding RightContent}"
                            ContentTemplate="{TemplateBinding RightContentTemplate}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            TextBlock.Foreground="{TemplateBinding RightForeground}"
                            Visibility="Collapsed" />
                    </Grid>
                </DockPanel>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsRightContentVisible" Value="True">
                <Setter TargetName="PART_RightContent" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter TargetName="contentPresenter" Property="TextBlock.FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="root" Property="Opacity" Value="0.3" />
            </Trigger>
            <Trigger Property="IsPreviewMarkVisible" Value="True">
                <Setter TargetName="PART_Mark" Property="Visibility" Value="Visible" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="border" Property="dxwui:RevealHighlightOptions.Mode" Value="BackgroundAndBorder" />
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="ShowSelectionIndicator" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_SelectionIndicator" Property="Visibility" Value="Visible" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.HyperLinkButtonTemplate}" TargetType="{x:Type dxwui:HamburgerMenuHyperlinkButton}">
        <Grid x:Name="root">
            <dx:DXBorder
                x:Name="border"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True" />
            <dx:DXBorder Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <ContentPresenter
                        x:Name="contentPresenter"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Focusable="False"
                        RecognizesAccessKey="True"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Grid>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="root" Property="Opacity" Value="0.3" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="border" Property="dxwui:RevealHighlightOptions.Mode" Value="BackgroundAndBorder" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.BottomBarNavigationButtonTemplate}" TargetType="{x:Type dxwui:HamburgerMenuBottomBarNavigationButton}">
        <Grid x:Name="root">
            <dx:DXBorder
                x:Name="border"
                Width="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).CompactWidth, RelativeSource={RelativeSource Mode=Self}}"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" />
            <dx:DXBorder Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" />
                    <Image
                        x:Name="PART_IconContainer"
                        Width="{TemplateBinding GlyphWidth}"
                        Height="{TemplateBinding GlyphHeight}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        dxb:ImageColorizer.Color="{TemplateBinding ActualGlyphColor}"
                        dxb:ImageColorizer.IsEnabled="{TemplateBinding AllowGlyphTheming}"
                        Source="{TemplateBinding Glyph}"
                        Stretch="{TemplateBinding GlyphStretch}" />
                    <ContentPresenter
                        x:Name="PART_IconTemplateContainer"
                        Width="{TemplateBinding GlyphWidth}"
                        Height="{TemplateBinding GlyphHeight}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        ContentTemplate="{TemplateBinding GlyphTemplate}"
                        Visibility="Collapsed" />
                </Grid>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="root" Property="Opacity" Value="0.3" />
            </Trigger>
            <DataTrigger Binding="{Binding GlyphTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                <Setter TargetName="PART_IconTemplateContainer" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_IconContainer" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="border" Property="dxwui:RevealHighlightOptions.Mode" Value="BackgroundAndBorder" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.BottomBarRadioButtonTemplate}" TargetType="{x:Type dxwui:HamburgerMenuBottomBarRadioButton}">
        <Grid x:Name="root">
            <dx:DXBorder
                x:Name="border"
                Width="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).CompactWidth, RelativeSource={RelativeSource Mode=Self}}"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" />
            <dx:DXBorder Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" />
                    <Image
                        x:Name="PART_IconContainer"
                        Width="{TemplateBinding GlyphWidth}"
                        Height="{TemplateBinding GlyphHeight}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        dxb:ImageColorizer.Color="{TemplateBinding ActualGlyphColor}"
                        dxb:ImageColorizer.IsEnabled="{TemplateBinding AllowGlyphTheming}"
                        Source="{TemplateBinding Glyph}"
                        Stretch="{TemplateBinding GlyphStretch}" />
                    <ContentPresenter
                        x:Name="PART_IconTemplateContainer"
                        Width="{TemplateBinding GlyphWidth}"
                        Height="{TemplateBinding GlyphHeight}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        ContentTemplate="{TemplateBinding GlyphTemplate}"
                        Visibility="Collapsed" />
                </Grid>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="root" Property="Opacity" Value="0.3" />
            </Trigger>
            <DataTrigger Binding="{Binding GlyphTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                <Setter TargetName="PART_IconTemplateContainer" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_IconContainer" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="border" Property="dxwui:RevealHighlightOptions.Mode" Value="BackgroundAndBorder" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.BottomBarCheckBoxTemplate}" TargetType="{x:Type dxwui:HamburgerMenuBottomBarCheckBox}">
        <Grid x:Name="root">
            <dx:DXBorder
                x:Name="border"
                Width="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).CompactWidth, RelativeSource={RelativeSource Mode=Self}}"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" />
            <dx:DXBorder Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" />
                    <Image
                        x:Name="PART_IconContainer"
                        Width="{TemplateBinding GlyphWidth}"
                        Height="{TemplateBinding GlyphHeight}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        dxb:ImageColorizer.Color="{TemplateBinding ActualGlyphColor}"
                        dxb:ImageColorizer.IsEnabled="{TemplateBinding AllowGlyphTheming}"
                        Source="{TemplateBinding Glyph}"
                        Stretch="{TemplateBinding GlyphStretch}" />
                    <ContentPresenter
                        x:Name="PART_IconTemplateContainer"
                        Width="{TemplateBinding GlyphWidth}"
                        Height="{TemplateBinding GlyphHeight}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        ContentTemplate="{TemplateBinding GlyphTemplate}"
                        Visibility="Collapsed" />
                </Grid>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="root" Property="Opacity" Value="0.3" />
            </Trigger>
            <DataTrigger Binding="{Binding GlyphTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                <Setter TargetName="PART_IconTemplateContainer" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_IconContainer" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.EmptySpaceBarTemplate}" TargetType="{x:Type dxwuii:HamburgerMenuEmptySpaceBar}">
        <dx:DXBorder
            x:Name="border"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="border" Property="dxwui:RevealHighlightOptions.Mode" Value="BackgroundAndBorder" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.BottomBarSeparatorTemplate}" TargetType="{x:Type dxwuii:HamburgerMenuBottomBarSeparator}">
        <Rectangle
            Height="1"
            HorizontalAlignment="Stretch"
            Fill="{TemplateBinding Background}"
            SnapsToDevicePixels="True" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey HamburgerMenuElements.ItemSeparatorTemplate}" TargetType="{x:Type dxwui:HamburgerMenuItemSeparator}">
        <dx:DXBorder Name="border" Padding="{TemplateBinding Padding}">
            <Rectangle
                Height="1"
                HorizontalAlignment="Stretch"
                Fill="{TemplateBinding Background}"
                SnapsToDevicePixels="True" />
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).IsCompact, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter TargetName="border" Property="Width" Value="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).CompactWidth, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter TargetName="border" Property="HorizontalAlignment" Value="Left" />
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="border" Property="Opacity" Value="0.3" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- end -->

    <Style x:Key="HamburgerMenuBottomBarToggleButtonStyleBase" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinHeight" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.DefaultItemHeight}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.BottomBarItemPadding}}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedForegroundBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedForegroundBrush}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedForegroundBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemIndeterminateBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemIndeterminateForegroundBrush}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemIndeterminateHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemIndeterminateHoverForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemIndeterminatePressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemIndeterminatePressedForegroundBrush}}" />
            </MultiTrigger>
            <Trigger Property="dxwuii:HamburgerMenuExtensions.MenuItemState" Value="Hidden">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedForegroundBrush}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="{x:Null}" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemIndeterminateBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemIndeterminateForegroundBrush}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxcot:LWKey HamburgerMenuElements.SubMenuThemeSelectorStyle}" TargetType="{x:Type dxwui:HamburgerSubMenu}">
        <Setter Property="ItemTemplate" Value="{StaticResource SubMenuThemeSelectorButton}" />
    </Style>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\HamburgerMenuGeneric.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\FlyoutGeneric.xaml-->
    <Style x:Key="FlyoutBaseAdornerStyle" TargetType="{x:Type dxcop:FlyoutAdornerControl}">
        <Setter Property="StaysOpen" Value="False" />
        <Setter Property="Padding" Value="{DynamicResource {dxt:LWKey FlyoutControl.Padding}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:LWKey FlyoutControl.BorderThickness}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:LWKey FlyoutControl.BorderBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey FlyoutControl.Foreground}}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:LWKey FlyoutControl.Background}}" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxcop:FlyoutAdornerControl">
                    <dxcop:FlyoutAdornerContentControl x:Name="PART_Popup" Focusable="False">
                        <dxcop:FlyoutAdornerContentControl.Resources>
                            <dxefi:IndicatorDirectionToVisibilityConverter x:Key="IndicatorDirectionToVisibilityConverter" />
                        </dxcop:FlyoutAdornerContentControl.Resources>
                        <Canvas x:Name="PART_Canvas">
                            <ContentControl x:Name="PART_cc" Focusable="False">
                                <Grid x:Name="PART_RenderGrid" FlowDirection="LeftToRight">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <dx:DXBorder
                                        x:Name="PART_Container"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Width="{TemplateBinding Width}"
                                        Height="{TemplateBinding Height}"
                                        MinWidth="{TemplateBinding MinWidth}"
                                        MinHeight="{TemplateBinding MinHeight}"
                                        MaxWidth="{TemplateBinding MaxWidth}"
                                        MaxHeight="{TemplateBinding MaxHeight}"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Effect="{TemplateBinding Effect}"
                                        EnableDPICorrection="False">
                                        <dxef:FlyoutContainerControl
                                            Margin="{TemplateBinding Padding}"
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            FlowDirection="{TemplateBinding FlowDirection}"
                                            Focusable="False"
                                            Style="{TemplateBinding ContainerStyle}" />
                                    </dx:DXBorder>
                                    <Grid
                                        x:Name="LeftIndicator"
                                        Grid.RowSpan="3"
                                        Grid.Column="0"
                                        Margin="0,4"
                                        VerticalAlignment="Top"
                                        Visibility="{Binding Path=IndicatorDirection, Converter={StaticResource IndicatorDirectionToVisibilityConverter}, ConverterParameter=Left, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Data="F1 M 13,0L 0,13L 13,26L 13,0 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Data="F1 M 13,0L 0,13L 13,26L 13,0 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Margin="1,0,-1,0"
                                            Data="F1 M 13,0L 0,13L 13,26L 13,0 Z "
                                            Fill="{TemplateBinding Background}"
                                            Stretch="Fill" />
                                    </Grid>
                                    <Grid
                                        x:Name="TopIndicator"
                                        Grid.Row="0"
                                        Grid.ColumnSpan="3"
                                        Margin="4,0"
                                        HorizontalAlignment="Left"
                                        Visibility="{Binding Path=IndicatorDirection, Converter={StaticResource IndicatorDirectionToVisibilityConverter}, ConverterParameter=Top, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Data="F1 M 26,13L 13,0L 1.23978e-005,13L 26,13 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Data="F1 M 26,13L 13,0L 1.23978e-005,13L 26,13 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Margin="0,1,0,-1"
                                            Data="F1 M 26,13L 13,0L 1.23978e-005,13L 26,13 Z "
                                            Fill="{TemplateBinding Background}"
                                            Stretch="Fill" />
                                    </Grid>
                                    <Grid
                                        x:Name="RightIndicator"
                                        Grid.RowSpan="3"
                                        Grid.Column="2"
                                        Margin="0,4"
                                        VerticalAlignment="Top"
                                        Visibility="{Binding Path=IndicatorDirection, Converter={StaticResource IndicatorDirectionToVisibilityConverter}, ConverterParameter=Right, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Data="F1 M 1.90735e-006,26.0001L 13,13.0001L 1.90735e-006,6.10352e-005L 1.90735e-006,26.0001 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Data="F1 M 1.90735e-006,26.0001L 13,13.0001L 1.90735e-006,6.10352e-005L 1.90735e-006,26.0001 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="13"
                                            Height="26"
                                            Margin="-1,0,1,0"
                                            Data="F1 M 1.90735e-006,26.0001L 13,13.0001L 1.90735e-006,6.10352e-005L 1.90735e-006,26.0001 Z "
                                            Fill="{TemplateBinding Background}"
                                            Stretch="Fill" />
                                    </Grid>
                                    <Grid
                                        x:Name="BottomIndicator"
                                        Grid.Row="2"
                                        Grid.ColumnSpan="3"
                                        Margin="4,0"
                                        HorizontalAlignment="Left"
                                        Visibility="{Binding Path=IndicatorDirection, Converter={StaticResource IndicatorDirectionToVisibilityConverter}, ConverterParameter=Bottom, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Data="F1 M -1.04904e-005,0L 13,13L 26,0L -1.04904e-005,0 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Data="F1 M -1.04904e-005,0L 13,13L 26,0L -1.04904e-005,0 Z "
                                            Fill="{TemplateBinding BorderBrush}"
                                            Stretch="Fill" />
                                        <Path
                                            Width="26"
                                            Height="13"
                                            Margin="0,-1,0,1"
                                            Data="F1 M -1.04904e-005,0L 13,13L 26,0L -1.04904e-005,0 Z "
                                            Fill="{TemplateBinding Background}"
                                            Stretch="Fill" />
                                    </Grid>
                                </Grid>
                            </ContentControl>
                        </Canvas>
                    </dxcop:FlyoutAdornerContentControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\FlyoutGeneric.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\TouchNavigatorGeneric.xaml-->

    <!-- Customization -->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\TouchNavigatorGeneric.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\TileNavPaneGeneric.xaml-->


    <!-- ScrolllaleControl -->


    <!-- TileSelectorItem -->
    <ControlTemplate x:Key="{dxcot:LWKey TileNavPaneElements.TileSelectorItemTemplate}" TargetType="dxnav:TileSelectorItem">
        <Grid Width="{Binding Path=ActualWidth, ElementName=sizeManager}" Height="{Binding Path=ActualHeight, ElementName=sizeManager}">
            <dx:DXBorder
                x:Name="Border"
                Margin="{TemplateBinding ActualSelectionPadding}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                EnableDPICorrection="False">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <dxnavi:TileButtonControl
                        x:Name="PART_Button"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        AllowGlyphTheming="{TemplateBinding AllowGlyphTheming}"
                        Background="{TemplateBinding CalculatedBackground}"
                        Content="{TemplateBinding ActualTileContent}"
                        ContentTemplate="{TemplateBinding ActualTileContentTemplate}"
                        ContentTemplateSelector="{TemplateBinding ActualTileContentTemplateSelector}"
                        Foreground="{TemplateBinding CalculatedForeground}"
                        Glyph="{TemplateBinding TileGlyph}"
                        HorizontalGlyphAlignment="{TemplateBinding HorizontalTileGlyphAlignment}"
                        VerticalGlyphAlignment="{TemplateBinding VerticalTileGlyphAlignment}">
                        <dxnavi:TileButtonControl.Resources>
                            <dxnavi:TileSizeManager
                                x:Key="SizeManager"
                                x:Name="sizeManager"
                                Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}"
                                Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}" />
                        </dxnavi:TileButtonControl.Resources>
                    </dxnavi:TileButtonControl>
                    <dxnavi:TileBarItemArrowControl
                        x:Name="PART_ArrowButton"
                        Grid.Column="1"
                        Width="31"
                        Background="{TemplateBinding CalculatedBackground}"
                        Foreground="{TemplateBinding CalculatedForeground}"
                        IsChecked="{TemplateBinding IsChecked}"
                        Visibility="{Binding IsFlyoutButtonVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
                </Grid>
            </dx:DXBorder>
            <dx:DXBorder
                x:Name="PART_Shadow"
                Margin="{TemplateBinding SelectionPadding}"
                Background="Black"
                EnableDPICorrection="False"
                IsHitTestVisible="False"
                Opacity="0.16"
                Visibility="Collapsed">
                <dx:DXBorder.RenderTransform>
                    <TranslateTransform x:Name="ShadowTransform" Y="{Binding ActualHeight, ElementName=Border}" />
                </dx:DXBorder.RenderTransform>
                <dx:DXBorder.OpacityMask>
                    <LinearGradientBrush EndPoint="0,1">
                        <GradientStop Offset="0.0" Color="#FF000000" />
                        <GradientStop Offset="0.5" Color="Transparent" />
                    </LinearGradientBrush>
                </dx:DXBorder.OpacityMask>
            </dx:DXBorder>
            <dx:DXBorder
                x:Name="selection"
                BorderBrush="{TemplateBinding CalculatedBackground}"
                BorderThickness="2"
                IsHitTestVisible="False"
                Opacity="0" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="MouseOver" />
                    <VisualState x:Name="Pressed" />
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0.35" Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Normal" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="SelectionStates">
                    <VisualState x:Name="EmptySelectedState" />
                    <VisualState x:Name="Unselected" />
                    <VisualState x:Name="Selected">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="selection" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="ShadowStates">
                    <VisualState x:Name="ShadowHidden" />
                    <VisualState x:Name="ShadowVisible">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Visible" Storyboard.TargetName="PART_Shadow" Storyboard.TargetProperty="Visibility" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <!-- TileBar -->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\TileNavPaneGeneric.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic.xaml-->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\generic.xaml-->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\Themes\generic.xaml-->

    <!--#region c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\BreadcrumbControlGeneric.xaml-->
    <DataTemplate x:Key="SubItemTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <dx:DXImage
                x:Name="PART_Image"
                Width="16"
                Height="16"
                Margin="0,0,10,0"
                Source="{Binding Image}" />
            <TextBlock
                x:Name="PART_Text"
                Grid.Column="1"
                VerticalAlignment="Center"
                Text="{Binding Text}"
                TextTrimming="CharacterEllipsis" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="SubItemWithoutImagesTemplate">
        <TextBlock
            x:Name="PART_Text"
            VerticalAlignment="Center"
            Text="{Binding Text}"
            TextTrimming="CharacterEllipsis" />
    </DataTemplate>
    <DataTemplate x:Key="PathEditItemTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <dx:DXImage
                x:Name="PART_Image"
                Width="16"
                Height="16"
                Margin="0,0,4,0"
                Source="{Binding Image}" />
            <TextBlock
                x:Name="PART_Text"
                Grid.Column="1"
                VerticalAlignment="Center"
                Text="{Binding Path}"
                TextTrimming="CharacterEllipsis" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="PathEditItemWithoutImagesTemplate">
        <TextBlock
            x:Name="PART_Text"
            VerticalAlignment="Center"
            Text="{Binding Path}"
            TextTrimming="CharacterEllipsis" />
    </DataTemplate>
    <SolidColorBrush x:Key="{dxcot:LWKey BreadcrumbControl.PopupBackground}" Color="Transparent" />

    <DataTemplate x:Key="SelectedItemTemplate">
        <TextBlock
            x:Name="PART_Text"
            VerticalAlignment="Center"
            Text="{Binding Text}"
            TextTrimming="CharacterEllipsis"
            Visibility="{Binding Text, Converter={StaticResource ObjectToVisibilityConverter}}" />
    </DataTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey BreadcrumbControl.SelectedItemImageTemplate}" TargetType="{x:Type dxcoi:BreadcrumbSelectedItemImage}">
        <dx:DXImage Width="16" Height="16" Source="{TemplateBinding ImageSource}" />
    </ControlTemplate>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.SelectedItemImageStyleBase}" TargetType="{x:Type dxcoi:BreadcrumbSelectedItemImage}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey BreadcrumbControl.SelectedItemImageTemplate}}" />
        <Setter Property="Margin" Value="4,2,2,2" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="20,13,13,13" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter Property="Margin" Value="20,13,13,13" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.SelectedItemImageStyle}" BasedOn="{StaticResource {dxcot:LWKey BreadcrumbControl.SelectedItemImageStyleBase}}" TargetType="{x:Type dxcoi:BreadcrumbSelectedItemImage}" />

    <ControlTemplate x:Key="{dxcot:LWKey BreadcrumbControl.ItemsControlTemplate}" TargetType="{x:Type dxcoi:BreadcrumbItemsControl}">
        <Grid MinWidth="60">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <dxcoi:BreadcrumbRootItem
                x:Name="PART_RootItem"
                PopupHeight="{TemplateBinding PopupHeight}"
                PopupMaxHeight="{TemplateBinding PopupMaxHeight}"
                PopupMaxWidth="{TemplateBinding PopupMaxWidth}"
                PopupMinHeight="{TemplateBinding PopupMinHeight}"
                PopupMinWidth="{TemplateBinding PopupMinWidth}"
                PopupWidth="{TemplateBinding PopupWidth}"
                PredefinedSubItems="{TemplateBinding PredefinedItemsSource}"
                ShowPredefinedSubItems="{TemplateBinding ShowPredefinedItemsSource}"
                Style="{DynamicResource {dxcot:LWKey BreadcrumbControl.RootItemStyle}}"
                SubItemTemplate="{TemplateBinding SubItemTemplate}"
                SubItemTemplateSelector="{TemplateBinding SubItemTemplateSelector}"
                SubItems="{TemplateBinding CollapsedSource}" />
            <dxcoi:BreadcrumbItemsPanel x:Name="PART_ItemsHost" Grid.Column="1" IsItemsHost="True" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowBorder" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxt:LWKey ThemeColors.BlackForegroundColor}}" />
            </Trigger>
            <Trigger Property="RotateArrow" Value="True">
                <Setter TargetName="PART_RootItem" Property="ArrowGlyphTransform">
                    <Setter.Value>
                        <RotateTransform Angle="-180" CenterX="0.5" CenterY="0.5" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.ItemsControlStyleBase}" TargetType="{x:Type dxcoi:BreadcrumbItemsControl}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey BreadcrumbControl.ItemsControlTemplate}}" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {dxcot:LWKey BreadcrumbControl.ItemStyle}}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Style.Triggers>
            <Trigger Property="ShowBorder" Value="False">
                <Setter Property="Margin" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxcot:LWKey BreadcrumbControl.ArrowTemplate}" TargetType="{x:Type dxcoi:BreadcrumbArrowControl}">
        <dx:DXBorder
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding CornerRadius}">
            <Decorator Width="8" Height="8">
                <Path
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{TemplateBinding ArrowGeometry}"
                    Fill="{TemplateBinding Foreground}"
                    LayoutTransform="{TemplateBinding GlyphTransform}" />
            </Decorator>
        </dx:DXBorder>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxcot:LWKey BreadcrumbControl.ButtonStyleTemplate}" TargetType="{x:Type dxcoi:BreadcrumbButton}">
        <dx:DXBorder
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding CornerRadius}">
            <dx:MeasurePixelSnapper SnapperType="Around">
                <ContentPresenter Content="{Binding}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
            </dx:MeasurePixelSnapper>
        </dx:DXBorder>
    </ControlTemplate>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.SubItemButtonStyle}" BasedOn="{StaticResource {dxcot:LWKey BreadcrumbControl.ButtonStyleBase}}" TargetType="{x:Type dxcoi:BreadcrumbButton}">
        <Setter Property="Padding" Value="{dx:LWThickness '4, Win11=(3,1)'}" />
        <Setter Property="CornerRadius" Value="{dx:LWCornerRadius '0, Win11=4'}" />
    </Style>

    <ControlTemplate x:Key="{dxcot:LWKey BreadcrumbControl.RootItemTemplate}" TargetType="{x:Type dxcoi:BreadcrumbRootItem}">
        <Grid Background="{TemplateBinding Background}">
            <dxcoi:BreadcrumbArrowControl
                x:Name="PART_Arrow"
                Grid.Column="1"
                BorderBrush="{TemplateBinding BorderBrush}"
                Foreground="{TemplateBinding Foreground}"
                GlyphTransform="{TemplateBinding ArrowGlyphTransform}"
                Style="{DynamicResource {dxcot:LWKey BreadcrumbControl.RootItemArrowStyle}}"
                Visibility="{TemplateBinding ShowArrow, Converter={StaticResource VisibleIfTrueConverter}}" />
            <dxb:PopupControlContainer
                x:Name="PART_Popup"
                Width="{TemplateBinding PopupWidth}"
                MaxHeight="{TemplateBinding PopupMaxHeight}"
                Placement="Bottom">
                <Grid Background="{DynamicResource {dxcot:LWKey BreadcrumbControl.PopupBackground}}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <dxcoi:BreadcrumbSubItemsControl
                        x:Name="PART_SubItemsContainer"
                        ItemTemplate="{TemplateBinding SubItemTemplate}"
                        ItemTemplateSelector="{TemplateBinding SubItemTemplateSelector}"
                        ItemsSource="{TemplateBinding SubItems}"
                        Style="{DynamicResource {dxcot:LWKey BreadcrumbControl.SubItemsControlStyle}}" />
                    <Separator x:Name="PART_SubItemsSeparator" Grid.Row="1" Margin="1,0" />
                    <dxcoi:BreadcrumbSubItemsControl
                        x:Name="PART_PredefinedSubItemsContainer"
                        Grid.Row="2"
                        ItemTemplate="{TemplateBinding SubItemTemplate}"
                        ItemTemplateSelector="{TemplateBinding SubItemTemplateSelector}"
                        ItemsSource="{TemplateBinding PredefinedSubItems}"
                        Style="{DynamicResource {dxcot:LWKey BreadcrumbControl.SubItemsControlStyle}}"
                        Visibility="{TemplateBinding ShowPredefinedSubItems, Converter={StaticResource VisibleIfTrueConverter}}" />
                </Grid>
            </dxb:PopupControlContainer>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPopupOpen" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverBorderBrush}}" />
                <Setter TargetName="PART_Arrow" Property="GlyphTransform">
                    <Setter.Value>
                        <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverBorderBrush}}" />
            </Trigger>
            <Trigger Property="IsArrowMouseOver" Value="True">
                <Setter TargetName="PART_Arrow" Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.ArrowHoverBackground}}" />
            </Trigger>
            <Trigger Property="IsArrowPressed" Value="True">
                <Setter TargetName="PART_Arrow" Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.ArrowPressedBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.PressedForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.PressedBorderBrush}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.RootItemStyleBase}" TargetType="{x:Type dxcoi:BreadcrumbRootItem}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey BreadcrumbControl.RootItemTemplate}}" />
    </Style>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.RootItemStyle}" BasedOn="{StaticResource {dxcot:LWKey BreadcrumbControl.RootItemStyleBase}}" TargetType="{x:Type dxcoi:BreadcrumbRootItem}" />

    <ControlTemplate x:Key="{dxcot:LWKey BreadcrumbControl.SubItemsControlTemplate}" TargetType="{x:Type dxcoi:BreadcrumbSubItemsControl}">
        <dx:DXBorder
            x:Name="PART_DropDown"
            MinWidth="{TemplateBinding ActualWidth}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ScrollViewer Padding="{TemplateBinding Padding}" VerticalScrollBarVisibility="Auto">
                <ItemsPresenter />
            </ScrollViewer>
        </dx:DXBorder>
    </ControlTemplate>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.SubItemsControlStyleBase}" TargetType="{x:Type dxcoi:BreadcrumbSubItemsControl}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey BreadcrumbControl.SubItemsControlTemplate}}" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {dxcot:LWKey BreadcrumbControl.SubItemStyle}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxcoi:BreadcrumbSubItemsPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.SubItemsControlStyle}" BasedOn="{StaticResource {dxcot:LWKey BreadcrumbControl.SubItemsControlStyleBase}}" TargetType="{x:Type dxcoi:BreadcrumbSubItemsControl}" />

    <ControlTemplate x:Key="{dxcot:LWKey BreadcrumbControl.SubItemTemplate}" TargetType="{x:Type dxcoi:BreadcrumbSubItem}">
        <dxcoi:BreadcrumbButton
            x:Name="PART_Button"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            ContentTemplate="{TemplateBinding ButtonContentTemplate}"
            ContentTemplateSelector="{TemplateBinding ButtonContentTemplateSelector}"
            Foreground="{TemplateBinding Foreground}"
            Style="{DynamicResource {dxcot:LWKey BreadcrumbControl.SubItemButtonStyle}}" />
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbItem.HoverBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey BreadcrumbItem.HoverForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey BreadcrumbItem.HoverBorderBrush}}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsPressed, ElementName=PART_Button}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey BreadcrumbItem.PressedForeground}}" />
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbItem.PressedBackground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey BreadcrumbItem.PressedBorderBrush}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.SubItemStyleBase}" TargetType="{x:Type dxcoi:BreadcrumbSubItem}">
        <Setter Property="Margin" Value="1" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey BreadcrumbControl.SubItemTemplate}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey BreadcrumbItem.Foreground}}" />
    </Style>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.SubItemStyle}" BasedOn="{StaticResource {dxcot:LWKey BreadcrumbControl.SubItemStyleBase}}" TargetType="{x:Type dxcoi:BreadcrumbSubItem}" />

    <ControlTemplate x:Key="{dxcot:LWKey BreadcrumbControl.ItemTemplate}" TargetType="{x:Type dxcoi:BreadcrumbItem}">
        <Grid Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <dxcoi:BreadcrumbButton
                x:Name="PART_Button"
                BorderBrush="{TemplateBinding BorderBrush}"
                ContentTemplate="{TemplateBinding ButtonContentTemplate}"
                ContentTemplateSelector="{TemplateBinding ButtonContentTemplateSelector}"
                Foreground="{TemplateBinding Foreground}"
                Style="{DynamicResource {dxcot:LWKey BreadcrumbControl.ItemButtonStyle}}" />
            <dxcoi:BreadcrumbArrowControl
                x:Name="PART_Arrow"
                Grid.Column="1"
                BorderBrush="{TemplateBinding BorderBrush}"
                Foreground="{TemplateBinding Foreground}"
                GlyphTransform="{TemplateBinding ArrowGlyphTransform}"
                Style="{DynamicResource {dxcot:LWKey BreadcrumbControl.ArrowStyle}}"
                Visibility="{TemplateBinding ShowArrow, Converter={StaticResource VisibleIfTrueConverter}}" />
            <dxb:PopupControlContainer
                x:Name="PART_Popup"
                Width="{TemplateBinding PopupWidth}"
                Height="{TemplateBinding PopupHeight}"
                MinWidth="{TemplateBinding PopupMinWidth}"
                MinHeight="{TemplateBinding PopupMinHeight}"
                MaxWidth="{TemplateBinding PopupMaxWidth}"
                MaxHeight="{TemplateBinding PopupMaxHeight}"
                Placement="Bottom">
                <dxcoi:BreadcrumbSubItemsControl
                    x:Name="PART_SubItemsContainer"
                    Background="{DynamicResource {dxcot:LWKey BreadcrumbControl.PopupBackground}}"
                    ItemTemplate="{TemplateBinding SubItemTemplate}"
                    ItemTemplateSelector="{TemplateBinding SubItemTemplateSelector}"
                    Style="{DynamicResource {dxcot:LWKey BreadcrumbControl.SubItemsControlStyle}}" />
            </dxb:PopupControlContainer>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPopupOpen" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverBorderBrush}}" />
                <Setter TargetName="PART_Arrow" Property="GlyphTransform">
                    <Setter.Value>
                        <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.HoverBorderBrush}}" />
            </Trigger>
            <Trigger Property="IsArrowMouseOver" Value="True">
                <Setter TargetName="PART_Arrow" Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.ArrowHoverBackground}}" />
            </Trigger>
            <Trigger Property="IsButtonMouseOver" Value="True">
                <Setter TargetName="PART_Button" Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.ButtonHoverBackground}}" />
            </Trigger>
            <Trigger Property="IsArrowPressed" Value="True">
                <Setter TargetName="PART_Arrow" Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.ArrowPressedBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.PressedForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.PressedBorderBrush}}" />
            </Trigger>
            <Trigger Property="IsButtonPressed" Value="True">
                <Setter TargetName="PART_Button" Property="Background" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.ButtonPressedBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.PressedForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey BreadcrumbSelectedItem.PressedBorderBrush}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.ItemStyleBase}" TargetType="{x:Type dxcoi:BreadcrumbItem}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey BreadcrumbControl.ItemTemplate}}" />
    </Style>

    <Style x:Key="{dxcot:LWKey BreadcrumbControl.ItemStyle}" BasedOn="{StaticResource {dxcot:LWKey BreadcrumbControl.ItemStyleBase}}" TargetType="{x:Type dxcoi:BreadcrumbItem}" />

    <!-- Default themekey values -->
    <!--#endregion c:\Work\2023.1\XPF\DevExpress.Xpf.Controls\DevExpress.Xpf.Controls\WindowsUI\Themes\Generic\BreadcrumbControlGeneric.xaml-->


    <!--#region DEFAULT STYLES-->
    <Style x:Key="Book.DefaultStyleBase" TargetType="dxco:Book">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:Book">
                    <Grid x:Name="Book">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid x:Name="OddGrid" Background="{TemplateBinding Background}">
                            <ContentControl x:Name="OddContent" />
                            <Canvas Opacity="0.7">
                                <Rectangle x:Name="PrevEvenBackShadow" Width="60">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStop Offset="0" Color="Transparent" />
                                                <GradientStop Offset="0.65" Color="#80000000" />
                                                <GradientStop Offset="1" Color="Black" />
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Canvas>
                        </Grid>
                        <Grid x:Name="EvenGrid" Background="{TemplateBinding Background}">
                            <ContentControl x:Name="EvenContent" />
                            <Canvas Opacity="0.7">
                                <Rectangle x:Name="NextOddBackShadow" Width="60">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStop Offset="0" Color="Transparent" />
                                                <GradientStop Offset="0.65" Color="#80000000" />
                                                <GradientStop Offset="1" Color="Black" />
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Canvas>
                        </Grid>
                        <Grid x:Name="NextOddGrid" Background="{TemplateBinding Background}">
                            <ContentControl x:Name="NextOddContent" />
                            <Canvas Opacity="0.7">
                                <Rectangle x:Name="NextOddForeShadow" Width="44">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStop Offset="0" Color="Black" />
                                                <GradientStop Offset="0.35" Color="White" />
                                                <GradientStop Offset="1" Color="Transparent" />
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Canvas>
                        </Grid>
                        <Grid x:Name="NextEvenGrid" Background="{TemplateBinding Background}">
                            <ContentControl x:Name="NextEvenContent" />
                        </Grid>
                        <Grid x:Name="PrevOddGrid" Background="{TemplateBinding Background}">
                            <ContentControl x:Name="PrevOddContent" />
                        </Grid>
                        <Grid x:Name="PrevEvenGrid" Background="{TemplateBinding Background}">
                            <ContentControl x:Name="PrevEvenContent" />
                            <Canvas Opacity="0.7">
                                <Rectangle x:Name="PrevEvenForeShadow" Width="44">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStop Offset="0" Color="Black" />
                                                <GradientStop Offset="0.35" Color="White" />
                                                <GradientStop Offset="1" Color="Transparent" />
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Canvas>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PositionSlider.DefaultStyleBase" TargetType="dxco:PositionSlider">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:PositionSlider">
                    <dx:DXBorder
                        Height="21"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <dx:DXBorder
                                x:Name="PART_Track"
                                Grid.ColumnSpan="3"
                                Height="{StaticResource trackHeight}"
                                Margin="5,0"
                                Background="{StaticResource ElapsedBackground}"
                                BorderBrush="Gray"
                                BorderThickness="1"
                                CornerRadius="3" />
                            <dx:DXBorder
                                Name="PART_downloadProgress"
                                Grid.ColumnSpan="3"
                                Height="{StaticResource trackHeight}"
                                Margin="{Binding ElementName=PART_Track, Path=Margin}"
                                HorizontalAlignment="Left"
                                Background="{StaticResource DownloadBackground}"
                                CornerRadius="3" />
                            <dx:DXBorder
                                x:Name="PART_ProgressTrack"
                                Grid.ColumnSpan="3"
                                Height="{StaticResource trackHeight}"
                                Margin="{Binding ElementName=PART_Track, Path=Margin}"
                                HorizontalAlignment="Left"
                                Background="{StaticResource ProgressBackground}"
                                BorderBrush="Gray"
                                BorderThickness="1"
                                CornerRadius="3" />
                            <Thumb
                                Name="PART_Thumb"
                                Grid.Column="1"
                                Opacity="0"
                                Template="{StaticResource ThumbTemplate}" />
                            <dx:DXBorder Name="PART_progress" Grid.Column="0" Height="{StaticResource trackHeight}" />
                            <dx:PopupBase
                                x:Name="RART_PopupPositionTip"
                                IsHitTestVisible="False"
                                Placement="Top"
                                VerticalOffset="2">
                                <dx:PopupBase.PopupContent>
                                    <TextBlock x:Name="PART_PopupText" Margin="2" Text="00:00:00" />
                                </dx:PopupBase.PopupContent>
                            </dx:PopupBase>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_Thumb" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PositionSliderItem.DefaultStyleBase" TargetType="dxco:PositionSliderItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:PositionSliderItem">
                    <dx:DXBorder
                        x:Name="mouseOverBackground"
                        Padding="3,2"
                        Background="{StaticResource ChapterBackground}"
                        BorderBrush="Black"
                        BorderThickness="1"
                        CornerRadius="3"
                        SnapsToDevicePixels="true">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="mouseOverBackground" Storyboard.TargetProperty="Opacity">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="0.8" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MediaSliderControl.DefaultStyleBase" TargetType="dxco:MediaSliderControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:MediaSliderControl">
                    <dx:DXBorder
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <StackPanel Orientation="Vertical">
                            <dx:DXBorder
                                x:Name="PART_ChaptersBorder"
                                Background="{StaticResource ChaptersPanelBackGround}"
                                BorderBrush="{StaticResource ChaptersPanelBorder}"
                                BorderThickness="{StaticResource ChaptersPanelBorderThickness}">
                                <ItemsPresenter Margin="3" Visibility="{TemplateBinding ChaptersVisibility}" />
                            </dx:DXBorder>
                            <dxco:PositionSlider x:Name="PART_PositionSlider" Margin="3,0" Background="Transparent" />
                        </StackPanel>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxco:ChapterPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PlayListControl.DefaultStyleBase" TargetType="dxco:PlayListControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:PlayListControl">
                    <Grid Background="White">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <dx:DXBorder
                            Grid.Row="0"
                            Background="DarkGray"
                            BorderBrush="Black"
                            BorderThickness="1"
                            CornerRadius="2,2,2,0">
                            <TextBlock Foreground="White" Text="{TemplateBinding Caption}" />
                        </dx:DXBorder>
                        <ScrollViewer Grid.Row="1">
                            <ItemsPresenter />
                        </ScrollViewer>
                        <StackPanel Grid.Row="2" HorizontalAlignment="Right" Orientation="Horizontal">
                            <Button x:Name="bRemove" Content="Remove Selected Item" />
                            <Button x:Name="bRemoveAll" Content="Remove All" />
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PlayListInPopupMediaButton.DefaultStyleBase" TargetType="dxco:PlayListInPopupMediaButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:PlayListInPopupMediaButton">
                    <Grid x:Name="grid">
                        <dx:DXBorder Padding="1" CornerRadius="3">
                            <dx:DXBorder.Background>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <GradientStop Color="#FF596372" />
                                    <GradientStop Offset="1" Color="#FF535962" />
                                    <GradientStop Offset="0.5" Color="#FF414346" />
                                </LinearGradientBrush>
                            </dx:DXBorder.Background>
                            <Grid>
                                <dx:DXBorder x:Name="NormalState" Padding="1" CornerRadius="2">
                                    <dx:DXBorder.Background>
                                        <LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
                                            <GradientStop Offset="0" Color="#FFC0D7F4" />
                                            <GradientStop Offset="1" Color="#FFE2F0FD" />
                                            <GradientStop Offset="0.531" Color="#FFDBECFF" />
                                            <GradientStop Offset="0.557" Color="#FFE4F1FF" />
                                        </LinearGradientBrush>
                                    </dx:DXBorder.Background>
                                    <dx:DXBorder CornerRadius="2">
                                        <dx:DXBorder.Background>
                                            <LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
                                                <GradientStop Offset="0" Color="#FFBED9F7" />
                                                <GradientStop Offset="1" Color="#FFD7E9FB" />
                                                <GradientStop Offset="0.531" Color="#FFA9C9F7" />
                                                <GradientStop Offset="0.531" Color="#FFC8DEF5" />
                                            </LinearGradientBrush>
                                        </dx:DXBorder.Background>
                                    </dx:DXBorder>
                                </dx:DXBorder>
                                <dx:DXBorder
                                    x:Name="MouseOverState"
                                    Padding="1"
                                    CornerRadius="2"
                                    Opacity="0">
                                    <dx:DXBorder.Background>
                                        <LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
                                            <GradientStop Offset="0" Color="#FFE0EEFF" />
                                            <GradientStop Offset="1" Color="#FFEEF6FF" />
                                            <GradientStop Offset="0.531" Color="#FFE4F1FF" />
                                            <GradientStop Offset="0.532" Color="#FFF1F8FF" />
                                        </LinearGradientBrush>
                                    </dx:DXBorder.Background>
                                    <dx:DXBorder CornerRadius="2">
                                        <dx:DXBorder.Background>
                                            <LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
                                                <GradientStop Offset="0" Color="#FFDDEDFF" />
                                                <GradientStop Offset="1" Color="#FFE4F1FF" />
                                                <GradientStop Offset="0.531" Color="#FFCCE0FD" />
                                                <GradientStop Offset="0.532" Color="#FFDCEBFB" />
                                            </LinearGradientBrush>
                                        </dx:DXBorder.Background>
                                    </dx:DXBorder>
                                </dx:DXBorder>
                                <dx:DXBorder
                                    x:Name="PressedState"
                                    Padding="1"
                                    CornerRadius="2"
                                    Opacity="0">
                                    <dx:DXBorder.Background>
                                        <LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
                                            <GradientStop Offset="0" Color="#FFC0D7F4" />
                                            <GradientStop Offset="1" Color="#FF7297C2" />
                                            <GradientStop Offset="0.531" Color="#FFA4C1E2" />
                                            <GradientStop Offset="0.813" Color="#FF84A6CA" />
                                        </LinearGradientBrush>
                                    </dx:DXBorder.Background>
                                    <dx:DXBorder CornerRadius="2">
                                        <dx:DXBorder.Background>
                                            <LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
                                                <GradientStop Offset="0" Color="#FFAAC8EA" />
                                                <GradientStop Offset="1" Color="#FF81A3D4" />
                                                <GradientStop Offset="0.17" Color="#FF9ABCEE" />
                                                <GradientStop Offset="0.919" Color="#FFADC6EA" />
                                            </LinearGradientBrush>
                                        </dx:DXBorder.Background>
                                    </dx:DXBorder>
                                </dx:DXBorder>
                                <Grid Margin="3,2">
                                    <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </Grid>
                            </Grid>
                        </dx:DXBorder>
                        <dx:PopupBase x:Name="PART_Popup" />
                        <Rectangle
                            x:Name="DisabledState"
                            Fill="Silver"
                            IsHitTestVisible="False"
                            Opacity="0"
                            RadiusX="3"
                            RadiusY="3" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverState" Storyboard.TargetProperty="Opacity" To="1" Duration="00:00:00.07" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedState" Storyboard.TargetProperty="Opacity" To="1" Duration="00:00:00" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="Opacity" To="0.35" Duration="0" />
                                        <!--<DoubleAnimation Duration="00:00:00" Storyboard.TargetName="DisabledState" Storyboard.TargetProperty="Opacity" To="0.5" />-->
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="IsMutedControl.DefaultStyleBase" TargetType="dxco:IsMutedControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:IsMutedControl">
                    <Grid
                        x:Name="grid"
                        VerticalAlignment="Center"
                        Background="Transparent"
                        Opacity="0.5">
                        <Grid
                            x:Name="speakerIcon"
                            Width="17"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            Cursor="Hand">
                            <Path
                                x:Name="speakerSymbol"
                                Width="7.42080116271973"
                                Height="14.3889999389648"
                                HorizontalAlignment="Left"
                                Cursor="Hand"
                                Data="F1 M 23.1457,26.5056L 23.1457,33.8944L 25.7913,33.8944L 28.8235,37.4722L 30.5346,37.4722L 30.5665,23.0833L 28.8995,23.0833L 25.8679,26.5056L 23.1457,26.5056 Z "
                                Fill="#FFFFFFFF"
                                Opacity="1"
                                Stretch="Fill" />
                            <Grid x:Name="volumeSymbol" Width="7.003" HorizontalAlignment="Right">
                                <Path
                                    Width="2.498"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Stretch"
                                    Data="M0.5,0.5 C0.5,0.5 1.9972935,2.7625525 1.9980025,7.1002116 C1.9987122,11.441233 0.50033337,13.889001 0.50033337,13.889001"
                                    RenderTransformOrigin="0.500145375728607,0.533999919891357"
                                    Stretch="Fill"
                                    Stroke="#FFFFFFFF"
                                    StrokeThickness="1" />
                                <Path
                                    Margin="2.40100002288818,2.36899995803833,2.7279999256134,1.62699997425079"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Data="M0.5,0.50000006 C0.5,0.50000006 1.2317207,2.1484704 1.2311721,4.9778652 C1.2306855,7.4880376 0.35717732,9.892808 0.35717732,9.892808"
                                    RenderTransformOrigin="1.42766070365906,0.511365413665771"
                                    Stretch="Fill"
                                    Stroke="#FFFFFFFF"
                                    StrokeThickness="1" />
                                <Path
                                    Width="1.542"
                                    Margin="0,4.36100006103516,0,3.46000003814697"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Stretch"
                                    Data="M0.5,0.5 C0.5,0.5 1.0412779,1.4903735 1.042276,3.1459465 C1.0429831,4.3189368 0.66544437,6.0685911 0.66544437,6.0685911"
                                    RenderTransformOrigin="2.75654864311218,0.505924940109253"
                                    Stretch="Fill"
                                    Stroke="#FFFFFFFF"
                                    StrokeThickness="1" />
                            </Grid>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="grid"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused">
                                    <Storyboard />
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="grid"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal">
                                    <Storyboard />
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="grid"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard />
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="volumeSymbol"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="volumeSymbol"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="volumeSymbol"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PlayPauseControl.DefaultStyleBase" TargetType="dxco:PlayPauseControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:PlayPauseControl">
                    <Grid
                        x:Name="grid"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="Transparent"
                        Opacity="0.5">
                        <Grid
                            x:Name="playSymbol"
                            Width="21.3229999542236"
                            Height="22.6690006256104"
                            Margin="11,3,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Opacity="1">
                            <Path
                                Width="14.5779"
                                Height="15.5432"
                                Data="F1 M 15.1997,22.542L 29.7776,14.89L 15.2707,6.99886L 15.1997,22.542 Z "
                                Fill="#FFFFFFFF"
                                Stretch="Fill"
                                Stroke="Black"
                                StrokeThickness="1" />
                        </Grid>
                        <Grid
                            x:Name="pauseSymbol"
                            Width="31.0690002441406"
                            Height="15.5432"
                            Margin="11,2,0,0"
                            Opacity="0">
                            <Rectangle
                                Width="6.666"
                                Margin="0,0,0,0"
                                HorizontalAlignment="Left"
                                Fill="#FFFFFFFF"
                                Stretch="Fill"
                                Stroke="Black"
                                StrokeThickness="1" />
                            <Rectangle
                                Width="6.667"
                                Margin="10.9729995727539,0,13.4289999008179,0"
                                HorizontalAlignment="Stretch"
                                Fill="#FFFFFFFF"
                                Stretch="Fill"
                                Stroke="Black"
                                StrokeThickness="1" />
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="grid"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused">
                                    <Storyboard />
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="playSymbol"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="pauseSymbol"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal">
                                    <Storyboard />
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="grid"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <!--<Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="buttonPressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>-->
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="playSymbol"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="pauseSymbol"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="pauseSymbol"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="playSymbol"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StopMediaButton.DefaultStyleBase" TargetType="dxco:StopMediaButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:StopMediaButton">
                    <Grid Background="Transparent">
                        <Rectangle
                            x:Name="stop"
                            Width="16"
                            Height="16"
                            Margin="3"
                            Fill="#FFFFFFFF"
                            Stretch="Fill"
                            Stroke="Black" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="stop"
                                            Storyboard.TargetProperty="Opacity"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="stop"
                                            Storyboard.TargetProperty="Opacity"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="stop"
                                            Storyboard.TargetProperty="Opacity"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard />
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FullscreenControl.DefaultStyleBase" TargetType="dxco:FullscreenControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid
                        Width="16"
                        Height="16"
                        VerticalAlignment="Center"
                        Background="Transparent">
                        <Path
                            x:Name="fullSymbol"
                            Height="14.375"
                            Margin="0,0,0,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Bottom"
                            Data="M10.181361,8.375 L12.844413,11.008244 L14.125,9.7418737 L14.125,14.375 L9.675765,14.374833 L10.906104,13.158273 L8.125,10.408315 L10.181361,8.375 z M3.9666855,8.375 L6,10.431361 L3.3667567,13.094413 L4.6331258,14.375 L0,14.375 L0.00016707927,9.925765 L1.2167276,11.156104 L3.9666855,8.375 z M9.4918737,0 L14.125,0 L14.124833,4.449235 L12.908273,3.2188957 L10.158315,6 L8.125,3.943639 L10.758244,1.2805867 L9.4918737,0 z M0,0 L4.449235,0.00016686507 L3.2188957,1.2167276 L6,3.9666855 L3.943639,6 L1.280587,3.3667567 L0,4.6331258 L0,0 z"
                            Fill="#FFFFFFFF"
                            Opacity="0.5"
                            RenderTransformOrigin="0.212389379739761,0.208695650100708"
                            Stretch="Fill"
                            Stroke="#FF000000"
                            StrokeThickness="1" />
                        <Rectangle
                            Width="14.3"
                            Height="14.3"
                            Margin="0,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            Fill="#00000000"
                            Stroke="#00000000" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Disabled" />
                                <VisualState x:Name="Normal">
                                    <Storyboard />
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="fullSymbol"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Duration="00:00:00.0010000">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked" />
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MediaManager.DefaultStyleBase" TargetType="dxco:MediaManager">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:MediaManager">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock
                                x:Name="PART_InformationText"
                                Grid.Row="1"
                                Grid.Column="1"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontSize="20"
                                Foreground="White"
                                Text="{TemplateBinding Information}" />
                            <ContentPresenter
                                x:Name="PART_MediaElementContentPresenter"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                Content="{TemplateBinding MediaElement}" />
                            <ContentPresenter
                                x:Name="PART_LeftPanelContentPresenter"
                                Grid.Row="1"
                                Grid.Column="0"
                                Content="{TemplateBinding LeftPanel}" />
                            <ContentPresenter
                                x:Name="PART_TopPanelContentPresenter"
                                Grid.Row="0"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                HorizontalAlignment="Stretch"
                                Content="{TemplateBinding TopPanel}" />
                            <ContentPresenter
                                x:Name="PART_RightPanelContentPresenter"
                                Grid.Row="1"
                                Grid.Column="2"
                                Content="{TemplateBinding RightPanel}" />
                            <ContentPresenter
                                x:Name="PART_BottomPanelContentPresenter"
                                Grid.Row="2"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                Content="{TemplateBinding BottomPanel}" />
                        </Grid>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BalanceMediaSlider.DefaultStyleBase" TargetType="dxco:BalanceMediaSlider">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:BalanceMediaSlider">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Width="{TemplateBinding Width}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock FontSize="16" Foreground="White" Text="L" />
                            <Grid Grid.Column="1" Margin="5,0" VerticalAlignment="Center">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding Slider.MinHeight}" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <TickBar
                                    Name="TopTick"
                                    Height="4"
                                    Fill="{StaticResource GlyphBrush}"
                                    Placement="Top"
                                    SnapsToDevicePixels="True"
                                    Visibility="Collapsed" />
                                <dx:DXBorder
                                    Name="TrackBackground"
                                    Grid.Row="1"
                                    Height="4"
                                    Margin="0"
                                    Background="{StaticResource LightBrush}"
                                    BorderBrush="{StaticResource NormalBorderBrush}"
                                    BorderThickness="1"
                                    CornerRadius="2" />
                                <Track Name="PART_Track" Grid.Row="1">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="Slider.DecreaseLarge" Style="{StaticResource SliderButtonStyle}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource SliderThumbStyle}" />
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="Slider.IncreaseLarge" Style="{StaticResource SliderButtonStyle}" />
                                    </Track.IncreaseRepeatButton>
                                </Track>
                                <TickBar
                                    Name="BottomTick"
                                    Grid.Row="2"
                                    Height="4"
                                    Fill="{TemplateBinding Foreground}"
                                    Placement="Bottom"
                                    SnapsToDevicePixels="True"
                                    Visibility="Collapsed" />
                            </Grid>

                            <TextBlock
                                Grid.Column="2"
                                FontSize="16"
                                Foreground="White"
                                Text="R" />
                        </Grid>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalControlPanel.DefaultStyleBase" TargetType="dxco:HorizontalControlPanel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:HorizontalControlPanel">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <dxco:MediaSliderControl ChaptersDisplayType="{TemplateBinding ChaptersDisplayType}" ChaptersVisibility="{TemplateBinding ChaptersVisibility}" />
                            <StackPanel
                                Grid.Row="1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Orientation="Horizontal">
                                <dxco:PreviousMediaButton Margin="2,1" Content="Previous" />
                                <dxco:PlayPauseControl Margin="2,1" Content="Play" />
                                <dxco:StopMediaButton Margin="2,1" Content="Stop" />
                                <dxco:NextMediaButton Margin="2,1" Content="Next" />
                                <dxco:IsMutedControl Margin="2,1" />
                                <dxco:VolumeMediaSlider Width="100" Margin="2,1" />
                                <dxco:BalanceMediaSlider Width="120" Margin="2,1" />
                                <dxco:PositionInfoButton Margin="2,1" />
                                <dxco:FullscreenControl Margin="2,1" Content="Fullscreen" />
                                <dxco:PlayListInPopupMediaButton Margin="2,1" Content="Playlist" />
                            </StackPanel>
                        </Grid>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalControlPanel.DefaultStyleBase" TargetType="dxco:VerticalControlPanel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:VerticalControlPanel">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Orientation="Vertical">
                            <dxco:PreviousMediaButton Margin="2,1" Content="Previous" />
                            <dxco:PlayPauseControl Margin="2,1" Content="Play" />
                            <dxco:StopMediaButton Margin="2,1" Content="Stop" />
                            <dxco:NextMediaButton Margin="2,1" Content="Next" />
                            <dxco:IsMutedControl Margin="2,1" HorizontalAlignment="Center" />
                            <dxco:VolumeMediaSlider Width="100" Margin="2,1" HorizontalAlignment="Center" />
                            <dxco:BalanceMediaSlider Width="120" Margin="2,1" HorizontalAlignment="Center" />
                            <dxco:PositionInfoButton Margin="2,1" />
                            <dxco:FullscreenControl Margin="2,1" Content="Fullscreen" />
                        </StackPanel>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WizardControl.DefaultStyleBase" TargetType="dxcon:WizardControl">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ContentHostTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <dx:ContentHost />
                        <dx:FooterHost Grid.Row="1" Margin="0,12,0,12" />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxcon:WizardControl">
                    <Grid>
                        <ItemsPresenter />
                        <dxi:ContentAndFooterHostPresenter
                            x:Name="PART_ContentAndFooterHostPresenter"
                            Content="{TemplateBinding ContentHost}"
                            ContentCacheMode="{TemplateBinding ContentCacheMode}"
                            FooterCacheMode="None">
                            <dxi:ContentHostPresenter.RegularContentPresenter>
                                <ContentPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    dxb:BarNameScope.IsScopeOwner="True"
                                    Content="{TemplateBinding SelectedItemContent}"
                                    ContentStringFormat="{TemplateBinding SelectedItemContentStringFormat}"
                                    ContentTemplate="{TemplateBinding SelectedItemContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding SelectedItemContentTemplateSelector}"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    KeyboardNavigation.TabIndex="2"
                                    KeyboardNavigation.TabNavigation="Local"
                                    TextBlock.Foreground="{TemplateBinding Foreground}" />
                            </dxi:ContentHostPresenter.RegularContentPresenter>
                            <dxi:ContentHostPresenter.FastContentPresenter>
                                <dxi:FastRenderPanel
                                    dxb:BarNameScope.IsScopeOwner="True"
                                    ContentCacheMode="{TemplateBinding ContentCacheMode}"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    KeyboardNavigation.TabIndex="2"
                                    KeyboardNavigation.TabNavigation="Local"
                                    TextBlock.Foreground="{TemplateBinding Foreground}" />
                            </dxi:ContentHostPresenter.FastContentPresenter>

                            <dxi:ContentAndFooterHostPresenter.RegularFooterPresenter>
                                <ContentPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    dxb:BarNameScope.IsScopeOwner="True"
                                    Content="{TemplateBinding SelectedItemFooter}"
                                    ContentStringFormat="{TemplateBinding SelectedItemFooterStringFormat}"
                                    ContentTemplate="{TemplateBinding SelectedItemFooterTemplate}"
                                    ContentTemplateSelector="{TemplateBinding SelectedItemFooterTemplateSelector}"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    KeyboardNavigation.TabIndex="3"
                                    KeyboardNavigation.TabNavigation="Local"
                                    TextBlock.Foreground="{TemplateBinding Foreground}" />
                            </dxi:ContentAndFooterHostPresenter.RegularFooterPresenter>
                        </dxi:ContentAndFooterHostPresenter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxcon:WizardControlInvisiblePanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WizardItem.DefaultStyleBase" TargetType="dxcon:WizardItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxcon:WizardItem" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Wizard.DefaultStyleBase" TargetType="{x:Type dxco:Wizard}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FooterTemplate" Value="{DynamicResource {dxcot:LWKey Wizard.FooterTemplate}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxco:Wizard">
                    <dx:DXBorder
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <dxwuii:ViewPresenter x:Name="PART_ViewPresenter" AnimationSelector="{TemplateBinding AnimationSelector}" AnimationType="{TemplateBinding AnimationType}" />
                            <Grid Grid.Row="1" Visibility="{Binding IsFooterVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <dxco:WizardFooterSeparator />
                                <dxcop:NonLogicalContentControl
                                    Grid.Row="1"
                                    Content="{Binding}"
                                    ContentTemplate="{TemplateBinding FooterTemplate}"
                                    Style="{StaticResource ButtonsContainerStyle}" />
                            </Grid>
                        </Grid>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey Wizard.BorderBrush}}" />
    </Style>
    <Style x:Key="WizardPage.DefaultStyleBase" BasedOn="{StaticResource WizardPageBase}" TargetType="{x:Type dxco:WizardPage}">
        <Setter Property="ShowSideContent" Value="False" />
    </Style>
    <Style x:Key="WelcomeWizardPage.DefaultStyleBase" BasedOn="{StaticResource WizardPageBase}" TargetType="{x:Type dxco:WelcomeWizardPage}" />
    <Style x:Key="CompletionWizardPage.DefaultStyleBase" BasedOn="{StaticResource WizardPageBase}" TargetType="{x:Type dxco:CompletionWizardPage}" />
    <Style x:Key="WizardFooterSeparator.DefaultStyleBase" BasedOn="{dx:TargetStaticResource Separator.DefaultStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/StandardControls/StandardControls.xaml'}}" TargetType="dxco:WizardFooterSeparator">
        <Setter Property="Margin" Value="0,0,0,2" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="0,0,0,14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="WizardHeaderSeparator.DefaultStyleBase" BasedOn="{dx:TargetStaticResource Separator.DefaultStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/StandardControls/StandardControls.xaml'}}" TargetType="dxco:WizardHeaderSeparator" />
    <Style x:Key="WizardButton.DefaultStyleBase" BasedOn="{dx:TargetStaticResource Button.DefaultStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/StandardControls/StandardControls.xaml'}}" TargetType="{x:Type dxco:WizardButton}">
        <Setter Property="MinWidth" Value="65" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Margin" Value="6,0,0,0" />
    </Style>
    <Style x:Key="FadingButton.DefaultStyleBase" TargetType="{x:Type dxwuii:FadingButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey WindowsUIElements.FadingButtonTemplate}}" />
    </Style>
    <Style x:Key="FlipView.DefaultStyleBase" TargetType="{x:Type dxwui:FlipView}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey WindowsUIElements.FlipViewTemplate}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxwuii:FlipPanel ItemCacheMode="{Binding RelativeSource={RelativeSource AncestorType=dxwui:FlipView}, Path=ItemCacheMode}" ItemSizeMode="{Binding ItemSizeMode, RelativeSource={RelativeSource AncestorType=dxwui:FlipView}}" Orientation="{Binding Orientation, RelativeSource={RelativeSource AncestorType=dxwui:FlipView}}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="3" />
    </Style>
    <Style x:Key="FlipViewItem.DefaultStyleBase" TargetType="{x:Type dxwui:FlipViewItem}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey WindowsUIElements.FlipViewItemTemplate}}" />
    </Style>
    <Style x:Key="NavigationHeaderControl.DefaultStyleBase" TargetType="{x:Type dxwuii:NavigationHeaderControl}">
        <Setter Property="Template" Value="{StaticResource DefaultHeaderControlTemplate}" />
        <Setter Property="FontSize" Value="30" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="PageView.DefaultStyleBase" TargetType="{x:Type dxwui:PageView}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey PageViewElements.Template}}" />
        <Setter Property="TemplateRight" Value="{DynamicResource {dxcot:LWKey PageViewElements.TemplateRight}}" />
        <Setter Property="TemplateLeft" Value="{DynamicResource {dxcot:LWKey PageViewElements.TemplateLeft}}" />
        <Setter Property="TemplateTop" Value="{DynamicResource {dxcot:LWKey PageViewElements.Template}}" />
        <Setter Property="TemplateBottom" Value="{DynamicResource {dxcot:LWKey PageViewElements.TemplateBottom}}" />
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxcot:LWKey PageViewElements.ItemsPanel}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey PageViewElements.Background}}" />
        <Setter Property="Padding" Value="40,30,40,20" />
    </Style>
    <Style x:Key="PageViewItem.DefaultStyleBase" TargetType="{x:Type dxwui:PageViewItem}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey PageViewElements.ItemTemplate}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey PageViewElements.HeaderMargin}}" />
    </Style>
    <Style x:Key="SlideView.DefaultStyleBase" TargetType="{x:Type dxwui:SlideView}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey SlideViewElements.Template}}" />
        <Setter Property="ItemsPanel" Value="{StaticResource SlideViewDefaultPanel}" />
        <Setter Property="Padding" Value="40,30,40,0" />
        <Setter Property="dx:ScrollViewerTouchBehavior.IsEnabled" Value="True" />
    </Style>
    <Style x:Key="SlideViewItem.DefaultStyleBase" TargetType="{x:Type dxwui:SlideViewItem}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey SlideViewElements.ItemTemplate}}" />
        <Setter Property="InteractiveHeaderTemplate" Value="{DynamicResource {dxcot:LWKey SlideViewElements.InteractiveHeader}}" />
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="SlideViewItemHeader.DefaultStyleBase" TargetType="{x:Type dxwuii:SlideViewItemHeader}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey SlideViewElements.ItemHeaderTemplate}}" />
        <Setter Property="FontSize" Value="16" />

    </Style>
    <Style x:Key="ViewPresenter.DefaultStyleBase" TargetType="dxwuii:ViewPresenter">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="DefaultStoryboard">
            <Setter.Value>
                <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(dxwuii:ViewPresenter.NewContent).(UIElement.Opacity)" To="1" Duration="00:00:00.50" />
                    <DoubleAnimation Storyboard.TargetProperty="(dxwuii:ViewPresenter.OldContent).(UIElement.Opacity)" To="0" Duration="00:00:00.50" />
                </Storyboard>
            </Setter.Value>
        </Setter>
        <Setter Property="Storyboards">
            <Setter.Value>
                <dxwuii:StoryboardCollection>
                    <Storyboard dxwuii:ViewPresenter.StoryboardName="FromRight">
                        <DoubleAnimation Storyboard.TargetProperty="(dxwuii:ViewPresenter.NewContent).(UIElement.Opacity)" To="1" Duration="0" />
                        <DoubleAnimation Storyboard.TargetProperty="OldContentTranslateX" To="-1" Duration="00:00:00.50" />
                        <DoubleAnimation Storyboard.TargetProperty="NewContentTranslateX" To="0" Duration="00:00:00.50" />
                    </Storyboard>
                    <Storyboard dxwuii:ViewPresenter.StoryboardName="FromLeft">
                        <DoubleAnimation Storyboard.TargetProperty="(dxwuii:ViewPresenter.NewContent).(UIElement.Opacity)" To="1" Duration="0" />
                        <DoubleAnimation Storyboard.TargetProperty="OldContentTranslateX" To="1" Duration="00:00:00.50" />
                        <DoubleAnimation Storyboard.TargetProperty="NewContentTranslateX" To="0" Duration="00:00:00.50" />
                    </Storyboard>
                    <Storyboard dxwuii:ViewPresenter.StoryboardName="FromBottom">
                        <DoubleAnimation Storyboard.TargetProperty="(dxwuii:ViewPresenter.NewContent).(UIElement.Opacity)" To="1" Duration="0" />
                        <DoubleAnimation Storyboard.TargetProperty="OldContentTranslateY" To="-1" Duration="00:00:00.50" />
                        <DoubleAnimation Storyboard.TargetProperty="NewContentTranslateY" To="0" Duration="00:00:00.50" />
                    </Storyboard>
                    <Storyboard dxwuii:ViewPresenter.StoryboardName="FromTop">
                        <DoubleAnimation Storyboard.TargetProperty="(dxwuii:ViewPresenter.NewContent).(UIElement.Opacity)" To="1" Duration="0" />
                        <DoubleAnimation Storyboard.TargetProperty="OldContentTranslateY" To="1" Duration="00:00:00.50" />
                        <DoubleAnimation Storyboard.TargetProperty="NewContentTranslateY" To="0" Duration="00:00:00.50" />
                    </Storyboard>
                    <Storyboard dxwuii:ViewPresenter.StoryboardName="FadeRight">
                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(dxwuii:ViewPresenter.NewContent).(UIElement.Opacity)">
                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                            <SplineDoubleKeyFrame KeyTime="00:00:00.400" Value="1" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimation BeginTime="00:00:00" Storyboard.TargetProperty="NewContentTranslateX" From="1" To="0" Duration="00:00:00.500">
                            <DoubleAnimation.EasingFunction>
                                <CubicEase EasingMode="EaseOut" />
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(dxwuii:ViewPresenter.OldContent).(UIElement.Opacity)">
                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                            <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="0" />
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                    <Storyboard dxwuii:ViewPresenter.StoryboardName="FadeLeft">
                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(dxwuii:ViewPresenter.NewContent).(UIElement.Opacity)">
                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                            <SplineDoubleKeyFrame KeyTime="00:00:00.400" Value="1" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimation BeginTime="00:00:00" Storyboard.TargetProperty="NewContentTranslateX" From="-1" To="0" Duration="00:00:00.500">
                            <DoubleAnimation.EasingFunction>
                                <CubicEase EasingMode="EaseOut" />
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(dxwuii:ViewPresenter.OldContent).(UIElement.Opacity)">
                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                            <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="0" />
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </dxwuii:StoryboardCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxwuii:ViewPresenter">
                    <Grid>
                        <ContentPresenter
                            x:Name="PART_CurrentView"
                            dxb:BarNameScope.IsScopeOwner="True"
                            Content="{x:Null}"
                            ContentTemplate="{x:Null}"
                            ContentTemplateSelector="{x:Null}" />
                        <ContentPresenter
                            x:Name="PART_PreviousView"
                            dxb:BarNameScope.IsScopeOwner="True"
                            Content="{x:Null}"
                            ContentTemplate="{x:Null}"
                            ContentTemplateSelector="{x:Null}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NavigationFrame.DefaultStyleBase" TargetType="{x:Type dxwui:NavigationFrame}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxwui:NavigationFrame}">
                    <dx:DXBorder
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <dxwuii:ViewPresenter
                            AnimationDelay="{TemplateBinding AnimationDelay}"
                            AnimationDirection="{TemplateBinding AnimationDirection}"
                            AnimationSelector="{TemplateBinding AnimationSelector}"
                            AnimationSpeedRatio="{TemplateBinding AnimationSpeedRatio}"
                            AnimationType="{TemplateBinding AnimationType}"
                            Content="{TemplateBinding Content}" />
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="AllowMerging" Value="{x:Null}" />
    </Style>
    <Style x:Key="PageAdornerControl.DefaultStyleBase" TargetType="{x:Type dxwui:PageAdornerControl}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey WindowsUIElements.PageAdornerControlTemplate}}" />
    </Style>
    <Style x:Key="AppBar.DefaultStyleBase" TargetType="{x:Type dxwui:AppBar}">
        <Setter Property="ItemsPanel" Value="{StaticResource AppBarPanel}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxwui:AppBar}">
                    <dx:DXBorder
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <dxwuii:AppBarPanel Alignment="{TemplateBinding Alignment}">
                            <dxwui:AppBarBackButton x:Name="PART_BackButton" IsCompact="{TemplateBinding IsCompact}" Visibility="Collapsed" />
                            <Grid>
                                <dxef:FlyoutControl x:Name="PART_Flyout" Padding="0" FollowTarget="False" />
                                <Canvas x:Name="PART_EffectsLayer" HorizontalAlignment="Stretch" />
                                <ItemsPresenter x:Name="PART_ItemsPresenter" />
                            </Grid>
                            <dxwui:AppBarExitButton x:Name="PART_ExitButton" IsCompact="{TemplateBinding IsCompact}" Visibility="Collapsed" />
                        </dxwuii:AppBarPanel>
                        <dx:DXBorder.Resources>
                            <Storyboard x:Key="StoryboardMoveAppbar">
                                <DoubleAnimation Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut" Exponent="4" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </dx:DXBorder.Resources>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey AppBarElements.Background}}" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="ClipToBounds" Value="True" />
    </Style>
    <Style x:Key="AppBarButton.DefaultStyleBase" BasedOn="{StaticResource AppBarButtonStyle}" TargetType="{x:Type dxwui:AppBarButton}" />
    <Style x:Key="AppBarToggleButton.DefaultStyleBase" BasedOn="{StaticResource AppBarButtonStyle}" TargetType="{x:Type dxwui:AppBarToggleButton}" />
    <Style x:Key="AppBarSeparator.DefaultStyleBase" TargetType="dxwui:AppBarSeparator">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey AppBarElements.AppBarSeparatorTemplate}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="AppBarBackButton.DefaultStyleBase" BasedOn="{StaticResource AppBarButtonStyle}" TargetType="dxwui:AppBarBackButton">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.BackGlyph}}" />
        <Setter Property="Label" Value="Back" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>
    <Style x:Key="AppBarExitButton.DefaultStyleBase" BasedOn="{StaticResource AppBarButtonStyle}" TargetType="dxwui:AppBarExitButton">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.ExitGlyph}}" />
        <Setter Property="Label" Value="Exit" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>
    <Style x:Key="AppBarTileButton.DefaultStyleBase" TargetType="dxwui:AppBarTileButton">
        <Setter Property="Margin" Value="20" />
        <Setter Property="Width" Value="166" />
        <Setter Property="Height" Value="98" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey AppBarElements.AppBarTileButtonBackground}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey AppBarElements.AppBarTileButtonTemplate}}" />
        <Setter Property="FontSize" Value="14" />
    </Style>
    <Style x:Key="AppBarTileButtonBorder.DefaultStyleBase" TargetType="dxwuii:AppBarTileButtonBorder">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey AppBarElements.AppBarTileBorderButtonTemplate}}" />
    </Style>
    <Style x:Key="AppBarTileButtonArrowBorder.DefaultStyleBase" TargetType="dxwuii:AppBarTileButtonArrowBorder">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey AppBarElements.AppBarTileDropDownButtonTemplate}}" />
    </Style>
    <Style x:Key="NavigationPage.DefaultStyleBase" TargetType="{x:Type dxwui:NavigationPage}">
        <Setter Property="Template" Value="{StaticResource NavigationPageDefaultTemplate}" />
    </Style>
    <Style x:Key="CommandButton.DefaultStyleBase" BasedOn="{StaticResource commandButtonStyle}" TargetType="dxwui:CommandButton">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template" Value="{StaticResource CommandButtonTemplate}" />
        <Setter Property="dxb:ImageColorizer.Color" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.NormalForeColor}}" />
    </Style>
    <Style x:Key="BackButton.DefaultStyleBase" BasedOn="{StaticResource commandButtonStyle}" TargetType="dxwuii:BackButton">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.BackGlyph}}" />
    </Style>
    <Style x:Key="ForwardButton.DefaultStyleBase" BasedOn="{StaticResource commandButtonStyle}" TargetType="dxwuii:ForwardButton">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxcot:LWKey CommandButtonElements.ForwardGlyph}}" />
    </Style>
    <Style x:Key="WinUIMessageBox.DefaultStyleBase" TargetType="{x:Type dxwui:WinUIMessageBox}">
        <Setter Property="Template" Value="{StaticResource DXMessageBoxTemplate}" />
        <Setter Property="FocusManager.IsFocusScope" Value="True" />
    </Style>
    <Style x:Key="WinUIDialogWindow.DefaultStyleBase" TargetType="{x:Type dxwui:WinUIDialogWindow}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey MessageBoxElements.WindowBackground}}" />
        <Setter Property="Template" Value="{StaticResource WinUIDialogWindowTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey MessageBoxElements.Foreground}}" />
        <Setter Property="CommandButtonStyle">
            <Setter.Value>
                <Style TargetType="Button">
                    <Setter Property="MinWidth" Value="65" />
                    <Setter Property="MinHeight" Value="22" />
                    <Setter Property="Margin" Value="6,0,0,0" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CommandButtonsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel
                        Margin="0,18,0,0"
                        HorizontalAlignment="Right"
                        Focusable="False"
                        Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TitleStyle">
            <Setter.Value>
                <Style TargetType="ContentControl">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="VerticalContentAlignment" Value="Stretch" />
                    <Setter Property="IsTabStop" Value="False" />
                    <Setter Property="Focusable" Value="False" />
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBox
                                    Focusable="False"
                                    IsTabStop="False"
                                    Style="{StaticResource titleStyle}"
                                    Text="{Binding Mode=OneWay}" />
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentStyle">
            <Setter.Value>
                <Style TargetType="FrameworkElement">
                    <Setter Property="Margin" Value="0,8" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                </Style>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="HasContent" Value="False">
                <Setter Property="Template" Value="{StaticResource WinUIDialogWindowTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerMenuToggleStateButton.DefaultStyleBase" TargetType="{x:Type dxwui:HamburgerMenuToggleStateButton}">
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonInlineBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonInlineForegroundBrush}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.ToggleStateButtonPadding}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.MenuToggleStateButtonTemplate}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxcot:LWKey HamburgerMenuSvgPalette.SvgPaletteInMenu}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsInFlyout" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonInlineHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonInlineHoverForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsInFlyout" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonInlinePressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonInlinePressedForegroundBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsInFlyout" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonFlyoutBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonFlyoutForegroundBrush}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsInFlyout" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonFlyoutHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonFlyoutHoverForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsInFlyout" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonFlyoutPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonFlyoutPressedForegroundBrush}}" />
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonInlineBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ToggleStateButtonInlineForegroundBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerMenuNavigationButton.DefaultStyleBase" TargetType="{x:Type dxwui:HamburgerMenuNavigationButton}">
        <Setter Property="MinHeight" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.DefaultItemHeight}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
        <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemRightForegroundBrush}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.NavigationItemPadding}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.NavigationButtonTemplate}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SelectionIndicatorBrush" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectionIndicatorBackgroundBrush}}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverRightForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedRightForegroundBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedRightForegroundBrush}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverRightForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedRightForegroundBrush}}" />
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemRightForegroundBrush}}" />
            </DataTrigger>
            <Trigger Property="dxwuii:HamburgerMenuExtensions.MenuItemState" Value="Hidden">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerSubMenuPreviewNavigationButton.DefaultStyleBase" TargetType="{x:Type dxwui:HamburgerSubMenuPreviewNavigationButton}">
        <Setter Property="MinHeight" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.DefaultItemHeight}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
        <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemRightForegroundBrush}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.NavigationItemPadding}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SubMenuPreviewNavigationButtonTemplate}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SelectionIndicatorBrush" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectionIndicatorBackgroundBrush}}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverRightForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedRightForegroundBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedRightForegroundBrush}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverRightForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedRightForegroundBrush}}" />
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemRightForegroundBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerSubMenuNavigationButton.DefaultStyleBase" TargetType="{x:Type dxwui:HamburgerSubMenuNavigationButton}">
        <Setter Property="MinHeight" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.DefaultItemHeight}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemForegroundBrush}}" />
        <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemRightForegroundBrush}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SubMenuFlyoutItemPadding}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SubMenuNavigationButtonTemplate}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="PreviewMarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontFamily="Segoe MDL2 Assets" Text="" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectionIndicatorBrush" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemSelectionIndicatorBackgroundBrush}}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemHoverForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemHoverRightForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemPressedForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemPressedRightForegroundBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemSelectedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemSelectedForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemSelectedRightForegroundBrush}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemSelectedHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemSelectedHoverForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemSelectedHoverRightForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemSelectedPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemSelectedPressedForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemSelectedPressedRightForegroundBrush}}" />
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemForegroundBrush}}" />
                <Setter Property="RightForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutItemRightForegroundBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerSubMenuButton.DefaultStyleBase" TargetType="{x:Type dxwuii:HamburgerSubMenuButton}">
        <Setter Property="MinHeight" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.DefaultItemHeight}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.NavigationItemPadding}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SubMenuButtonTemplate}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedForegroundBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedForegroundBrush}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedForegroundBrush}}" />
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerSubMenuMoreButton.DefaultStyleBase" TargetType="{x:Type dxwuii:HamburgerSubMenuMoreButton}">
        <Setter Property="MinHeight" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.DefaultItemHeight}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.NavigationItemPadding}}" />
        <Setter Property="Content" Value="{Binding ConverterParameter=SubMenuMoreButtonText, Converter={StaticResource HamburgerMenuStringIdConverter}, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SubMenuMoreButtonTemplate}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedForegroundBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedForegroundBrush}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedHoverForegroundBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSelectedPressedForegroundBrush}}" />
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerSubMenuPane.DefaultStyleBase" TargetType="{x:Type dxwuii:HamburgerSubMenuPane}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle" />
        <Setter Property="KeyboardNavigation.ControlTabNavigation" Value="Cycle" />
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.SubMenuPaneBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.SubMenuPaneForegroundBrush}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SubMenuPaneTemplate}}" />
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxcot:LWKey HamburgerMenuSvgPalette.SvgPaletteInSubMenu}}" />
    </Style>
    <Style x:Key="HamburgerMenuHyperlinkButton.DefaultStyleBase" TargetType="{x:Type dxwui:HamburgerMenuHyperlinkButton}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="MinHeight" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.DefaultItemHeight}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.HyperlinkForegroundBrush}}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.HyperlinkItemPadding}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.HyperLinkButtonTemplate}}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" TextDecorations="Underline" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.HyperlinkHoverForegroundBrush}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.HyperlinkPressedForegroundBrush}}" />
            </Trigger>
            <Trigger Property="dxwuii:HamburgerMenuExtensions.MenuItemState" Value="Hidden">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerMenuEmptySpaceBar.DefaultStyleBase" TargetType="{x:Type dxwuii:HamburgerMenuEmptySpaceBar}">
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.EmptySpaceBarTemplate}}" />
        <Setter Property="AutomationProperties.AutomationId" Value="Expand" />
        <Setter Property="AutomationProperties.Name" Value="Expand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverBackgroundBrush}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedBackgroundBrush}}" />
            </Trigger>
            <Trigger Property="dxwuii:HamburgerMenuExtensions.MenuItemState" Value="Hidden">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerSubMenuPaneBackButton.DefaultStyleBase" TargetType="{x:Type dxwuii:HamburgerSubMenuPaneBackButton}">
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutBackButtonBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutBackButtonForegroundBrush}}" />
        <Setter Property="Content" Value="" />
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.FlyoutBackButtonPadding}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SubMenuPaneBackButtonTemplate}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutBackButtonHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutBackButtonHoverForegroundBrush}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutBackButtonPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutBackButtonPressedForegroundBrush}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutBackButtonBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.FlyoutBackButtonForegroundBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerMenuBottomBarNavigationButton.DefaultStyleBase" TargetType="{x:Type dxwui:HamburgerMenuBottomBarNavigationButton}">
        <Setter Property="MinHeight" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.DefaultItemHeight}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.BottomBarItemPadding}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.BottomBarNavigationButtonTemplate}}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemHoverForegroundBrush}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemPressedForegroundBrush}}" />
            </Trigger>
            <Trigger Property="dxwuii:HamburgerMenuExtensions.MenuItemState" Value="Hidden">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxwui:HamburgerMenu.TemplateSettings).ShowRevealHighlightEffect, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerMenuBottomBarRadioButton.DefaultStyleBase" BasedOn="{StaticResource HamburgerMenuBottomBarToggleButtonStyleBase}" TargetType="{x:Type dxwui:HamburgerMenuBottomBarRadioButton}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.BottomBarRadioButtonTemplate}}" />
    </Style>
    <Style x:Key="HamburgerMenuBottomBarCheckBox.DefaultStyleBase" BasedOn="{StaticResource HamburgerMenuBottomBarToggleButtonStyleBase}" TargetType="{x:Type dxwui:HamburgerMenuBottomBarCheckBox}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.BottomBarCheckBoxTemplate}}" />
    </Style>
    <Style x:Key="HamburgerSubMenu.DefaultStyleBase" TargetType="{x:Type dxwui:HamburgerSubMenu}">
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemForegroundBrush}}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="FlyoutHeaderPadding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.HeaderPadding}}" />
        <Setter Property="FlyoutHeaderFontSize" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.HeaderFontSize}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SubMenuTemplate}}" />
        <Style.Triggers>
            <Trigger Property="dxwuii:HamburgerMenuExtensions.MenuItemState" Value="Hidden">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerMenuBottomBarSeparator.DefaultStyleBase" TargetType="{x:Type dxwuii:HamburgerMenuBottomBarSeparator}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.BottomBarSeparatorTemplate}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.BottomBarSeparatorBrush}}" />
        <Style.Triggers>
            <Trigger Property="dxwuii:HamburgerMenuExtensions.MenuItemState" Value="Hidden">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HamburgerMenuItemSeparator.DefaultStyleBase" TargetType="{x:Type dxwui:HamburgerMenuItemSeparator}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.ItemSeparatorPadding}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.ItemSeparatorTemplate}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.ItemSeparatorBrush}}" />
        <Style.Triggers>
            <Trigger Property="dxwuii:HamburgerMenuExtensions.MenuItemState" Value="Hidden">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SplitView.DefaultStyleBase" TargetType="{x:Type dxwuii:SplitView}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="OpenPaneWidth" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SplitViewOpenPaneWidth}}" />
        <Setter Property="CompactPaneWidth" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SplitViewCompactPaneWidth}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.SplitViewTemplate}}" />
        <Setter Property="PaneSvgPalette" Value="{DynamicResource {dxcot:LWKey HamburgerMenuSvgPalette.SvgPaletteInMenu}}" />
    </Style>
    <Style x:Key="HamburgerMenu.DefaultStyleBase" TargetType="{x:Type dxwui:HamburgerMenu}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="CompactWidth" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.DefaultCompactWidth}}" />
        <Setter Property="HeaderHeight" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.DefaultHeaderHeight}}" />
        <Setter Property="HeaderPadding" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.HeaderWithIconPadding}}" />
        <Setter Property="HeaderFontSize" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.HeaderFontSize}}" />
        <Setter Property="PaneBackground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.PaneBackgroundBrush}}" />
        <Setter Property="BottomBarBackground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.BottomBarBackgroundBrush}}" />
        <Setter Property="HeaderForeground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.HeaderForegroundBrush}}" />
        <Setter Property="HorizontalHeaderBackground" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.HorizontalHeaderBackgroundBrush}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey HamburgerMenuBrushes.BackgroundBrush}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey HamburgerMenuElements.MenuTemplate}}" />
    </Style>
    <Style x:Key="MenuFlyoutItem.DefaultStyleBase" TargetType="{x:Type dxwui:MenuFlyoutItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey MenuFlyoutElements.Foreground}}" />
        <Setter Property="Margin" Value="{DynamicResource {dxcot:LWKey MenuFlyoutElements.SelectionPadding}}" />
        <Setter Property="Padding" Value="{DynamicResource {dxcot:LWKey MenuFlyoutElements.Padding}}" />
        <Setter Property="FontSize" Value="{DynamicResource {dxcot:LWKey MenuFlyoutElements.FontSize}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxwui:MenuFlyoutItem">
                    <Grid x:Name="Root" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <dx:DXBorder x:Name="HoverState" Background="{DynamicResource {dxcot:LWKey MenuFlyoutElements.SelectedBackground}}" Opacity="0" />
                        <dx:DXBorder x:Name="PressedState" Background="{DynamicResource {dxcot:LWKey MenuFlyoutElements.PressedBackground}}" Opacity="0" />
                        <dxwuii:MenuFlyoutItemContentPresenter
                            x:Name="content"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            Focusable="False"
                            Foreground="{TemplateBinding Foreground}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxcot:LWKey MenuFlyoutElements.SelectedForeground}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedState" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxcot:LWKey MenuFlyoutElements.PressedForeground}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="0.35" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuFlyoutSeparator.DefaultStyleBase" TargetType="{x:Type dxwui:MenuFlyoutSeparator}">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="20,9,20,10" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey MenuFlyoutElements.MenuFlyoutSeparatorForeground}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxwui:MenuFlyoutSeparator">
                    <Rectangle Height="1" Margin="{TemplateBinding Padding}" Fill="{TemplateBinding Foreground}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuFlyout.DefaultStyleBase" TargetType="{x:Type dxwui:MenuFlyout}">
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey MenuFlyoutElements.Background}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxwui:MenuFlyout">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <dxwuii:MenuFlyoutPresenter MaxHeight="{TemplateBinding MaxHeight}" ItemsSource="{Binding Items, RelativeSource={RelativeSource TemplatedParent}}" />
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuFlyoutPresenter.DefaultStyleBase" TargetType="{x:Type dxwuii:MenuFlyoutPresenter}">
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey MenuFlyoutElements.Background}}" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxwuii:MenuFlyoutPresenter}">
                    <ScrollViewer HorizontalScrollBarVisibility="{Binding Path=(ScrollViewer.HorizontalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}}" VerticalScrollBarVisibility="{Binding Path=(ScrollViewer.VerticalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}}">
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Flyout.DefaultStyleBase" TargetType="{x:Type dxwui:Flyout}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxwui:Flyout">
                    <dxwuii:FlyoutContentPresenter
                        Background="{TemplateBinding Background}"
                        Command="{TemplateBinding Command}"
                        CommandParameter="{TemplateBinding CommandParameter}"
                        CommandTarget="{TemplateBinding CommandTarget}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="FlyoutContentPresenter.DefaultStyleBase" TargetType="{x:Type dxwuii:FlyoutContentPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxwuii:FlyoutContentPresenter}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <dxwuii:FlyoutCommandButton
                            x:Name="PART_CommandButton"
                            HorizontalAlignment="Right"
                            Command="{TemplateBinding Command}"
                            CommandParameter="{TemplateBinding CommandParameter}"
                            CommandTarget="{TemplateBinding CommandTarget}"
                            Focusable="False"
                            Visibility="{Binding HasCommand, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
                        <ContentPresenter Grid.Row="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FlyoutCommandButton.DefaultStyleBase" TargetType="dxwuii:FlyoutCommandButton">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey WindowsUIElements.FlyoutCommandButtonTemplate}}" />
    </Style>
    <Style x:Key="FlyoutAdornerControl.DefaultStyleBase" BasedOn="{StaticResource FlyoutBaseAdornerStyle}" TargetType="dxcop:FlyoutAdornerControl" />
    <Style x:Key="FlyoutDecorator.DefaultStyleBase" TargetType="dxcop:FlyoutDecorator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxcop:FlyoutDecorator">
                    <Grid>
                        <dxcop:FlyoutAdornerControl
                            x:Name="PART_FlyoutAdornerControl"
                            Padding="0"
                            AllowMoveAnimation="False"
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            StaysOpen="True" />
                        <dxcop:FlyoutPopupControl
                            x:Name="PART_FlyoutPopupControl"
                            Padding="0"
                            AllowMoveAnimation="False"
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            StaysOpen="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="OfficeNavigationBar.DefaultStyleBase" TargetType="{x:Type dxnav:OfficeNavigationBar}">
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey NavigationBarElements.Background}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxnavi:NavigationBarItemsPanel Padding="0" Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxnav:OfficeNavigationBar">
                    <ControlTemplate.Resources>
                        <dxnavi:NavigationItemTemplateSelector x:Key="navigationItemTemplateSelector">
                            <dxnavi:NavigationItemTemplateSelector.NavigationItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Header}" />
                                </DataTemplate>
                            </dxnavi:NavigationItemTemplateSelector.NavigationItemTemplate>
                        </dxnavi:NavigationItemTemplateSelector>
                    </ControlTemplate.Resources>
                    <dx:DXBorder
                        x:Name="back"
                        Padding="{TemplateBinding Padding}"
                        VerticalAlignment="Top"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <dxef:FlyoutControl
                                x:Name="PART_FlyoutControl"
                                Padding="0"
                                AlwaysOnTop="True"
                                StaysOpen="True" />
                            <dxnavi:NavigationBarItems2Panel Content1Location="{TemplateBinding ButtonsAlignment}" ItemSpacing="{TemplateBinding ItemSpacing}">
                                <dxnavi:NavigationBarItems2Panel.Content1>
                                    <ItemsPresenter />
                                </dxnavi:NavigationBarItems2Panel.Content1>
                                <dxnavi:NavigationBarItems2Panel.Content2>
                                    <ItemsControl x:Name="PART_ButtonsItemsControl" VerticalAlignment="Center">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <dxwuii:SplitPanel ItemSizeMode="AutoSize" ItemSpacing="{Binding ItemSpacing, RelativeSource={RelativeSource AncestorType=dxnav:OfficeNavigationBar}}" Orientation="{Binding Orientation, RelativeSource={RelativeSource AncestorType=dxnav:OfficeNavigationBar}}" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </dxnavi:NavigationBarItems2Panel.Content2>
                            </dxnavi:NavigationBarItems2Panel>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CompactStates">
                                <VisualState x:Name="NonCompact" />
                                <VisualState x:Name="Compact">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="OrientationStates">
                                <VisualState x:Name="Horizontal" />
                                <VisualState x:Name="Vertical">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="VerticalAlignment">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <VerticalAlignment>Stretch</VerticalAlignment>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="HorizontalAlignment">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <HorizontalAlignment>Left</HorizontalAlignment>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_ButtonsItemsControl" Storyboard.TargetProperty="HorizontalAlignment">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <HorizontalAlignment>Center</HorizontalAlignment>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_ButtonsItemsControl" Storyboard.TargetProperty="VerticalAlignment">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <VerticalAlignment>Top</VerticalAlignment>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemSpacing" Value="10" />
    </Style>
    
    <Style x:Key="NavigationBarButton.DefaultStyleBase" TargetType="dxnav:NavigationBarButton">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey NavigationBarElements.ButtonTemplate}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="NavigationBarCustomizationButton.DefaultStyleBase" BasedOn="{StaticResource NavigationBarButton.DefaultStyleBase}" TargetType="dxnavi:NavigationBarCustomizationButton">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxcot:LWKey NavigationBarElements.CustomizationButtonContentTemplate}}" />
        <Setter Property="MinHeight" Value="16" />
    </Style>
    <Style x:Key="CustomizationArrowControl.DefaultStyleBase" TargetType="{x:Type dxnavi:CustomizationArrowControl}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey NavigationBarElements.CustomizationArrowControlTemplate}}" />
    </Style>
    <Style x:Key="CustomizationSeparatorControl.DefaultStyleBase" TargetType="{x:Type dxnavi:CustomizationSeparatorControl}">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey NavigationBarElements.CustomizationSeparatorControlTemplate}}" />
    </Style>
    <Style x:Key="NavigationBarThemeDependentValuesProvider.DefaultStyleBase" TargetType="{x:Type dxnavi:NavigationBarThemeDependentValuesProvider}">
        <Setter Property="CustomizationFormFloatSize" Value="{DynamicResource {dxcot:LWKey NavigationBarElements.CustomizationFormFloatSize}}" />
        <Setter Property="CustomizationFormMinWidth" Value="{DynamicResource {dxcot:LWKey NavigationBarElements.CustomizationFormMinWidth}}" />
        <Setter Property="CustomizationFormMinHeight" Value="{DynamicResource {dxcot:LWKey NavigationBarElements.CustomizationFormMinHeight}}" />
    </Style>
    <Style x:Key="ScrollableControl.DefaultStyleBase" TargetType="dxcop:ScrollableControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxcop:ScrollableControl">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ContentPresenter Grid.Row="1" Grid.Column="1" />
                        <dxcop:ScrollableControlButton
                            x:Name="PART_TopButton"
                            Grid.Column="1"
                            Height="20"
                            VerticalAlignment="Top"
                            ColorMode="{TemplateBinding ScrollButtonColorMode}"
                            Command="{TemplateBinding ScrollPrev}"
                            Direction="Up"
                            Visibility="Collapsed" />
                        <dxcop:ScrollableControlButton
                            x:Name="PART_BottomButton"
                            Grid.Row="2"
                            Grid.Column="1"
                            Height="20"
                            VerticalAlignment="Bottom"
                            ColorMode="{TemplateBinding ScrollButtonColorMode}"
                            Command="{TemplateBinding ScrollNext}"
                            Direction="Down"
                            Visibility="Collapsed" />
                        <dxcop:ScrollableControlButton
                            x:Name="PART_LeftButton"
                            Grid.Row="1"
                            Width="20"
                            HorizontalAlignment="Left"
                            ColorMode="{TemplateBinding ScrollButtonColorMode}"
                            Command="{TemplateBinding ScrollPrev}"
                            Direction="Left"
                            DockPanel.Dock="Left" />
                        <dxcop:ScrollableControlButton
                            x:Name="PART_RightButton"
                            Grid.Row="1"
                            Grid.Column="2"
                            Width="20"
                            HorizontalAlignment="Right"
                            ColorMode="{TemplateBinding ScrollButtonColorMode}"
                            Command="{TemplateBinding ScrollNext}"
                            Direction="Right" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="OrientationStates">
                                <VisualState x:Name="EmptyOrientationState" />
                                <VisualState x:Name="Horizontal" />
                                <VisualState x:Name="Vertical">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Collapsed" Storyboard.TargetName="PART_RightButton" Storyboard.TargetProperty="Visibility" />
                                        <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Collapsed" Storyboard.TargetName="PART_LeftButton" Storyboard.TargetProperty="Visibility" />
                                        <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Visible" Storyboard.TargetName="PART_TopButton" Storyboard.TargetProperty="Visibility" />
                                        <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Visible" Storyboard.TargetName="PART_BottomButton" Storyboard.TargetProperty="Visibility" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ScrollStates">
                                <VisualState x:Name="DefaultScroll" />
                                <VisualState x:Name="OverlappedScroll">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_RightButton" Storyboard.TargetProperty="(Grid.Column)">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <sys:Int32>1</sys:Int32>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_LeftButton" Storyboard.TargetProperty="(Grid.Column)">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <sys:Int32>1</sys:Int32>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_TopButton" Storyboard.TargetProperty="(Grid.Row)">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <sys:Int32>1</sys:Int32>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_BottomButton" Storyboard.TargetProperty="(Grid.Row)">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <sys:Int32>1</sys:Int32>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="DisabledScroll">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Collapsed" Storyboard.TargetName="PART_RightButton" Storyboard.TargetProperty="Visibility" />
                                        <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Collapsed" Storyboard.TargetName="PART_LeftButton" Storyboard.TargetProperty="Visibility" />
                                        <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Collapsed" Storyboard.TargetName="PART_TopButton" Storyboard.TargetProperty="Visibility" />
                                        <ObjectAnimationUsingKeyFrames dxi:ValueSetter.Visibility="Collapsed" Storyboard.TargetName="PART_BottomButton" Storyboard.TargetProperty="Visibility" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="ScrollableControlButton.DefaultStyleBase" TargetType="dxcop:ScrollableControlButton">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey WindowsUIElements.ScrollableControlButtonTemplate}}" />
    </Style>
    <Style x:Key="TileBar.DefaultStyleBase" TargetType="dxnav:TileBar">
        <Setter Property="dxcop:ScrollableControl.ScrollButtonMode" Value="Default" />
        <Setter Property="Padding" Value="20,30,20,20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxnav:TileBar">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <dxcop:FlyoutDecorator x:Name="PART_TileNavFlyoutDecorator" FlyoutShowMode="{TemplateBinding FlyoutShowMode}" />
                            <dxcop:ScrollableControl
                                x:Name="PART_ScrollableControl"
                                Orientation="{TemplateBinding Orientation}"
                                ScrollButtonColorMode="{Binding ItemColorMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorModeConverter}}"
                                ScrollButtonMode="{Binding Path=(dxcop:ScrollableControl.ScrollButtonMode), RelativeSource={RelativeSource TemplatedParent}}">
                                <ItemsPresenter x:Name="PART_ItemsPresenter" />
                            </dxcop:ScrollableControl>
                        </Grid>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxnavi:TileBarItemsPanel
                        Padding="{Binding Padding, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                        Background="Transparent"
                        ClipToBounds="True"
                        KeyboardNavigation.DirectionalNavigation="Cycle"
                        Orientation="{Binding Orientation, RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TileBarItemArrowControl.DefaultStyleBase" TargetType="dxnavi:TileBarItemArrowControl">
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileBarArrowTemplate}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="TileSelectorItem.DefaultStyleBase" TargetType="dxnav:TileSelectorItem">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileSelectorItemTemplate}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileSelectorItemBackground}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileSelectorItemForeground}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="SelectionPadding" Value="4" />
    </Style>
    <Style x:Key="TileBarItem.DefaultStyleBase" BasedOn="{StaticResource TileSelectorItem.DefaultStyleBase}" TargetType="dxnav:TileBarItem" />
    <Style x:Key="navItemBaseStyle" BasedOn="{StaticResource TileSelectorItem.DefaultStyleBase}" TargetType="dxnav:TileSelectorItem" />
    <Style x:Key="TileNavCategory.DefaultStyleBase" BasedOn="{StaticResource navItemBaseStyle}" TargetType="dxnav:TileNavCategory" />
    <Style x:Key="TileNavItem.DefaultStyleBase" BasedOn="{StaticResource navItemBaseStyle}" TargetType="dxnav:TileNavItem" />
    <Style x:Key="TileNavSubItem.DefaultStyleBase" BasedOn="{StaticResource navItemBaseStyle}" TargetType="dxnav:TileNavSubItem" />
    <Style x:Key="TileNavPaneBar.DefaultStyleBase" BasedOn="{StaticResource TileBar.DefaultStyleBase}" TargetType="dxnavi:TileNavPaneBar">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxnavi:TileNavPaneBarItemsPanel
                        Padding="{Binding Padding, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                        Background="Transparent"
                        ClipToBounds="True"
                        Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TileNavPaneContentControl.DefaultStyleBase" TargetType="dxnavi:TileNavPaneContentControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxnavi:TileNavPaneContentControl">
                    <Grid>
                        <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter Margin="{TemplateBinding Padding}" />
                        </dx:DXBorder>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="TileNavPane.DefaultStyleBase" TargetType="dxnav:TileNavPane">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxnav:TileNavPane">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <dxcop:FlyoutDecorator x:Name="PART_TileNavFlyoutDecorator" Background="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileNavPaneFlyoutBackground}}" FlyoutShowMode="{TemplateBinding FlyoutShowMode}" />
                            <ItemsControl x:Name="PART_HeadersItemsControl" Focusable="False" ItemContainerStyle="{TemplateBinding NavButtonStyle}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <dxnavi:TileNavPaneHeadersPanel ItemSpacing="0" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </Grid>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileNavPaneBackground}}" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="ClipToBounds" Value="True" />
    </Style>
    <Style x:Key="NavButton.DefaultStyleBase" TargetType="dxnav:NavButton">
        <Setter Property="FontFamily" Value="Segoe UI Light" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Padding" Value="12" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileNavButtonForeground}}" />
        <Setter Property="dxb:ImageColorizer.Color" Value="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileNavButtonForegroundColor}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileNavButtonTemplate}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>
    <Style x:Key="SelectedNavButton.DefaultStyleBase" BasedOn="{StaticResource NavButton.DefaultStyleBase}" TargetType="dxnavi:SelectedNavButton" />
    <Style x:Key="NavButtonSeparator.DefaultStyleBase" BasedOn="{StaticResource NavButton.DefaultStyleBase}" TargetType="dxnavi:NavButtonSeparator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxnavi:NavButtonSeparator">
                    <ContentPresenter Margin="{TemplateBinding Padding}" ContentTemplate="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileNavButtonSeparatorTemplate}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TileButtonControl.DefaultStyleBase" TargetType="dxnavi:TileButtonControl">
        <Setter Property="GlyphColor" Value="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileSelectorItemForegroundColor}}" />
        <Setter Property="Template" Value="{DynamicResource {dxcot:LWKey TileNavPaneElements.TileButtonControlTemplate}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="TileBarGroupHeader.DefaultStyleBase" TargetType="dxnavi:TileBarGroupHeader">
        <Setter Property="FontFamily" Value="Segoe UI Light" />
        <Setter Property="Foreground" Value="#FF000000" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Margin" Value="4,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxnavi:TileBarGroupHeader">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <dx:DXContentPresenter
                            Name="content"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BreadcrumbControl.DefaultStyleBase" TargetType="{x:Type dxco:BreadcrumbControl}">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxco:BreadcrumbControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <dxcoi:BreadcrumbPathEdit
                            x:Name="PART_BreadcrumbPathEdit"
                            Grid.ColumnSpan="2"
                            AcceptValueOnPopupContentSelectionChanged="True"
                            AllowDefaultButton="{TemplateBinding AllowFillHistory}"
                            EditMode="Standalone"
                            EditorLeftIndent="{Binding ActualWidth, ElementName=PART_SelectedItemImageBorder}"
                            ImmediatePopup="True"
                            InvalidValueBehavior="AllowLeaveEditor"
                            ItemTemplate="{StaticResource PathEditItemTemplate}"
                            ItemsSource="{TemplateBinding PathEditSource}"
                            PopupHeight="{TemplateBinding PathEditPopupHeight}"
                            PopupMaxHeight="{TemplateBinding PathEditPopupMaxHeight}"
                            PopupMinHeight="{TemplateBinding PathEditPopupMinHeight}"
                            ShowBorder="{TemplateBinding ShowBorder}"
                            TextMember="Path"
                            ValidateOnEnterKeyPressed="True"
                            ValidateOnTextInput="False" />
                        <dx:DXBorder x:Name="PART_SelectedItemImageBorder" Background="Transparent">
                            <dxcoi:BreadcrumbSelectedItemImage x:Name="PART_BreadcrumbSelectedItemImage" ImageSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path='SelectedNode.Image'}" Style="{DynamicResource {dxcot:LWKey BreadcrumbControl.SelectedItemImageStyle}}" />
                        </dx:DXBorder>
                        <dxcoi:BreadcrumbItemsControl
                            x:Name="PART_BreadcrumbItemsControl"
                            Grid.Column="1"
                            ItemTemplate="{StaticResource SelectedItemTemplate}"
                            ItemsSource="{TemplateBinding SelectedNodes}"
                            PopupHeight="{TemplateBinding PopupHeight}"
                            PopupMaxHeight="{TemplateBinding PopupMaxHeight}"
                            PopupMaxWidth="{TemplateBinding PopupMaxWidth}"
                            PopupMinHeight="{TemplateBinding PopupMinHeight}"
                            PopupMinWidth="{TemplateBinding PopupMinWidth}"
                            PopupWidth="{TemplateBinding PopupWidth}"
                            RightIndent="{Binding RightButtonsWidth, ElementName=PART_BreadcrumbPathEdit}"
                            ShowBorder="{TemplateBinding ShowBorder}"
                            Style="{DynamicResource {dxcot:LWKey BreadcrumbControl.ItemsControlStyle}}"
                            SubItemTemplate="{StaticResource SubItemTemplate}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShowItemImages" Value="False">
                            <Setter TargetName="PART_BreadcrumbItemsControl" Property="SubItemTemplate" Value="{StaticResource SubItemWithoutImagesTemplate}" />
                            <Setter TargetName="PART_BreadcrumbPathEdit" Property="ItemTemplate" Value="{StaticResource PathEditItemWithoutImagesTemplate}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ItemTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="False" />
                                <Condition Binding="{Binding ItemTemplateSelector, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="PART_BreadcrumbItemsControl" Property="SubItemTemplate" Value="{x:Null}" />
                                <Setter TargetName="PART_BreadcrumbItemsControl" Property="SubItemTemplateSelector" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemTemplateSelector}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding ItemTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                            <Setter TargetName="PART_BreadcrumbItemsControl" Property="SubItemTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemTemplate}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectedItemTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="False" />
                                <Condition Binding="{Binding SelectedItemTemplateSelector, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="PART_BreadcrumbItemsControl" Property="ItemTemplate" Value="{x:Null}" />
                                <Setter TargetName="PART_BreadcrumbItemsControl" Property="ItemTemplateSelector" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItemTemplateSelector}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding SelectedItemTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                            <Setter TargetName="PART_BreadcrumbItemsControl" Property="ItemTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItemTemplate}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding PathEditItemTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="False" />
                                <Condition Binding="{Binding PathEditItemTemplateSelector, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="PART_BreadcrumbPathEdit" Property="ItemTemplate" Value="{x:Null}" />
                                <Setter TargetName="PART_BreadcrumbPathEdit" Property="ItemTemplateSelector" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PathEditItemTemplateSelector}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding PathEditItemTemplate, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                            <Setter TargetName="PART_BreadcrumbPathEdit" Property="ItemTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PathEditItemTemplate}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <dxcoi:NegativeThicknessConverter x:Key="negativeThicknessConverter" />
    <dxcoi:BooleanToVisibilityConverter x:Key="booleanToVisibilityInvertedConverter" />
    <dxcoi:AddWithParameterConverter x:Key="addWithParameterConverter" />
    <Style x:Key="progressBarDefaultStyle" TargetType="ProgressBar">
        <Setter Property="BorderThickness" Value="{DynamicResource {dxcot:LWKey StepProgressBar.ProgressBorderThickness}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey StepProgressBar.ProgressBackground}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxcot:LWKey StepProgressBar.ProgressForeground}}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.ProgressNeutralBorderBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Grid x:Name="PART_Track" Background="{TemplateBinding Background}">
                        <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid
                                x:Name="PART_Indicator"
                                HorizontalAlignment="Left"
                                Background="{TemplateBinding Foreground}"
                                Margin="{TemplateBinding BorderThickness, Converter={StaticResource negativeThicknessConverter}}">
                                <dx:DXBorder BorderBrush="{DynamicResource {dxcot:LWKey StepProgressBar.ProgressAccentBorderBrush}}" BorderThickness="{TemplateBinding BorderThickness}" />
                            </Grid>
                        </dx:DXBorder>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="verticalStepProgressBarItemTemplate" TargetType="{x:Type dxco:StepProgressBarItem}">
        <Grid x:Name="PART_ItemRootGrid">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding NearContentLength, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}, Mode=OneWay}" />
                <ColumnDefinition Width="{Binding IndicatorLength, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}, Mode=OneWay}" />
                <ColumnDefinition Width="{Binding FarContentLength, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}, Mode=OneWay}" />
            </Grid.ColumnDefinitions>
            <ContentPresenter
                x:Name="PART_NearContent"
                Grid.Column="0"
                ContentSource="NearContent"
                HorizontalAlignment="{TemplateBinding NearContentHorizontalAlignment}"
                VerticalAlignment="{TemplateBinding NearContentVerticalAlignment}" />
            <Grid x:Name="PART_IndicatorGrid" Grid.Column="1" Margin="{DynamicResource {dxcot:LWKey StepProgressBar.IndicatorPanelMargin}}">
                <Path
                    x:Name="PART_IndicatorsGeometry"
                    Stroke="{TemplateBinding BorderBrush}"
                    StrokeThickness="{TemplateBinding IndicatorBorderSize}"
                    Fill="{TemplateBinding Background}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{TemplateBinding IndicatorGeometry}" />
                <Path
                    x:Name="PART_IndicatorsGeometry_MouseOver"
                    Fill="{TemplateBinding HoverBackground}"
                    Stroke="{TemplateBinding HoverBorderBrush}"
                    StrokeThickness="{TemplateBinding IndicatorBorderSize}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Visibility="{TemplateBinding IsEnabled, Converter={StaticResource booleanToVisibilityInvertedConverter}}"
                    Data="{TemplateBinding IndicatorGeometry}"
                    Opacity="0" />
                <ContentPresenter
                    x:Name="PART_Content"
                    ContentSource="Content"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Grid>
            <ContentPresenter
                x:Name="PART_FarContent"
                Grid.Column="2"
                ContentSource="FarContent"
                HorizontalAlignment="{TemplateBinding FarContentHorizontalAlignment}"
                VerticalAlignment="{TemplateBinding FarContentVerticalAlignment}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Content" Property="Opacity" Value="0.66" />
            </Trigger>
            <Trigger Property="State" Value="NotStarted">
                <Setter TargetName="PART_Content" Property="TextElement.Foreground" Value="{DynamicResource {dxcot:LWKey StepProgressBar.NotStartedItemForeground}}" />
            </Trigger>
            <Trigger Property="State" Value="Indeterminate">
                <Setter TargetName="PART_Content" Property="TextElement.Foreground" Value="{DynamicResource {dxcot:LWKey StepProgressBar.IndeterminateItemForeground}}" />
            </Trigger>
            <Trigger Property="State" Value="Completed">
                <Setter TargetName="PART_Content" Property="TextElement.Foreground" Value="{DynamicResource {dxcot:LWKey StepProgressBar.CompletedItemForeground}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="StepProgressBar.DefaultStyleBase" TargetType="{x:Type dxco:StepProgressBar}">
        <Setter Property="NearContentLength" Value="Auto" />
        <Setter Property="IndicatorLength" Value="Auto" />
        <Setter Property="FarContentLength" Value="Auto" />
        <Setter Property="ProgressAnimationDuration" Value="{DynamicResource {dxcot:LWKey StepProgressBar.ProgressAnimationDuration}}" />
        <Setter Property="ShowOuterBorder" Value="{DynamicResource {dxcot:LWKey StepProgressBar.ShowOuterBorder}}" />
        <Setter Property="OuterBorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.OuterBorderBrush}}" />
        <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey StepProgressBar.OuterIndentBrush}}" />
        <Setter Property="OuterBorderSize" Value="{DynamicResource {dxcot:LWKey StepProgressBar.OuterBorderSize}}" />
        <Setter Property="OuterBorderIndent" Value="{DynamicResource {dxcot:LWKey StepProgressBar.OuterBorderIndent}}" />
        <Setter Property="ProgressSize" Value="{DynamicResource {dxcot:LWKey StepProgressBar.ProgressBarThickness}}" />
        <Setter Property="ProgressStyle" Value="{StaticResource progressBarDefaultStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxco:StepProgressBar}">
                    <ScrollViewer
                        x:Name="PART_ScrollViewer"
                        Focusable="False"
                        VerticalScrollBarVisibility="Auto"
                        HorizontalScrollBarVisibility="Auto">
                        <Grid x:Name="PART_Root" UseLayoutRounding="False">
                            <Canvas x:Name="PART_Canvas">
                                <ProgressBar
                                    x:Name="PART_ProgressBar"
                                    Height="{TemplateBinding ProgressSize}"
                                    Value="{TemplateBinding Progress}"
                                    Visibility="{TemplateBinding ShowProgress, Converter={StaticResource booleanToVisibilityInvertedConverter}}"
                                    Style="{TemplateBinding ProgressStyle}" />
                            </Canvas>
                            <ItemsPresenter />
                        </Grid>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxcoi:ReversibleStepProgressBarPanel ReverseOrder="{Binding ReverseOrder, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}}" Orientation="{Binding Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}}" Offset="{Binding Offset, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StepProgressBarItem.DefaultStyleBase" TargetType="{x:Type dxco:StepProgressBarItem}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="IndicatorBorderSize" Value="{DynamicResource {dxcot:LWKey StepProgressBar.IndicatorBorderSize}}" />
        <Setter Property="Content" Value="{Binding Path=Index, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay, Converter={StaticResource addWithParameterConverter}, ConverterParameter=1}" />
        <Setter Property="IndicatorGeometry" Value="{DynamicResource {dxcot:LWKey StepProgressBar.IndicatorGeometry}}" />
        <Setter Property="IsHitTestVisible" Value="{Binding Path=AllowItemClick, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxco:StepProgressBarItem}">
                    <Grid x:Name="PART_ItemRootGrid">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{Binding NearContentLength, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}, Mode=OneWay}" />
                            <RowDefinition Height="{Binding IndicatorLength, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}, Mode=OneWay}" />
                            <RowDefinition Height="{Binding FarContentLength, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}, Mode=OneWay}" />
                        </Grid.RowDefinitions>
                        <ContentPresenter
                            x:Name="PART_NearContent"
                            Grid.Row="0"
                            ContentSource="NearContent"
                            HorizontalAlignment="{TemplateBinding NearContentHorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding NearContentVerticalAlignment}" />
                        <Grid x:Name="PART_IndicatorGrid" Grid.Row="1" Margin="{DynamicResource {dxcot:LWKey StepProgressBar.IndicatorPanelMargin}}">
                            <Path
                                x:Name="PART_IndicatorsGeometry"
                                Stroke="{TemplateBinding BorderBrush}"
                                StrokeThickness="{TemplateBinding IndicatorBorderSize}"
                                Fill="{TemplateBinding Background}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="{TemplateBinding IndicatorGeometry}" />
                            <Path
                                x:Name="PART_IndicatorsGeometry_MouseOver"
                                Fill="{TemplateBinding HoverBackground}"
                                Stroke="{TemplateBinding HoverBorderBrush}"
                                StrokeThickness="{TemplateBinding IndicatorBorderSize}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Visibility="{TemplateBinding IsEnabled, Converter={StaticResource booleanToVisibilityInvertedConverter}}"
                                Data="{TemplateBinding IndicatorGeometry}"
                                Opacity="0" />

                            <ContentPresenter
                                x:Name="PART_Content"
                                ContentSource="Content"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                        <ContentPresenter
                            x:Name="PART_FarContent"
                            Grid.Row="2"
                            ContentSource="FarContent"
                            HorizontalAlignment="{TemplateBinding FarContentHorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding FarContentVerticalAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Content" Property="Opacity" Value="0.66" />
                        </Trigger>
                        <Trigger Property="State" Value="NotStarted">
                            <Setter TargetName="PART_Content" Property="TextElement.Foreground" Value="{DynamicResource {dxcot:LWKey StepProgressBar.NotStartedItemForeground}}" />
                        </Trigger>
                        <Trigger Property="State" Value="Indeterminate">
                            <Setter TargetName="PART_Content" Property="TextElement.Foreground" Value="{DynamicResource {dxcot:LWKey StepProgressBar.IndeterminateItemForeground}}" />
                        </Trigger>
                        <Trigger Property="State" Value="Completed">
                            <Setter TargetName="PART_Content" Property="TextElement.Foreground" Value="{DynamicResource {dxcot:LWKey StepProgressBar.CompletedItemForeground}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dxco:StepProgressBar}}" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource verticalStepProgressBarItemTemplate}" />
            </DataTrigger>
            <Trigger Property="State" Value="NotStarted">
                <Setter Property="HoverBorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.NotStartedMouseOverStroke}}" />
                <Setter Property="HoverBackground" Value="{DynamicResource {dxcot:LWKey StepProgressBar.NotStartedMouseOverFill}}" />
            </Trigger>
            <Trigger Property="State" Value="Indeterminate">
                <Setter Property="HoverBorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.IndeterminateMouseOverStroke}}" />
                <Setter Property="HoverBackground" Value="{DynamicResource {dxcot:LWKey StepProgressBar.IndeterminateMouseOverFill}}" />
            </Trigger>
            <Trigger Property="State" Value="Completed">
                <Setter Property="HoverBorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.CompletedMouseOverStroke}}" />
                <Setter Property="HoverBackground" Value="{DynamicResource {dxcot:LWKey StepProgressBar.CompletedMouseOverFill}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="State" Value="NotStarted" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey StepProgressBar.NotStartedIndicatorFill}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.NotStartedIndicatorStroke}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="State" Value="Indeterminate" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey StepProgressBar.IndeterminateIndicatorFill}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.IndeterminateIndicatorStroke}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="State" Value="Completed" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey StepProgressBar.CompletedIndicatorFill}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.CompletedIndicatorStroke}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="State" Value="NotStarted" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey StepProgressBar.DisabledNotStartedIndicatorFill}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.DisabledNotStartedIndicatorStroke}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="State" Value="Indeterminate" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey StepProgressBar.DisabledIndeterminateIndicatorFill}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.DisabledIndeterminateIndicatorStroke}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="State" Value="Completed" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {dxcot:LWKey StepProgressBar.DisabledCompletedIndicatorFill}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {dxcot:LWKey StepProgressBar.DisabledCompletedIndicatorStroke}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion DEFAULT STYLES-->
</ResourceDictionary>