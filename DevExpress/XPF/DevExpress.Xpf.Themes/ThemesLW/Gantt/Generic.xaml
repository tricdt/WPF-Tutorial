<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxgn="clr-namespace:DevExpress.Xpf.Gantt;assembly=DevExpress.Xpf.Gantt.v24.1"
    xmlns:dxgni="clr-namespace:DevExpress.Xpf.Gantt.Native;assembly=DevExpress.Xpf.Gantt.v24.1"
    xmlns:dxgnt="clr-namespace:DevExpress.Xpf.Gantt.Themes;assembly=DevExpress.Xpf.Gantt.v24.1"
    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
    xmlns:dxp="http://schemas.devexpress.com/winfx/2008/xaml/printing"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Gantt/_{ThemeCategory}.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\TimescaleControl.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\TimescaleControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttControl.xaml-->
    <sys:Double x:Key="{dxgnt:LWKey GanttControl.RowIndentWithImage}">16</sys:Double>
    <DataTemplate x:Key="EditConnectorToolTipTemplate">
        <StackPanel>
            <TextBlock x:Name="PART_Header" FontWeight="Bold" Text="{dxgn:GanttStringId ConnectorEditing}" />
            <TextBlock>
                <Run Text="{dxgn:GanttStringId ConnectorEditingStartNode}" />
                <Run Text="{Binding StartNode.Name, Mode=OneWay}" />
            </TextBlock>
            <TextBlock>
                <Run Text="{dxgn:GanttStringId ConnectorEditingFinishNode}" />
                <Run Text="{Binding FinishNode.Name, Mode=OneWay}" />
            </TextBlock>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding PreviousFinishNode}" Value="{x:Null}">
                <Setter TargetName="PART_Header" Property="Text" Value="{dxgn:GanttStringId NewConnectorCreating}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="TaskMoveToolTipTemplate">
        <StackPanel>
            <TextBlock FontWeight="Bold" Text="{Binding Node.Name}" Visibility="{Binding Node.Name, Converter={dxmvvm:StringToVisibilityConverter}}" />
            <TextBlock Text="{Binding Content.Start, StringFormat={dxgn:GanttStringId StartDateEditingToolTipPattern}}" />
            <TextBlock Text="{Binding Content.End, StringFormat={dxgn:GanttStringId FinishDateEditingToolTipPattern}}" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="TaskFinishDateMoveToolTipTemplate">
        <StackPanel>
            <TextBlock FontWeight="Bold" Text="{Binding Node.Name}" Visibility="{Binding Node.Name, Converter={dxmvvm:StringToVisibilityConverter}}" />
            <TextBlock Text="{Binding Content, StringFormat={dxgn:GanttStringId FinishDateEditingToolTipPattern}}" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="TaskProgressMoveToolTipTemplate">
        <StackPanel>
            <TextBlock FontWeight="Bold" Text="{Binding Node.Name}" Visibility="{Binding Node.Name, Converter={dxmvvm:StringToVisibilityConverter}}" />
            <TextBlock Text="{Binding Content, StringFormat={dxgn:GanttStringId ProgressEditingToolTipPattern}}" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="MilestoneMoveToolTipTemplate">
        <StackPanel>
            <TextBlock FontWeight="Bold" Text="{Binding Node.Name}" Visibility="{Binding Node.Name, Converter={dxmvvm:StringToVisibilityConverter}}" />
            <TextBlock Text="{Binding Content, StringFormat={dxgn:GanttStringId MilestoneDateEditingToolTipPattern}}" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="DrawNewTaskToolTipTemplate">
        <StackPanel>
            <TextBlock FontWeight="Bold" Text="{dxgn:GanttStringId NewTaskCreating}" />
            <TextBlock Text="{Binding Content.Start, StringFormat={dxgn:GanttStringId StartDateEditingToolTipPattern}}" />
            <TextBlock Text="{Binding Content.End, StringFormat={dxgn:GanttStringId FinishDateEditingToolTipPattern}}" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="ResourcesContentTemplate">
        <ItemsControl Margin="5,0,0,0" ItemsSource="{Binding ResourceLinks}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <dxgn:GanttResourceControl UserStyle="{Binding Path=(dxgn:GanttControl.ActiveView).ResourceStyle, RelativeSource={RelativeSource Self}}" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>
    <DataTemplate x:Key="PrintResourcesContentTemplate">
        <ItemsControl Margin="5,0,0,0" ItemsSource="{Binding ResourceLinks}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <dxgn:GanttResourceControl UserStyle="{Binding Path=(dxgn:GanttControl.ActiveView).PrintResourceStyle, RelativeSource={RelativeSource Self}}" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>
    <DataTemplate x:Key="DragDropHintTemplate">
        <ContentControl Content="{Binding}" ContentTemplate="{DynamicResource {dxt:LWKey DragDrop.DragDropHint}}">
            <ContentControl.Style>
                <Style x:Key="{x:Type ContentControl}" TargetType="{x:Type ContentControl}">
                    <Style.Resources>
                        <DataTemplate x:Key="{dxt:LWKey DragDrop.DragDropHintDetail}">
                            <dxgni:GanttDragDropHintDetail />
                        </DataTemplate>
                    </Style.Resources>
                </Style>
            </ContentControl.Style>
        </ContentControl>
    </DataTemplate>

    <DataTemplate x:Key="{dxgnt:LWKey GanttControl.DragDropHintDetail}">
        <TextBlock TextTrimming="WordEllipsis">
            <Run Text="{dxgn:GanttStringId DragDropTask}" />
            <Run Text="{Binding Name, Mode=OneWay}" />
        </TextBlock>
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttTask.xaml-->

    <Style x:Key="MilestoneStyle" TargetType="{x:Type dxgn:GanttMilestoneControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttMilestoneControl}">
                    <Path
                        Data="M0,7.5L7.5,0 15,7.5 7.5,15z"
                        Fill="{TemplateBinding Background}"
                        Stretch="Fill"
                        Stroke="{TemplateBinding BorderBrush}"
                        StrokeThickness="{Binding Path=BorderThickness.Left, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <Path.Style>
                            <Style x:Key="{x:Type Path}" TargetType="{x:Type Path}">
                                <Setter Property="Width" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestoneSize}}" />
                                <Setter Property="Height" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestoneSize}}" />
                                <Style.Triggers>
                                    <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                        <Setter Property="Width" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestoneSizeTouch}}" />
                                        <Setter Property="Height" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestoneSizeTouch}}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Path.Style>
                    </Path>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttTask.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttRowControl.xaml-->
    <DataTemplate x:Key="TaskNameContentTemplate">
        <TextBlock Text="{Binding Node.Name}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttRowControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttRowsPanelBackgroundControl.xaml-->
    <Thickness x:Key="{dxgnt:LWKey GanttControl.StripLineHitTestMargin}">3</Thickness>

    <Style x:Key="StripLineStyle" TargetType="{x:Type dxgn:StripLineBase}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttControl.StripLineBackground}}" />
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttRowsPanelBackgroundControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttRowsPanelContainerControl.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttRowsPanelContainerControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttSplitterContainerControl.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttSplitterContainerControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttHeaderControl.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttHeaderControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttConnector.xaml-->
    <Style x:Key="ConnectorBaseStyle" TargetType="{x:Type dxgn:GanttConnectorBase}">
        <Setter Property="Stroke" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorStroke}}" />
        <Setter Property="StrokeThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorStrokeThickness}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="StrokeThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorStrokeThicknessTouch}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttConnector.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttEditFlyout.xaml-->
    <DataTemplate x:Key="taskEditFlyoutSettingsTemplate">
        <ContentControl>
            <dxe:FlyoutSettings Placement="Top" />
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="settingsTemplate">
        <ContentControl>
            <dxe:FlyoutSettings Placement="Top" ShowIndicator="True" />
        </ContentControl>
    </DataTemplate>


    <Style x:Key="GanttEditFlyoutBaseStyle" BasedOn="{dx:TargetStaticResource FlyoutControl.DefaultStyleBase, TargetDictionary={dxi:ThemeResourceDictionary Path='Core/Editors/Editors.xaml'}}" TargetType="{x:Type dxgni:GanttEditFlyoutControlBase}">
        <Setter Property="AllowMoveAnimation" Value="False" />
        <Setter Property="AnimationDuration" Value="0" />
        <Setter Property="Content" Value="{Binding}" />
        <Setter Property="IsOpen" Value="True" />
        <Setter Property="PlacementTarget" Value="{Binding PlacementTarget}" />
        <Setter Property="HorizontalOffset" Value="{Binding HorizontalOffset}" />
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttEditFlyout.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\InteractionAdorners.xaml-->
    <Style x:Key="TaskEventTargetStyle" TargetType="{x:Type dxgni:EventsTarget}">
        <Setter Property="IsHitTestVisible" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ShowInputConnectorThumb}" Value="None">
                <Setter Property="IsHitTestVisible" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\InteractionAdorners.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\TaskPreview.xaml-->
    <Style x:Key="TaskPreviewBaseStyle" TargetType="{x:Type dxgn:TaskPreviewControlBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:TaskPreviewControlBase}">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TaskProgressPreviewBaseStyle" TargetType="{x:Type dxgn:TaskPreviewControlBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:TaskPreviewControlBase}">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\TaskPreview.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttColumnResources.xaml-->
    <Style x:Key="StartDateEditSettings" TargetType="dxe:DateEditSettings" />
    <Style x:Key="BaselineStartDateEditSettings" TargetType="dxe:DateEditSettings" />
    <Style x:Key="FinishDateEditSettings" TargetType="dxe:DateEditSettings" />
    <Style x:Key="BaselineFinishDateEditSettings" TargetType="dxe:DateEditSettings" />
    <Style x:Key="DurationEditSettings" TargetType="dxe:TextEditSettings">
        <Setter Property="MaskType" Value="TimeSpan" />
        <Setter Property="Mask" Value="[dD ][hH ][mM ][sS ][fffN ]" />
        <Setter Property="dxe:TimeSpanMaskOptions.AllowNegativeValue" Value="False" />
        <Setter Property="dxe:TimeSpanMaskOptions.InputMode" Value="NotRestricted" />
        <Setter Property="dxe:TimeSpanMaskOptions.DefaultPart" Value="Days" />
        <Setter Property="NullValue" Value="{x:Static sys:TimeSpan.Zero}" />
        <Setter Property="AllowNullInput" Value="True" />
        <Setter Property="MaskUseAsDisplayFormat" Value="True" />
    </Style>
    <Style x:Key="ProgressEditSettings" TargetType="dxe:SpinEditSettings">
        <Setter Property="MinValue" Value="0" />
        <Setter Property="MaxValue" Value="1" />
        <Setter Property="Increment" Value="0.05" />
        <Setter Property="AllowDefaultButton" Value="False" />
        <Setter Property="Mask" Value="p0" />
        <Setter Property="MaskUseAsDisplayFormat" Value="True" />
    </Style>
    <Style x:Key="NameEditSettings" TargetType="dxe:TextEditSettings" />
    <Style x:Key="ResourceLinksEditSettings" TargetType="dxg:LookUpEditSettings">
        <Setter Property="ItemsSource" Value="{Binding Path=(dxgn:GanttControl.ActiveView).EditableResourceLinks, RelativeSource={RelativeSource Self}}" />
        <Setter Property="DisplayMember" Value="Name" />
        <Setter Property="IsPopupAutoWidth" Value="False" />
        <Setter Property="AddNewButtonPlacement" Value="None" />
        <Setter Property="AutoPopulateColumns" Value="False" />
        <Setter Property="AllowRejectUnknownValues" Value="True" />
        <Setter Property="StyleSettings">
            <Setter.Value>
                <dxgn:ResourceEditStyleSettings
                    AllowEditTokens="False"
                    FilterOutSelectedTokens="False"
                    NewTokenPosition="None"
                    SelectionMode="Multiple" />
            </Setter.Value>
        </Setter>
        <Setter Property="PopupContentTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <dxg:GridControl x:Name="PART_GridControl" ItemsSource="{Binding RowData.Source.EditableResourceLinks}" SelectionMode="MultipleRow">
                        <dxg:GridColumn
                            FieldName="Name"
                            Width="Auto"
                            AllowEditing="False"
                            Header="{dxgn:GanttStringId ResourceNameColumnHeader}" />
                        <dxg:GridColumn
                            FieldName="AllocationPercentage"
                            Width="Auto"
                            AllowEditing="True"
                            Header="{dxgn:GanttStringId AllocationPercentageColumnHeader}">
                            <dxg:GridColumn.EditSettings>
                                <dxe:SpinEditSettings
                                    Increment="0.05"
                                    Mask="p0"
                                    MaskUseAsDisplayFormat="True"
                                    MinValue="0" />
                            </dxg:GridColumn.EditSettings>
                        </dxg:GridColumn>
                        <dxg:GridControl.View>
                            <dxg:TableView
                                AllowEditing="True"
                                FocusedCellBorderTemplate="{x:Null}"
                                NavigationStyle="Cell"
                                ShowCheckBoxSelectorColumn="True"
                                ShowIndicator="False">
                                <dxg:TableView.Style>
                                    <Style TargetType="{x:Type dxg:TableView}">
                                        <Setter Property="CheckBoxSelectorColumnWidth" Value="30" />
                                        <Style.Triggers>
                                            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                                                <Setter Property="CheckBoxSelectorColumnWidth" Value="60" />
                                            </Trigger>
                                            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                                <Setter Property="CheckBoxSelectorColumnWidth" Value="60" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </dxg:TableView.Style>
                            </dxg:TableView>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Resources>
                            <Style TargetType="{x:Type dxg:GridColumn}">
                                <Style.Triggers>
                                    <Trigger Property="FieldName" Value="{x:Static dxg:TableView.CheckBoxSelectorColumnName}">
                                        <Setter Property="CellStyle">
                                            <Setter.Value>
                                                <Style TargetType="{x:Type dxg:LightweightCellEditor}">
                                                    <Setter Property="BorderBrush" Value="Transparent" />
                                                </Style>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </dxg:GridControl.Resources>
                    </dxg:GridControl>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxgn:GanttControl.ActiveView).EditFormShowMode, RelativeSource={RelativeSource Self}}" Value="None">
                            <Setter TargetName="PART_GridControl" Property="ItemsSource" Value="{Binding RowData.EditableResourceLinks}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="BaselineDurationEditSettings" BasedOn="{StaticResource DurationEditSettings}" TargetType="dxe:TextEditSettings" />
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\GanttColumnResources.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\Resources.xaml-->
    <Thickness x:Key="{dxgnt:LWKey GanttControl.RowBorderThickness}">0,0,0,1</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttControl.RowSelectedBorderThickness}">0,1,0,1</Thickness>
    <SolidColorBrush x:Key="{dxgnt:LWKey GanttControl.RowSelectedBorderBrush}" Color="Transparent" />
    <Thickness x:Key="{dxgnt:LWKey GanttControl.HeaderBorderThickness}">0</Thickness>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.ConnectorStrokeThickness}">1</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.ConnectorStrokeThicknessTouch}">2</sys:Double>
    <sys:Int32 x:Key="{dxgnt:LWKey GanttItems.ConnectorLineMargin}">3</sys:Int32>
    <sys:Int32 x:Key="{dxgnt:LWKey GanttItems.ConnectorLineMarginTouch}">6</sys:Int32>
    <sys:Int32 x:Key="{dxgnt:LWKey GanttItems.ConnectorMilestoneLineMargin}">6</sys:Int32>
    <sys:Int32 x:Key="{dxgnt:LWKey GanttItems.ConnectorMilestoneLineMarginTouch}">12</sys:Int32>
    <sys:Int32 x:Key="{dxgnt:LWKey Timescale.TickWidth}">1</sys:Int32>
    <Thickness x:Key="{dxgnt:LWKey Timescale.BorderThickness}">0,0,0,1</Thickness>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.TaskContentIndent}">8</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.TaskHeight}">8</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.TaskHeightTouch}">16</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.MilestoneSize}">12</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.MilestoneSizeTouch}">24</sys:Double>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.SummaryTaskBracketThickness}">1,2,1,0</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.SummaryTaskBracketThicknessTouch}">2,4,2,0</Thickness>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.SummaryTaskBracketHeight}">5</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.SummaryTaskBracketHeightTouch}">10</sys:Double>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.SummaryTaskBracketIndent}">0,1,0,0</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.SummaryTaskBracketIndentTouch}">0,2,0,0</Thickness>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.BaselineHeight}">4</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.BaselineHeightTouch}">8</sys:Double>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.MilestoneBaselineBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.MilestoneBaselineBorderThicknessTouch}">2</Thickness>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.TaskFontSize}">12</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.SummaryTaskFontSize}">12</sys:Double>
    <FontWeight x:Key="{dxgnt:LWKey GanttItems.TaskFontWeight}">Normal</FontWeight>
    <FontWeight x:Key="{dxgnt:LWKey GanttItems.SummaryTaskFontWeight}">Normal</FontWeight>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.TaskPreviewBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.TaskPreviewBorderThicknessTouch}">2</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.SummaryTaskPreviewBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.SummaryTaskPreviewBorderThicknessTouch}">2</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.MilestonePreviewBorderThickness}">1</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.MilestonePreviewBorderThicknessTouch}">2</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.ConnectorThumbsMargin}">-14, -1</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.ConnectorThumbsMarginTouch}">-28, -4</Thickness>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.ConnectorThumbsSize}">8</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.ConnectorThumbsSizeTouch}">16</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.ConnectorHighlightedThumbsSize}">10</sys:Double>
    <sys:Double x:Key="{dxgnt:LWKey GanttItems.ConnectorHighlightedThumbsSizeTouch}">20</sys:Double>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.ConnectorHighlightedThumbsMargin}">-1, 0</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.ConnectorHighlightedThumbsMarginTouch}">-2, 0</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.ConnectorThumbsStrokeThickness}">1</Thickness>
    <Thickness x:Key="{dxgnt:LWKey GanttItems.ConnectorThumbsStrokeThicknessTouch}">2</Thickness>



    <ControlTemplate x:Key="{dxgnt:LWKey GanttControl.HeaderBottomBorderTemplate}" />

    <Size x:Key="{dxgnt:LWKey GanttItems.ConnectorArrowSize}" Width="4" Height="4" />
    <Size x:Key="{dxgnt:LWKey GanttItems.ConnectorArrowSizeTouch}" Width="8" Height="8" />

    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Gantt\DevExpress.Xpf.Gantt\Themes\Generic\Resources.xaml-->


    <!--#region DEFAULT STYLES-->

    <Style x:Key="TimescaleRulerControl.DefaultStyleBase" TargetType="{x:Type dxgni:TimescaleRulerControl}">
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgnt:LWKey Timescale.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey Timescale.BorderThickness}}" />
        <Setter Property="MinHeight" Value="{DynamicResource {dxgnt:LWKey Timescale.MinHeight}}" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="TextMargin" Value="3,1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="TickBrush" Value="{DynamicResource {dxgnt:LWKey Timescale.TickBrush}}" />
        <Setter Property="TickWidth" Value="{DynamicResource {dxgnt:LWKey Timescale.TickWidth}}" />
        <Setter Property="TickHeight" Value="{DynamicResource {dxgnt:LWKey Timescale.TickHeight}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgni:TimescaleRulerControl}">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <dxgni:TimescaleRulerPresenter
                            StartDate="{TemplateBinding StartDate}"
                            TextMargin="{TemplateBinding TextMargin}"
                            TickBrush="{TemplateBinding TickBrush}"
                            TickHeight="{TemplateBinding TickHeight}"
                            TickWidth="{TemplateBinding TickWidth}"
                            Timescale="{TemplateBinding Timescale}" />
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TimescaleControl.DefaultStyleBase" TargetType="{x:Type dxgn:TimescaleControl}">
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:TimescaleControl}">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <dxgni:TimescaleItemsControl
                            x:Name="PART_ItemsControl"
                            IsTabStop="False"
                            ItemContainerStyle="{TemplateBinding TimescaleRulerStyle}"
                            ItemContainerStyleSelector="{TemplateBinding TimescaleRulerStyleSelector}"
                            ItemsSource="{TemplateBinding Timescales}">
                            <dxgni:TimescaleItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <dxgni:TimescaleItemsPanel IsItemsHost="True" />
                                </ItemsPanelTemplate>
                            </dxgni:TimescaleItemsControl.ItemsPanel>
                        </dxgni:TimescaleItemsControl>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttControl.DefaultStyleBase" BasedOn="{dx:TargetStaticResource DataControlBaseStyle, TargetDictionary={dxi:ThemeResourceDictionary Path='Grid/Generic.xaml'}}" TargetType="{x:Type dxgn:GanttControl}" />
    <Style x:Key="GanttView.DefaultStyleBase" BasedOn="{dx:TargetStaticResource TreeListView.DefaultStyleBase, TargetDictionary={dxi:ThemeResourceDictionary Path='Grid/Generic.xaml'}}" TargetType="{x:Type dxgn:GanttView}">
        <Setter Property="TaskContentIndent" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskContentIndent}}" />
        <Setter Property="RowIndent" Value="{DynamicResource {dxgnt:LWKey GanttControl.RowIndent}}" />
        <Setter Property="StripLineShowToolTipDelay" Value="{x:Static SystemParameters.MenuShowDelay}" />
        <Setter Property="dx:ScrollBarExtensions.AllowMouseScrolling" Value="True" />
        <Setter Property="dx:ScrollBarExtensions.AllowShiftKeyMode" Value="True" />
        <Setter Property="ResourcePalette" Value="{DynamicResource {dxgnt:LWKey GanttControl.ResourcePalette}}" />
        <Setter Property="DragDropHintTemplate" Value="{StaticResource DragDropHintTemplate}" />
        <Setter Property="TaskMoveToolTipContentTemplate" Value="{StaticResource TaskMoveToolTipTemplate}" />
        <Setter Property="TaskFinishDateMoveToolTipContentTemplate" Value="{StaticResource TaskFinishDateMoveToolTipTemplate}" />
        <Setter Property="TaskProgressMoveToolTipContentTemplate" Value="{StaticResource TaskProgressMoveToolTipTemplate}" />
        <Setter Property="MilestoneMoveToolTipContentTemplate" Value="{StaticResource MilestoneMoveToolTipTemplate}" />
        <Setter Property="DrawNewTaskToolTipContentTemplate" Value="{StaticResource DrawNewTaskToolTipTemplate}" />
        <Setter Property="EditConnectorToolTipContentTemplate" Value="{StaticResource EditConnectorToolTipTemplate}" />
        <Setter Property="PrintGanttRowTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxgn:PrintGanttRowControl />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PrintTimescaleTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxgn:PrintGanttHeaderControl />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PrintPageContainerTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxgn:PrintGanttPageControl />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="RowMinHeight" Value="43" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dxgn:GanttView.ShowNodeImages" Value="True" />
                    <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="RowIndent" Value="{DynamicResource {dxgnt:LWKey GanttControl.RowIndentWithImage}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <DataTrigger Binding="{Binding ActualUseResourcesAsTaskContent, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="TaskContentTemplate" Value="{StaticResource ResourcesContentTemplate}" />
                <Setter Property="PrintTaskContentTemplate" Value="{StaticResource PrintResourcesContentTemplate}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttDragDropHintDetail.DefaultStyleBase" TargetType="{x:Type dxgni:GanttDragDropHintDetail}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgni:GanttDragDropHintDetail}">
                    <ContentControl Content="{Binding Node, RelativeSource={RelativeSource Mode=TemplatedParent}}" ContentTemplate="{DynamicResource {dxgnt:LWKey GanttControl.DragDropHintDetail}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttTaskControl.DefaultStyleBase" TargetType="{x:Type dxgn:GanttTaskControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskBrush}}" />
        <Setter Property="ProgressBackground" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskProgressBrush}}" />
        <Setter Property="dxgn:GanttConnector.IsAttachmentTarget" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttTaskControl}">
                    <dx:DXBorder
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                        <dx:DXBorder.Style>
                            <Style x:Key="{x:Type Border}" TargetType="{x:Type Border}">
                                <Setter Property="MinHeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskHeight}}" />
                                <Style.Triggers>
                                    <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                        <Setter Property="MinHeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskHeightTouch}}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </dx:DXBorder.Style>
                        <dxgn:GanttProgressPanel Progress="{Binding Node.Progress}" Visibility="{Binding IsEditing, Converter={dx:BooleanToVisibilityConverter Invert=True}}">
                            <dx:DXBorder Background="{TemplateBinding ProgressBackground}" CornerRadius="{TemplateBinding CornerRadius}" />
                        </dxgn:GanttProgressPanel>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Node.IsCritical}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskCriticalPathBrush}}" />
                <Setter Property="ProgressBackground" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskCriticalPathProgressBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttSummaryTaskControl.DefaultStyleBase" TargetType="{x:Type dxgn:GanttSummaryTaskControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskBrush}}" />
        <Setter Property="ProgressBackground" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskProgressBrush}}" />
        <Setter Property="BracketThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskBracketThickness}}" />
        <Setter Property="BracketBrush" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskBracketBrush}}" />
        <Setter Property="BracketHeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskBracketHeight}}" />
        <Setter Property="BracketIndent" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskBracketIndent}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttSummaryTaskControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <dx:DXBorder
                            dxgn:GanttConnector.IsAttachmentTarget="True"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}">
                            <dx:DXBorder.Style>
                                <Style x:Key="{x:Type Border}" TargetType="{x:Type Border}">
                                    <Setter Property="MinHeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskHeight}}" />
                                    <Style.Triggers>
                                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                            <Setter Property="MinHeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskHeightTouch}}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </dx:DXBorder.Style>
                            <dxgn:GanttProgressPanel Progress="{Binding Node.Progress}" Visibility="{Binding IsEditing, Converter={dx:BooleanToVisibilityConverter Invert=True}}">
                                <dx:DXBorder Background="{TemplateBinding ProgressBackground}" CornerRadius="{TemplateBinding CornerRadius}" />
                            </dxgn:GanttProgressPanel>
                        </dx:DXBorder>
                        <dxgni:GanttSummaryTaskBracketBorder
                            Grid.Row="1"
                            Height="{TemplateBinding BracketHeight}"
                            Margin="{TemplateBinding BracketIndent}"
                            BorderBrush="{TemplateBinding BracketBrush}"
                            BorderThickness="{TemplateBinding BracketThickness}"
                            EnableDPICorrection="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="BracketThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskBracketThicknessTouch}}" />
                <Setter Property="BracketHeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskBracketHeightTouch}}" />
                <Setter Property="BracketIndent" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskBracketIndentTouch}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttMilestoneControl.DefaultStyleBase" BasedOn="{StaticResource MilestoneStyle}" TargetType="{x:Type dxgn:GanttMilestoneControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestoneBrush}}" />
        <Setter Property="dxgn:GanttConnector.IsAttachmentTarget" Value="True" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsEditing}" Value="True">
                <Setter Property="Opacity" Value="0.52" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Node.IsCritical}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestoneCriticalPathBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttTaskBaselineControl.DefaultStyleBase" TargetType="{x:Type dxgn:GanttTaskBaselineControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskBaselineBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttTaskBaselineControl}">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <dx:DXBorder.Style>
                            <Style x:Key="{x:Type Border}" TargetType="{x:Type Border}">
                                <Setter Property="MinHeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.BaselineHeight}}" />
                                <Style.Triggers>
                                    <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                        <Setter Property="MinHeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.BaselineHeightTouch}}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </dx:DXBorder.Style>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttSummaryTaskBaselineControl.DefaultStyleBase" TargetType="{x:Type dxgn:GanttSummaryTaskBaselineControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskBaselineBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttSummaryTaskBaselineControl}">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <dx:DXBorder.Style>
                            <Style x:Key="{x:Type Border}" TargetType="{x:Type Border}">
                                <Setter Property="MinHeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.BaselineHeight}}" />
                                <Style.Triggers>
                                    <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                        <Setter Property="MinHeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.BaselineHeightTouch}}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </dx:DXBorder.Style>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttMilestoneBaselineControl.DefaultStyleBase" BasedOn="{StaticResource MilestoneStyle}" TargetType="{x:Type dxgn:GanttMilestoneBaselineControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestoneBaselineBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestoneBaselineBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestoneBaselineBorderThickness}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestoneBaselineBorderThicknessTouch}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttResourceControl.DefaultStyleBase" TargetType="{x:Type dxgn:GanttResourceControl}">
        <Setter Property="RowBackground" Value="{DynamicResource {dxgnt:LWKey GanttControl.RowBackground}}" />
        <Setter Property="ResourceColor" Value="{Binding ResourceData.Color}" />
        <Setter Property="Background" Value="{Binding ResourceBackground, RelativeSource={RelativeSource Mode=Self}}" />
        <Setter Property="Foreground" Value="{Binding ResourceForeground, RelativeSource={RelativeSource Mode=Self}}" />
        <Setter Property="BorderBrush" Value="{Binding ResourceBorderBrush, RelativeSource={RelativeSource Mode=Self}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="2,0,0,0" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Padding" Value="3,0,3,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttResourceControl}">
                    <dx:DXBorder
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                        <StackPanel Margin="{TemplateBinding Padding}" Orientation="Horizontal">
                            <TextBlock Text="{Binding ResourceData.Name, Mode=OneWay}" />
                            <TextBlock x:Name="PART_Allocation" Text="{Binding AllocationPercentage, Mode=OneWay, StringFormat={} ({0:p0})}" />
                        </StackPanel>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding AllocationPercentage, Mode=OneWay}" Value="1">
                            <Setter TargetName="PART_Allocation" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsLoaded}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttRowControl.DefaultStyleBase" TargetType="{x:Type dxgn:GanttRowControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgt:LWKey GridRow.BorderNoneBrush}}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttControl.RowBorderThickness}}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
        <Setter Property="SelectedBorderBrush" Value="{DynamicResource {dxgnt:LWKey GanttControl.RowSelectedBorderBrush}}" />
        <Setter Property="SelectedBorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttControl.RowSelectedBorderThickness}}" />
        <Setter Property="UserStyle" Value="{Binding View.GanttRowStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttRowControl}">
                    <Grid>
                        <dx:DXBorder
                            x:Name="PART_Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            IsHitTestVisible="False" />
                        <dxgn:GanttItemPanel
                            x:Name="PART_Content"
                            ContentIndent="{Binding View.TaskContentIndent}"
                            ContentPosition="{Binding View.TaskContentPosition}"
                            FirstVisibleDate="{Binding View.FirstVisibleDate}"
                            HighlightGroups="{Binding View.HighlightGroups}"
                            Node="{Binding Node}"
                            ShowBaseline="{Binding View.ShowBaseline}"
                            View="{Binding View}">
                            <dxgni:GanttTaskInteractionControl
                                x:Name="PART_GeometryPresenter"
                                dxgn:GanttItemPanel.ItemKind="Geometry"
                                Content="{Binding}"
                                ShowInteractionAdorner="{Binding ShowInteractionAdorner}">
                                <ContentPresenter.ContentTemplate>
                                    <DataTemplate>
                                        <dxgn:GanttTaskControl UserStyle="{Binding View.TaskStyle}" />
                                    </DataTemplate>
                                </ContentPresenter.ContentTemplate>
                            </dxgni:GanttTaskInteractionControl>
                            <ContentPresenter Name="PART_BaselineGeometryPresenter" dxgn:GanttItemPanel.ItemKind="BaselineGeometry" Content="{Binding}">
                                <ContentPresenter.ContentTemplate>
                                    <DataTemplate>
                                        <dxgn:GanttTaskBaselineControl UserStyle="{Binding View.TaskBaselineStyle}" />
                                    </DataTemplate>
                                </ContentPresenter.ContentTemplate>
                            </ContentPresenter>
                            <ContentPresenter
                                x:Name="PART_ContentPresenter"
                                dxgn:GanttItemPanel.ItemKind="Content"
                                Content="{Binding}"
                                ContentTemplate="{Binding View.TaskContentTemplate}"
                                ContentTemplateSelector="{Binding View.TaskContentTemplateSelector}"
                                TextElement.FontSize="{DynamicResource {dxgnt:LWKey GanttItems.TaskFontSize}}"
                                TextElement.FontWeight="{DynamicResource {dxgnt:LWKey GanttItems.TaskFontWeight}}"
                                TextElement.Foreground="{DynamicResource {dxgnt:LWKey GanttItems.TaskForeground}}">
                                <dxg:GridViewHitInfoBase.HitTestAcceptor>
                                    <dxgni:GanttTaskContentHitTestAcceptor />
                                </dxg:GridViewHitInfoBase.HitTestAcceptor>
                            </ContentPresenter>
                        </dxgn:GanttItemPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding View.TaskContentTemplate}" Value="{x:Null}" />
                                <Condition Binding="{Binding View.TaskContentTemplateSelector}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ContentPresenter" Property="ContentTemplate" Value="{StaticResource TaskNameContentTemplate}" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Node.TaskKind}" Value="Summary">
                            <Setter TargetName="PART_GeometryPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <dxgn:GanttSummaryTaskControl UserStyle="{Binding View.SummaryTaskStyle}" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_BaselineGeometryPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <dxgn:GanttSummaryTaskBaselineControl UserStyle="{Binding View.SummaryTaskBaselineStyle}" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskForeground}}" />
                            <Setter TargetName="PART_ContentPresenter" Property="TextElement.FontSize" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskFontSize}}" />
                            <Setter TargetName="PART_ContentPresenter" Property="TextElement.FontWeight" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskFontWeight}}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Node.TaskKind}" Value="Milestone">
                            <Setter TargetName="PART_GeometryPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <dxgn:GanttMilestoneControl UserStyle="{Binding View.MilestoneStyle}" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_BaselineGeometryPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <dxgn:GanttMilestoneBaselineControl UserStyle="{Binding View.MilestoneBaselineStyle}" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttControl.RowSelectedBackground}}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Node}" Value="{x:Null}">
                            <Setter TargetName="PART_Content" Property="Node" Value="{Binding NewTaskNode}" />
                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsEditing}" Value="True">
                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Node}" Value="{x:Null}" />
                                <Condition Binding="{Binding IsEditing}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_GeometryPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate />
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Node}" Value="{x:Null}" />
                                <Condition Binding="{Binding IsEditing}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_GeometryPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <dxgn:GanttTaskControl UserStyle="{Binding View.TaskStyle}" Visibility="Hidden" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger Property="FadeSelection" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttControl.RowFadeSelectionBackground}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxi:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding AlternateRow}" Value="True">
                <Setter Property="Background" Value="{Binding Path=View.ActualAlternateRowBackground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MarkedTimeControl.DefaultStyleBase" TargetType="{x:Type dxgn:MarkedTimeControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.NonworkingTimeBrush}}" />
    </Style>
    <Style x:Key="GanttGroupBorderControl.DefaultStyleBase" TargetType="{x:Type dxgn:GanttGroupBorderControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.GroupHighlightBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttGroupBorderControl}">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{x:Null}" BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttScrollBarContainer.DefaultStyleBase" TargetType="{x:Type dxgni:GanttScrollBarContainer}">
        <Setter Property="VerticalScrollBarVisibility" Value="{Binding Path=ComputedVerticalScrollBarVisibility, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgni:GanttScrollBarContainer}">
                    <ScrollBar
                        x:Name="PART_ScrollBar"
                        dx:ScrollBarExtensions.ScrollViewerMouseMoved="{Binding Path=(dx:ScrollBarExtensions.ScrollViewerMouseMoved), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}}"
                        dx:ScrollBarExtensions.ScrollViewerSizeChanged="{Binding Path=(dx:ScrollBarExtensions.ScrollViewerSizeChanged), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}}"
                        ClipToBounds="True"
                        Orientation="Horizontal" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttRowsPanelBackgroundControl.DefaultStyleBase" TargetType="{x:Type dxgni:GanttRowsPanelBackgroundControl}">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Height" Value="{Binding Path=(dxgn:GanttControl.ActiveView).ScrollContentPresenter.ActualHeight, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgni:GanttRowsPanelBackgroundControl}">
                    <Grid ClipToBounds="True">
                        <dxgn:MarkedTimeControl MarkedTimeIntervals="{Binding Path=(dxgn:GanttControl.ActiveView).MarkedTimeIntervals, RelativeSource={RelativeSource Self}}" />
                        <dxgni:StripLinesControl x:Name="PART_StripLinesControl" ItemsSource="{Binding Path=(dxgn:GanttControl.ActiveView).StripLineIntervals, RelativeSource={RelativeSource Self}}">
                            <dxgni:StripLinesControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <dxgni:StripLinesPanel FirstVisibleDate="{Binding Path=(dxgn:GanttControl.ActiveView).FirstVisibleDate, RelativeSource={RelativeSource Self}}" Zoom="{Binding Path=(dxgn:GanttControl.ActiveView).Zoom, RelativeSource={RelativeSource Self}}" />
                                </ItemsPanelTemplate>
                            </dxgni:StripLinesControl.ItemsPanel>
                        </dxgni:StripLinesControl>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StripLineControl.DefaultStyleBase" TargetType="{x:Type dxgn:StripLineControl}">
        <Setter Property="MinWidth" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{Binding StripLine.Background}" />
        <Setter Property="BorderBrush" Value="{Binding StripLine.BorderBrush}" />
        <Setter Property="BorderThickness" Value="{Binding StripLine.BorderThickness}" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="dxg:GridViewHitInfoBase.HitTestAcceptor">
            <Setter.Value>
                <dxgni:GanttStripLineHitTestAcceptor />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:StripLineControl}">
                    <dx:DXBorder
                        Margin="{Binding BorderThickness, RelativeSource={RelativeSource Mode=Self}, Converter={dxgni:InvertThicknessConverter}}"
                        BorderBrush="Transparent"
                        BorderThickness="{DynamicResource {dxgnt:LWKey GanttControl.StripLineHitTestMargin}}"
                        EnableDPICorrection="False">
                        <dx:DXBorder
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            EnableDPICorrection="False">
                            <ContentPresenter
                                x:Name="PART_ContentPresenter"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                ContentSource="Content" />
                        </dx:DXBorder>
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StripLine.DefaultStyleBase" BasedOn="{StaticResource StripLineStyle}" TargetType="{x:Type dxgn:StripLine}" />
    <Style x:Key="StripLineRule.DefaultStyleBase" BasedOn="{StaticResource StripLineStyle}" TargetType="{x:Type dxgn:StripLineRule}" />
    <Style x:Key="CurrentDateTimeStripLine.DefaultStyleBase" TargetType="{x:Type dxgn:CurrentDateTimeStripLine}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttControl.CurrentDateTimeStripLineBackground}}" />
    </Style>
    <Style x:Key="GanttRowsPanelContainerControl.DefaultStyleBase" TargetType="{x:Type dxgni:GanttRowsPanelContainerControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgni:GanttRowsPanelContainerControl}">
                    <Grid>
                        <dxgni:GanttConnectorItemsControl x:Name="PART_ConnectorsControl" ItemContainerStyle="{Binding Path=(dxgn:GanttControl.ActiveView).ConnectorStyle, RelativeSource={RelativeSource Self}}" ItemsSource="{TemplateBinding Connectors}" />
                        <AdornerDecorator>
                            <dxgni:GanttConnectorFakeRowControl FakeRowDataConnector="{TemplateBinding FakeRowDataConnector}" Visibility="Hidden" />
                        </AdornerDecorator>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttConnectorItemsControl.DefaultStyleBase" BasedOn="{StaticResource {x:Type ItemsControl}}" TargetType="{x:Type dxgni:GanttConnectorItemsControl}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxgni:GanttConnectorsPanel ClipToBounds="True" FirstVisibleDate="{Binding Path=(dxgn:GanttControl.ActiveView).FirstVisibleDate, RelativeSource={RelativeSource Self}}" IsItemsHost="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttSplitterContainerControl.DefaultStyleBase" TargetType="{x:Type dxgn:GanttSplitterContainerControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttSplitterContainerControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding Path=LeftDataAreaIndent}" />
                            <ColumnDefinition Width="{Binding Path=ActualTreeListWidth}" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Thumb
                            x:Name="PART_Splitter"
                            Grid.Column="2"
                            Width="{Binding Path=ActualSplitterWidth}"
                            HorizontalAlignment="Left"
                            Cursor="SizeWE">
                            <Thumb.Template>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <dx:DXBorder Background="{DynamicResource {dxgnt:LWKey GanttControl.SplitterBackground}}" BorderBrush="{DynamicResource {dxgnt:LWKey GanttControl.SplitterBorderBrush}}" BorderThickness="1,0,1,0" />
                                </ControlTemplate>
                            </Thumb.Template>
                        </Thumb>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttHeaderControl.DefaultStyleBase" TargetType="{x:Type dxgn:GanttHeaderControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgt:LWKey GridColumnHeader.Background}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxgt:LWKey GridColumnHeader.HeaderCaptionForeground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgt:LWKey GridColumnHeader.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttControl.HeaderBorderThickness}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttHeaderControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <dxgn:TimescaleControl
                            Width="{Binding Path=View.ChartWidth}"
                            Background="{TemplateBinding Background}"
                            StartDate="{Binding View.FirstVisibleDate}"
                            TimescaleRulerStyle="{Binding Path=View.TimescaleRulerStyle}"
                            Timescales="{Binding View.Timescales}" />
                        <dxg:FitColumnHeader Grid.RowSpan="2" Grid.Column="1" ColumnPosition="Right" />
                        <Control Grid.Row="1" Template="{DynamicResource {dxgnt:LWKey GanttControl.HeaderBottomBorderTemplate}}" />
                        <dx:DXBorder
                            Grid.RowSpan="2"
                            Grid.ColumnSpan="2"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttConnector.DefaultStyleBase" BasedOn="{StaticResource ConnectorBaseStyle}" TargetType="{x:Type dxgn:GanttConnector}">
        <Setter Property="ArrowSize" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorArrowSize}}" />
        <Setter Property="LineMargin" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorLineMargin}}" />
        <Setter Property="MilestoneLineMargin" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorMilestoneLineMargin}}" />
        <Setter Property="CornerRadius" Value="0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsLoaded}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsInvalid}" Value="True">
                <Setter Property="Stroke" Value="{DynamicResource {dxgnt:LWKey GanttItems.InvalidConnectorStroke}}" />
                <Setter Property="StrokeDashArray" Value="4,4,1,4" />
            </DataTrigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="ShadowThickness" Value="1" />
                <Setter Property="ShadowBrush" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorHighlightedShadowBrush}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="ArrowSize" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorArrowSizeTouch}}" />
                <Setter Property="LineMargin" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorLineMarginTouch}}" />
                <Setter Property="MilestoneLineMargin" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorMilestoneLineMarginTouch}}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInvalid}" Value="True" />
                    <Condition Binding="{Binding IsHighlighted, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ShadowBrush" Value="{DynamicResource {dxgnt:LWKey GanttItems.InvalidConnectorHighlightedShadowBrush}}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding IsEditing}" Value="True">
                <Setter Property="Opacity" Value="0.25" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsCritical}" Value="True">
                <Setter Property="Stroke" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorCriticalPathStroke}}" />
                <Setter Property="ShadowBrush" Value="{DynamicResource {dxgnt:LWKey GanttItems.CriticalPathConnectorHighlightedShadowBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttConnectorEditPreview.DefaultStyleBase" BasedOn="{StaticResource ConnectorBaseStyle}" TargetType="{x:Type dxgn:GanttConnectorEditPreview}">
        <Setter Property="ArrowSize" Value="0,0" />
        <Setter Property="Stroke" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskProgressBrush}}" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="StrokeDashArray" Value="2,2" />
    </Style>
    <Style x:Key="GanttTaskEditFlyoutControl.DefaultStyleBase" BasedOn="{StaticResource GanttEditFlyoutBaseStyle}" TargetType="{x:Type dxgni:GanttTaskEditFlyoutControl}">
        <Setter Property="HorizontalAlignment" Value="{Binding HorizontalAlignment}" />
        <Setter Property="VerticalOffset" Value="-5" />
        <Setter Property="FollowTarget" Value="True" />
        <Setter Property="Settings" Value="{dxmvvm:ValueFactory ValueTemplate={StaticResource taskEditFlyoutSettingsTemplate}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Node.Content}" Value="{x:Null}">
                <Setter Property="ContentTemplate" Value="{Binding Path=(dxgn:GanttControl.ActiveView).DrawNewTaskToolTipContentTemplate, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding TaskEditKind}" Value="{x:Static dxgni:TaskEditKind.Progress}">
                <Setter Property="ContentTemplate" Value="{Binding Path=(dxgn:GanttControl.ActiveView).TaskProgressMoveToolTipContentTemplate, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding TaskEditKind}" Value="{x:Static dxgni:TaskEditKind.Duration}">
                <Setter Property="ContentTemplate" Value="{Binding Path=(dxgn:GanttControl.ActiveView).TaskFinishDateMoveToolTipContentTemplate, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding TaskEditKind}" Value="{x:Static dxgni:TaskEditKind.StartDate}">
                <Setter Property="ContentTemplate" Value="{Binding Path=(dxgn:GanttControl.ActiveView).TaskMoveToolTipContentTemplate, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TaskEditKind}" Value="{x:Static dxgni:TaskEditKind.StartDate}" />
                    <Condition Binding="{Binding Node.TaskKind}" Value="Milestone" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate" Value="{Binding Path=(dxgn:GanttControl.ActiveView).MilestoneMoveToolTipContentTemplate, RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttConnectorEditFlyoutControl.DefaultStyleBase" BasedOn="{StaticResource GanttEditFlyoutBaseStyle}" TargetType="{x:Type dxgni:GanttConnectorEditFlyoutControl}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Settings" Value="{dxmvvm:ValueFactory ValueTemplate={StaticResource settingsTemplate}}" />
        <Setter Property="ContentTemplate" Value="{Binding Path=(dxgn:GanttControl.ActiveView).EditConnectorToolTipContentTemplate, RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="GanttStripLineFlyoutControl.DefaultStyleBase" BasedOn="{StaticResource GanttEditFlyoutBaseStyle}" TargetType="{x:Type dxgni:GanttStripLineFlyoutControl}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="AllowOutOfScreen" Value="False" />
        <Setter Property="CloseOnInactiveWindowMouseLeave" Value="True" />
        <Setter Property="VerticalOffset" Value="{Binding VerticalOffset}" />
        <Setter Property="Content" Value="{Binding Content}" />
        <Setter Property="ContentTemplate" Value="{Binding Content.ToolTipTemplate}" />
        <Setter Property="Settings" Value="{dxmvvm:ValueFactory ValueTemplate={StaticResource settingsTemplate}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Content.ToolTipTemplate}" Value="{x:Null}">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type dxgn:StripLineToolTipData}">
                            <ContentControl VerticalAlignment="Center" Content="{Binding ToolTip}" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttTaskInteractionAdornerControl.DefaultStyleBase" TargetType="{x:Type dxgni:GanttTaskInteractionAdornerControl}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Node.TaskKind}" Value="Milestone">
                <DataTrigger.Setters>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type dxgni:GanttTaskInteractionAdornerControl}">
                                <Grid>
                                    <dxgni:GanttConnectorInteractionAdornerControl />
                                    <dxgni:EventsTarget Style="{StaticResource TaskEventTargetStyle}" />
                                    <dxgni:GanttTaskDragThumb
                                        Margin="-1"
                                        Cursor="{Binding Path=(dxgn:GanttControl.ActiveView).Cursors.Move, RelativeSource={RelativeSource Self}}"
                                        IsHitTestVisible="{Binding ShowStartDateThumb}"
                                        ThumbKind="{x:Static dxgni:TaskEditKind.StartDate}" />
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger.Setters>
            </DataTrigger>
            <DataTrigger Binding="{Binding Node}" Value="{x:Null}">
                <DataTrigger.Setters>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type dxgni:GanttTaskInteractionAdornerControl}">
                                <Grid>
                                    <dxgni:EventsTarget />
                                    <dxgni:GanttTaskDragThumb Cursor="{Binding Path=(dxgn:GanttControl.ActiveView).Cursors.NewTask, RelativeSource={RelativeSource Self}}" IsHitTestVisible="{Binding ShowNewTaskThumb}" ThumbKind="{x:Static dxgni:TaskEditKind.NewTask}" />
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgni:GanttTaskInteractionAdornerControl}">
                    <Grid>
                        <dxgni:GanttConnectorInteractionAdornerControl />
                        <dxgni:EventsTarget Margin="0,-2" Style="{StaticResource TaskEventTargetStyle}" />
                        <dxgni:GanttDragThumbPanel Margin="0,-2" Progress="{Binding Node.Progress}">
                            <dxgni:GanttTaskDragThumb
                                Margin="-5,0,0,0"
                                Cursor="{Binding Path=(dxgn:GanttControl.ActiveView).Cursors.Move, RelativeSource={RelativeSource Self}}"
                                IsHitTestVisible="{Binding ShowStartDateThumb}"
                                ThumbKind="{x:Static dxgni:TaskEditKind.StartDate}" />
                            <dxgni:GanttTaskDragThumb
                                Width="7"
                                Margin="0,0,-5,0"
                                HorizontalAlignment="Right"
                                Cursor="{Binding Path=(dxgn:GanttControl.ActiveView).Cursors.Resize, RelativeSource={RelativeSource Self}}"
                                IsHitTestVisible="{Binding ShowDurationThumb}"
                                ThumbKind="{x:Static dxgni:TaskEditKind.Duration}" />
                            <dxgni:GanttTaskDragThumb
                                Width="6"
                                dxgni:GanttDragThumbPanel.IsProgressThumb="True"
                                Cursor="{Binding Path=(dxgn:GanttControl.ActiveView).Cursors.Progress, RelativeSource={RelativeSource Self}}"
                                IsHitTestVisible="{Binding ShowProgressThumb}"
                                ThumbKind="{x:Static dxgni:TaskEditKind.Progress}" />
                        </dxgni:GanttDragThumbPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OutputConnectorDragThumb.DefaultStyleBase" TargetType="{x:Type dxgni:OutputConnectorDragThumb}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttControl.RowBackground}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorThumbsStrokeThickness}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskProgressBrush}}" />
        <Setter Property="Cursor" Value="{Binding Path=(dxgn:GanttControl.ActiveView).Cursors.BeginConnector, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgni:OutputConnectorDragThumb}">
                    <Ellipse
                        x:Name="Ellipse"
                        Fill="{TemplateBinding Background}"
                        Stroke="{TemplateBinding BorderBrush}"
                        StrokeThickness="{Binding BorderThickness.Left, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <Ellipse.Style>
                            <Style x:Key="{x:Type Ellipse}" TargetType="{x:Type Ellipse}">
                                <Setter Property="Width" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorThumbsSize}}" />
                                <Setter Property="Height" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorThumbsSize}}" />
                                <Style.Triggers>
                                    <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                        <Setter Property="Width" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorThumbsSizeTouch}}" />
                                        <Setter Property="Height" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorThumbsSizeTouch}}" />
                                    </Trigger>
                                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                        <Setter Property="Width" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorHighlightedThumbsSize}}" />
                                        <Setter Property="Height" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorHighlightedThumbsSize}}" />
                                        <Setter Property="Margin" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorHighlightedThumbsMargin}}" />
                                    </DataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True" />
                                            <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Width" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorHighlightedThumbsSizeTouch}}" />
                                        <Setter Property="Height" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorHighlightedThumbsSizeTouch}}" />
                                        <Setter Property="Margin" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorHighlightedThumbsMarginTouch}}" />
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Ellipse.Style>
                    </Ellipse>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorThumbsStrokeThicknessTouch}}" />
            </Trigger>
            <Trigger Property="IsActive" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskProgressBrush}}" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttConnectorInteractionAdornerControl.DefaultStyleBase" TargetType="{x:Type dxgni:GanttConnectorInteractionAdornerControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgni:GanttConnectorInteractionAdornerControl}">
                    <Grid>
                        <Grid x:Name="PART_OutputThumbs" Background="Transparent" IsHitTestVisible="{Binding IsHitTestableThumbs}">
                            <Grid.Style>
                                <Style x:Key="{x:Type Grid}" TargetType="{x:Type Grid}">
                                    <Setter Property="Margin" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorThumbsMargin}}" />
                                    <Style.Triggers>
                                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                            <Setter Property="Margin" Value="{DynamicResource {dxgnt:LWKey GanttItems.ConnectorThumbsMarginTouch}}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <dxgni:OutputConnectorDragThumb
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                IsActive="{Binding ActiveConnectorThumb, Converter={dxgni:ActiveConnectorThumbConverter PointType=End}}"
                                ThumbKind="End"
                                Visibility="{Binding ShowOutputConnectorThumb, Converter={dxgni:ConnectorThumbVisibilityConverter ThumbKind=Finish}}" />
                            <dxgni:OutputConnectorDragThumb
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                IsActive="{Binding ActiveConnectorThumb, Converter={dxgni:ActiveConnectorThumbConverter PointType=Begin}}"
                                ThumbKind="Begin"
                                Visibility="{Binding ShowOutputConnectorThumb, Converter={dxgni:ConnectorThumbVisibilityConverter ThumbKind=Start}}" />
                        </Grid>
                        <Grid x:Name="PART_InputThumbs">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <dxgni:InputConnectorDragThumb ThumbKind="Begin" Visibility="{Binding ShowInputConnectorThumb, Converter={dxgni:ConnectorThumbVisibilityConverter ThumbKind=Start}}" />
                            <dxgni:InputConnectorDragThumb Grid.Column="1" ThumbKind="End" Visibility="{Binding ShowInputConnectorThumb, Converter={dxgni:ConnectorThumbVisibilityConverter ThumbKind=Finish}}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GanttConnectorEditStateControl.DefaultStyleBase" TargetType="{x:Type dxgni:GanttConnectorEditStateControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgni:GanttConnectorEditStateControl}">
                    <dxgni:OutputConnectorDragThumb IsActive="True" IsHitTestVisible="False" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PrintGanttRowControl.DefaultStyleBase" TargetType="{x:Type dxgn:PrintGanttRowControl}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="{Binding Path=(dxg:GridPrintingHelper.PrintRowInfo).GanttRowBorderThickness}" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="dxp:ExportSettings.TargetType" Value="Image" />
        <Setter Property="dxp:ImageExportSettings.ImageRenderMode" Value="MakeVectorImage" />
        <Setter Property="dxp:ImageExportSettings.ImageKey" Value="{Binding RowHandle}" />
        <Setter Property="UserStyle" Value="{Binding View.PrintGanttRowStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:PrintGanttRowControl}">
                    <Grid>
                        <dx:DXBorder BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
                            <dxgn:GanttItemPanel
                                Width="{Binding Path=(dxg:GridPrintingHelper.PrintRowInfo).ChartWidth}"
                                ContentIndent="{Binding Path=View.TaskContentIndent}"
                                ContentPosition="{Binding Path=View.TaskContentPosition}"
                                FirstVisibleDate="{Binding Path=(dxg:GridPrintingHelper.PrintRowInfo).FirstVisibleDate}"
                                HighlightGroups="{Binding Path=View.HighlightGroups}"
                                Node="{Binding Path=Node}"
                                ShowBaseline="{Binding Path=View.ShowBaseline}"
                                View="{Binding View}">
                                <ContentPresenter x:Name="PART_GeometryPresenter" dxgn:GanttItemPanel.ItemKind="Geometry" Content="{Binding}">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <dxgn:GanttTaskControl UserStyle="{Binding View.PrintTaskStyle}" />
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                                <ContentPresenter Name="PART_BaselineGeometryPresenter" dxgn:GanttItemPanel.ItemKind="BaselineGeometry" Content="{Binding}">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <dxgn:GanttTaskBaselineControl UserStyle="{Binding View.PrintTaskBaselineStyle}" />
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                                <ContentPresenter
                                    x:Name="PART_PrintContentPresenter"
                                    dxgn:GanttItemPanel.ItemKind="Content"
                                    Content="{Binding}"
                                    ContentTemplate="{Binding View.ActualPrintTaskContentTemplate}"
                                    ContentTemplateSelector="{Binding View.ActualPrintTaskContentTemplateSelector}" />
                            </dxgn:GanttItemPanel>
                        </dx:DXBorder>
                        <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding View.ActualPrintTaskContentTemplate}" Value="{x:Null}" />
                                <Condition Binding="{Binding View.ActualPrintTaskContentTemplateSelector}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_PrintContentPresenter" Property="ContentTemplate" Value="{StaticResource TaskNameContentTemplate}" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Path=Node.TaskKind}" Value="Summary">
                            <Setter TargetName="PART_GeometryPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <dxgn:GanttSummaryTaskControl UserStyle="{Binding View.PrintSummaryTaskStyle}" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_BaselineGeometryPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <dxgn:GanttSummaryTaskBaselineControl UserStyle="{Binding View.PrintSummaryTaskBaselineStyle}" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Node.TaskKind}" Value="Milestone">
                            <Setter TargetName="PART_GeometryPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <dxgn:GanttMilestoneControl UserStyle="{Binding View.PrintMilestoneStyle}" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_BaselineGeometryPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <dxgn:GanttMilestoneBaselineControl UserStyle="{Binding View.PrintMilestoneBaselineStyle}" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PrintGanttHeaderControl.DefaultStyleBase" TargetType="{x:Type dxgn:PrintGanttHeaderControl}">
        <Setter Property="Background" Value="Silver" />
        <Setter Property="dxp:ExportSettings.TargetType" Value="Image" />
        <Setter Property="dxp:ImageExportSettings.ImageRenderMode" Value="MakeVectorImage" />
        <Setter Property="BorderThickness" Value="0,1,1,0" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:PrintGanttHeaderControl}">
                    <Grid>
                        <dx:DXBorder BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
                            <dxgn:TimescaleControl
                                Width="{Binding Path=(dxg:GridPrintingHelper.PrintRowInfo).ChartWidth}"
                                Background="{TemplateBinding Background}"
                                StartDate="{Binding Path=(dxg:GridPrintingHelper.PrintRowInfo).FirstVisibleDate}"
                                TimescaleRulerStyle="{Binding Path=View.PrintTimescaleRulerStyle}"
                                Timescales="{Binding View.Timescales}" />
                        </dx:DXBorder>
                        <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                    <ControlTemplate.Resources>
                        <SolidColorBrush x:Key="{dxgnt:LWKey Timescale.TickBrush}" Color="Black" />
                    </ControlTemplate.Resources>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:GridPrintingHelper.PrintRowInfo).ShowGridElement}" Value="False">
                <Setter Property="BorderThickness" Value="1,1,1,0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="PrintGanttPageControl.DefaultStyleBase" TargetType="{x:Type dxgn:PrintGanttPageControl}">
        <Setter Property="dxg:DataControlBase.ActiveView" Value="{Binding Content.View}" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:PrintGanttPageControl}">
                    <Grid>
                        <dx:DXBorder BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid x:Name="backgroundContainer" Width="{Binding Content.ChartWidth}" HorizontalAlignment="Right">
                                    <dxgni:RowsPrintBackgroundControl
                                        dxp:ExportSettings.TargetType="Image"
                                        dxp:ImageExportSettings.ImageKey="{Binding Path=Content, Converter={dxgni:UniqueImageKeyConverter Key=Background}}"
                                        dxp:ImageExportSettings.ImageRenderMode="MakeVectorImage"
                                        Rows="{Binding Content.Rows}" />
                                    <dxgn:MarkedTimeControl
                                        dxp:ExportSettings.TargetType="Image"
                                        dxp:ImageExportSettings.ImageRenderMode="MakeVectorImage"
                                        MarkedTimeIntervals="{Binding Content.MarkedTimeIntervals}"
                                        Style="{Binding Content.View.PrintMarkedTimeIntervalsStyle}" />
                                    <dxgni:StripLinesControl
                                        dxp:ExportSettings.TargetType="Image"
                                        dxp:ImageExportSettings.ImageRenderMode="MakeVectorImage"
                                        IsPrinting="True"
                                        ItemsSource="{Binding Content.StripLineIntervals}">
                                        <dxgni:StripLinesControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <dxgni:StripLinesPanel FirstVisibleDate="{Binding Content.FirstVisibleDate}" Zoom="{Binding Content.View.Zoom}" />
                                            </ItemsPanelTemplate>
                                        </dxgni:StripLinesControl.ItemsPanel>
                                    </dxgni:StripLinesControl>
                                </Grid>
                                <ItemsControl x:Name="rowsContainer" HorizontalAlignment="Right" ItemsSource="{Binding Path=Content.Rows}" />
                                <Grid x:Name="foregroundContainer" Width="{Binding Content.ChartWidth}" HorizontalAlignment="Right">
                                    <dxgni:GanttConnectorItemsControl
                                        dxp:ExportSettings.TargetType="Image"
                                        dxp:ImageExportSettings.ImageKey="{Binding Path=Content, Converter={dxgni:UniqueImageKeyConverter Key=Connectors}}"
                                        dxp:ImageExportSettings.ImageRenderMode="MakeVectorImage"
                                        ItemContainerStyle="{Binding Path=Content.View.PrintConnectorStyle}"
                                        ItemsSource="{Binding Path=Content.Connectors}">
                                        <dxgni:GanttConnectorItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <dxgni:GanttConnectorsPanel ClipToBounds="True" FirstVisibleDate="{Binding Path=Content.FirstVisibleDate}" />
                                            </ItemsPanelTemplate>
                                        </dxgni:GanttConnectorItemsControl.ItemsPanel>
                                    </dxgni:GanttConnectorItemsControl>
                                </Grid>
                            </Grid>
                        </dx:DXBorder>
                        <dx:DXBorder
                            dxp:ExportSettings.TargetType="Image"
                            dxp:ImageExportSettings.ImageRenderMode="MakeVectorImage"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Content.ShowGanttArea}" Value="False">
                            <Setter TargetName="backgroundContainer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="foregroundContainer" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Content.ShowGridElement}" Value="False">
                <Setter Property="BorderThickness" Value="1,0,1,0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Content.ShowGanttArea}" Value="False">
                <Setter Property="BorderThickness" Value="0,0,0,0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttTaskEditPreviewControl.DefaultStyleBase" BasedOn="{StaticResource TaskPreviewBaseStyle}" TargetType="{x:Type dxgn:GanttTaskEditPreviewControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskPreviewBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskPreviewBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskPreviewBorderThickness}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskPreviewBorderThicknessTouch}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttSummaryTaskEditPreviewControl.DefaultStyleBase" BasedOn="{StaticResource TaskPreviewBaseStyle}" TargetType="{x:Type dxgn:GanttSummaryTaskEditPreviewControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskPreviewBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskPreviewBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskPreviewBorderThickness}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskPreviewBorderThicknessTouch}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttTaskProgressEditPreviewControl.DefaultStyleBase" BasedOn="{StaticResource TaskProgressPreviewBaseStyle}" TargetType="{x:Type dxgn:GanttTaskProgressEditPreviewControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskProgressBrush}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Node.IsCritical}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.TaskCriticalPathProgressBrush}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttSummaryTaskProgressEditPreviewControl.DefaultStyleBase" BasedOn="{StaticResource TaskProgressPreviewBaseStyle}" TargetType="{x:Type dxgn:GanttSummaryTaskProgressEditPreviewControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.SummaryTaskProgressBrush}}" />
    </Style>
    <Style x:Key="GanttMilestoneEditPreviewControl.DefaultStyleBase" TargetType="{x:Type dxgn:GanttMilestoneEditPreviewControl}">
        <Setter Property="Background" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestonePreviewBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestonePreviewBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestonePreviewBorderThickness}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxgn:GanttMilestoneEditPreviewControl}">
                    <Path
                        Data="M0,7.5L7.5,0 15,7.5 7.5,15z"
                        Fill="{TemplateBinding Background}"
                        Stretch="Fill"
                        Stroke="{TemplateBinding BorderBrush}"
                        StrokeThickness="{Binding BorderThickness.Left, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="BorderThickness" Value="{DynamicResource {dxgnt:LWKey GanttItems.MilestonePreviewBorderThicknessTouch}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GanttColumn.DefaultStyleBase" TargetType="dxgn:GanttColumn">
        <Style.Triggers>
            <Trigger Property="BindTo" Value="StartDate">
                <Setter Property="Header" Value="{dxgn:GanttStringId StartDateColumnHeader}" />
                <Setter Property="Width" Value="76" />
                <Setter Property="EditSettings">
                    <Setter.Value>
                        <dxmvvm:ValueFactory>
                            <DataTemplate>
                                <dxe:DateEditSettings Style="{StaticResource StartDateEditSettings}" />
                            </DataTemplate>
                        </dxmvvm:ValueFactory>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="BindTo" Value="FinishDate">
                <Setter Property="Header" Value="{dxgn:GanttStringId FinishDateColumnHeader}" />
                <Setter Property="Width" Value="76" />
                <Setter Property="EditSettings">
                    <Setter.Value>
                        <dxmvvm:ValueFactory>
                            <DataTemplate>
                                <dxe:DateEditSettings Style="{StaticResource FinishDateEditSettings}" />
                            </DataTemplate>
                        </dxmvvm:ValueFactory>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="BindTo" Value="Duration">
                <Setter Property="Header" Value="{dxgn:GanttStringId DurationColumnHeader}" />
                <Setter Property="Width" Value="76" />
                <Setter Property="EditSettings">
                    <Setter.Value>
                        <dxmvvm:ValueFactory>
                            <DataTemplate>
                                <dxe:TextEditSettings Style="{StaticResource DurationEditSettings}" />
                            </DataTemplate>
                        </dxmvvm:ValueFactory>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="BindTo" Value="Progress">
                <Setter Property="Header" Value="{dxgn:GanttStringId ProgressColumnHeader}" />
                <Setter Property="Width" Value="56" />
                <Setter Property="EditSettings">
                    <Setter.Value>
                        <dxmvvm:ValueFactory>
                            <DataTemplate>
                                <dxe:SpinEditSettings Style="{StaticResource ProgressEditSettings}" />
                            </DataTemplate>
                        </dxmvvm:ValueFactory>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="BindTo" Value="Name">
                <Setter Property="Header" Value="{dxgn:GanttStringId NameColumnHeader}" />
                <Setter Property="Width" Value="160" />
                <Setter Property="EditSettings">
                    <Setter.Value>
                        <dxmvvm:ValueFactory>
                            <DataTemplate>
                                <dxe:TextEditSettings Style="{StaticResource NameEditSettings}" />
                            </DataTemplate>
                        </dxmvvm:ValueFactory>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="BindTo" Value="BaselineStartDate">
                <Setter Property="Header" Value="{dxgn:GanttStringId BaselineStartDateColumnHeader}" />
                <Setter Property="Width" Value="76" />
                <Setter Property="EditSettings">
                    <Setter.Value>
                        <dxmvvm:ValueFactory>
                            <DataTemplate>
                                <dxe:DateEditSettings Style="{StaticResource BaselineStartDateEditSettings}" />
                            </DataTemplate>
                        </dxmvvm:ValueFactory>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="BindTo" Value="BaselineFinishDate">
                <Setter Property="Header" Value="{dxgn:GanttStringId BaselineFinishDateColumnHeader}" />
                <Setter Property="Width" Value="76" />
                <Setter Property="EditSettings">
                    <Setter.Value>
                        <dxmvvm:ValueFactory>
                            <DataTemplate>
                                <dxe:DateEditSettings Style="{StaticResource BaselineFinishDateEditSettings}" />
                            </DataTemplate>
                        </dxmvvm:ValueFactory>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="BindTo" Value="BaselineDuration">
                <Setter Property="Header" Value="{dxgn:GanttStringId BaselineDurationColumnHeader}" />
                <Setter Property="Width" Value="76" />
                <Setter Property="EditSettings">
                    <Setter.Value>
                        <dxmvvm:ValueFactory>
                            <DataTemplate>
                                <dxe:TextEditSettings Style="{StaticResource BaselineDurationEditSettings}" />
                            </DataTemplate>
                        </dxmvvm:ValueFactory>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="BindTo" Value="ResourceLinks">
                <Setter Property="Header" Value="{dxgn:GanttStringId ResourceLinksColumnHeader}" />
                <Setter Property="Width" Value="150" />
                <Setter Property="EditSettings">
                    <Setter.Value>
                        <dxmvvm:ValueFactory>
                            <DataTemplate>
                                <dxg:LookUpEditSettings Style="{StaticResource ResourceLinksEditSettings}" />
                            </DataTemplate>
                        </dxmvvm:ValueFactory>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion DEFAULT STYLES-->
</ResourceDictionary>