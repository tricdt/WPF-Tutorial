<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxdo="http://schemas.devexpress.com/winfx/2008/xaml/docking"
    xmlns:dxdot="http://schemas.devexpress.com/winfx/2008/xaml/docking/themekeys"
    xmlns:dxdv="http://schemas.devexpress.com/winfx/2008/xaml/documentviewer"
    xmlns:dxdvt="http://schemas.devexpress.com/winfx/2008/xaml/documentviewer/themekeys"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
    xmlns:dxp="http://schemas.devexpress.com/winfx/2008/xaml/printing"
    xmlns:dxpn="http://schemas.devexpress.com/winfx/2008/xaml/printing/native"
    xmlns:dxprg="http://schemas.devexpress.com/winfx/2008/xaml/propertygrid"
    xmlns:dxr="http://schemas.devexpress.com/winfx/2008/xaml/ribbon"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dxdiagcl="clr-namespace:DevExpress.Diagram.Core.Localization;assembly=DevExpress.Diagram.v24.1.Core"
    xmlns:dxdiagci="clr-namespace:DevExpress.Diagram.Core.Native;assembly=DevExpress.Diagram.v24.1.Core"
    xmlns:dxdiagc="clr-namespace:DevExpress.Diagram.Core;assembly=DevExpress.Diagram.v24.1.Core"
    xmlns:dxmvvmInternal="clr-namespace:DevExpress.Mvvm.UI.Interactivity.Internal;assembly=DevExpress.Xpf.Core.v24.1"
    xmlns:dxdiagi="clr-namespace:DevExpress.Xpf.Diagram.Native;assembly=DevExpress.Xpf.Diagram.v24.1"
    xmlns:dxdiagt="clr-namespace:DevExpress.Xpf.Diagram.Themes;assembly=DevExpress.Xpf.Diagram.v24.1"
    xmlns:dxdiag="clr-namespace:DevExpress.Xpf.Diagram;assembly=DevExpress.Xpf.Diagram.v24.1"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <dxi:CachedResourceDictionary Assembly="DevExpress.Xpf.Diagram" Path="Themes/Generic/RibbonItemsStyles.meta.designer.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <dxmvvm:ObjectToObjectConverter x:Key="IconsAndNamesToBoolConverter" DefaultTarget="False">
        <dxmvvm:MapItem Source="IconsAndNames" Target="True" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="NamesUnderIconsToBoolConverter" DefaultTarget="False">
        <dxmvvm:MapItem Source="NamesUnderIcons" Target="True" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="IconsOnlyToBoolConverter" DefaultTarget="False">
        <dxmvvm:MapItem Source="IconsOnly" Target="True" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="NamesOnlyToBoolConverter" DefaultTarget="False">
        <dxmvvm:MapItem Source="NamesOnly" Target="True" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="BoolToHeightConverter" DefaultTarget="5000">
        <dxmvvm:MapItem Source="False" Target="0" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="InverseBoolToHeightConverter" DefaultTarget="5000">
        <dxmvvm:MapItem Source="True" Target="0" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="ViewSelectorToBoolConverter" DefaultTarget="False">
        <dxmvvm:MapItem Source="ViewSelector" Target="True" />
        <dxmvvm:MapItem Source="ViewAndOrderSelector" Target="True" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="ViewAndOrderSelectorToBoolConverter" DefaultTarget="False">
        <dxmvvm:MapItem Source="ViewAndOrderSelector" Target="True" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="StencilsCompactSelectorToBoolConverter" DefaultTarget="False">
        <dxmvvm:MapItem Source="StencilsCompactSelector" Target="True" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="MenuMarginConverter">
        <dxmvvm:MapItem Source="True" Target="0,3,0,2" />
        <dxmvvm:MapItem Source="False" Target="0,10,0,2" />
    </dxmvvm:ObjectToObjectConverter>
    <dxdiag:DiagramStringIdConverter x:Key="DiagramStringIdConverter" />
    <Pen x:Key="PageBackgroundPen" Brush="#FFB3B3B3" Thickness="1">
        <Pen.DashStyle>
            <DashStyle Dashes="8" Offset="3" />
        </Pen.DashStyle>
    </Pen>
    <dxmvvm:ObjectToObjectConverter x:Key="HideButtonTransformConverter" DefaultTarget="1">
        <dxmvvm:MapItem Source="True" Target="-1" />
    </dxmvvm:ObjectToObjectConverter>
    <x:Array x:Key="DiagramFontSizes" Type="sys:Double">
        <sys:Double>6</sys:Double>
        <sys:Double>8</sys:Double>
        <sys:Double>9</sys:Double>
        <sys:Double>10</sys:Double>
        <sys:Double>11</sys:Double>
        <sys:Double>12</sys:Double>
        <sys:Double>14</sys:Double>
        <sys:Double>16</sys:Double>
        <sys:Double>18</sys:Double>
        <sys:Double>24</sys:Double>
        <sys:Double>30</sys:Double>
        <sys:Double>36</sys:Double>
        <sys:Double>48</sys:Double>
        <sys:Double>60</sys:Double>
    </x:Array>


    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Behaviors\CollectionUITypeEditors\Themes\CollectionEditorBase.xaml-->
    <Style x:Key="ImageOpacityTrigger" TargetType="{x:Type Image}">
        <Setter Property="Margin" Value="4" />
        <Setter Property="Image.Opacity" Value="0.5" />
        <Style.Triggers>
            <Trigger Property="Button.IsEnabled" Value="True">
                <Setter Property="Image.Opacity" Value="1.0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Behaviors\CollectionUITypeEditors\Themes\CollectionEditorBase.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Behaviors\CollectionUITypeEditors\Themes\ExtendedSelectionCollectionEditor.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Behaviors\CollectionUITypeEditors\Themes\ExtendedSelectionCollectionEditor.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\RibbonResources.xaml-->
    <DataTemplate xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" x:Key="AutoSizeContentTemplate">
        <StackPanel>
            <TextBlock FontWeight="Bold" Text="{Binding Name}" />
            <TextBlock MaxWidth="250" Text="{Binding Description}" TextWrapping="Wrap" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="PageSizeContentTemplate">
        <StackPanel>
            <TextBlock FontWeight="Bold" Text="{Binding Name}" />
            <TextBlock FlowDirection="LeftToRight" Text="{Binding PaperSizeInfo.InchesSizeString}" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="galleryControlItemTemplate">
        <ContentControl>
            <dxb:GalleryItem Caption="{Binding Mode=OneTime}">
                <dxb:GalleryItem.Glyph>
                    <DrawingImage />
                </dxb:GalleryItem.Glyph>
            </dxb:GalleryItem>
        </ContentControl>
    </DataTemplate>
    <Style x:Key="containerGalleryStyleBase" TargetType="{x:Type dxb:Gallery}">
        <Setter Property="ItemGlyphBorderTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <dxdiag:ShapeToolboxPreview
                        Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram)}"
                        IsCompact="False"
                        ItemTool="{Binding Path=Caption, Converter={dxdiagi:ContainerShapeDescriptionToToolConverter}}"
                        ShapePresenterSize="70,45"
                        ShapePresenterStretch="Fill"
                        Theme="{Binding Path=Diagram.Theme, RelativeSource={RelativeSource Self}}"
                        UniformMargin="5"
                        ViewMode="IconsOnly" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemGlyphVerticalAlignment" Value="Center" />
        <Setter Property="ItemGlyphHorizontalAlignment" Value="Center" />
        <Setter Property="ItemAutoHeight" Value="True" />
        <Setter Property="AllowToolTips" Value="False" />
        <Setter Property="IsItemDescriptionVisible" Value="False" />
        <Setter Property="IsItemCaptionVisible" Value="False" />
        <Setter Property="IsGroupCaptionVisible" Value="False" />
        <Setter Property="AllowFilter" Value="False" />
    </Style>


    <Style x:Key="listGalleryStyleBase" BasedOn="{StaticResource containerGalleryStyleBase}" TargetType="{x:Type dxb:Gallery}">
        <Setter Property="ItemGlyphBorderTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <dxdiag:ShapeToolboxPreview
                        Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram)}"
                        IsCompact="False"
                        ItemTool="{Binding Converter={dxdiagi:ContainerShapeDescriptionToListToolConverter}}"
                        ShapePresenterSize="70,45"
                        ShapePresenterStretch="Fill"
                        Theme="{Binding Path=Diagram.Theme, RelativeSource={RelativeSource Self}}"
                        UniformMargin="5"
                        ViewMode="IconsOnly" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsGroupCaptionVisible" Value="True" />
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\RibbonResources.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\Resources.xaml-->
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.PointsSize}">7</sys:Double>
    <Thickness x:Key="{dxdiagt:LWKey Adorners.SelectionAdornerMoveBorderThickness}">7</Thickness>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.SelectionAdornerRectStrokeThickness}">3</sys:Double>
    <Thickness x:Key="{dxdiagt:LWKey Adorners.SelectionPartDefaultBorderThickness}">2</Thickness>
    <Thickness x:Key="{dxdiagt:LWKey Adorners.SelectionPartSelectBorderThickness}">4</Thickness>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.BeginConnectedElementSize}">13</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.EndConnectedElementSize}">13</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.ConnectorIntermediatePointSize}">6</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.ConnectorIntermediatePointStrokeThickness}">1</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.ConnectorSelectionPartDefaultThickness}">2</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.ConnectorSelectionPartSelectedThickness}">4</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.ConnectorDragThickness}">2</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.ConnectorProtectionMarkerSize}">13</sys:Double>
    <Thickness x:Key="{dxdiagt:LWKey Adorners.GlueToPointBorderThickness}">3</Thickness>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.GlueToPointBorderSize}">13</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.ShapeConnectionPointSize}">5</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.SnapLineExtent}">10</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Adorners.ShapePresenterDefaultSize}">40</sys:Double>
    <Thickness x:Key="{dxdiagt:LWKey Adorners.RotationAdornerMargin}">-10,-30,-13,0</Thickness>
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ResizeBoxBackground}" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.SelectionAdornerStroke}" Color="#FF939393" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.SelectionAdornerMoveBorderBrush}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.SelectionPartBorderBrush}" Color="#FF21408F" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ParameterPointsBackground}" Color="#FFFFFF00" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ParameterPointsStroke}" Color="#FF000000" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ConnectorConnectedMarkerFill}" Color="#FF0EA619" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ConnectorConnectedMarkerEndFill}" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ConnectorConnectedMarkerStroke}" Color="#FF207626" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ConnectorIntermediatePointFill}" Color="#FF5E9CEF" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ConnectorIntermediatePointStroke}" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ConnectorDragColor}" Color="#FFA2A2A2" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ConnectorMovePointColor}" Color="#FF6A6A6A" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ConnectorProtectionMarkerFill}" Color="#FF939393" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ConnectorProtectionMarkerStroke}" Color="#FF939393" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.BeginConnectedElementBackground}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.EndConnectedElementBackground}" Color="Transparent" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.EndFreeElementBackground}" Color="#FFA2A2A2" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.GlueHighlightBrush}" Color="#FF22D006" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.GlueHighlightBrushDisabled}" Color="#FFBD2239" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.ShapeConnectionPointBrush}" Color="#FF6A6A6A" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.SnapLineBrush}" Color="#FF5AC85A" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey Adorners.InsertTargetHighlightBrush}" Color="#FF22D006" />



    <!-- Adoner -->

    <DataTemplate x:Key="{dxdiagt:LWKey Adorners.SizeSnapLineTemplate}">
        <Grid>
            <Path
                Margin="1,3,0,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Data="M0,0 L6,-3 L6,3 z"
                Fill="{DynamicResource {dxdiagt:LWKey Adorners.SnapLineBrush}}"
                Stroke="{DynamicResource {dxdiagt:LWKey Adorners.SnapLineBrush}}" />
            <Path
                Margin="0,3,1,0"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Data="M0,0 L-6,-3 L-6,3 z"
                Fill="{DynamicResource {dxdiagt:LWKey Adorners.SnapLineBrush}}"
                Stroke="{DynamicResource {dxdiagt:LWKey Adorners.SnapLineBrush}}" />
            <dx:DXBorder Height="1" VerticalAlignment="Center" Background="{DynamicResource {dxdiagt:LWKey Adorners.SnapLineBrush}}" />
            <dx:DXBorder VerticalAlignment="Stretch" BorderBrush="{DynamicResource {dxdiagt:LWKey Adorners.SnapLineBrush}}" BorderThickness="1,0,1,0" />
        </Grid>
    </DataTemplate>
    <Storyboard x:Key="{dxdiagt:LWKey DiagramControl.ExpandExportOptionsStoryboard}">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="AnimationProgress">
            <SplineDoubleKeyFrame KeySpline=".2,.8,.2,.8" KeyTime="0:0:0.3" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <SplineDoubleKeyFrame KeySpline=".4,.8,.8,.4" KeyTime="0:0:0.3" Value="1" />
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="{dxdiagt:LWKey DiagramControl.CollapseExportOptionsStoryboard}">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="AnimationProgress">
            <SplineDoubleKeyFrame KeySpline=".2,.8,.2,.8" KeyTime="0:0:0.3" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <SplineDoubleKeyFrame KeySpline=".8,.4,.4,.8" KeyTime="0:0:0.3" Value="0" />
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\Resources.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\Toolbox.xaml-->
    <Style x:Key="UnselectedListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Path
                            Width="7"
                            Height="6"
                            Margin="-8,0,-8,0"
                            Data="{Binding}"
                            Fill="{Binding ElementName=scrollButtonText, Path=Foreground}" />
                        <TextBlock x:Name="scrollButtonText" Margin="0,-2,0,-2" Text=" " />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate x:Key="StencilCompactItemTemplate">
        <ContentControl>
            <dxb:BarCheckItem CloseSubMenuOnClick="False" Content="{Binding Name}" IsChecked="{Binding IsChecked, Mode=TwoWay}" />
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="SelectedStencilItemTemplate">
        <ContentControl>
            <dxb:BarCheckItem
                CloseSubMenuOnClick="False"
                Content="{Binding Name}"
                GroupIndex="1"
                IsChecked="{Binding IsSelected, Mode=TwoWay}" />
        </ContentControl>
    </DataTemplate>
    <ControlTemplate x:Key="ListBoxTemplate" TargetType="ListBox">
        <dx:DXBorder
            Background="Transparent"
            BorderBrush="Transparent"
            BorderThickness="0"
            CornerRadius="2">
            <ScrollViewer
                x:Name="ScrollViewer"
                Padding="0"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="0">
                <ItemsPresenter />
            </ScrollViewer>
        </dx:DXBorder>
    </ControlTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\Toolbox.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\Adorners.xaml-->
    <Style x:Key="ConnectorPreviewAdornerBaseStyle" TargetType="{x:Type dxdiag:ConnectorPreviewAdornerBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ConnectorPreviewAdornerBase}">
                    <Grid>
                        <dxdiag:ShapePresenter
                            Background="{TemplateBinding Stroke}"
                            Shape="{TemplateBinding Shape}"
                            Stroke="{TemplateBinding Stroke}"
                            StrokeDashArray="{TemplateBinding StrokeDashArray}"
                            StrokeThickness="{TemplateBinding StrokeThickness}"
                            Zoom="{TemplateBinding dxdiag:AdornerLayer.Zoom}" />
                        <dxdiag:ScaleCanvas>
                            <TextBlock
                                dxdiag:ScaleCanvas.Position="{TemplateBinding ContentPosition}"
                                Background="{TemplateBinding ContentBackground}"
                                Text="{TemplateBinding Content}"
                                TextDecorations="{TemplateBinding TextDecorations}" />
                        </dxdiag:ScaleCanvas>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="BoxStyle" TargetType="Rectangle">
        <Setter Property="Width" Value="{DynamicResource {dxdiagt:LWKey Adorners.PointsSize}}" />
        <Setter Property="Height" Value="{DynamicResource {dxdiagt:LWKey Adorners.PointsSize}}" />
        <Setter Property="Fill" Value="{DynamicResource {dxdiagt:LWKey Adorners.ResizeBoxBackground}}" />
        <Setter Property="Stroke" Value="{DynamicResource {dxdiagt:LWKey Adorners.SelectionAdornerStroke}}" />
    </Style>
    <Style x:Key="boundsSnapLineStyle" TargetType="Line">
        <Setter Property="Stroke" Value="{DynamicResource {dxdiagt:LWKey Adorners.SnapLineBrush}}" />
        <Setter Property="StrokeDashArray" Value="4,2" />
        <Setter Property="StrokeThickness" Value="1" />
        <Setter Property="X1" Value="{Binding From.X, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Y1" Value="{Binding From.Y, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="X2" Value="{Binding To.X, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Y2" Value="{Binding To.Y, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\Adorners.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\Ruler.xaml-->
    <Style x:Key="BaseScaleStyle" TargetType="{x:Type dxdiag:RulerScaleBase}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxdiagt:LWKey Ruler.Foreground}}" />
        <Setter Property="TextBlock.FontSize" Value="{DynamicResource {dxdiagt:LWKey Ruler.ScaleFontSize}}" />
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\Ruler.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\Controls.xaml-->
    <sys:Double x:Key="{dxdiagt:LWKey Controls.DragPreviewOpacity}">0.4</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey Ruler.ScaleFontSize}">10</sys:Double>
    <Thickness x:Key="{dxdiagt:LWKey DiagramToolboxControl.StencilGroupMargin}">3,3,2,2</Thickness>
    <sys:Double x:Key="{dxdiagt:LWKey DiagramToolboxControl.ShapePresenterSize}">46</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey DiagramToolboxControl.ShapeDescriptionWidth}">73</sys:Double>
    <sys:Double x:Key="{dxdiagt:LWKey DiagramDesignerControl.PanZoomBottomRightOffset}">20</sys:Double>
    <SolidColorBrush x:Key="{dxdiagt:LWKey DiagramControl.PageBackground}" Color="White" />
    <SolidColorBrush x:Key="{dxdiagt:LWKey DiagramControl.PrintPageBackground}" Color="White" />


    <Size x:Key="{dxdiagt:LWKey Controls.DiagramConnectorArrowSize}">7,7</Size>
    <ControlTemplate x:Key="{dxdiagt:LWKey Controls.DiagramContainerCollapseButtonTemplate}" TargetType="{x:Type Control}">
        <Image
            x:Name="PART_CollapseButtonImage"
            Margin="{TemplateBinding Padding}"
            Source="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/ExpandedContainerIcon.svg}"
            Stretch="UniformToFill">
            <dxmvvm:Interaction.Behaviors>
                <dxdiagi:ColorizeSvgImageBehavior Stroke="{Binding BorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}" StrokeCode="{x:Static dxdiagc:DiagramContainerController.CollapseButtonReplaceColorCode}" />
            </dxmvvm:Interaction.Behaviors>
        </Image>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsCollapsed, RelativeSource={RelativeSource AncestorType=dxdiag:DiagramContainer}}" Value="True">
                <Setter TargetName="PART_CollapseButtonImage" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/CollapsedContainerIcon.svg}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\Controls.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\DiagramControl.xaml-->
    <Style x:Key="DiagramLayoutPanelStyle" TargetType="{x:Type dxdo:LayoutPanel}">
        <Setter Property="AllowMaximize" Value="False" />
        <Setter Property="AllowMinimize" Value="False" />
        <Setter Property="AllowClose" Value="False" />
        <Setter Property="AllowHide" Value="False" />
        <Setter Property="AllowDock" Value="True" />
        <Setter Property="AllowFloat" Value="False" />
        <Setter Property="AllowContextMenu" Value="False" />
        <Setter Property="AllowDockToDocumentGroup" Value="False" />
    </Style>
    <Style x:Key="ZoomTrackBarEditStyle" TargetType="{x:Type dxe:TrackBarEdit}">
        <Setter Property="Minimum" Value="-3600" />
        <Setter Property="Maximum" Value="3600" />
        <Setter Property="SmallStep" Value="120" />
        <Setter Property="LargeStep" Value="240" />
        <Setter Property="TickFrequency" Value="3600" />
    </Style>
    <ControlTemplate x:Key="exportOptionsToggleButtonTemplate" TargetType="ToggleButton">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid
                x:Name="Root"
                Width="16"
                Height="16"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Background="Transparent">
                <dx:DXBorder
                    x:Name="IsUnchecked"
                    Width="Auto"
                    Height="Auto"
                    CornerRadius="2">
                    <Path
                        Width="6"
                        Height="7"
                        Margin="2,0,1,0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Data="F1 M 26,22.0001L 26,14.0001L 30,18.0001L 26,22.0001 Z "
                        Fill="{TemplateBinding Foreground}"
                        Stretch="Fill" />
                </dx:DXBorder>
                <dx:DXBorder
                    x:Name="IsChecked"
                    Width="9"
                    Height="9"
                    CornerRadius="2"
                    Visibility="Collapsed">
                    <Path
                        Width="7"
                        Height="6"
                        Margin="0,1,0,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="F1 M 32.9999,14.0001L 40.9999,14.0001L 37,18.0001L 32.9999,14.0001 Z "
                        Fill="{TemplateBinding Foreground}"
                        Stretch="Fill" />
                </dx:DXBorder>
            </Grid>
            <TextBlock Grid.Column="1" Text="{dxp:PrintingStringId StringId=MoreOptions}" TextAlignment="Left" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="IsUnchecked" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="IsChecked" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <Style x:Key="HideButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        Width="23"
                        Height="23"
                        Margin="0,0,0,0"
                        Background="#00000000">
                        <Path
                            x:Name="glyph"
                            Width="9"
                            Height="10"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="F1 M 1395,798L 1400,793L 1400,795L 1397,798L 1400,801L 1400,803L 1395,798 Z M 1399,798L 1404,793L 1404,795L 1401,798L 1404,801L 1404,803L 1399,798 Z "
                            Fill="{TemplateBinding Foreground}"
                            RenderTransformOrigin="0.5,0.5"
                            Stretch="Fill">
                            <Path.RenderTransform>
                                <ScaleTransform ScaleX="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HideButtonTransformConverter}}" />
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {dxdot:LWKey DockPaneElements.CaptionNormalForeground}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="0,0,10,0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PanAndZoomLayoutPanelStyleBase}" BasedOn="{StaticResource DiagramLayoutPanelStyle}" TargetType="{x:Type dxdo:LayoutPanel}">
        <Setter Property="AllowClose" Value="True" />
        <Setter Property="AllowFloat" Value="True" />
        <Setter Property="ItemWidth" Value="270" />
        <Setter Property="ItemHeight" Value="220" />
        <Setter Property="AllowDockToCurrentItem" Value="False" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="ClosingBehavior" Value="ImmediatelyRemove" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PanAndZoomFloatGroupStyleBase}" TargetType="{x:Type dxdo:FloatGroup}">
        <Setter Property="AllowExpand" Value="False" />
        <Setter Property="AllowDockToCurrentItem" Value="False" />
        <Setter Property="AllowMinimize" Value="False" />
        <Setter Property="AllowMaximize" Value="False" />
        <Setter Property="FloatSize" Value="270,220" />
        <Setter Property="ClosingBehavior" Value="ImmediatelyRemove" />
    </Style>

    <Style x:Key="{dxdiagt:LWKey DiagramControl.PropertyGridStyleBase}" TargetType="dxprg:PropertyGridControl">
        <Setter Property="SelectedObject" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SelectionModel}" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="dx:ScrollBarExtensions.ScrollBarMode" Value="Standard" />
        <Setter Property="ShowCategories" Value="Visible" />
        <Setter Property="ExpandCategoriesWhenSelectedObjectChanged" Value="True" />
        <Setter Property="SortMode" Value="Ascending" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramControl.DockLayoutManagerStyleBase}" TargetType="dxdo:DockLayoutManager">
        <Setter Property="AutoHideExpandMode" Value="MouseDown" />
        <Setter Property="ShowFloatWindowsInTaskbar" Value="False" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxdot:LWKey DockPaneElements.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxdiagt:LWKey DiagramDesignerControl.DockLayoutManagerBorderThickness}}" />
        <Setter Property="AllowDocumentSelector" Value="False" />
        <Setter Property="ViewStyle" Value="Light" />
        <Setter Property="ShowInvisibleItems" Value="False" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramControl.PageSetupWindowStyleBase}" TargetType="dx:ThemedWindow">
        <Setter Property="WindowStyle" Value="ToolWindow" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PanAndZoomLayoutPanelStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControl.PanAndZoomLayoutPanelStyleBase}}" TargetType="{x:Type dxdo:LayoutPanel}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PanAndZoomFloatGroupStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControl.PanAndZoomFloatGroupStyleBase}}" TargetType="{x:Type dxdo:FloatGroup}" />
    <Style x:Key="{dxdiagt:LWKey DiagramControl.PropertyGridStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramControl.PropertyGridStyleBase}}" TargetType="dxprg:PropertyGridControl" />
    <Style x:Key="{dxdiagt:LWKey DiagramControl.DockLayoutManagerStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramControl.DockLayoutManagerStyleBase}}" TargetType="dxdo:DockLayoutManager" />
    <Style x:Key="{dxdiagt:LWKey DiagramControl.PageSetupWindowStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramControl.PageSetupWindowStyleBase}}" TargetType="dx:ThemedWindow" />

    <dxdo:FloatGroup x:Key="{dxdiagt:LWKey DiagramDesignerControl.PanAndZoomFloatGroup}" x:Shared="false" Style="{DynamicResource {dxdiagt:LWKey DiagramDesignerControl.PanAndZoomFloatGroupStyle}}">
        <dxdo:LayoutPanel x:Name="PART_PanAndZoomPanel" Caption="{dxdiag:DiagramControlLocalizedString Panel_PanAndZoom_Name}" Style="{DynamicResource {dxdiagt:LWKey DiagramDesignerControl.PanAndZoomLayoutPanelStyle}}">
            <dxdiag:DiagramPanAndZoomControl x:Name="PART_PanAndZoomControl" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
        </dxdo:LayoutPanel>
    </dxdo:FloatGroup>
    <DataTemplate x:Key="{dxdiagt:LWKey DiagramControl.PropertiesPanelContentTemplate}">
        <dxprg:PropertyGridControl Style="{DynamicResource {dxdiagt:LWKey DiagramControl.PropertyGridStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey DiagramControl.PageSetupTemplate}">
        <dxdiag:PageSetupControl />
    </DataTemplate>

    <DataTemplate x:Key="{dxdiagt:LWKey BindingEditor.EditorTemplate}">
        <Grid>
            <dxlc:LayoutControl
                Width="430"
                Height="130"
                Padding="50,0,30,0"
                dxmvvmInternal:InteractionHelper.EnableBehaviorsInDesignTime="True"
                ItemSpace="15"
                Orientation="Vertical">
                <dxlc:LayoutItem
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    Label="{Binding ContentPropertyName}"
                    LabelPosition="Top">
                    <dxlc:LayoutItem.LabelTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Inlines>
                                    <Run Text="Bind " />
                                    <Run FontWeight="Bold" Text="{Binding Mode=OneWay}" />
                                    <Run Text=" property to:" />
                                </TextBlock.Inlines>
                            </TextBlock>
                        </DataTemplate>
                    </dxlc:LayoutItem.LabelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="20" />
                        </Grid.ColumnDefinitions>
                        <dxe:TextEdit
                            x:Name="PART_ExpressionEditor"
                            Height="25"
                            EditValue="{Binding BindingExpression, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            NullText="Enter field name..."
                            ShowNullText="True">
                            <dxmvvm:Interaction.Behaviors>
                                <dxmvvm:FocusBehavior />
                            </dxmvvm:Interaction.Behaviors>
                        </dxe:TextEdit>
                        <Button
                            Grid.Column="1"
                            Margin="5,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Command="{Binding HelpCommand}"
                            IsTabStop="False"
                            ToolTip="Go to related article">
                            <Button.Template>
                                <ControlTemplate>
                                    <Image
                                        Width="16"
                                        Height="16"
                                        RenderOptions.BitmapScalingMode="NearestNeighbor"
                                        Source="{dxdiag:DiagramSvgImage Size='16,16', Path=Images/Svg/BindingEditorHelpIcon.svg}" />
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        <dxe:ErrorControl
                            Grid.Column="2"
                            IsTabStop="False"
                            ToolTip="{Binding ValidationErrorMessage}"
                            Visibility="{Binding HasValidationError, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
                    </Grid>
                </dxlc:LayoutItem>
                <dxe:CheckEdit
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Content="Save changes to the source"
                    IsChecked="{Binding EnableTwoWayBinding, Mode=TwoWay}"
                    IsEnabled="{Binding CanEnableTwoWayBinding}" />
            </dxlc:LayoutControl>
            <dx:DialogFooter>
                <Grid>
                    <StackPanel Orientation="Horizontal">
                        <dx:DialogButton Padding="10,0" Command="{Binding ClearBindingCommand}" DialogUICommandTag="ClearBinding" />
                    </StackPanel>
                    <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                        <dx:DialogButton DialogResult="OK" IsEnabled="{Binding HasValidationError, Converter={dxmvvm:BooleanNegationConverter}}" />
                        <dx:DialogButton DialogResult="Cancel" />
                    </StackPanel>
                </Grid>
            </dx:DialogFooter>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey BindingEditor.DialogServiceTemplate}">
        <ContentControl>
            <dx:DialogService DialogStyle="{DynamicResource {dxdiagt:LWKey BindingEditor.DialogWindowStyle}}" DialogWindowStartupLocation="CenterScreen" ViewTemplate="{DynamicResource {dxdiagt:LWKey BindingEditor.EditorTemplate}}" />
        </ContentControl>
    </DataTemplate>
    <Style x:Key="{dxdiagt:LWKey BindingEditor.DialogWindowStyle}" TargetType="dx:ThemedWindow">
        <Setter Property="WindowStyle" Value="ToolWindow" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <DataTemplate x:Key="{dxdiagt:LWKey PrintPreviewControl.ScaleDialogServiceTemplate}">
        <ContentControl>
            <dx:DialogService DialogStyle="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.ScaleDialogWindowStyle}}" DialogWindowStartupLocation="CenterOwner" ViewTemplate="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.ScaleDialogViewTemplate}}" />
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PrintPreviewControl.ScaleDialogViewTemplate}">
        <Grid Margin="12,12,12,0" VerticalAlignment="Center">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="130" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <RadioButton VerticalAlignment="Center" Content="{dxdiag:DiagramControlLocalizedString PrintPreview_Scale_Dialog_BeginFitLabel}" IsChecked="{Binding ScaleMode, Mode=TwoWay, Converter={dxdiagi:PrintPreviewScaleModeToBooleanConverter TrueMode=Fit, FalseMode=Scale}}" />
            <dxe:ComboBoxEdit
                Grid.Column="1"
                Margin="10,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                EditValue="{Binding PrinterPageCount, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                IsEnabled="{Binding ScaleMode, Mode=TwoWay, Converter={dxdiagi:PrintPreviewScaleModeToBooleanConverter TrueMode=Fit, FalseMode=Scale}}"
                ItemsSource="{Binding FitToPagesValues}" />
            <TextBlock Grid.Column="2" Text="{dxdiag:DiagramControlLocalizedString PrintPreview_Scale_Dialog_EndFitLabel}" />
            <dxe:ComboBoxEdit
                Grid.Row="1"
                Grid.Column="1"
                Margin="10"
                EditValue="{Binding FitOrientation, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                IsEnabled="{Binding ScaleMode, Mode=TwoWay, Converter={dxdiagi:PrintPreviewScaleModeToBooleanConverter TrueMode=Fit, FalseMode=Scale}}">
                <dxmvvm:Interaction.Behaviors>
                    <dxmvvm:EnumItemsSourceBehavior EnumType="{x:Type dxdiagc:OrientationKind}" />
                </dxmvvm:Interaction.Behaviors>
            </dxe:ComboBoxEdit>
            <RadioButton
                Grid.Row="2"
                VerticalAlignment="Center"
                Content="{dxdiag:DiagramControlLocalizedString PrintPreview_Scale_Dialog_BeginAdjustLabel}"
                IsChecked="{Binding ScaleMode, Mode=TwoWay, Converter={dxdiagi:PrintPreviewScaleModeToBooleanConverter TrueMode=Scale, FalseMode=Fit}}" />
            <dxe:ComboBoxEdit
                Grid.Row="2"
                Grid.Column="1"
                Margin="10,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                DisplayFormatString="# '%'"
                EditValue="{Binding Scale, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                IsEnabled="{Binding ScaleMode, Mode=TwoWay, Converter={dxdiagi:PrintPreviewScaleModeToBooleanConverter TrueMode=Scale, FalseMode=Fit}}"
                ItemsSource="{Binding ScaleValues}">
                <dxe:ComboBoxEdit.ItemTemplate>
                    <DataTemplate>
                        <TextBlock>
                            <TextBlock.Text>
                                <Binding StringFormat="# '%'" />
                            </TextBlock.Text>
                        </TextBlock>
                    </DataTemplate>
                </dxe:ComboBoxEdit.ItemTemplate>
            </dxe:ComboBoxEdit>
            <TextBlock Grid.Row="2" Grid.Column="2" Text="{dxdiag:DiagramControlLocalizedString PrintPreview_Scale_Dialog_EndAdjustLabel}" />
        </Grid>
    </DataTemplate>
    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.ScaleDialogWindowStyle}" TargetType="dx:ThemedWindow">
        <Setter Property="WindowStyle" Value="ToolWindow" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>
    <DataTemplate x:Key="{dxdiagt:LWKey DiagramControl.ExportOptionsDialogTemplate}">
        <Grid Width="450">
            <dxmvvm:Interaction.BehaviorsTemplate>
                <DataTemplate>
                    <ItemsControl>
                        <dx:DXMessageBoxService />
                        <dxmvvm:CurrentWindowService />
                    </ItemsControl>
                </DataTemplate>
            </dxmvvm:Interaction.BehaviorsTemplate>
            <dxlc:DockLayoutControl Margin="12,12,12,0">
                <dxlc:LayoutGroup
                    Name="mainGroup"
                    dxlc:DockLayoutControl.Dock="Client"
                    ItemLabelsAlignment="Local"
                    Orientation="Vertical">
                    <dxlc:LayoutItem AddColonToLabel="True" Label="{dxp:PrintingStringId StringId=FilePath}">
                        <dxe:ButtonEdit AllowDefaultButton="False" EditValue="{Binding FileName, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                            <dxe:ButtonEdit.Buttons>
                                <dxe:ButtonInfo Command="{Binding SelectFileCommand}" GlyphKind="Regular" />
                            </dxe:ButtonEdit.Buttons>
                        </dxe:ButtonEdit>
                    </dxlc:LayoutItem>
                    <dxlc:LayoutItem>
                        <dxe:CheckEdit Content="{dxp:PrintingStringId StringId=OpenFileAfterExport}" EditValue="{Binding OpenFileAfterExport}" IsEnabled="{Binding CanUseActionAfterExport}" />
                    </dxlc:LayoutItem>
                    <dxlc:LayoutItem Width="{Binding ActualWidth, Mode=OneWay, ElementName=mainGroup}" Margin="0,6,0,0">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto" />
                                <RowDefinition Height="auto" />
                            </Grid.RowDefinitions>
                            <ToggleButton
                                Name="expanderButton"
                                Margin="-3,0,0,0"
                                HorizontalContentAlignment="Left"
                                Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
                                IsChecked="False"
                                Template="{StaticResource exportOptionsToggleButtonTemplate}" />
                            <dx:DXExpander
                                Grid.Row="1"
                                Margin="0,6,0,0"
                                CollapseStoryboard="{DynamicResource {dxdiagt:LWKey DiagramControl.CollapseExportOptionsStoryboard}}"
                                ExpandStoryboard="{DynamicResource {dxdiagt:LWKey DiagramControl.ExpandExportOptionsStoryboard}}"
                                HorizontalExpand="None"
                                IsExpanded="{Binding ElementName=expanderButton, Path=IsChecked}"
                                VerticalExpand="FromTopToBottom">
                                <dxpn:LinesContainer Lines="{Binding ExportOptionLines}" />
                            </dx:DXExpander>
                        </Grid>
                    </dxlc:LayoutItem>
                </dxlc:LayoutGroup>
            </dxlc:DockLayoutControl>
        </Grid>
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\DiagramControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\RibbonItemsStyle.xaml-->
    <Style x:Key="shapeGalleryStyleBase" TargetType="{x:Type dxb:Gallery}">
        <Setter Property="ItemGlyphBorderTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <dxdiag:ShapeStylePresenter StyleId="{Binding Caption}" Theme="{Binding Path=(dxdiag:DiagramControl.Diagram).Theme}" ToolTip="{Binding Caption, Converter={dxdiagi:DiagramStyleIdToNameConverter}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemGlyphMargin" Value="6" />
        <Setter Property="ItemGlyphVerticalAlignment" Value="Center" />
        <Setter Property="ItemGlyphHorizontalAlignment" Value="Center" />
        <Setter Property="ItemAutoHeight" Value="True" />
        <Setter Property="ItemCaptionHorizontalAlignment" Value="Center" />
        <Setter Property="AllowToolTips" Value="False" />
        <Setter Property="IsItemDescriptionVisible" Value="False" />
        <Setter Property="IsItemCaptionVisible" Value="False" />
        <Setter Property="AllowFilter" Value="False" />
        <Setter Property="MinColCount" Value="7" />
        <Setter Property="AutoHideGallery" Value="False" />
        <Setter Property="ItemCheckMode" Value="Single" />
        <Setter Property="ItemClickCommand" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedItemsStyle}" />
        <Setter Property="FirstCheckedItem" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[StyleInfo], Mode=OneWay, Converter={dxdiagi:StyleInfoToStyleIdConverter}}" />
    </Style>
    <Style x:Key="themeGalleryStyleBase" TargetType="{x:Type dxb:Gallery}">
        <Setter Property="ItemGlyphBorderTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <dxdiag:ThemePresenter DataContext="{Binding Path=Item.Caption, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dxb:GalleryItemControl}}}" DiagramTheme="{Binding}" ToolTip="{Binding Name, Mode=OneTime}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemGlyphVerticalAlignment" Value="Center" />
        <Setter Property="ItemGlyphHorizontalAlignment" Value="Center" />
        <Setter Property="ItemAutoHeight" Value="True" />
        <Setter Property="AllowToolTips" Value="False" />
        <Setter Property="IsItemDescriptionVisible" Value="False" />
        <Setter Property="IsItemCaptionVisible" Value="False" />
        <Setter Property="IsGroupCaptionVisible" Value="False" />
        <Setter Property="AllowFilter" Value="False" />
        <Setter Property="MinColCount" Value="8" />
        <Setter Property="AutoHideGallery" Value="False" />
        <Setter Property="ItemCheckMode" Value="Single" />
        <Setter Property="SizeMode" Value="None" />
        <Setter Property="FirstCheckedItem" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[Theme], Mode=TwoWay}" />
    </Style>


    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.SnapToGridButtonStyle}" TargetType="{x:Type dxb:BarEditItem}">
        <Style.Setters>
            <Setter Property="EditValue" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SnapToGrid}" />
            <Setter Property="EditHorizontalAlignment" Value="Left" />
            <Setter Property="CustomizationGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Check.svg}" />
            <Setter Property="CustomizationContent" Value="{Binding ConverterParameter=SnapToGrid, Converter={StaticResource DiagramStringIdConverter}}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=SnapToGrid, DescriptionId=SnapToGrid_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="EditSettings">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxe:CheckEditSettings Content="{dxdiag:DiagramControlLocalizedString SnapToGrid}" />
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.SnapToItemsButtonStyle}" TargetType="{x:Type dxb:BarEditItem}">
        <Style.Setters>
            <Setter Property="EditValue" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SnapToItems}" />
            <Setter Property="EditHorizontalAlignment" Value="Left" />
            <Setter Property="CustomizationContent" Value="{Binding ConverterParameter=SnapToItems, Converter={StaticResource DiagramStringIdConverter}}" />
            <Setter Property="CustomizationGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Check.svg}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=SnapToItems, DescriptionId=SnapToItems_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="EditSettings">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxe:CheckEditSettings Content="{dxdiag:DiagramControlLocalizedString SnapToItems}" />
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.SnapDistanceEditorStyle}" TargetType="{x:Type dxb:BarEditItem}">
        <Style.Setters>
            <Setter Property="ToolTip" Value="{Binding ConverterParameter=Menu_SnapDistance_Editor, Converter={StaticResource DiagramStringIdConverter}}" />
            <Setter Property="EditHorizontalAlignment" Value="Stretch" />
            <Setter Property="EditValue" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SnapToItemsDistance, Converter={dxdiagi:DoubleToDecimalConverter}}" />
        </Style.Setters>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.FontFamilySelectorStyle}" TargetType="{x:Type dxb:BarEditItem}">
        <Style.Setters>
            <Setter Property="EditWidth" Value="{DynamicResource {dxdiagt:LWKey DiagramDesignerControl.FontFamilyEditorWidth}}" />
            <Setter Property="CustomizationContent" Value="{Binding ConverterParameter=FontFamily, Converter={StaticResource DiagramStringIdConverter}}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=FontFamily, DescriptionId=FontFamily_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="EditValue" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[FontFamily], Converter={dxdiagi:FontFamilyInfoToFontFamilyConverter}}" />
            <Setter Property="EditTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <dxe:FontEdit>
                            <dxe:FontEdit.Style>
                                <Style TargetType="dxe:FontEdit">
                                    <Style.Setters>
                                        <Setter Property="Width" Value="{DynamicResource {dxdiagt:LWKey DiagramDesignerControl.FontFamilyEditorWidth}}" />
                                        <Setter Property="ScrollUnit" Value="Item" />
                                    </Style.Setters>
                                    <Style.Triggers>
                                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                                            <Setter Property="Width" Value="150" />
                                        </Trigger>
                                        <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                                            <Setter Property="Width" Value="150" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </dxe:FontEdit.Style>
                        </dxe:FontEdit>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter Operator=And}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeTextFont" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="EditWidth" Value="150" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter Property="EditWidth" Value="150" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.FontSizeSelectorStyle}" TargetType="{x:Type dxb:BarEditItem}">
        <Style.Setters>
            <Setter Property="EditWidth" Value="{DynamicResource {dxdiagt:LWKey DiagramDesignerControl.FontSizeEditorWidth}}" />
            <Setter Property="CustomizationContent" Value="{Binding ConverterParameter=FontSize, Converter={StaticResource DiagramStringIdConverter}}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=FontSize, DescriptionId=FontSize_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="EditValue" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[FontSize]}" />
            <Setter Property="EditSettings">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxe:ComboBoxEditSettings ItemsSource="{x:Static dxdiagci:DiagramFontActions.FontSizeSteps}" MaskType="Numeric" />
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter Operator=And}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeTextFont" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="EditWidth" Value="100" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter Property="EditWidth" Value="100" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ToggleFontBoldCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ToggleFontBoldCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[IsFontBold], Mode=OneWay}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ToggleFontItalicCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ToggleFontItalicCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[IsFontItalic], Mode=OneWay}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ToggleFontUnderlineCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ToggleFontUnderlineCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[IsFontUnderline], Mode=OneWay}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ToggleFontStrikethroughCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ToggleFontStrikethroughCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[IsFontStrikethrough], Mode=OneWay}" />
        </Style.Setters>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PageSizeBarItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.PageSizeStyleBase}}" TargetType="{x:Type dxb:BarSubItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.CanvasAutoSizeBarItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.AutoSizeStyleBase}}" TargetType="{x:Type dxb:BarSubItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PaperOrientationBarItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.PageOrientationStyleBase}}" TargetType="{x:Type dxb:BarSubItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ReLayoutStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ReLayoutStyleBase}}" TargetType="{x:Type dxb:BarSubItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ReLayoutTreeStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ReLayoutTreeStyleBase}}" TargetType="{x:Type dxb:BarItemLinkMenuHeader}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ReLayoutTipOverTreeHeaderStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ReLayoutTipOverTreeHeaderStyleBase}}" TargetType="{x:Type dxb:BarItemLinkMenuHeader}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ReLayoutMindMapTreeHeaderStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ReLayoutMindMapTreeHeaderStyleBase}}" TargetType="{x:Type dxb:BarItemLinkMenuHeader}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ReLayoutSugiyamaStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ReLayoutSugiyamaStyleBase}}" TargetType="{x:Type dxb:BarItemLinkMenuHeader}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ReLayoutCircularHeaderStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ReLayoutCircularHeaderStyleBase}}" TargetType="{x:Type dxb:BarItemLinkMenuHeader}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ShapeBackgroundColorSplitButtonStyle}" TargetType="{x:Type dxb:BarSplitButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString BackgroundColor}" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/FillBackground.svg}" />
            <Setter Property="GlyphTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Canvas Width="16" Height="16" DataContext="{Binding Path=(dxb:BarItemLinkInfo.Item), RelativeSource={RelativeSource Self}}">
                            <Image Width="16" Height="16" Source="{dxdiag:DiagramSvgImage Path=Images/Svg/FillBackground.svg}" />
                            <dx:DXBorder
                                Name="border"
                                Canvas.Left="1"
                                Canvas.Top="13"
                                Width="14"
                                Height="3">
                                <dx:DXBorder.Background>
                                    <SolidColorBrush Color="{Binding Path=(dxdiagi:BarColorEditBehavior.BarColor)}" />
                                </dx:DXBorder.Background>
                            </dx:DXBorder>
                        </Canvas>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="RibbonStyle" Value="SmallWithText" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=BackgroundColor, DescriptionId=BackgroundColor_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ItemsControl>
                            <dxdiagi:BarColorEditBehavior ColorEditUnit="{Binding Path=PopupControl.Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSplitButtonItem}}}" Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSplitButtonItem}}}" EditablePropertyName="{x:Static dxdiagc:DiagramItemController.BackgroundPropertyName}" />
                        </ItemsControl>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="PopupControl">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:PopupControlContainer Tag="{Binding ElementName=backgroundColorEditBehavior, Path=EditorColor}">
                                <dxdiagi:ExtendedColorEdit
                                    AllowNullInput="True"
                                    Palettes="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Theme, Converter={dxdiagi:DiagramThemeToColorEditPaletteConverter}}"
                                    ShowBorder="False"
                                    ShowDefaultColorButton="False">
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxdiagi:DiagramColorEditBehavior
                                            x:Name="backgroundColorEditBehavior"
                                            Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:ExtendedColorEdit}}}"
                                            DiagramColor="{Binding Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[BackgroundColor], RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:ExtendedColorEdit}}}"
                                            EditablePropertyName="{x:Static dxdiagc:DiagramItemController.BackgroundPropertyName}" />
                                    </dxmvvm:Interaction.Behaviors>
                                </dxdiagi:ExtendedColorEdit>
                            </dxb:PopupControlContainer>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeItemBackground" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ShapeForegroundColorSplitButtonStyle}" TargetType="{x:Type dxb:BarSplitButtonItem}">
        <Style.Setters>
            <Setter Property="CustomizationContent" Value="{dxdiag:DiagramControlLocalizedString ForegroundColor}" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/FillForeground.svg}" />
            <Setter Property="GlyphTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Canvas Width="16" Height="16" DataContext="{Binding Path=(dxb:BarItemLinkInfo.Item), RelativeSource={RelativeSource Self}}">
                            <Image Width="16" Height="16" Source="{dxdiag:DiagramSvgImage Path=Images/Svg/FillForeground.svg}" />
                            <dx:DXBorder
                                Name="border"
                                Canvas.Left="1"
                                Canvas.Top="13"
                                Width="14"
                                Height="3">
                                <dx:DXBorder.Background>
                                    <SolidColorBrush Color="{Binding Path=(dxdiagi:BarColorEditBehavior.BarColor)}" />
                                </dx:DXBorder.Background>
                            </dx:DXBorder>
                        </Canvas>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="GlyphSize" Value="Small" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=ForegroundColor, DescriptionId=ForegroundColor_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ItemsControl>
                            <dxdiagi:BarColorEditBehavior ColorEditUnit="{Binding Path=PopupControl.Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSplitButtonItem}}}" Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSplitButtonItem}}}" EditablePropertyName="{x:Static dxdiagc:DiagramItemController.ForegroundPropertyName}" />
                        </ItemsControl>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="PopupControl">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:PopupControlContainer Tag="{Binding ElementName=foregroundColorEditBehavior, Path=EditorColor}">
                                <dxdiagi:ExtendedColorEdit
                                    AllowNullInput="True"
                                    Palettes="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Theme, Converter={dxdiagi:DiagramThemeToColorEditPaletteConverter}}"
                                    ShowBorder="False"
                                    ShowDefaultColorButton="False">
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxdiagi:DiagramColorEditBehavior
                                            x:Name="foregroundColorEditBehavior"
                                            Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:ExtendedColorEdit}}}"
                                            DiagramColor="{Binding Path=Diagram.SelectionToolsModel[ForegroundColor], RelativeSource={RelativeSource Self}}"
                                            EditablePropertyName="{x:Static dxdiagc:DiagramItemController.ForegroundPropertyName}" />
                                    </dxmvvm:Interaction.Behaviors>
                                </dxdiagi:ExtendedColorEdit>
                            </dxb:PopupControlContainer>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeTextForeground" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ShapeStrokeColorSplitButtonStyle}" TargetType="{x:Type dxb:BarSplitButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString StrokeColor}" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/FillStroke.svg}" />
            <Setter Property="GlyphTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Canvas Width="16" Height="16" DataContext="{Binding Path=(dxb:BarItemLinkInfo.Item), RelativeSource={RelativeSource Self}}">
                            <Image Width="16" Height="16" Source="{dxdiag:DiagramSvgImage Path=Images/Svg/FillStroke.svg}" />
                            <dx:DXBorder
                                Name="border"
                                Canvas.Left="1"
                                Canvas.Top="13"
                                Width="14"
                                Height="3">
                                <dx:DXBorder.Background>
                                    <SolidColorBrush Color="{Binding Path=(dxdiagi:BarColorEditBehavior.BarColor)}" />
                                </dx:DXBorder.Background>
                            </dx:DXBorder>
                        </Canvas>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="RibbonStyle" Value="SmallWithText" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=StrokeColor, DescriptionId=StrokeColor_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ItemsControl>
                            <dxdiagi:BarColorEditBehavior ColorEditUnit="{Binding Path=PopupControl.Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSplitButtonItem}}}" Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSplitButtonItem}}}" EditablePropertyName="{x:Static dxdiagc:DiagramItemController.StrokePropertyName}" />
                        </ItemsControl>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="PopupControl">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:PopupControlContainer Tag="{Binding ElementName=strokeColorEditBehavior, Path=EditorColor}">
                                <dxdiagi:ExtendedColorEdit
                                    AllowNullInput="True"
                                    Palettes="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Theme, Converter={dxdiagi:DiagramThemeToColorEditPaletteConverter}}"
                                    ShowBorder="False"
                                    ShowDefaultColorButton="False">
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxdiagi:DiagramColorEditBehavior
                                            x:Name="strokeColorEditBehavior"
                                            Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:ExtendedColorEdit}}}"
                                            DiagramColor="{Binding Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[StrokeColor], RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:ExtendedColorEdit}}}"
                                            EditablePropertyName="{x:Static dxdiagc:DiagramItemController.StrokePropertyName}" />
                                    </dxmvvm:Interaction.Behaviors>
                                </dxdiagi:ExtendedColorEdit>
                            </dxb:PopupControlContainer>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeItemStroke" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.InsertContainerButtonStyle}" TargetType="{x:Type dxb:BarSplitButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString InsertContainer}" />
            <Setter Property="ActAsDropDown" Value="True" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/InsertContainer.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/InsertContainer.svg}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=InsertContainer, DescriptionId=InsertContainer_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="PopupControl">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:PopupControlContainer CloseOnClick="True">
                                <dxb:GalleryControl BorderBrush="Transparent" BorderThickness="0">
                                    <dxb:GalleryControl.Resources>
                                        <Style x:Key="insertContainerGalleryStyle" BasedOn="{StaticResource containerGalleryStyleBase}" TargetType="{x:Type dxb:Gallery}">
                                            <Setter Property="ColCount" Value="4" />
                                            <Setter Property="ItemCheckMode" Value="Single" />
                                        </Style>
                                    </dxb:GalleryControl.Resources>
                                    <dxb:GalleryControl.Gallery>
                                        <dxb:Gallery Style="{StaticResource insertContainerGalleryStyle}">
                                            <dxmvvm:Interaction.Behaviors>
                                                <dxdiagi:SelectContainerToolsBehavior ToolsPageName="{x:Static dxdiagc:DefaultBarItemNames.ContainerToolsRibbonPage}" />
                                            </dxmvvm:Interaction.Behaviors>
                                            <dxb:GalleryItemGroup ItemTemplate="{StaticResource galleryControlItemTemplate}" ItemsSource="{x:Static dxdiagc:DiagramContainerGalleryRegistrator.Shapes}" />
                                        </dxb:Gallery>
                                    </dxb:GalleryControl.Gallery>
                                </dxb:GalleryControl>
                            </dxb:PopupControlContainer>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.InsertListStyle}" TargetType="{x:Type dxb:BarSplitButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString InsertList}" />
            <Setter Property="ActAsDropDown" Value="True" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/InsertList.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/InsertList.svg}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=InsertList, DescriptionId=InsertList_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="PopupControl">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:PopupControlContainer CloseOnClick="True">
                                <dxb:GalleryControl BorderBrush="Transparent" BorderThickness="0">
                                    <dxb:GalleryControl.Resources>
                                        <Style x:Key="insertListGalleryStyle" BasedOn="{StaticResource listGalleryStyleBase}" TargetType="{x:Type dxb:Gallery}">
                                            <Setter Property="ColCount" Value="4" />
                                            <Setter Property="ItemCheckMode" Value="Single" />
                                        </Style>
                                    </dxb:GalleryControl.Resources>
                                    <dxb:GalleryControl.Gallery>
                                        <dxb:Gallery Style="{StaticResource insertListGalleryStyle}">
                                            <dxmvvm:Interaction.Behaviors>
                                                <dxdiagi:SelectListToolsBehavior ToolsPageName="{x:Static dxdiagc:DefaultBarItemNames.ContainerToolsRibbonPage}" />
                                            </dxmvvm:Interaction.Behaviors>
                                            <dxb:GalleryItemGroup Caption="{dxdiag:DiagramControlLocalizedString ListOrientation_Vertical}" ItemTemplate="{StaticResource galleryControlItemTemplate}" ItemsSource="{x:Static dxdiagc:DiagramContainerGalleryRegistrator.Shapes}">
                                                <dxb:GalleryItemGroup.Tag>
                                                    <dxdiagc:OrientationKind>Vertical</dxdiagc:OrientationKind>
                                                </dxb:GalleryItemGroup.Tag>
                                            </dxb:GalleryItemGroup>
                                            <dxb:GalleryItemGroup Caption="{dxdiag:DiagramControlLocalizedString ListOrientation_Horizontal}" ItemTemplate="{StaticResource galleryControlItemTemplate}" ItemsSource="{x:Static dxdiagc:DiagramContainerGalleryRegistrator.Shapes}">
                                                <dxb:GalleryItemGroup.Tag>
                                                    <dxdiagc:OrientationKind>Horizontal</dxdiagc:OrientationKind>
                                                </dxb:GalleryItemGroup.Tag>
                                            </dxb:GalleryItemGroup>
                                        </dxb:Gallery>
                                    </dxb:GalleryControl.Gallery>
                                </dxb:GalleryControl>
                            </dxb:PopupControlContainer>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.SetPageSizeButtonStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetPageParameters_PageSizeCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/PageSize.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/PageSize.svg}" />
            <Setter Property="GlyphSize" Value="Large" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ShowRulerItemStyle}" TargetType="{x:Type dxb:BarEditItem}">
        <Style.Setters>
            <Setter Property="EditValue" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).ShowRulers}" />
            <Setter Property="EditHorizontalAlignment" Value="Left" />
            <Setter Property="CustomizationContent" Value="{dxdiag:DiagramControlLocalizedString ShowRulers}" />
            <Setter Property="CustomizationGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Check.svg}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=ShowRulers, DescriptionId=ShowRulers_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="EditSettings">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxe:CheckEditSettings Content="{dxdiag:DiagramControlLocalizedString ShowRulers}" />
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter Operator=And}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeRulerVisibility" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ShowGridItemStyle}" TargetType="{x:Type dxb:BarEditItem}">
        <Style.Setters>
            <Setter Property="EditValue" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).ShowGrid}" />
            <Setter Property="EditHorizontalAlignment" Value="Left" />
            <Setter Property="CustomizationContent" Value="{dxdiag:DiagramControlLocalizedString ShowGrid}" />
            <Setter Property="CustomizationGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Check.svg}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=ShowGrid, DescriptionId=ShowGrid_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="EditSettings">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxe:CheckEditSettings Content="{dxdiag:DiagramControlLocalizedString ShowGrid}" />
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter Operator=And}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeGridVisibility" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ShowPageBreaksItemStyle}" TargetType="{x:Type dxb:BarEditItem}">
        <Style.Setters>
            <Setter Property="EditValue" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).ShowPageBreaks}" />
            <Setter Property="EditHorizontalAlignment" Value="Left" />
            <Setter Property="CustomizationContent" Value="{dxdiag:DiagramControlLocalizedString ShowPageBreaks}" />
            <Setter Property="CustomizationGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Check.svg}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=ShowPageBreaks, DescriptionId=ShowPageBreaks_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="EditSettings">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxe:CheckEditSettings Content="{dxdiag:DiagramControlLocalizedString ShowPageBreaks}" />
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter Operator=And}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangePageBreaksVisibility" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ImageToolsBringToFrontContainerStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.BringToFrontCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/BringToFront.svg}" />
            <Setter Property="GlyphSize" Value="Large" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ImageToolsRotateStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ImageToolsRotateStyleBase}}" TargetType="{x:Type dxb:BarSubItem}" />

    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ImageToolsSendToBackContainerStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SendToBackCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/SendToBack.svg}" />
            <Setter Property="GlyphSize" Value="Large" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ContainerPaddingBarItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ContainerPaddingStyleBase}}" TargetType="{x:Type dxb:BarSubItem}">
        <Style.Setters>
            <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ItemsControl>
                            <dxdiagi:SetPaddingBarSubItemBehavior Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSubItem}}}" />
                        </ItemsControl>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ContainerHeaderPaddingBarItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ContainerHeaderPaddingStyleBase}}" TargetType="{x:Type dxb:BarSubItem}">
        <Style.Setters>
            <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ItemsControl>
                            <dxdiagi:SetHeaderPaddingBarSubItemBehavior Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSubItem}}}" />
                        </ItemsControl>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ListOrientationStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ListOrientationStyleBase}}" TargetType="{x:Type dxb:BarSubItem}">
        <Style.Setters>
            <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ItemsControl>
                            <dxdiagi:SetListOrientationBehavior Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSubItem}}}" />
                            <dxdiagi:BarSubItemListOrientationVisibilityBehavior Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSubItem}}}" />
                        </ItemsControl>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ListOrientation_HorizontalItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ListOrientation_HorizontalItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedListsOrientation}" />
            <Setter Property="CommandParameter" Value="Horizontal" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ListOrientation_VerticalItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ListOrientation_VerticalItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedListsOrientation}" />
            <Setter Property="CommandParameter" Value="Vertical" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PanesStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.PanesStyleBase}}" TargetType="{x:Type dxb:BarSubItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ShapesPanelStyle}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString ShapesPanel}" />
            <Setter Property="Description" Value="{Binding ConverterParameter=ShapesPanel_Description, Converter={StaticResource DiagramStringIdConverter}}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).ToolboxVisibility, Converter={dxdiagi:ToolboxVisibilityConverter}, Mode=TwoWay}" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/ShapesPanel.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/ShapesPanel.svg}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="RibbonStyle" Value="Large" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=ShapesPanel, DescriptionId=ShapesPanel_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PropertiesPanelStyle}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString PropertiesPanel}" />
            <Setter Property="Description" Value="{Binding ConverterParameter=PropertiesPanel_Description, Converter={StaticResource DiagramStringIdConverter}}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).PropertiesPanelVisibility, Converter={dxdiagi:PropertiesPanelVisibilityConverter}, Mode=TwoWay}" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/PropertiesPanel.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/PropertiesPanel.svg}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="RibbonStyle" Value="Large" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=PropertiesPanel, DescriptionId=PropertiesPanel_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PanAndZoomPanelStyle}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString PanAndZoomPanel_SingleAmp}" />
            <Setter Property="Description" Value="{Binding ConverterParameter=PanAndZoomPanel_SingleAmp_Description, Converter={StaticResource DiagramStringIdConverter}}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).ShowPanAndZoomPanel, Mode=TwoWay}" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/PanAndZoomPanel.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/PanAndZoomPanel.svg}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="RibbonStyle" Value="Large" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=PanAndZoomPanel_SingleAmp, DescriptionId=PanAndZoomPanel_SingleAmp_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SaveFileCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SaveFileCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />

    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.UndoCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.UndoCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />

    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.RedoCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.RedoCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />

    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.NewFileCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.NewFileCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.OpenFileCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.OpenFileCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SaveFileAsCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SaveFileAsCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.PasteCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.PasteCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.CutCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.CutCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.CopyCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.CopyCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.IncreaseFontSizeCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.IncreaseFontSizeCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.DecreaseFontSizeCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.DecreaseFontSizeCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.BringForwardCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.BringForwardCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.BringToFrontCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.BringToFrontCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SendBackwardCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SendBackwardCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SendToBackCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SendToBackCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.FitToPageCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.FitToPageCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.FitToWidthCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.FitToWidthCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SetHorizontalAlignment_LeftCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetHorizontalAlignment_LeftCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[TextAlignment], RelativeSource={RelativeSource Self}}" Value="{x:Static dxdiagc:TextAlignmentKind.Left}">
                <Setter Property="IsChecked" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SetHorizontalAlignment_CenterCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetHorizontalAlignment_CenterCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[TextAlignment], RelativeSource={RelativeSource Self}}" Value="{x:Static dxdiagc:TextAlignmentKind.Center}">
                <Setter Property="IsChecked" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SetHorizontalAlignment_RightCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetHorizontalAlignment_RightCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[TextAlignment], RelativeSource={RelativeSource Self}}" Value="{x:Static dxdiagc:TextAlignmentKind.Right}">
                <Setter Property="IsChecked" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SetHorizontalAlignment_JustifyCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetHorizontalAlignment_JustifyCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[TextAlignment], RelativeSource={RelativeSource Self}}" Value="{x:Static dxdiagc:TextAlignmentKind.Justify}">
                <Setter Property="IsChecked" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SetVerticalAlignment_TopCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetVerticalAlignment_TopCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[VerticalContentAlignment], RelativeSource={RelativeSource Self}}" Value="{x:Static dxdiagc:VerticalAlignmentKind.Top}">
                <Setter Property="IsChecked" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SetVerticalAlignment_CenterCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetVerticalAlignment_CenterCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[VerticalContentAlignment], RelativeSource={RelativeSource Self}}" Value="{x:Static dxdiagc:VerticalAlignmentKind.Center}">
                <Setter Property="IsChecked" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SetVerticalAlignment_BottomCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetVerticalAlignment_BottomCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxdiag:DiagramControl.Diagram).SelectionToolsModel[VerticalContentAlignment], RelativeSource={RelativeSource Self}}" Value="{x:Static dxdiagc:VerticalAlignmentKind.Bottom}">
                <Setter Property="IsChecked" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TreeLayout_DownCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TreeLayout_DownCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TreeLayout_UpCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TreeLayout_UpCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TreeLayout_RightCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TreeLayout_RightCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TreeLayout_LeftCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TreeLayout_LeftCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TipOverTreeLayout_LeftToRightCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TipOverTreeLayout_LeftToRightCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TipOverTreeLayout_RightToLeftCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TipOverTreeLayout_RightToLeftCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.MindMapTreeLayout_HorizontalCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.MindMapTreeLayout_HorizontalCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.MindMapTreeLayout_VerticalCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.MindMapTreeLayout_VerticalCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SugiyamaLayout_DownCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SugiyamaLayout_DownCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SugiyamaLayout_UpCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SugiyamaLayout_UpCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SugiyamaLayout_RightCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SugiyamaLayout_RightCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SugiyamaLayout_LeftCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SugiyamaLayout_LeftCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.CircularLayoutCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.CircularLayoutCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ChangeConnectorTypeStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ChangeConnectorTypeStyleBase}}" TargetType="{x:Type dxb:BarSubItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ChangeConnectorType_RightAngleCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ChangeConnectorType_RightAngleCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ChangeConnectorType_CurvedCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ChangeConnectorType_CurvedCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ChangeConnectorType_StraightCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ChangeConnectorType_StraightCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ReLayoutPartsStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ReLayoutPartsStyleBase}}" TargetType="{x:Type dxb:BarSubItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ReLayoutPartsTreeHeaderStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ReLayoutPartsTreeHeaderStyleBase}}" TargetType="{x:Type dxb:BarItemLinkMenuHeader}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ReLayoutPartsTipOverTreeHeaderStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ReLayoutPartsTipOverTreeHeaderStyleBase}}" TargetType="{x:Type dxb:BarItemLinkMenuHeader}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ReLayoutPartsMindMapTreeHeaderStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ReLayoutPartsMindMapTreeHeaderStyleBase}}" TargetType="{x:Type dxb:BarItemLinkMenuHeader}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TipOverTreeLayoutForSubordinates_LeftToRightCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TipOverTreeLayoutForSubordinates_LeftToRightCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TipOverTreeLayoutForSubordinates_RightToLeftCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TipOverTreeLayoutForSubordinates_RightToLeftCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TreeLayoutForSubordinates_TopToBottomCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TreeLayoutForSubordinates_TopToBottomCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TreeLayoutForSubordinates_BottomToTopCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TreeLayoutForSubordinates_BottomToTopCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TreeLayoutForSubordinates_RightToLeftCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TreeLayoutForSubordinates_RightToLeftCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.TreeLayoutForSubordinates_LeftToRightCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.TreeLayoutForSubordinates_LeftToRightCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.MindMapTreeLayoutForSubordinates_HorizontalCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.MindMapTreeLayoutForSubordinates_HorizontalCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.MindMapTreeLayoutForSubordinates_VerticalCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.MindMapTreeLayoutForSubordinates_VerticalCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SelectTool_PointerToolCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_PointerToolCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:BarItemToolBehavior ActiveTool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).ActiveTool, Mode=TwoWay}" Tool="{x:Static dxdiagc:DiagramController.DefaultTool}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SelectTool_ConnectorToolCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_ConnectorToolCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:BarItemToolBehavior ActiveTool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).ActiveTool, Mode=TwoWay}" Tool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).ConnectorTool}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SelectTool_RectangleToolCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_RectangleToolCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:BarItemToolBehavior ActiveTool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).ActiveTool, Mode=TwoWay}" Tool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).RectangleTool}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SelectTool_EllipseToolCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_EllipseToolCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:BarItemToolBehavior ActiveTool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).ActiveTool, Mode=TwoWay}" Tool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).EllipseTool}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SelectTool_RightTriangleToolCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_RightTriangleToolCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:BarItemToolBehavior ActiveTool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).ActiveTool, Mode=TwoWay}" Tool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).RightTriangleTool}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SelectTool_HexagonToolCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_HexagonToolCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:BarItemToolBehavior ActiveTool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).ActiveTool, Mode=TwoWay}" Tool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).HexagonTool}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SelectTool_PanToolCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_PanToolCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:BarItemToolBehavior ActiveTool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).ActiveTool, Mode=TwoWay}" Tool="{x:Static dxdiagc:DiagramController.PanTool}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SelectTool_TextToolCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_TextToolCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:BarItemToolBehavior ActiveTool="{Binding RelativeSource={RelativeSource AncestorType={x:Type dxb:BarCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).ActiveTool, Mode=TwoWay}" Tool="{x:Static dxdiagc:DiagramController.TextTool}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.FitToDrawingCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.FitToDrawingCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.Rotate_Left90CommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.Rotate_Left90CommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.Rotate_Right90CommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.Rotate_Right90CommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.FlipImage_VerticalCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.FlipImage_VerticalCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.FlipImage_HorizontalCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.FlipImage_HorizontalCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />

    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ExportAsStyle}" TargetType="{x:Type dxb:BarSplitButtonItem}">
        <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/ExportAs.svg}" />
        <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/ExportAs.svg}" />
        <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString ExportAs}" />
        <Setter Property="Description" Value="{Binding ConverterParameter=ExportAs_Description, Converter={StaticResource DiagramStringIdConverter}}" />
        <Setter Property="GlyphSize" Value="Large" />
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.ExportDiagram}" />
        <Setter Property="CommandParameter" Value="PNG" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ExportDiagram_PNGCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ExportDiagram_PNGCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ExportDiagram_JPEGCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ExportDiagram_JPEGCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ExportDiagram_BMPCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ExportDiagram_BMPCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ExportDiagram_GIFCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ExportDiagram_GIFCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ExportToPdfCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ExportToPdfCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ExportToSvgCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ExportToSvgCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <!--<Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ExportDiagram_WMFCommandItemStyle}"
           BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ExportDiagram_WMFCommandItemStyleBase}}"
           TargetType="{x:Type dxb:BarButtonItem}">
    </Style>-->
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PrintMenuStyle}" TargetType="{x:Type dxb:BarSplitButtonItem}">
        <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Print.svg}" />
        <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Print.svg}" />
        <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString PrintMenu}" />
        <Setter Property="Description" Value="{Binding ConverterParameter=PrintMenu_Description, Converter={StaticResource DiagramStringIdConverter}}" />
        <Setter Property="GlyphSize" Value="Large" />
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.Print}" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.PrintCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.PrintCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.QuickPrintCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.QuickPrintCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ShowPrintPreviewCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ShowPrintPreviewCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.AutoSize_AutoSizeItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.AutoSize_AutoSizeItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="AllowUncheckInGroup" Value="False" />
            <Setter Property="Content" Value="{x:Static dxdiagi:CanvasSizeModeInfo.AutoSize}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[CanvasSizeMode], Converter={dxdiagi:AutoSizeConverter}, ConverterParameter=AutoSize, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource AutoSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.AutoSize_FillItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.AutoSize_FillItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="AllowUncheckInGroup" Value="False" />
            <Setter Property="Content" Value="{x:Static dxdiagi:CanvasSizeModeInfo.Fill}" />
            <Setter Property="IsChecked" Value="{Binding Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[CanvasSizeMode], RelativeSource={RelativeSource Self}, Converter={dxdiagi:AutoSizeConverter}, ConverterParameter=Fill, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource AutoSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.AutoSize_NoneItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.AutoSize_NoneItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="AllowUncheckInGroup" Value="False" />
            <Setter Property="Content" Value="{x:Static dxdiagi:CanvasSizeModeInfo.None}" />
            <Setter Property="IsChecked" Value="{Binding Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[CanvasSizeMode], RelativeSource={RelativeSource Self}, Converter={dxdiagi:AutoSizeConverter}, ConverterParameter=None, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource AutoSizeContentTemplate}" />
        </Style.Setters>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageOrientation_HorizontalItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageOrientation_HorizontalItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="AllowUncheckInGroup" Value="False" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:PaperOrientationConverter}, ConverterParameter=Horizontal, Mode=TwoWay}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageOrientation_VerticalItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageOrientation_VerticalItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="AllowUncheckInGroup" Value="False" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:PaperOrientationConverter}, ConverterParameter=Vertical, Mode=TwoWay}" />
        </Style.Setters>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageSize_A3ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageSize_A3ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiagi:RibbonPageSizeContentProvider PaperKind=A3}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:SelectedPaperSizeConverter}, ConverterParameter=A3, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource PageSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageSize_A4ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageSize_A4ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiagi:RibbonPageSizeContentProvider PaperKind=A4}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:SelectedPaperSizeConverter}, ConverterParameter=A4, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource PageSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageSize_A5ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageSize_A5ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiagi:RibbonPageSizeContentProvider PaperKind=A5}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:SelectedPaperSizeConverter}, ConverterParameter=A5, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource PageSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageSize_B4ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageSize_B4ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiagi:RibbonPageSizeContentProvider PaperKind=B4}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:SelectedPaperSizeConverter}, ConverterParameter=B4, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource PageSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageSize_B5ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageSize_B5ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiagi:RibbonPageSizeContentProvider PaperKind=B5}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:SelectedPaperSizeConverter}, ConverterParameter=B5, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource PageSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageSize_ExecutiveItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageSize_ExecutiveItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiagi:RibbonPageSizeContentProvider PaperKind=Executive}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:SelectedPaperSizeConverter}, ConverterParameter=Executive, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource PageSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageSize_LegalItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageSize_LegalItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiagi:RibbonPageSizeContentProvider PaperKind=Legal}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:SelectedPaperSizeConverter}, ConverterParameter=Legal, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource PageSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageSize_LetterItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageSize_LetterItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiagi:RibbonPageSizeContentProvider PaperKind=Letter}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:SelectedPaperSizeConverter}, ConverterParameter=Letter, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource PageSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageSize_StatementItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageSize_StatementItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiagi:RibbonPageSizeContentProvider PaperKind=Statement}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:SelectedPaperSizeConverter}, ConverterParameter=Statement, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource PageSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.PageSize_TabloidItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.PageSize_TabloidItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiagi:RibbonPageSizeContentProvider PaperKind=Tabloid}" />
            <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).RootToolsModel[PageSize], Converter={dxdiagi:SelectedPaperSizeConverter}, ConverterParameter=Tabloid, Mode=TwoWay}" />
            <Setter Property="ContentTemplate" Value="{StaticResource PageSizeContentTemplate}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P0ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P0ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersPadding}" />
            <Setter Property="CommandParameter" Value="0" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P4ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P4ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersPadding}" />
            <Setter Property="CommandParameter" Value="4" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P8ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P8ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersPadding}" />
            <Setter Property="CommandParameter" Value="8" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P12ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P12ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersPadding}" />
            <Setter Property="CommandParameter" Value="12" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P16ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P16ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersPadding}" />
            <Setter Property="CommandParameter" Value="16" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P24ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P24ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersPadding}" />
            <Setter Property="CommandParameter" Value="24" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P32ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerPadding_P32ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersPadding}" />
            <Setter Property="CommandParameter" Value="32" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P0ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P0ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersHeaderPadding}" />
            <Setter Property="CommandParameter" Value="0" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P4ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P4ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersHeaderPadding}" />
            <Setter Property="CommandParameter" Value="4" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P8ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P8ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersHeaderPadding}" />
            <Setter Property="CommandParameter" Value="8" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P12ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P12ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersHeaderPadding}" />
            <Setter Property="CommandParameter" Value="12" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P16ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P16ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersHeaderPadding}" />
            <Setter Property="CommandParameter" Value="16" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P24ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P24ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersHeaderPadding}" />
            <Setter Property="CommandParameter" Value="24" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P32ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ContainerHeaderPadding_P32ItemStyleBase}}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersHeaderPadding}" />
            <Setter Property="CommandParameter" Value="32" />
            <Setter Property="GlyphSize" Value="Small" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlPageCategories.ImageToolsPageCategoryStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlPageCategories.ImageToolsPageCategoryStyleBase}}" TargetType="{x:Type dxr:RibbonPageCategory}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlPageCategories.ContainerToolsPageCategoryStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlPageCategories.ContainerToolsPageCategoryStyleBase}}" TargetType="{x:Type dxr:RibbonPageCategory}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.InsertImageCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.InsertImageCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ItemsControl>
                            <dxdiagi:SelectImageToolsBehavior ToolsPageName="{x:Static dxdiagc:DefaultBarItemNames.ImageToolsRibbonPage}" />
                        </ItemsControl>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.LoadImageCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.LoadImageCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ImageToolsStretchModeStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ImageToolsStretchModeStyleBase}}" TargetType="{x:Type dxb:BarSubItem}">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:SetStretchModeBarSubItemBehavior Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSubItem}}}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SetSelectedImagesStretchMode_StretchCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetSelectedImagesStretchMode_StretchCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SetSelectedImagesStretchMode_UniformCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetSelectedImagesStretchMode_UniformCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.SetSelectedImagesStretchMode_UniformToFillCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.SetSelectedImagesStretchMode_UniformToFillCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}" />
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ResetSelectedImagesCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ResetSelectedImagesCommandItemStyleBase}}" TargetType="{x:Type dxb:BarButtonItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ImageToolsSetImageScaleItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControlBase.ImageToolsSetImageScaleStyleBase}}" TargetType="{x:Type dxb:BarSubItem}">
        <Setter Property="RibbonStyle" Value="Large" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:SetImageScaleBarSubItemBehavior Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSubItem}}}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_0_25ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_0_25ItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedImagesScale}" />
        <Setter Property="CommandParameter" Value="0.25" />
        <Setter Property="GlyphSize" Value="Small" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_0_5ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_0_5ItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedImagesScale}" />
        <Setter Property="CommandParameter" Value="0.5" />
        <Setter Property="GlyphSize" Value="Small" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_0_75ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_0_75ItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedImagesScale}" />
        <Setter Property="CommandParameter" Value="0.75" />
        <Setter Property="GlyphSize" Value="Small" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_1ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_1ItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedImagesScale}" />
        <Setter Property="CommandParameter" Value="1" />
        <Setter Property="GlyphSize" Value="Small" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_1_5ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_1_5ItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedImagesScale}" />
        <Setter Property="CommandParameter" Value="1.5" />
        <Setter Property="GlyphSize" Value="Small" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_2ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_2ItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedImagesScale}" />
        <Setter Property="CommandParameter" Value="2" />
        <Setter Property="GlyphSize" Value="Small" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_4ItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlSourceItems.ImageToolsSetImageScale_4ItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedImagesScale}" />
        <Setter Property="CommandParameter" Value="4" />
        <Setter Property="GlyphSize" Value="Small" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.ShowContainerHeaderCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.ShowContainerHeaderCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}">
        <Style.Setters>
            <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ItemsControl>
                            <dxdiagi:SetShowHeaderStateBehavior Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarCheckItem}}}" />
                        </ItemsControl>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DesignerControlCommands.CollapseSelectedContainersCommandItemStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DesignerControlCommands.CollapseSelectedContainersCommandItemStyleBase}}" TargetType="{x:Type dxb:BarCheckItem}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ToolsContainerStyle}" TargetType="{x:Type dxb:BarSplitCheckItem}">
        <Style.Setters>
            <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ItemsControl>
                            <dxdiagi:BarToolsSelectorBehavior SelectedTool="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:BarSplitCheckItem}}, Path=(dxdiag:DiagramControl.Diagram).ActiveTool}" />
                        </ItemsControl>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="PopupControl">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:PopupMenu>
                                <dxb:PopupMenu.Items>
                                    <dxb:BarCheckItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:DefaultBarItemNames.RectangleTool}" Style="{DynamicResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_RectangleToolCommandItemStyle}}" />
                                    <dxb:BarCheckItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:DefaultBarItemNames.EllipseTool}" Style="{DynamicResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_EllipseToolCommandItemStyle}}" />
                                    <dxb:BarCheckItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:DefaultBarItemNames.RightTriangleTool}" Style="{DynamicResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_RightTriangleToolCommandItemStyle}}" />
                                    <dxb:BarCheckItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:DefaultBarItemNames.HexagonTool}" Style="{DynamicResource {dxdiagt:LWKey DesignerControlCommands.SelectTool_HexagonToolCommandItemStyle}}" />
                                </dxb:PopupMenu.Items>
                            </dxb:PopupMenu>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter Operator=And}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowAddRemoveItems" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="shapeGalleryStyle" BasedOn="{StaticResource shapeGalleryStyleBase}" TargetType="{x:Type dxb:Gallery}">
        <Setter Property="ColCount" Value="7" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ShapeStylesStyle}" TargetType="{x:Type dxr:RibbonGalleryBarItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString RibbonPageGroup_ShapeStyles}" />
            <Setter Property="Gallery">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:Gallery Style="{StaticResource shapeGalleryStyle}">
                                <dxb:GalleryItemGroup ItemTemplate="{StaticResource galleryControlItemTemplate}" ItemsSource="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).LastShapeStyles}" />
                            </dxb:Gallery>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="DropDownGallery">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:Gallery GroupsSource="{Binding Path=(dxdiag:DiagramControl.Diagram).LastShapeStyles, RelativeSource={RelativeSource Self}, Converter={dxdiagi:LastShapeStylesToGalleryGroupConverter}}" Style="{StaticResource shapeGalleryStyleBase}">
                                <dxb:Gallery.GroupTemplate>
                                    <DataTemplate>
                                        <ContentControl>
                                            <dxb:GalleryItemGroup Caption="{Binding Name, Mode=OneTime}" ItemTemplate="{StaticResource galleryControlItemTemplate}" ItemsSource="{Binding Items}" />
                                        </ContentControl>
                                    </DataTemplate>
                                </dxb:Gallery.GroupTemplate>
                            </dxb:Gallery>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeItemStyle" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).SelectionModel}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Theme}" Value="{x:Static dxdiagc:DiagramThemes.NoTheme}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="themeGalleryStyle" BasedOn="{StaticResource themeGalleryStyleBase}" TargetType="{x:Type dxb:Gallery}">
        <Setter Property="ColCount" Value="8" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ThemesStyle}" TargetType="{x:Type dxr:RibbonGalleryBarItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString RibbonPageGroup_Themes}" />
            <Setter Property="Gallery">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:Gallery Style="{StaticResource themeGalleryStyle}">
                                <dxb:GalleryItemGroup ItemTemplate="{StaticResource galleryControlItemTemplate}" ItemsSource="{x:Static dxdiagc:ThemeRegistrator.Themes}" />
                            </dxb:Gallery>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="DropDownGallery">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:Gallery Style="{StaticResource themeGalleryStyleBase}">
                                <dxb:GalleryItemGroup ItemTemplate="{StaticResource galleryControlItemTemplate}" ItemsSource="{x:Static dxdiagc:ThemeRegistrator.Themes}" />
                            </dxb:Gallery>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeTheme" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>

    <Style x:Key="formatContainerGalleryStyleBase" BasedOn="{StaticResource containerGalleryStyleBase}" TargetType="{x:Type dxb:Gallery}">
        <Setter Property="MinColCount" Value="8" />
        <Setter Property="AutoHideGallery" Value="False" />
        <Setter Property="ItemCheckMode" Value="Single" />
        <Setter Property="SizeMode" Value="None" />
        <Setter Property="ItemClickCommand" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).Commands.SetSelectedContainersShape}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdiagi:SetContainerShapeBehavior Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxb:Gallery}}}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="formatContainerGalleryStyle" BasedOn="{StaticResource formatContainerGalleryStyleBase}" TargetType="{x:Type dxb:Gallery}">
        <Setter Property="ColCount" Value="8" />
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.ContainerStylesStyle}" TargetType="{x:Type dxr:RibbonGalleryBarItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString RibbonPageGroup_ContainerStyles}" />
            <Setter Property="CustomizationGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/InsertContainer.svg}" />
            <Setter Property="Gallery">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:Gallery Style="{StaticResource formatContainerGalleryStyle}">
                                <dxb:GalleryItemGroup ItemTemplate="{StaticResource galleryControlItemTemplate}" ItemsSource="{x:Static dxdiagc:DiagramContainerGalleryRegistrator.Shapes}" />
                            </dxb:Gallery>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="DropDownGallery">
                <Setter.Value>
                    <dxmvvm:ValueFactory>
                        <DataTemplate>
                            <dxb:Gallery Style="{StaticResource formatContainerGalleryStyleBase}">
                                <dxb:GalleryItemGroup ItemTemplate="{StaticResource galleryControlItemTemplate}" ItemsSource="{x:Static dxdiagc:DiagramContainerGalleryRegistrator.Shapes}" />
                            </dxb:Gallery>
                        </DataTemplate>
                    </dxmvvm:ValueFactory>
                </Setter.Value>
            </Setter>
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter}">
                        <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeContainerStyle" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>

    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.SeparatorStyleBase}" TargetType="{x:Type dxb:BarItemSeparator}">
        <Style.Setters>
            <Setter Property="CustomizationContent" Value="{dxdiag:DiagramControlLocalizedString SeparatorName}" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.PageSizeSeparatorStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControl.SeparatorStyleBase}}" TargetType="{x:Type dxb:BarItemSeparator}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.MenuSeparatorStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControl.SeparatorStyleBase}}" TargetType="{x:Type dxb:BarItemSeparator}" />
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.FontRibbonGroupSeparatorStyle}" BasedOn="{StaticResource {dxdiagt:LWKey DiagramDesignerControl.SeparatorStyleBase}}" TargetType="{x:Type dxb:BarItemSeparator}">
        <Setter Property="IsVisible">
            <Setter.Value>
                <MultiBinding Converter="{dxdiagi:ProtectionPropertiesToIsVisibleConverter Operator=And}">
                    <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeTextFont" RelativeSource="{RelativeSource Mode=Self}" />
                    <Binding Path="(dxdiag:DiagramControl.Diagram).AllowChangeTextForeground" RelativeSource="{RelativeSource Mode=Self}" />
                    <Binding Path="(dxdiag:DiagramControl.Diagram).IsReadOnly" RelativeSource="{RelativeSource Mode=Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.StatusBarWidthItemStyle}" TargetType="{x:Type dxb:BarStaticItem}">
        <Setter Property="Content">
            <Setter.Value>
                <MultiBinding Converter="{dxdiagi:LengthWithMeasureUnitToStatusBarConverter}">
                    <Binding Path="(dxdiag:DiagramControl.Diagram).SelectionToolsModel[Width]" RelativeSource="{RelativeSource Self}" />
                    <Binding Source="{x:Static dxdiagcl:DiagramControlStringId.StatusBarWidth}" />
                    <Binding Path="(dxdiag:DiagramControl.Diagram).MeasureUnit" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="ShowBorder" Value="False" />
        <Setter Property="RibbonStyle" Value="SmallWithText" />
        <Setter Property="CustomizationContent" Value="{dxdiag:DiagramControlLocalizedString StatusBarShapeWidth}" />
        <Setter Property="dxdiag:DiagramDesignerControl.BarItemName" Value="{x:Static dxdiagc:DefaultBarItemNames.StatusBarWidth}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).ShowMeasureUnit}" Value="False">
                <Setter Property="Content">
                    <Setter.Value>
                        <MultiBinding Converter="{dxdiagi:LengthToStatusBarConverter}">
                            <Binding Path="(dxdiag:DiagramControl.Diagram).SelectionToolsModel[Width]" RelativeSource="{RelativeSource Self}" />
                            <Binding Source="{x:Static dxdiagcl:DiagramControlStringId.StatusBarWidth}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.StatusBarHeightItemStyle}" TargetType="{x:Type dxb:BarStaticItem}">
        <Setter Property="Content">
            <Setter.Value>
                <MultiBinding Converter="{dxdiagi:LengthWithMeasureUnitToStatusBarConverter}">
                    <Binding Path="(dxdiag:DiagramControl.Diagram).SelectionToolsModel[Height]" RelativeSource="{RelativeSource Self}" />
                    <Binding Source="{x:Static dxdiagcl:DiagramControlStringId.StatusBarHeight}" />
                    <Binding Path="(dxdiag:DiagramControl.Diagram).MeasureUnit" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="ShowBorder" Value="False" />
        <Setter Property="RibbonStyle" Value="SmallWithText" />
        <Setter Property="CustomizationContent" Value="{dxdiag:DiagramControlLocalizedString StatusBarShapeHeight}" />
        <Setter Property="dxdiag:DiagramDesignerControl.BarItemName" Value="{x:Static dxdiagc:DefaultBarItemNames.StatusBarHeight}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(dxdiag:DiagramControl.Diagram).ShowMeasureUnit}" Value="False">
                <Setter Property="Content">
                    <Setter.Value>
                        <MultiBinding Converter="{dxdiagi:LengthToStatusBarConverter}" ConverterParameter="{}{0}: {1:0.###}">
                            <Binding Path="(dxdiag:DiagramControl.Diagram).SelectionToolsModel[Height]" RelativeSource="{RelativeSource Self}" />
                            <Binding Source="{x:Static dxdiagcl:DiagramControlStringId.StatusBarHeight}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxdiagt:LWKey DiagramDesignerControl.StatusBarAngleItemStyle}" TargetType="{x:Type dxb:BarStaticItem}">
        <Setter Property="Content">
            <Setter.Value>
                <MultiBinding Converter="{dxdiagi:AngleToStatusBarConverter}">
                    <Binding Path="(dxdiag:DiagramControl.Diagram).SelectionToolsModel[Angle]" RelativeSource="{RelativeSource Self}" />
                    <Binding Source="{x:Static dxdiagcl:DiagramControlStringId.StatusBarAngle}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="ShowBorder" Value="True" />
        <Setter Property="RibbonStyle" Value="SmallWithText" />
        <Setter Property="CustomizationContent" Value="{dxdiag:DiagramControlLocalizedString StatusBarShapeAngle}" />
        <Setter Property="dxdiag:DiagramDesignerControl.BarItemName" Value="{x:Static dxdiagc:DefaultBarItemNames.StatusBarAngle}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Content, RelativeSource={RelativeSource Self}}" Value="">
                <Setter Property="ShowBorder" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Content, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter Property="ShowBorder" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\RibbonItemsStyle.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\PropertyGridEditors.xaml-->
    <Style x:Key="PropertyGridArrowEditorStyleBase" TargetType="dxe:ComboBoxEdit">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ApplyItemTemplateToSelectedItem" Value="True" />
        <Setter Property="IsTextEditable" Value="False" />
        <Setter Property="ShowCustomItems" Value="True" />
        <Setter Property="StyleSettings" Value="{dxe:ComboBoxStyleSettings}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="dxe:ListBoxEditItem">
                    <Setter Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxe:ComboBoxEdit}}}" />
                    <Setter Property="VerticalContentAlignment" Value="Stretch" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PropertyGridLineJumpSelectorStyle" TargetType="dxe:ComboBoxEdit">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ApplyItemTemplateToSelectedItem" Value="True" />
        <Setter Property="IsTextEditable" Value="False" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="dxe:ListBoxEditItem">
                    <Setter Property="Height" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxe:ComboBoxEdit}}}" />
                    <Setter Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxe:ComboBoxEdit}}}" />
                    <Setter Property="VerticalContentAlignment" Value="Stretch" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" MaxWidth="50" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                        </Grid.ColumnDefinitions>
                        <dxdiagi:LineJumpPresenter
                            Grid.Column="0"
                            Margin="5,0,5,0"
                            LineJumpStyle="{Binding Converter={dxdiagi:ValueToValueConverter}}"
                            Stroke="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
                        <TextBlock
                            Grid.Column="1"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Text="{Binding Name}"
                            TextTrimming="CharacterEllipsis" />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.BeginArrow}">
        <dxprg:PropertyDefinition PostOnEditValueChanged="True">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:ComboBoxEdit Name="PART_Editor" ItemsSource="{x:Static dxdiagc:ArrowDescriptions.Arrows}" Style="{StaticResource PropertyGridArrowEditorStyleBase}">
                        <dxe:ComboBoxEdit.ItemTemplate>
                            <DataTemplate>
                                <dxdiagi:ConnectorArrowPresenter
                                    MinHeight="16"
                                    Margin="5,0,5,0"
                                    ArrowStyle="{Binding}"
                                    IsRotatedArrow="True"
                                    Stroke="{Binding Foreground, RelativeSource={RelativeSource Self}}"
                                    ToolTip="{Binding Name}" />
                            </DataTemplate>
                        </dxe:ComboBoxEdit.ItemTemplate>
                    </dxe:ComboBoxEdit>
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.EndArrow}">
        <dxprg:PropertyDefinition PostOnEditValueChanged="True">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:ComboBoxEdit Name="PART_Editor" ItemsSource="{x:Static dxdiagc:ArrowDescriptions.Arrows}" Style="{StaticResource PropertyGridArrowEditorStyleBase}">
                        <dxe:ComboBoxEdit.ItemTemplate>
                            <DataTemplate>
                                <dxdiagi:ConnectorArrowPresenter
                                    MinHeight="16"
                                    Margin="5,0,5,0"
                                    ArrowStyle="{Binding}"
                                    Stroke="{Binding Foreground, RelativeSource={RelativeSource Self}}"
                                    ToolTip="{Binding Name}" />
                            </DataTemplate>
                        </dxe:ComboBoxEdit.ItemTemplate>
                    </dxe:ComboBoxEdit>
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.ConnectorType}">
        <dxprg:PropertyDefinition PostOnEditValueChanged="True">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:ComboBoxEdit
                        Name="PART_Editor"
                        DisplayMember="TypeName"
                        IsTextEditable="False"
                        ItemsSource="{x:Static dxdiagc:ConnectorType.RegisteredTypes}" />
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.ItemAngle}">
        <dxprg:PropertyDefinition>
            <dxprg:PropertyDefinition.EditSettings>
                <dxe:TextEditSettings DisplayTextConverter="{dxdiagi:DegreeValueDisplayConverter}" Mask="##0.###" MaskType="Numeric" />
            </dxprg:PropertyDefinition.EditSettings>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.MeasureUnitDoubleEditor}">
        <dxprg:PropertyDefinition UseTypeConverterToStringConversion="True" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.MeasureUnitSizeEditor}">
        <dxprg:PropertyDefinition UseTypeConverterToStringConversion="True" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.LineJumpPlacement}">
        <dxprg:PropertyDefinition PostOnEditValueChanged="True" UseTypeConverterToStringConversion="False">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:ComboBoxEdit x:Name="PART_Editor" IsTextEditable="False">
                        <dxmvvm:Interaction.Behaviors>
                            <dxmvvm:EnumItemsSourceBehavior EnumType="{x:Type dxdiagc:LineJumpPlacement}" NameConverter="{dxdiagi:LineJumpParametersConverter}" />
                        </dxmvvm:Interaction.Behaviors>
                    </dxe:ComboBoxEdit>
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.CanvasSizeMode}">
        <dxprg:PropertyDefinition PostOnEditValueChanged="True" UseTypeConverterToStringConversion="False">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:ComboBoxEdit
                        Name="PART_Editor"
                        DisplayMember="Name"
                        IsTextEditable="False"
                        ItemsSource="{x:Static dxdiagi:CanvasSizeModeInfo.Modes}"
                        ValueMember="Mode" />
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.ThemeSelector}">
        <dxprg:PropertyDefinition PostOnEditValueChanged="True">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:ComboBoxEdit
                        Name="PART_Editor"
                        DisplayMember="Name"
                        IsTextEditable="False"
                        ItemsSource="{x:Static dxdiagc:ThemeRegistrator.Themes}" />
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.Padding}">
        <dxprg:PropertyDefinition UseTypeConverterToStringConversion="True" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.HeaderPadding}">
        <dxprg:PropertyDefinition UseTypeConverterToStringConversion="True" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.LineJumpStyle}">
        <dxprg:PropertyDefinition PostOnEditValueChanged="True">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:ComboBoxEdit Name="PART_Editor" ItemsSource="{x:Static dxdiagc:LineJumpDescriptions.LineJumps}" Style="{StaticResource PropertyGridLineJumpSelectorStyle}" />
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>

    <ControlTemplate x:Key="PropertyGridBackgroundColorDisplayTemplate">
        <dx:DXBorder Margin="2" BorderBrush="{DynamicResource {dxt:LWKey PopupBrushEdit.ChipBorderBrush}}" BorderThickness="1">
            <dxmvvm:Interaction.Behaviors>
                <dxdiagi:ColorViewerBehavior
                    ColorEditUnit="{Binding Value, Mode=OneWay}"
                    Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxprg:PropertyGridControl}}}"
                    EditablePropertyName="{x:Static dxdiagc:DiagramItemController.BackgroundPropertyName}"
                    IsPopupOpen="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxe:PopupBaseEdit}}, Mode=TwoWay}" />
            </dxmvvm:Interaction.Behaviors>
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="PropertyGridStrokeColorDisplayTemplate">
        <dx:DXBorder Margin="2" BorderBrush="{DynamicResource {dxt:LWKey PopupBrushEdit.ChipBorderBrush}}" BorderThickness="1">
            <dxmvvm:Interaction.Behaviors>
                <dxdiagi:ColorViewerBehavior
                    ColorEditUnit="{Binding Value, Mode=OneWay}"
                    Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxprg:PropertyGridControl}}}"
                    EditablePropertyName="{x:Static dxdiagc:DiagramItemController.StrokePropertyName}"
                    IsPopupOpen="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxe:PopupBaseEdit}}, Mode=TwoWay}" />
            </dxmvvm:Interaction.Behaviors>
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="PropertyGridForegroundColorDisplayTemplate">
        <dx:DXBorder Margin="2" BorderBrush="{DynamicResource {dxt:LWKey PopupBrushEdit.ChipBorderBrush}}" BorderThickness="1">
            <dxmvvm:Interaction.Behaviors>
                <dxdiagi:ColorViewerBehavior
                    ColorEditUnit="{Binding Value, Mode=OneWay}"
                    Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxprg:PropertyGridControl}}}"
                    EditablePropertyName="{x:Static dxdiagc:DiagramItemController.ForegroundPropertyName}"
                    IsPopupOpen="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxe:PopupBaseEdit}}, Mode=TwoWay}" />
            </dxmvvm:Interaction.Behaviors>
        </dx:DXBorder>
    </ControlTemplate>

    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.BackgroundColorSelector}">
        <dxprg:PropertyDefinition IsReadOnly="False" PostOnEditValueChanged="True">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxdiagi:PopupColorEdit
                        x:Name="PART_Editor"
                        Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxprg:PropertyGridControl}}}"
                        DisplayTemplate="{StaticResource PropertyGridBackgroundColorDisplayTemplate}"
                        EditTemplate="{StaticResource PropertyGridBackgroundColorDisplayTemplate}"
                        EditValue="{Binding Value, Mode=TwoWay}"
                        IsReadOnly="True">
                        <dxdiagi:PopupColorEdit.PopupContentTemplate>
                            <ControlTemplate>
                                <dxdiagi:ExtendedColorEdit AllowNullInput="True" ShowBorder="False" ShowDefaultColorButton="False">
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxdiagi:PopupColorEditBehavior Diagram="{Binding Diagram, ElementName=PART_Editor}" DiagramColor="{Binding EditValue, ElementName=PART_Editor, Mode=TwoWay}" EditablePropertyName="{x:Static dxdiagc:DiagramItemController.BackgroundPropertyName}" />
                                    </dxmvvm:Interaction.Behaviors>
                                </dxdiagi:ExtendedColorEdit>
                            </ControlTemplate>
                        </dxdiagi:PopupColorEdit.PopupContentTemplate>
                    </dxdiagi:PopupColorEdit>
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.StrokeColorSelector}">
        <dxprg:PropertyDefinition IsReadOnly="False" PostOnEditValueChanged="True">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxdiagi:PopupColorEdit
                        x:Name="PART_Editor"
                        Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxprg:PropertyGridControl}}}"
                        DisplayTemplate="{StaticResource PropertyGridStrokeColorDisplayTemplate}"
                        EditTemplate="{StaticResource PropertyGridStrokeColorDisplayTemplate}"
                        EditValue="{Binding Value, Mode=TwoWay}"
                        IsReadOnly="True">
                        <dxdiagi:PopupColorEdit.PopupContentTemplate>
                            <ControlTemplate>
                                <dxdiagi:ExtendedColorEdit AllowNullInput="True" ShowBorder="False" ShowDefaultColorButton="False">
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxdiagi:PopupColorEditBehavior Diagram="{Binding Diagram, ElementName=PART_Editor}" DiagramColor="{Binding EditValue, ElementName=PART_Editor, Mode=TwoWay}" EditablePropertyName="{x:Static dxdiagc:DiagramItemController.StrokePropertyName}" />
                                    </dxmvvm:Interaction.Behaviors>
                                </dxdiagi:ExtendedColorEdit>
                            </ControlTemplate>
                        </dxdiagi:PopupColorEdit.PopupContentTemplate>
                    </dxdiagi:PopupColorEdit>
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.ForegroundColorSelector}">
        <dxprg:PropertyDefinition IsReadOnly="False" PostOnEditValueChanged="True">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxdiagi:PopupColorEdit
                        x:Name="PART_Editor"
                        Diagram="{Binding Path=(dxdiag:DiagramControl.Diagram), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxprg:PropertyGridControl}}}"
                        DisplayTemplate="{StaticResource PropertyGridForegroundColorDisplayTemplate}"
                        EditTemplate="{StaticResource PropertyGridForegroundColorDisplayTemplate}"
                        EditValue="{Binding Value, Mode=TwoWay}"
                        IsReadOnly="True">
                        <dxe:PopupBaseEdit.PopupContentTemplate>
                            <ControlTemplate>
                                <dxdiagi:ExtendedColorEdit AllowNullInput="True" ShowBorder="False" ShowDefaultColorButton="False">
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxdiagi:PopupColorEditBehavior Diagram="{Binding Diagram, ElementName=PART_Editor}" DiagramColor="{Binding EditValue, ElementName=PART_Editor, Mode=TwoWay}" EditablePropertyName="{x:Static dxdiagc:DiagramItemController.ForegroundPropertyName}" />
                                    </dxmvvm:Interaction.Behaviors>
                                </dxdiagi:ExtendedColorEdit>
                            </ControlTemplate>
                        </dxe:PopupBaseEdit.PopupContentTemplate>
                    </dxdiagi:PopupColorEdit>
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.SelectedStencils}">
        <dxprg:PropertyDefinition PostOnEditValueChanged="True" ShowChildren="False">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:ComboBoxEdit
                        Name="PART_Editor"
                        DisplayMember="Name"
                        EditValue="{Binding Path=Value, Converter={dxdiagi:SelectedStencilsConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        IsTextEditable="False"
                        ItemsSource="{x:Static dxdiagc:DiagramToolboxRegistrator.Stencils}"
                        ShowCustomItems="True"
                        ShowSizeGrip="False"
                        ValueMember="Id">
                        <dxe:ComboBoxEdit.StyleSettings>
                            <dxe:CheckedComboBoxStyleSettings />
                        </dxe:ComboBoxEdit.StyleSettings>
                    </dxe:ComboBoxEdit>
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <ControlTemplate x:Key="PropertyGridBrushDisplayTemplate">
        <dx:DXBorder Margin="2" BorderBrush="{DynamicResource {dxt:LWKey PopupBrushEdit.ChipBorderBrush}}" BorderThickness="1">
            <dxmvvm:Interaction.Behaviors>
                <dxdiagi:BrushViewerBehavior IsPopupOpen="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxe:PopupBaseEdit}}, Mode=TwoWay}" Color="{Binding Value, Mode=OneWay, Converter={dxdiagi:DiagramBrushToColorConverter}}" />
            </dxmvvm:Interaction.Behaviors>
        </dx:DXBorder>
    </ControlTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.BrushEditor}">
        <dxprg:PropertyDefinition PostOnEditValueChanged="True" ShowChildren="False">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:PopupBaseEdit
                        Name="PART_Editor"
                        DisplayTemplate="{StaticResource PropertyGridBrushDisplayTemplate}"
                        EditTemplate="{StaticResource PropertyGridBrushDisplayTemplate}"
                        EditValue="{Binding Value, Mode=TwoWay}"
                        IsReadOnly="True">
                        <dxe:PopupBaseEdit.PopupContentTemplate>
                            <ControlTemplate>
                                <dxe:ColorEdit
                                    AllowNullInput="True"
                                    ShowBorder="False"
                                    ShowDefaultColorButton="False"
                                    Color="{Binding EditValue, ElementName=PART_Editor, Mode=TwoWay, Converter={dxdiagi:DiagramBrushToColorConverter}}" />
                            </ControlTemplate>
                        </dxe:PopupBaseEdit.PopupContentTemplate>
                    </dxe:PopupBaseEdit>
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.Anchors}">
        <dxprg:PropertyDefinition>
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:ComboBoxEdit
                        Name="PART_Editor"
                        EditValue="{Binding Path=Value, Converter={dxdiagi:SideToSidesConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        FilterCriteria="{dxdiagi:EnumFilterCriteria EnumType=dxdiagc:Sides, CriteriaString='Id!=\'None\' And Id!=\'All\''}"
                        IsTextEditable="False"
                        ShowCustomItems="True"
                        ShowSizeGrip="False">
                        <dxe:ComboBoxEdit.StyleSettings>
                            <dxe:CheckedComboBoxStyleSettings />
                        </dxe:ComboBoxEdit.StyleSettings>
                        <dxmvvm:Interaction.Behaviors>
                            <dxmvvm:EnumItemsSourceBehavior EnumType="{x:Type dxdiagc:Sides}" />
                            <dxei:DisplayTextProviderBehavior DisplayTextProvider="{dxdiagi:AnchorsEditorDisplayTextProvider}" />
                        </dxmvvm:Interaction.Behaviors>
                    </dxe:ComboBoxEdit>
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:PropertyDefinition>
    </DataTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PropertyGridEditor.DashType}">
        <dxprg:CollectionDefinition
            AllowInstanceInitializer="False"
            IsReadOnly="False"
            PostOnEditValueChanged="True"
            ShowChildren="False"
            UseCollectionEditor="False">
            <dxprg:PropertyDefinition.CellTemplate>
                <DataTemplate>
                    <dxe:ComboBoxEdit
                        Name="PART_Editor"
                        DisplayMember="Name"
                        EditValue="{Binding Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        ItemsSource="{x:Static dxdiagc:DashTypeDescriptions.DashTypes}"
                        ShowCustomItems="False"
                        Style="{StaticResource PropertyGridArrowEditorStyleBase}"
                        ValueMember="DashArray">
                        <dxe:ComboBoxEdit.ItemTemplate>
                            <DataTemplate>
                                <dx:DXBorder Background="Transparent" ToolTip="{Binding Name}">
                                    <dxdiagi:DashTypePresenter Margin="5,0,5,0" DashType="{Binding}" Stroke="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
                                </dx:DXBorder>
                            </DataTemplate>
                        </dxe:ComboBoxEdit.ItemTemplate>
                    </dxe:ComboBoxEdit>
                </DataTemplate>
            </dxprg:PropertyDefinition.CellTemplate>
        </dxprg:CollectionDefinition>
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\PropertyGridEditors.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\PrintPreviewControl.xaml-->
    <Style x:Key="PrintPreviewZoomEditStyle" TargetType="{x:Type dxe:TrackBarEdit}">
        <Setter Property="Minimum" Value="-4680" />
        <Setter Property="Maximum" Value="3600" />
        <Setter Property="SmallStep" Value="120" />
        <Setter Property="LargeStep" Value="240" />
        <Setter Property="TickFrequency" Value="4680" />
    </Style>


    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.ZoomInButtonStyle}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString DiagramCommand_ZoomIn}" />
            <Setter Property="Command" Value="{Binding Path=(dxdv:DocumentViewerControl.ActualViewer).ActualCommandProvider.ZoomInCommand, RelativeSource={RelativeSource TemplatedParent}}" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/ZoomIn.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/ZoomIn.svg}" />
            <Setter Property="KeyGesture" Value="Ctrl+OemPlus" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=DiagramCommand_ZoomIn, KeyGesture=Ctrl+OemPlus, DescriptionId=DiagramCommand_ZoomIn_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.ZoomOutButtonStyle}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString DiagramCommand_ZoomOut}" />
            <Setter Property="Command" Value="{Binding Path=(dxdv:DocumentViewerControl.ActualViewer).ActualCommandProvider.ZoomOutCommand, RelativeSource={RelativeSource TemplatedParent}}" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/ZoomOut.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/ZoomOut.svg}" />
            <Setter Property="KeyGesture" Value="Ctrl+OemMinus" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=DiagramCommand_ZoomOut, KeyGesture=Ctrl+OemMinus, DescriptionId=DiagramCommand_ZoomOut_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.ZoomButtonStyle}" TargetType="{x:Type dxb:BarSubItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString PrintPreview_Zoom}" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Zoom.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Zoom.svg}" />
            <Setter Property="IsEnabled" Value="{Binding Diagram, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}, Converter={dxmvvm:ObjectToBooleanConverter}}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=PrintPreview_Zoom, DescriptionId=PrintPreview_Zoom_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.ZoomSelectorItemStyle}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="GroupIndex" Value="200" />
            <Setter Property="Content" Value="{Binding Converter={dxdiagi:PrintPreviewZoomConverter}}" />
            <Setter Property="CustomizationContent" Value="{Binding Converter={dxdiagi:PrintPreviewZoomConverter}}" />
            <Setter Property="AllowUncheckInGroup" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.BestFitButtonStyle}" TargetType="{x:Type dxdiag:BarMouseCheckOnlyItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString PrintPreview_BestFit}" />
            <Setter Property="IsChecked" Value="{Binding PreviewZoomMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}, Converter={dxdiagi:PreviewZoomModeConverter PreviewZoomMode=BestFit}}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/BestFit.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/BestFit.svg}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=PrintPreview_BestFit, DescriptionId=PrintPreview_BestFit_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.ScaleButtonStyle}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString PrintPreview_Scale}" />
            <Setter Property="Command" Value="{Binding ScaleCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Scale.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Scale.svg}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=PrintPreview_Scale, DescriptionId=PrintPreview_Scale_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.PrintButtonStyle}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString DiagramCommand_Print}" />
            <Setter Property="Command" Value="{Binding PrintCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Print.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Print.svg}" />
            <Setter Property="KeyGesture" Value="Ctrl+P" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=DiagramCommand_Print, KeyGesture=Ctrl+P, DescriptionId=DiagramCommand_Print_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.QuickPrintButtonStyle}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString DiagramCommand_QuickPrint}" />
            <Setter Property="Command" Value="{Binding QuickPrintCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/QuickPrint.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/QuickPrint.svg}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=DiagramCommand_QuickPrint, DescriptionId=DiagramCommand_QuickPrint_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.PageSetupButtonStyle}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString DiagramCommand_SetPageParameters_PageSize_Header}" />
            <Setter Property="Command" Value="{Binding PageSetupCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/PageSize.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/PageSize.svg}" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=DiagramCommand_SetPageParameters_PageSize_Header, DescriptionId=DiagramCommand_SetPageParameters_PageSize_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        </Style.Setters>
    </Style>
    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.CloseButtonStyle}" TargetType="{x:Type dxb:BarButtonItem}">
        <Style.Setters>
            <Setter Property="Content" Value="{dxdiag:DiagramControlLocalizedString ContextMenu_Close}" />
            <Setter Property="Command" Value="{Binding ClosePreviewCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}}" />
            <Setter Property="GlyphSize" Value="Large" />
            <Setter Property="Glyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Close.svg}" />
            <Setter Property="LargeGlyph" Value="{dxdiag:DiagramSvgImage Path=Images/Svg/Close.svg}" />
            <Setter Property="KeyGesture" Value="Alt+C" />
            <Setter Property="SuperTip" Value="{dxdiag:DiagramItemToolTipProvider CaptionId=PrintPreview_Close, KeyGesture=Alt+C, DescriptionId=PrintPreview_Close_Description}" />
            <Setter Property="ShowScreenTip" Value="True" />
        </Style.Setters>
    </Style>

    <DataTemplate x:Key="{dxdiagt:LWKey PrintPreviewControl.RibbonTemplate}">
        <DockPanel>
            <dxr:RibbonControl
                AllowCustomization="False"
                DockPanel.Dock="Top"
                RibbonHeaderVisibility="Collapsed"
                RibbonStyle="Office2010"
                RibbonTitleBarVisibility="Collapsed"
                ShowApplicationButton="False"
                ToolbarShowCustomizationButton="False"
                ToolbarShowMode="Hide">
                <dxr:RibbonDefaultPageCategory>
                    <dxr:RibbonPage dxdiagi:PrintPreviewControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.PrintPreviewRibbonPage}" Caption="{dxdiag:DiagramControlLocalizedString RibbonPage_PrintPreview}">
                        <dxr:RibbonPageGroup dxdiagi:PrintPreviewControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.PrintGroup}" Caption="{dxdiag:DiagramControlLocalizedString PrintPreview_Print}">
                            <dxb:BarButtonItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.Print}" Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.PrintButtonStyle}}" />
                            <dxb:BarButtonItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.QuickPrint}" Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.QuickPrintButtonStyle}}" />
                            <dxb:BarButtonItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.PageSetup}" Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.PageSetupButtonStyle}}" />
                        </dxr:RibbonPageGroup>
                        <dxr:RibbonPageGroup dxdiagi:PrintPreviewControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.ZoomGroup}" Caption="{dxdiag:DiagramControlLocalizedString RibbonPageGroup_Zoom}">
                            <dxb:BarButtonItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.ZoomIn}" Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.ZoomInButtonStyle}}" />
                            <dxb:BarButtonItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.ZoomOut}" Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.ZoomOutButtonStyle}}" />
                            <dxb:BarSubItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.Zoom}" Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.ZoomButtonStyle}}">
                                <dxb:BarItemSelector
                                    dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.ZoomSelector}"
                                    AllowEmptySelection="True"
                                    CustomizationContent="{dxdiag:DiagramControlLocalizedString PrintPreview_ZoomSelector}"
                                    ItemLinksSource="{x:Static dxdiagi:PrintPreviewControl.PredefinedZoomValues}"
                                    SelectedItem="{Binding ZoomFactor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}, Mode=TwoWay}">
                                    <dxb:BarItemSelector.ItemTemplate>
                                        <DataTemplate>
                                            <ContentControl>
                                                <dxdiag:BarMouseCheckOnlyItem Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.ZoomSelectorItemStyle}}" />
                                            </ContentControl>
                                        </DataTemplate>
                                    </dxb:BarItemSelector.ItemTemplate>
                                </dxb:BarItemSelector>
                            </dxb:BarSubItem>
                            <dxb:BarItemSeparator dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.ZoomSeparator}" CustomizationContent="{dxdiag:DiagramControlLocalizedString SeparatorName}" />
                            <dxdiag:BarMouseCheckOnlyItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.BestFit}" Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.BestFitButtonStyle}}" />
                            <dxb:BarButtonItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.Scale}" Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.ScaleButtonStyle}}" />
                        </dxr:RibbonPageGroup>
                        <dxr:RibbonPageGroup dxdiagi:PrintPreviewControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.CloseGroup}" Caption="{dxdiag:DiagramControlLocalizedString ContextMenu_Close}">
                            <dxb:BarButtonItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.Close}" Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.CloseButtonStyle}}" />
                        </dxr:RibbonPageGroup>
                    </dxr:RibbonPage>
                </dxr:RibbonDefaultPageCategory>
            </dxr:RibbonControl>
            <dxr:RibbonStatusBarControl DockPanel.Dock="Bottom">
                <dxr:RibbonStatusBarControl.RightItems>
                    <dxb:BarEditItem
                        dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.StatusBarZoomEditor}"
                        Content="{Binding ZoomFactor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}, Converter={dxmvvm:FormatStringConverter FormatString=P0}}"
                        CustomizationContent="{dxdiag:DiagramControlLocalizedString StatusBarZoomEditor}"
                        EditStyle="{StaticResource PrintPreviewZoomEditStyle}"
                        EditValue="{Binding ZoomFactor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}, Converter={dxdiagi:NonlinearZoomConverter}, Mode=TwoWay}"
                        EditWidth="100">
                        <dxb:BarEditItem.EditSettings>
                            <dxe:TrackBarEditSettings />
                        </dxb:BarEditItem.EditSettings>
                    </dxb:BarEditItem>
                </dxr:RibbonStatusBarControl.RightItems>
                <dxr:RibbonStatusBarControl.LeftItems>
                    <dxb:BarStaticItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:PrintPreviewControlBarItemNames.PageNumber}" Focusable="False" IsVisible="{Binding Diagram, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}, Converter={dxmvvm:ObjectToBooleanConverter}}">
                        <dxb:BarStaticItem.Content>
                            <MultiBinding>
                                <MultiBinding.Bindings>
                                    <Binding Path="CurrentPageNumber" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}" />
                                    <Binding Mode="OneWay" Path="PageCount" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type dxdiagi:PrintPreviewControl}}" />
                                </MultiBinding.Bindings>
                                <MultiBinding.Converter>
                                    <dxdiagi:PageOfPagesConverter />
                                </MultiBinding.Converter>
                            </MultiBinding>
                        </dxb:BarStaticItem.Content>
                    </dxb:BarStaticItem>
                </dxr:RibbonStatusBarControl.LeftItems>
            </dxr:RibbonStatusBarControl>
            <dxdv:DocumentPresenterControl PageDisplayMode="Columns" Style="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.DocumentPresenterControlStyle}}" />
        </DockPanel>
    </DataTemplate>

    <Style x:Key="{dxdiagt:LWKey PrintPreviewControl.DocumentPresenterControlStyle}" TargetType="{x:Type dxdv:DocumentPresenterControl}">
        <Setter Property="Template" Value="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.DocumentPresenterTemplate}}" />
        <Setter Property="Focusable" Value="False" />
    </Style>

    <ControlTemplate x:Key="{dxdiagt:LWKey PrintPreviewControl.DocumentPresenterTemplate}" TargetType="{x:Type dxdv:DocumentPresenterControl}">
        <Grid>
            <dxe:NativeImage x:Name="PART_NativeImage" Focusable="False" />
            <dxdiagi:DocumentViewerItemsControl x:Name="PART_ItemsControl">
                <dxdv:DocumentViewerItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <dxdv:DocumentViewerPanel x:Name="PART_DocumentViewerPanel" Background="{DynamicResource {dxdiagt:LWKey DiagramControl.DiagramControlBackground}}" />
                    </ItemsPanelTemplate>
                </dxdv:DocumentViewerItemsControl.ItemsPanel>
            </dxdiagi:DocumentViewerItemsControl>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ScrollViewerTemplate" TargetType="{x:Type dxdv:DXScrollViewer}">
        <Grid x:Name="Grid" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter
                x:Name="PART_ScrollContentPresenter"
                Margin="{TemplateBinding Padding}"
                CanContentScroll="{TemplateBinding CanContentScroll}"
                CanHorizontallyScroll="False"
                CanVerticallyScroll="False">
                <Grid.RowSpan>
                    <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                            <dx:EnumToObjectConverter DefaultValue="1">
                                <dx:EnumToObjectConverter.Values>
                                    <dx:EnumObjectProvider x:Key="TouchOverlap" Value="2" />
                                </dx:EnumToObjectConverter.Values>
                            </dx:EnumToObjectConverter>
                        </Binding.Converter>
                    </Binding>
                </Grid.RowSpan>
                <Grid.ColumnSpan>
                    <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                            <dx:EnumToObjectConverter DefaultValue="1">
                                <dx:EnumToObjectConverter.Values>
                                    <dx:EnumObjectProvider x:Key="TouchOverlap" Value="2" />
                                </dx:EnumToObjectConverter.Values>
                            </dx:EnumToObjectConverter>
                        </Binding.Converter>
                    </Binding>
                </Grid.ColumnSpan>
            </ScrollContentPresenter>
            <ScrollBar
                x:Name="PART_VerticalScrollBar"
                Grid.Row="0"
                Grid.Column="1"
                AutomationProperties.AutomationId="VerticalScrollBar"
                Cursor="Arrow"
                Maximum="{TemplateBinding ScrollableHeight}"
                Minimum="0"
                ViewportSize="{TemplateBinding ViewportHeight}"
                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Grid.RowSpan>
                    <MultiBinding>
                        <MultiBinding.Bindings>
                            <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource Self}" />
                            <Binding Path="(dx:ScrollBarExtensions.ScrollViewerOrientation)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding.Bindings>
                        <MultiBinding.Converter>
                            <dx:VerticalScrollBarRowSpanConverter />
                        </MultiBinding.Converter>
                    </MultiBinding>
                </Grid.RowSpan>
            </ScrollBar>
            <ScrollBar
                x:Name="PART_HorizontalScrollBar"
                Grid.Row="1"
                Grid.Column="0"
                AutomationProperties.AutomationId="HorizontalScrollBar"
                Cursor="Arrow"
                Maximum="{TemplateBinding ScrollableWidth}"
                Minimum="0"
                Orientation="Horizontal"
                ViewportSize="{TemplateBinding ViewportWidth}"
                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Grid.ColumnSpan>
                    <MultiBinding>
                        <MultiBinding.Bindings>
                            <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource Self}" />
                            <Binding Path="(dx:ScrollBarExtensions.ScrollViewerOrientation)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding.Bindings>
                        <MultiBinding.Converter>
                            <dx:HorizontalScrollBarRowSpanConverter />
                        </MultiBinding.Converter>
                    </MultiBinding>
                </Grid.ColumnSpan>
            </ScrollBar>
            <dxe:FlyoutControl
                x:Name="PART_FlyoutControl"
                VerticalAlignment="Center"
                AllowMoveAnimation="False"
                ContentTemplate="{DynamicResource {dxdvt:LWKey DocumentViewer.FlyoutControlPaginationTemplate}}"
                IsOpen="False"
                PlacementTarget="{Binding ElementName=PART_VerticalScrollBar}">
                <dxe:FlyoutControl.Settings>
                    <dxe:FlyoutSettings Placement="Left" ShowIndicator="True" />
                </dxe:FlyoutControl.Settings>
            </dxe:FlyoutControl>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxdiagt:LWKey PrintPreviewControl.ItemsControlTemplate}" TargetType="{x:Type dxdiagi:DocumentViewerItemsControl}">
        <dx:DXBorder Name="Border" BorderThickness="0">
            <dxdv:DXScrollViewer
                x:Name="PART_ScrollViewer"
                Margin="0"
                dx:ScrollBarExtensions.ScrollBarMode="Standard"
                CanContentScroll="True"
                Focusable="False"
                HorizontalScrollBarVisibility="Auto"
                Template="{StaticResource ScrollViewerTemplate}"
                VerticalScrollBarVisibility="Auto">
                <dxmvvm:Interaction.Behaviors>
                    <dxdiagi:PreviewCursorBehavior />
                </dxmvvm:Interaction.Behaviors>
                <ItemsPresenter x:Name="PART_ItemsPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </dxdv:DXScrollViewer>
        </dx:DXBorder>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxdiagt:LWKey PrintPreviewControl.PageTemplate}" TargetType="{x:Type dxdiagi:PageControl}">
        <ItemsPresenter x:Name="PART_ItemsPresenter" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxdiagt:LWKey PrintPreviewControl.PageControlItemTemplate}" TargetType="{x:Type dxdiagi:PageControlItem}">
        <ContentControl
            x:Name="PART_ContentControl"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            HorizontalContentAlignment="Stretch"
            VerticalContentAlignment="Stretch"
            Background="White"
            Focusable="False">
            <dx:DXBorder BorderBrush="{DynamicResource {dxdiagt:LWKey Adorners.SelectionAdornerStroke}}" BorderThickness="1" />
        </ContentControl>
    </ControlTemplate>
    <DataTemplate x:Key="{dxdiagt:LWKey PrintPreviewControl.WindowTemplate}">
        <ContentControl>
            <dxmvvm:WindowService WindowShowMode="Dialog" WindowType="{x:Type dx:ThemedWindow}">
                <dxmvvm:WindowService.WindowStyle>
                    <Style TargetType="{x:Type dx:ThemedWindow}">
                        <Setter Property="Icon" Value="{dxdiag:DiagramImageExtension Source='DevExpress.Diagram.Core.Images.Menu.PrintPreview_Title_16x16.png'}" />
                    </Style>
                </dxmvvm:WindowService.WindowStyle>
                <dxmvvm:WindowService.ViewTemplate>
                    <DataTemplate>
                        <dxdiagi:PrintPreviewControl Diagram="{Binding}" />
                    </DataTemplate>
                </dxmvvm:WindowService.ViewTemplate>
            </dxmvvm:WindowService>
        </ContentControl>
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\PrintPreviewControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\PanAndZoomControl.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic\PanAndZoomControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Diagram\DevExpress.Xpf.Diagram\Themes\Generic.xaml-->


    <!--#region DEFAULT STYLES-->

    <Style x:Key="CollectionEditorBase.DefaultStyleBase" TargetType="dxdiagi:CollectionEditorBase">
        <Setter Property="ItemsControlTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <ContentControl
                            Grid.Row="0"
                            Grid.Column="0"
                            Content="{x:Null}"
                            ContentTemplate="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).ItemsControlHeaderTemplate, RelativeSource={RelativeSource Self}}" />

                        <ContentControl
                            Grid.Row="1"
                            Grid.Column="0"
                            Content="{x:Null}"
                            ContentTemplate="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).ItemsListTemplate, RelativeSource={RelativeSource Self}}" />

                        <ContentControl
                            Grid.Row="2"
                            Grid.Column="0"
                            Content="{x:Null}"
                            ContentTemplate="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).ActionButtonsTemplate, RelativeSource={RelativeSource Self}}" />
                        <ContentControl
                            Grid.Row="1"
                            Grid.Column="1"
                            Margin="2,0"
                            Content="{x:Null}"
                            ContentTemplate="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).NavigationPanelTemplate, RelativeSource={RelativeSource Self}}" />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemsControlHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Margin="5,5,5,10" Text="Collection Items:" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Margin="5,0,0,0" Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ActionButtonsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Button
                            Margin="0,9,2,0"
                            Padding="0,5"
                            Command="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).AddItemCommand, RelativeSource={RelativeSource Self}}"
                            Content="Add" />
                        <Button
                            Grid.Column="1"
                            Margin="2,9,0,0"
                            Padding="0,5"
                            Command="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).RemoveItemCommand, RelativeSource={RelativeSource Self}}"
                            Content="Remove" />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="NavigationPanelTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel>
                        <Button Margin="4,0,4,4" Command="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).MoveUpCommand, RelativeSource={RelativeSource Self}}">
                            <dx:DXImage Source="{dx:ImageSelector Source={dx:DXImage Image=MoveUp_16x16.png}, SvgSource={dxdiag:DiagramSvgImage Path=Images/Svg/ArrowUp.svg}}" Style="{StaticResource ImageOpacityTrigger}" />
                        </Button>
                        <Button Margin="4,0" Command="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).MoveDownCommand, RelativeSource={RelativeSource Self}}">
                            <dx:DXImage Source="{dx:ImageSelector Source={dx:DXImage Image=MoveDown_16x16.png}, SvgSource={dxdiag:DiagramSvgImage Path=Images/Svg/ArrowDown.svg}}" Style="{StaticResource ImageOpacityTrigger}" />
                        </Button>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="DialogFooterTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                            <dx:DialogButton DialogResult="OK" />
                            <dx:DialogButton DialogResult="Cancel" />
                        </StackPanel>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxdiagi:CollectionEditorBase">
                    <Grid>
                        <Grid.Resources>
                            <Style TargetType="{x:Type dxprg:PropertyGridControl}">
                                <Setter Property="SortMode" Value="Ascending" />
                            </Style>
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <ContentControl
                            Grid.Row="0"
                            Grid.Column="0"
                            Margin="12,6,0,6"
                            dxdiagi:CollectionEditorBase.Editor="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Content="{x:Null}"
                            ContentTemplate="{TemplateBinding ItemsControlTemplate}" />

                        <ContentControl
                            x:Name="PART_DetailedDescription"
                            Grid.Row="0"
                            Grid.Column="1"
                            Margin="0,6,12,6"
                            dxdiagi:CollectionEditorBase.Editor="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Content="{x:Null}"
                            ContentTemplate="{TemplateBinding ItemDetailedDescriptionTemplateWrapper}" />

                        <dx:DialogFooter>
                            <ContentControl dxdiagi:CollectionEditorBase.Editor="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{x:Null}" ContentTemplate="{TemplateBinding DialogFooterTemplate}" />
                        </dx:DialogFooter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExtendedSelectionCollectionEditor.DefaultStyleBase" BasedOn="{StaticResource CollectionEditorBase.DefaultStyleBase}" TargetType="dxdiagi:ExtendedSelectionCollectionEditor">
        <Setter Property="ItemsListTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxe:ListBoxEdit
                        Grid.Row="1"
                        Grid.Column="0"
                        EditValue="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).SelectedItems, RelativeSource={RelativeSource Self}, UpdateSourceTrigger=PropertyChanged}"
                        ItemTemplate="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).ItemTemplate, RelativeSource={RelativeSource Self}}"
                        ItemsSource="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).EditableCollectionModel, RelativeSource={RelativeSource Self}}"
                        SelectionMode="Extended" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemDetailedDescriptionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxprg:PropertyGridControl ExpandCategoriesWhenSelectedObjectChanged="True" SelectedObjects="{Binding}" ShowSearchBox="False">
                        <dxprg:PropertyGridControl.MenuCustomizations>
                            <dxb:RemoveAction ElementName="{x:Static dxprg:BarItemNames.Refresh}" />
                        </dxprg:PropertyGridControl.MenuCustomizations>
                    </dxprg:PropertyGridControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemDetailedDescriptionTemplateWrapper">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).SelectedItems, RelativeSource={RelativeSource Self}}" ContentTemplate="{Binding Path=(dxdiagi:CollectionEditorBase.Editor).ItemDetailedDescriptionTemplate, RelativeSource={RelativeSource Self}}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ShapeToolboxPreview.DefaultStyleBase" TargetType="{x:Type dxdiag:ShapeToolboxPreview}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ShapeToolboxPreview}">
                    <StackPanel x:Name="PART_LayoutElement" Orientation="Horizontal">
                        <Viewbox
                            x:Name="PART_Viewbox"
                            Width="{DynamicResource {dxdiagt:LWKey DiagramToolboxControl.ShapePresenterSize}}"
                            Height="{DynamicResource {dxdiagt:LWKey DiagramToolboxControl.ShapePresenterSize}}"
                            HorizontalAlignment="Center"
                            Stretch="{TemplateBinding ShapePresenterStretch}">
                            <ContentPresenter x:Name="PART_ShapePresenter" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Viewbox>
                        <TextBlock
                            x:Name="PART_TextBlock"
                            Width="{DynamicResource {dxdiagt:LWKey DiagramToolboxControl.ShapeDescriptionWidth}}"
                            MaxHeight="{DynamicResource {dxdiagt:LWKey DiagramToolboxControl.ShapePresenterSize}}"
                            VerticalAlignment="Center"
                            TextTrimming="CharacterEllipsis"
                            TextWrapping="WrapWithOverflow" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiagramToolboxControl.DefaultStyleBase" TargetType="{x:Type dxdiag:DiagramToolboxControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource {dxdiagt:LWKey DiagramToolboxControl.Background}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:DiagramToolboxControl}">
                    <Grid VerticalAlignment="Stretch" Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <dxe:SearchControl
                            Margin="3,3,3,0"
                            FindMode="Always"
                            NullText="{Binding ConverterParameter=Search_Shapes_Null_Text, Converter={StaticResource DiagramStringIdConverter}}"
                            SearchText="{Binding ViewModel.SearchText, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"
                            Visibility="{TemplateBinding IsCompact, Converter={dxmvvm:BooleanToVisibilityConverter Inverse=True}}" />
                        <ListBox
                            Name="StencilsListBox"
                            Grid.Row="1"
                            Margin="3,3,2,2"
                            HorizontalContentAlignment="Stretch"
                            ItemContainerStyle="{DynamicResource {dxdiagt:LWKey DiagramToolboxControl.StencilsSelectorItemStyle}}"
                            ItemTemplate="{DynamicResource {dxdiagt:LWKey DiagramToolboxControl.StencilsSelectorItemTemplate}}"
                            Tag="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            Template="{StaticResource ListBoxTemplate}">
                            <dxmvvm:Interaction.Behaviors>
                                <dxdiagi:ListBoxMenuBehavior
                                    IsCompact="{Binding IsCompact, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiag:DiagramToolboxControl}}}"
                                    MenuViewMode="{Binding MenuViewMode, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiag:DiagramToolboxControl}}}"
                                    PopupMenu="{Binding ElementName=popupMenu}"
                                    ViewModel="{Binding ViewModel, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dxdiag:DiagramToolboxControl}}}" />
                            </dxmvvm:Interaction.Behaviors>
                            <dxb:BarManager.DXContextMenu>
                                <dxb:PopupMenu x:Name="popupMenu">
                                    <dxb:BarSubItem Content="{Binding ConverterParameter=ContextMenu_View, Converter={StaticResource DiagramStringIdConverter}}" IsVisible="{Binding Path=MenuViewMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ViewSelectorToBoolConverter}}">
                                        <dxb:BarCheckItem
                                            AllowUncheckInGroup="False"
                                            CloseSubMenuOnClick="False"
                                            Command="{Binding Path=ViewModel.SelectShapePreviewModeCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            CommandParameter="IconsAndNames"
                                            Content="{Binding ConverterParameter=ContextMenu_Icons_And_Names, Converter={StaticResource DiagramStringIdConverter}}"
                                            Glyph="{dxdiag:DiagramSvgImage Size='16,16', Path=Images/Svg/IconsAndNames.svg}"
                                            GroupIndex="0"
                                            IsChecked="{Binding Path=ViewModel.ShapePreviewMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconsAndNamesToBoolConverter}}" />
                                        <dxb:BarCheckItem
                                            AllowUncheckInGroup="False"
                                            CloseSubMenuOnClick="False"
                                            Command="{Binding Path=ViewModel.SelectShapePreviewModeCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            CommandParameter="NamesUnderIcons"
                                            Content="{Binding ConverterParameter=ContextMenu_Names_Under_Icons, Converter={StaticResource DiagramStringIdConverter}}"
                                            Glyph="{dxdiag:DiagramSvgImage Size='16,16', Path=Images/Svg/NamesUnderIcons.svg}"
                                            GroupIndex="0"
                                            IsChecked="{Binding Path=ViewModel.ShapePreviewMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NamesUnderIconsToBoolConverter}}" />
                                        <dxb:BarCheckItem
                                            AllowUncheckInGroup="False"
                                            CloseSubMenuOnClick="False"
                                            Command="{Binding Path=ViewModel.SelectShapePreviewModeCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            CommandParameter="IconsOnly"
                                            Content="{Binding ConverterParameter=ContextMenu_Icons_Only, Converter={StaticResource DiagramStringIdConverter}}"
                                            Glyph="{dxdiag:DiagramSvgImage Size='16,16', Path=Images/Svg/IconsOnly.svg}"
                                            GroupIndex="0"
                                            IsChecked="{Binding Path=ViewModel.ShapePreviewMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconsOnlyToBoolConverter}}" />
                                        <dxb:BarCheckItem
                                            AllowUncheckInGroup="False"
                                            CloseSubMenuOnClick="False"
                                            Command="{Binding Path=ViewModel.SelectShapePreviewModeCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            CommandParameter="NamesOnly"
                                            Content="{Binding ConverterParameter=ContextMenu_Names_Only, Converter={StaticResource DiagramStringIdConverter}}"
                                            Glyph="{dxdiag:DiagramSvgImage Size='16,16', Path=Images/Svg/NamesOnly.svg}"
                                            GroupIndex="0"
                                            IsChecked="{Binding Path=ViewModel.ShapePreviewMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NamesOnlyToBoolConverter}}" />
                                    </dxb:BarSubItem>
                                    <dxb:BarSubItem Content="{Binding ConverterParameter=ContextMenu_Order, Converter={StaticResource DiagramStringIdConverter}}" IsVisible="{Binding Path=MenuViewMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ViewAndOrderSelectorToBoolConverter}}">
                                        <dxb:BarButtonItem Command="{Binding Path=ViewModel.MoveUpSelectedStencilCommand, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding ConverterParameter=ContextMenu_Move_Up, Converter={StaticResource DiagramStringIdConverter}}" />
                                        <dxb:BarButtonItem Command="{Binding Path=ViewModel.MoveDownSelectedStencilCommand, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding ConverterParameter=ContextMenu_Move_Down, Converter={StaticResource DiagramStringIdConverter}}" />
                                    </dxb:BarSubItem>
                                    <dxb:BarItemSeparator IsVisible="{Binding Path=MenuViewMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ViewAndOrderSelectorToBoolConverter}}" />
                                    <dxb:BarButtonItem
                                        Command="{Binding Path=ViewModel.RemoveSelectedStencilCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                        Content="{Binding ConverterParameter=ContextMenu_Close, Converter={StaticResource DiagramStringIdConverter}}"
                                        Glyph="{dxdiag:DiagramSvgImage Size='16,16', Path=Images/Svg/Delete.svg}"
                                        IsVisible="{Binding Path=MenuViewMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ViewAndOrderSelectorToBoolConverter}}" />
                                    <dxb:BarLinkContainerItem>
                                        <dxb:BarLinkContainerItem.ItemTemplate>
                                            <DataTemplate>
                                                <ContentControl>
                                                    <dxb:BarCheckItem CloseSubMenuOnClick="False" Content="{Binding Name}" IsChecked="{Binding IsChecked, Mode=TwoWay}" />
                                                </ContentControl>
                                            </DataTemplate>
                                        </dxb:BarLinkContainerItem.ItemTemplate>
                                        <dxb:BarLinkContainerItem.Style>
                                            <Style TargetType="{x:Type dxb:BarLinkContainerItem}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=MenuViewMode, RelativeSource={RelativeSource TemplatedParent}}" Value="StencilsSelector">
                                                        <Setter Property="ItemLinksSource" Value="{Binding Path=ViewModel.Stencils, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </dxb:BarLinkContainerItem.Style>
                                    </dxb:BarLinkContainerItem>
                                    <dxb:BarItemLink />
                                    <dxb:BarSubItem
                                        Content="{Binding ConverterParameter=More_Shapes_Name, Converter={StaticResource DiagramStringIdConverter}}"
                                        IsVisible="{Binding Path=MenuViewMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StencilsCompactSelectorToBoolConverter}}"
                                        ItemLinksSource="{Binding Path=ViewModel.Stencils, RelativeSource={RelativeSource TemplatedParent}}"
                                        ItemTemplate="{StaticResource StencilCompactItemTemplate}" />
                                    <dxb:BarLinkContainerItem ItemTemplate="{StaticResource SelectedStencilItemTemplate}">
                                        <dxb:BarLinkContainerItem.Style>
                                            <Style TargetType="{x:Type dxb:BarLinkContainerItem}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=MenuViewMode, RelativeSource={RelativeSource TemplatedParent}}" Value="StencilsCompactSelector">
                                                        <Setter Property="ItemLinksSource" Value="{Binding Path=ViewModel.CheckedStencils, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </dxb:BarLinkContainerItem.Style>
                                    </dxb:BarLinkContainerItem>
                                </dxb:PopupMenu>
                            </dxb:BarManager.DXContextMenu>
                        </ListBox>
                        <Separator Grid.Row="2" Margin="0" HorizontalAlignment="Stretch" />
                        <dx:DXBorder Grid.Row="3" Background="{DynamicResource {dxdiagt:LWKey DiagramToolboxControl.ToolsAreaBackground}}" BorderThickness="0">
                            <Grid Margin="0,0,0,0">
                                <TextBlock
                                    Grid.Row="3"
                                    MaxHeight="{TemplateBinding IsCompact, Converter={StaticResource InverseBoolToHeightConverter}}"
                                    Margin="10,0,10,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Foreground="{Binding ElementName=ShapesListBox, Path=Foreground}"
                                    Text="{Binding EmptyCollectionText, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                    TextWrapping="Wrap"
                                    Visibility="{Binding ViewModel.ShapesItemCollection.Count, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={dxmvvm:NumericToVisibilityConverter Inverse=True}}" />
                                <ListBox
                                    x:Name="ShapesListBox"
                                    Grid.Row="3"
                                    ItemContainerStyle="{StaticResource UnselectedListBoxItemStyle}"
                                    ItemsSource="{Binding ViewModel.ShapesItemCollection, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                    ScrollViewer.PanningMode="None"
                                    Tag="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                    Visibility="{Binding ViewModel.ShapesItemCollection.Count, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={dxmvvm:NumericToVisibilityConverter}}">
                                    <ListBox.Template>
                                        <ControlTemplate TargetType="{x:Type ListBox}">
                                            <DockPanel Background="Transparent">
                                                <RepeatButton
                                                    x:Name="LineUpButton"
                                                    ClickMode="Hover"
                                                    Command="{x:Static ScrollBar.LineUpCommand}"
                                                    CommandTarget="{Binding ElementName=scrollviewer}"
                                                    Content="F1M0,3L1,3 1,2 2,2 2,1 3,1 3,0 4,0 4,1 5,1 5,2 6,2 6,3 7,3 7,6 6,6 6,5 5,5 5,4 4,4 4,3 3,3 3,4 2,4 2,5 1,5 1,6 0,6 0,3z"
                                                    DockPanel.Dock="Top"
                                                    FocusVisualStyle="{x:Null}"
                                                    Style="{StaticResource ScrollButtonStyle}"
                                                    Visibility="{Binding ElementName=scrollViewerBehavior, Path=ScrollUpButtonVisibility}" />
                                                <RepeatButton
                                                    x:Name="LineDownButton"
                                                    ClickMode="Hover"
                                                    Command="{x:Static ScrollBar.LineDownCommand}"
                                                    CommandTarget="{Binding ElementName=scrollviewer}"
                                                    Content="F1M0,0L1,0 1,1 2,1 2,2 3,2 3,3 4,3 4,2 5,2 5,1 6,1 6,0 7,0 7,3 6,3 6,4 5,4 5,5 4,5 4,6 3,6 3,5 2,5 2,4 1,4 1,3 0,3 0,0z"
                                                    DockPanel.Dock="Bottom"
                                                    FocusVisualStyle="{x:Null}"
                                                    Style="{StaticResource ScrollButtonStyle}"
                                                    Visibility="{Binding ElementName=scrollViewerBehavior, Path=ScrollDownButtonVisibility}" />
                                                <ScrollViewer
                                                    x:Name="scrollviewer"
                                                    Margin="0"
                                                    Padding="0"
                                                    CanContentScroll="False"
                                                    HorizontalScrollBarVisibility="Disabled">
                                                    <dxmvvm:Interaction.Behaviors>
                                                        <dxdiagi:ScrollViewerButtonsBehavior x:Name="scrollViewerBehavior" IsCompact="{Binding ElementName=ShapesListBox, Path=Tag.IsCompact}" ViewerViewportWidth="{Binding ElementName=ShapesListBox, Path=Tag.VisualWidth, Mode=TwoWay}" />
                                                    </dxmvvm:Interaction.Behaviors>
                                                    <ItemsPresenter />
                                                </ScrollViewer>
                                            </DockPanel>
                                        </ControlTemplate>
                                    </ListBox.Template>
                                    <ListBox.ItemTemplate>
                                        <DataTemplate>
                                            <Grid HorizontalAlignment="Stretch">
                                                <Grid.Resources>
                                                    <CollectionViewSource x:Key="ShapesCollection" Source="{Binding Tools, Converter={dxdiagi:IsQuickToolsConverter}}">
                                                        <CollectionViewSource.GroupDescriptions>
                                                            <PropertyGroupDescription PropertyName="IsQuick" />
                                                        </CollectionViewSource.GroupDescriptions>
                                                    </CollectionViewSource>
                                                </Grid.Resources>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="*" />
                                                </Grid.RowDefinitions>
                                                <TextBlock
                                                    MaxWidth="{Binding ElementName=ShapesListBox, Path=Tag.IsCompact, Converter={StaticResource InverseBoolToHeightConverter}}"
                                                    MaxHeight="{Binding ElementName=ShapesListBox, Path=Tag.IsCompact, Converter={StaticResource InverseBoolToHeightConverter}}"
                                                    Margin="6,0,6,0"
                                                    FontWeight="Bold"
                                                    Text="{Binding Name}"
                                                    Visibility="{Binding NameIsVisible, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
                                                <ListBox
                                                    x:Name="ShapeListBox"
                                                    Grid.Row="1"
                                                    HorizontalAlignment="Stretch"
                                                    Background="Transparent"
                                                    BorderBrush="Transparent"
                                                    BorderThickness="0"
                                                    ItemContainerStyle="{DynamicResource {dxdiagt:LWKey DiagramToolboxControl.ShapesSelectorItemStyle}}"
                                                    ItemsSource="{Binding Source={StaticResource ShapesCollection}}"
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    ScrollViewer.CanContentScroll="False"
                                                    ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                                    ScrollViewer.PanningMode="None"
                                                    SelectedItem="{Binding SelectedTool, Mode=TwoWay}"
                                                    Template="{StaticResource ListBoxTemplate}">
                                                    <dxmvvm:Interaction.Behaviors>
                                                        <dxdiagi:ActualWidthBehavior ActualControlWidth="{Binding ElementName=ShapesListBox, Path=Tag.ShapeContainerWidth, Mode=TwoWay}" />
                                                        <dxdiagi:MouseMoveSelectionBehavior />
                                                    </dxmvvm:Interaction.Behaviors>
                                                    <ListBox.GroupStyle>
                                                        <GroupStyle>
                                                            <GroupStyle.ContainerStyle>
                                                                <Style TargetType="{x:Type GroupItem}">
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="{x:Type GroupItem}">
                                                                                <StackPanel>
                                                                                    <Grid Visibility="{Binding ElementName=ShapeListBox, Path=ItemsSource, Converter={dxdiagi:HeaderVisibilityConverter}}">
                                                                                        <Separator Margin="3,0,3,0" HorizontalAlignment="Stretch" Visibility="{Binding Path=Name, Converter={dxmvvm:BooleanToVisibilityConverter Inverse=True}}" />
                                                                                    </Grid>
                                                                                    <ItemsPresenter Margin="{DynamicResource {dxdiagt:LWKey DiagramToolboxControl.StencilGroupMargin}}" />
                                                                                </StackPanel>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Style>
                                                            </GroupStyle.ContainerStyle>
                                                        </GroupStyle>
                                                    </ListBox.GroupStyle>
                                                    <ListBox.ItemTemplate>
                                                        <DataTemplate>
                                                            <ScrollViewer
                                                                Focusable="False"
                                                                HorizontalScrollBarVisibility="Hidden"
                                                                KeyboardNavigation.TabNavigation="None"
                                                                VerticalScrollBarVisibility="Disabled">
                                                                <dxmvvm:Interaction.Behaviors>
                                                                    <dxdiagi:ScrollingLengthBehavior ScrollingLength="{Binding ElementName=ShapesListBox, Path=Tag.ScrollingLength, Mode=TwoWay}" />
                                                                </dxmvvm:Interaction.Behaviors>
                                                                <dxdiag:ShapeToolboxPreview
                                                                    Diagram="{Binding ElementName=ShapesListBox, Path=Tag.DiagramControl}"
                                                                    IsCompact="{Binding ElementName=ShapesListBox, Path=Tag.IsCompact}"
                                                                    ItemTool="{Binding}"
                                                                    Theme="{Binding ElementName=ShapesListBox, Path=Tag.DiagramControl.Theme}"
                                                                    UniformMargin="3"
                                                                    ViewMode="{Binding ElementName=ShapesListBox, Path=Tag.ViewModel.ShapePreviewMode}" />
                                                            </ScrollViewer>
                                                        </DataTemplate>
                                                    </ListBox.ItemTemplate>
                                                    <ListBox.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <dxdiagi:ExtendedWrapPanel ActualItemWidth="{Binding ElementName=ShapesListBox, Path=Tag.ShapeItemWidth, Mode=TwoWay}" />
                                                        </ItemsPanelTemplate>
                                                    </ListBox.ItemsPanel>
                                                </ListBox>
                                            </Grid>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                            </Grid>
                        </dx:DXBorder>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SelectionAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:SelectionAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:SelectionAdorner}">
                    <Grid Name="root">
                        <Image
                            x:Name="RotationIcon"
                            Width="21"
                            Height="21"
                            Margin="{DynamicResource {dxdiagt:LWKey Adorners.RotationAdornerMargin}}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Top"
                            Source="{dxdiag:DiagramSvgImage Size='21,21', Path=Images/Svg/Rotate.svg}" />
                        <Grid Margin="-3">
                            <Rectangle x:Name="rect" Margin="3" Stroke="{DynamicResource {dxdiagt:LWKey Adorners.SelectionAdornerStroke}}" />
                            <dx:DXBorder x:Name="MoveBorder" BorderBrush="{DynamicResource {dxdiagt:LWKey Adorners.SelectionAdornerMoveBorderBrush}}" BorderThickness="{DynamicResource {dxdiagt:LWKey Adorners.SelectionAdornerMoveBorderThickness}}" />
                            <ItemsControl ItemsSource="{TemplateBinding ResizeModes}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Grid />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Rectangle
                                            HorizontalAlignment="{Binding HorizontalAlignment}"
                                            VerticalAlignment="{Binding VerticalAlignment}"
                                            dxdiag:DiagramInput.InputElementFactory="{Binding InputElementFactory}"
                                            Style="{StaticResource BoxStyle}" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="CanResize" Value="False">
                            <Setter TargetName="rect" Property="StrokeThickness" Value="{DynamicResource {dxdiagt:LWKey Adorners.SelectionAdornerRectStrokeThickness}}" />
                        </Trigger>
                        <Trigger Property="IsMultipleSelection" Value="True">
                            <Setter TargetName="root" Property="Margin" Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="CanRotate" Value="False">
                            <Setter TargetName="RotationIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SelectionPartAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:SelectionPartAdorner}">
        <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:LWKey Adorners.SelectionPartBorderBrush}}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource {dxdiagt:LWKey Adorners.SelectionPartDefaultBorderThickness}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:SelectionPartAdorner}">
                    <dx:DXBorder Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsPrimarySelection" Value="True">
                <Setter Property="BorderThickness" Value="{DynamicResource {dxdiagt:LWKey Adorners.SelectionPartSelectBorderThickness}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ShapeParametersAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:ShapeParametersAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ShapeParametersAdorner}">
                    <dxdiag:ScaleItemsControl x:Name="PART_ItemsControl" ItemsSource="{TemplateBinding Parameters}" Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}">
                        <ItemsControl.ItemContainerStyle>
                            <Style>
                                <Setter Property="dxdiag:ScaleCanvas.Position" Value="{Binding Point}" />
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Rectangle
                                    Width="{DynamicResource {dxdiagt:LWKey Adorners.PointsSize}}"
                                    Height="{DynamicResource {dxdiagt:LWKey Adorners.PointsSize}}"
                                    Fill="{DynamicResource {dxdiagt:LWKey Adorners.ParameterPointsBackground}}"
                                    Stroke="{DynamicResource {dxdiagt:LWKey Adorners.ParameterPointsStroke}}"
                                    StrokeThickness="1" />
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </dxdiag:ScaleItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ConnectorSelectionAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:ConnectorSelectionAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ConnectorSelectionAdorner}">
                    <ControlTemplate.Resources>
                        <Style x:Key="BoxContainerStyle" TargetType="Border">
                            <Setter Property="Padding" Value="4" />
                            <Setter Property="Background" Value="Transparent" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <dxdiag:ConnectorPointItemsControl x:Name="Points" ItemsSource="{TemplateBinding Points}" Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}">
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="{x:Type ContentPresenter}">
                                    <Setter Property="dxdiag:ScaleCanvas.Position" Value="{Binding Position}" />
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type dxdiag:ConnectorPointViewModel}">
                                    <dxdiag:ConnectorPointAdorner Connector="{Binding Connector}" PointIndex="{Binding Index}" />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </dxdiag:ConnectorPointItemsControl>
                        <dxdiag:ConnectorPointItemsControl x:Name="Segments" ItemsSource="{TemplateBinding Segments}" Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}">
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="{x:Type ContentPresenter}">
                                    <Setter Property="dxdiag:ScaleCanvas.Position" Value="{Binding Position}" />
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type dxdiag:ConnectorPointViewModel}">
                                    <dxdiag:ConnectorSegmentAdorner Connector="{Binding Connector}" Segment="{Binding Segment}" />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </dxdiag:ConnectorPointItemsControl>
                        <dxdiag:ScaleCanvas Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}">
                            <Grid dxdiag:ScaleCanvas.Position="{TemplateBinding BeginPoint}">
                                <Grid x:Name="BeginElement">
                                    <dx:DXBorder x:Name="BeginFreeElement" Style="{StaticResource BoxContainerStyle}">
                                        <Rectangle Style="{StaticResource BoxStyle}" />
                                    </dx:DXBorder>
                                    <Grid
                                        x:Name="BeginConnectedElement"
                                        Width="{DynamicResource {dxdiagt:LWKey Adorners.BeginConnectedElementSize}}"
                                        Height="{DynamicResource {dxdiagt:LWKey Adorners.BeginConnectedElementSize}}"
                                        Background="{DynamicResource {dxdiagt:LWKey Adorners.BeginConnectedElementBackground}}"
                                        Visibility="Collapsed">
                                        <Ellipse Margin="3" Fill="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorConnectedMarkerFill}}" Stroke="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorConnectedMarkerStroke}}" />
                                    </Grid>
                                </Grid>
                                <Grid
                                    x:Name="BeginProtectionMarker"
                                    Width="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorProtectionMarkerSize}}"
                                    Height="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorProtectionMarkerSize}}"
                                    Visibility="Collapsed">
                                    <Ellipse
                                        Margin="3"
                                        Fill="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorProtectionMarkerFill}}"
                                        Stroke="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorProtectionMarkerStroke}}"
                                        StrokeThickness="1" />
                                </Grid>
                            </Grid>
                            <Grid dxdiag:ScaleCanvas.Position="{TemplateBinding EndPoint}">
                                <Grid x:Name="EndElement">
                                    <dx:DXBorder x:Name="EndFreeElement" Style="{StaticResource BoxContainerStyle}">
                                        <Rectangle Fill="{DynamicResource {dxdiagt:LWKey Adorners.EndFreeElementBackground}}" Style="{StaticResource BoxStyle}" />
                                    </dx:DXBorder>
                                    <Grid
                                        x:Name="EndConnectedElement"
                                        Width="{DynamicResource {dxdiagt:LWKey Adorners.EndConnectedElementSize}}"
                                        Height="{DynamicResource {dxdiagt:LWKey Adorners.EndConnectedElementSize}}"
                                        Background="{DynamicResource {dxdiagt:LWKey Adorners.EndConnectedElementBackground}}"
                                        Visibility="Collapsed">
                                        <Ellipse Margin="1" Fill="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorConnectedMarkerEndFill}}" Stroke="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorConnectedMarkerStroke}}" />
                                        <Ellipse Margin="4" Fill="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorConnectedMarkerFill}}" />
                                    </Grid>
                                </Grid>
                                <Grid
                                    x:Name="EndProtectionMarker"
                                    Width="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorProtectionMarkerSize}}"
                                    Height="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorProtectionMarkerSize}}"
                                    Visibility="Collapsed">
                                    <Ellipse
                                        Margin="3"
                                        Fill="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorProtectionMarkerFill}}"
                                        Stroke="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorProtectionMarkerStroke}}"
                                        StrokeThickness="2" />
                                </Grid>
                            </Grid>
                        </dxdiag:ScaleCanvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsBeginPointConnected" Value="True">
                            <Setter TargetName="BeginFreeElement" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="BeginConnectedElement" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEndPointConnected" Value="True">
                            <Setter TargetName="EndFreeElement" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="EndConnectedElement" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="CanDragBeginPoint" Value="False">
                            <Setter TargetName="BeginElement" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="BeginProtectionMarker" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="CanDragEndPoint" Value="False">
                            <Setter TargetName="EndElement" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="EndProtectionMarker" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="CanChangeRoute" Value="False">
                            <Setter TargetName="Points" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Segments" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ConnectorSegmentAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:ConnectorSegmentAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ConnectorSegmentAdorner}">
                    <Ellipse
                        Width="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorIntermediatePointSize}}"
                        Height="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorIntermediatePointSize}}"
                        Fill="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorIntermediatePointFill}}"
                        Stroke="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorIntermediatePointStroke}}"
                        StrokeThickness="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorIntermediatePointStrokeThickness}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ConnectorPointAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:ConnectorPointAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ConnectorPointAdorner}">
                    <Ellipse
                        Width="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorIntermediatePointSize}}"
                        Height="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorIntermediatePointSize}}"
                        Fill="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorIntermediatePointFill}}"
                        Stroke="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorIntermediatePointStroke}}"
                        StrokeThickness="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorIntermediatePointStrokeThickness}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ConnectorSelectionPartAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:ConnectorSelectionPartAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ConnectorSelectionPartAdorner}">
                    <dxdiag:ShapePresenter
                        x:Name="shapePresenter"
                        Shape="{TemplateBinding Shape}"
                        Stroke="{DynamicResource {dxdiagt:LWKey Adorners.SelectionPartBorderBrush}}"
                        StrokeThickness="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorSelectionPartDefaultThickness}}"
                        Zoom="{TemplateBinding dxdiag:AdornerLayer.Zoom}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPrimarySelection" Value="True">
                            <Setter TargetName="shapePresenter" Property="StrokeThickness" Value="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorSelectionPartSelectedThickness}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ConnectorDragPreviewAdorner.DefaultStyleBase" BasedOn="{StaticResource ConnectorPreviewAdornerBaseStyle}" TargetType="{x:Type dxdiag:ConnectorDragPreviewAdorner}">
        <Setter Property="Opacity" Value="{DynamicResource {dxdiagt:LWKey Controls.DragPreviewOpacity}}" />
        <Setter Property="Background" Value="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorDragColor}}" />
        <Setter Property="Stroke" Value="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorDragColor}}" />
        <Setter Property="StrokeThickness" Value="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorDragThickness}}" />
    </Style>
    <Style x:Key="ConnectorMovePointPreviewAdorner.DefaultStyleBase" BasedOn="{StaticResource ConnectorPreviewAdornerBaseStyle}" TargetType="{x:Type dxdiag:ConnectorMovePointPreviewAdorner}">
        <Setter Property="Stroke" Value="{DynamicResource {dxdiagt:LWKey Adorners.ConnectorMovePointColor}}" />
        <Setter Property="StrokeThickness" Value="1" />
    </Style>
    <Style x:Key="GlueToItemAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:GlueToItemAdorner}">
        <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:LWKey Adorners.GlueHighlightBrush}}" />
        <Setter Property="BorderThickness" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:GlueToItemAdorner}">
                    <dx:DXBorder Margin="-3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="State" Value="Disabled">
                            <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:LWKey Adorners.GlueHighlightBrushDisabled}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="InsertTargetAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:InsertTargetAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:InsertTargetAdorner}">
                    <dx:DXBorder Margin="-3" BorderBrush="{DynamicResource {dxdiagt:LWKey Adorners.InsertTargetHighlightBrush}}" BorderThickness="3" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GlueToPointAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:GlueToPointAdorner}">
        <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:LWKey Adorners.GlueHighlightBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxdiagt:LWKey Adorners.GlueToPointBorderThickness}}" />
        <!--<Setter Property="Width" Value="{DynamicResource {dxdiagt:LWKey Adorners.GlueToPointBorderSize}}"/>
        <Setter Property="Height" Value="{DynamicResource {dxdiagt:LWKey Adorners.GlueToPointBorderSize}}"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:GlueToPointAdorner}">
                    <dxdiag:ScaleCanvas>
                        <dx:DXBorder
                            Width="{DynamicResource {dxdiagt:LWKey Adorners.GlueToPointBorderSize}}"
                            Height="{DynamicResource {dxdiagt:LWKey Adorners.GlueToPointBorderSize}}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                    </dxdiag:ScaleCanvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="State" Value="Disabled">
                            <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:LWKey Adorners.GlueHighlightBrushDisabled}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ConnectionPointsAdorner.DefaultStyleBase" TargetType="{x:Type dxdiag:ConnectionPointsAdorner}">
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ConnectionPointsAdorner}">
                    <dxdiag:ScaleItemsControl ItemsSource="{TemplateBinding Points}" Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}">
                        <ItemsControl.ItemContainerStyle>
                            <Style>
                                <Setter Property="dxdiag:ScaleCanvas.Position" Value="{Binding Position}" />
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Ellipse Width="{DynamicResource {dxdiagt:LWKey Adorners.ShapeConnectionPointSize}}" Height="{DynamicResource {dxdiagt:LWKey Adorners.ShapeConnectionPointSize}}" Fill="{DynamicResource {dxdiagt:LWKey Adorners.ShapeConnectionPointBrush}}" />
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </dxdiag:ScaleItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalBoundsSnapLineAdorner.DefaultStyleBase" TargetType="{x:Type dxdiagi:HorizontalBoundsSnapLineAdorner}">
        <Setter Property="Extent" Value="{DynamicResource {dxdiagt:LWKey Adorners.SnapLineExtent}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiagi:HorizontalBoundsSnapLineAdorner}">
                    <Line Name="Line" Style="{StaticResource boundsSnapLineStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalBoundsSnapLineAdorner.DefaultStyleBase" TargetType="{x:Type dxdiagi:VerticalBoundsSnapLineAdorner}">
        <Setter Property="Extent" Value="{DynamicResource {dxdiagt:LWKey Adorners.SnapLineExtent}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiagi:VerticalBoundsSnapLineAdorner}">
                    <Line Name="Line" Style="{StaticResource boundsSnapLineStyle}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalSizeSnapLineAdorner.DefaultStyleBase" TargetType="{x:Type dxdiagi:HorizontalSizeSnapLineAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiagi:HorizontalSizeSnapLineAdorner}">
                    <Grid Margin="0,0,0,-25">
                        <ContentPresenter Height="17" VerticalAlignment="Bottom" ContentTemplate="{DynamicResource {dxdiagt:LWKey Adorners.SizeSnapLineTemplate}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalSizeSnapLineAdorner.DefaultStyleBase" TargetType="{x:Type dxdiagi:VerticalSizeSnapLineAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiagi:VerticalSizeSnapLineAdorner}">
                    <Grid Margin="0,0,-25,0">
                        <ContentPresenter Height="17" HorizontalAlignment="Right" ContentTemplate="{DynamicResource {dxdiagt:LWKey Adorners.SizeSnapLineTemplate}}">
                            <ContentPresenter.LayoutTransform>
                                <RotateTransform Angle="90" />
                            </ContentPresenter.LayoutTransform>
                        </ContentPresenter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ShapeStylePresenter.DefaultStyleBase" TargetType="{x:Type dxdiag:ShapeStylePresenter}">
        <Setter Property="Text" Value="Abc" />
        <Setter Property="Width" Value="{DynamicResource {dxdiagt:LWKey Adorners.ShapePresenterDefaultSize}}" />
        <Setter Property="Height" Value="{DynamicResource {dxdiagt:LWKey Adorners.ShapePresenterDefaultSize}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ShapeStylePresenter}">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Canvas Width="40" Height="40">
                            <Polyline x:Name="PART_Line1" Points="5,5 5,35 35,35" Stroke="Black" />
                            <Line
                                x:Name="PART_Line2"
                                Canvas.Left="33"
                                Canvas.Top="35"
                                Stroke="Black"
                                X1="0"
                                X2="-6"
                                Y1="0"
                                Y2="3" />
                            <Line
                                x:Name="PART_Line3"
                                Canvas.Left="33"
                                Canvas.Top="35"
                                Stroke="Black"
                                X1="0"
                                X2="-6"
                                Y1="0"
                                Y2="-3" />
                        </Canvas>
                        <TextBlock
                            x:Name="PART_Text"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Text="{TemplateBinding Text}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BindingIndicatorAdorner.DefaultStyleBase" TargetType="{x:Type dxdiagi:BindingIndicatorAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiagi:BindingIndicatorAdorner}">
                    <Image
                        x:Name="PART_Indicator"
                        Margin="0,0,0,2"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Bottom"
                        Stretch="None"
                        Visibility="Collapsed" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="State" Value="Inactive">
                            <Setter TargetName="PART_Indicator" Property="Opacity" Value="0.25" />
                            <Setter TargetName="PART_Indicator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Indicator" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/BindingIndicatorInactive.svg}" />
                        </Trigger>
                        <Trigger Property="State" Value="HoverInactive">
                            <Setter TargetName="PART_Indicator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Indicator" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/BindingIndicatorInactive.svg}" />
                        </Trigger>
                        <Trigger Property="State" Value="Active">
                            <Setter TargetName="PART_Indicator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Indicator" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/BindingIndicatorActive.svg}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CollapseButtonAdorner.DefaultStyleBase" TargetType="{x:Type dxdiagi:CollapseButtonAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiagi:CollapseButtonAdorner}">
                    <Canvas x:Name="PART_Canvas">
                        <Image x:Name="PART_Button" Stretch="None">
                            <Image.LayoutTransform>
                                <ScaleTransform CenterX="0" CenterY="0" ScaleX="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}" ScaleY="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}" />
                            </Image.LayoutTransform>
                            <Canvas.Left>
                                <MultiBinding Converter="{dxdiagi:CollapseButtonPositionConverter}">
                                    <Binding ElementName="PART_Canvas" Path="ActualWidth" />
                                    <Binding Path="Item.CollapseButtonPosition.X" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="Item.CollapseButtonOffset.X" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="Item.CollapseButtonHorizontalAlignment" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="(dxdiag:AdornerLayer.Zoom)" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </Canvas.Left>
                            <Canvas.Top>
                                <MultiBinding Converter="{dxdiagi:CollapseButtonPositionConverter}">
                                    <Binding ElementName="PART_Canvas" Path="ActualHeight" />
                                    <Binding Path="Item.CollapseButtonPosition.Y" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="Item.CollapseButtonOffset.Y" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="Item.CollapseButtonVerticalAlignment" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="(dxdiag:AdornerLayer.Zoom)" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </Canvas.Top>
                        </Image>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="State" Value="Collapse">
                            <Setter TargetName="PART_Button" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/CollapseSubordinates.svg}" />
                        </Trigger>
                        <Trigger Property="State" Value="Expand">
                            <Setter TargetName="PART_Button" Property="Source" Value="{dxdiag:DiagramSvgImage AutoSize=True, Path=Images/Svg/ExpandSubordinates.svg}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalRulerScale.DefaultStyleBase" BasedOn="{StaticResource BaseScaleStyle}" TargetType="{x:Type dxdiag:HorizontalRulerScale}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:HorizontalRulerScale}">
                    <dxdiag:RulerScalePresenter
                        Margin="{TemplateBinding Padding}"
                        LabelOffset="2,-3"
                        Location="{TemplateBinding Location}"
                        MeasureUnit="{TemplateBinding MeasureUnit}"
                        Orientation="Horizontal"
                        TickBrush="{DynamicResource {dxdiagt:LWKey Ruler.TickBrush}}"
                        Zoom="{TemplateBinding Zoom}"
                        Offset="{Binding Padding.Left, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:NegativeConverter}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalRulerScale.DefaultStyleBase" BasedOn="{StaticResource BaseScaleStyle}" TargetType="{x:Type dxdiag:VerticalRulerScale}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:VerticalRulerScale}">
                    <dxdiag:RulerScalePresenter
                        Margin="{TemplateBinding Padding}"
                        LabelOffset="-3,2"
                        Location="{TemplateBinding Location}"
                        MeasureUnit="{TemplateBinding MeasureUnit}"
                        Orientation="Vertical"
                        TickBrush="{DynamicResource {dxdiagt:LWKey Ruler.TickBrush}}"
                        Zoom="{TemplateBinding Zoom}"
                        Offset="{Binding Padding.Top, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:NegativeConverter}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RulerShadow.DefaultStyleBase" TargetType="{x:Type dxdiag:RulerShadow}">
        <Setter Property="Stroke" Value="{DynamicResource {dxdiagt:LWKey Ruler.Shadow}}" />
        <Setter Property="StrokeDashArray" Value="2,2" />
    </Style>
    <Style x:Key="LayersHost.DefaultStyleBase" TargetType="{x:Type dxdiagi:LayersHost}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="dx:WpfSvgPalette.Palette">
            <Setter.Value>
                <dx:WpfSvgPalette OverridesThemeColors="True" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiagi:LayersHost}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <ContentControl Grid.Row="1" Grid.Column="1" Template="{DynamicResource {dxdiagt:LWKey DiagramControl.BackgroundTemplate}}" Focusable="False">
                            <Canvas x:Name="DiagramArea" Background="Transparent" ClipToBounds="True" Focusable="False" />
                        </ContentControl>
                        <dx:DXBorder
                            Name="Background"
                            Background="{DynamicResource {dxdiagt:LWKey Ruler.HorizontalBackground}}"
                            BorderBrush="{DynamicResource {dxdiagt:LWKey Ruler.BorderBrush}}"
                            BorderThickness="0,0,0,0" />
                        <dx:DXBorder
                            Name="HorizontalRulerArea"
                            Grid.Column="1"
                            Padding="0,4,0,0"
                            Background="{DynamicResource {dxdiagt:LWKey Ruler.HorizontalBackground}}"
                            BorderBrush="{DynamicResource {dxdiagt:LWKey Ruler.BorderBrush}}"
                            BorderThickness="0,0,0,1" />
                        <dx:DXBorder
                            Name="VerticalRulerArea"
                            Grid.Row="1"
                            Padding="4,0,0,0"
                            Background="{DynamicResource {dxdiagt:LWKey Ruler.VerticalBackground}}"
                            BorderBrush="{DynamicResource {dxdiagt:LWKey Ruler.BorderBrush}}"
                            BorderThickness="0,0,1,0" />
                        <dx:DXBorder
                            Name="LeftTopBackground"
                            Width="{DynamicResource {dxdiagt:LWKey Ruler.Size}}"
                            Height="{DynamicResource {dxdiagt:LWKey Ruler.Size}}"
                            Background="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=ShowRulers, RelativeSource={RelativeSource AncestorType=dxdiag:DiagramControl}}" Value="False">
                            <Setter TargetName="HorizontalRulerArea" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="VerticalRulerArea" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="LeftTopBackground" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Background" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiagramShape.DefaultStyleBase" TargetType="{x:Type dxdiag:DiagramShape}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinWidth" Value="{x:Static dxdiagc:DiagramItemController.ItemMinSize}" />
        <Setter Property="MinHeight" Value="{x:Static dxdiagc:DiagramItemController.ItemMinSize}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:DiagramShape}">
                    <dxdiag:ShapePresenter
                        x:Name="ShapePresenter"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Background="{TemplateBinding Background}"
                        Content="{TemplateBinding Content}"
                        ContentBackground="{TemplateBinding ContentBackground}"
                        ContentPadding="{TemplateBinding Padding}"
                        EditorBounds="{TemplateBinding EditorBounds}"
                        Shape="{TemplateBinding ShapeGeometry}"
                        ShowContent="True"
                        Stroke="{TemplateBinding Stroke}"
                        StrokeDashArray="{TemplateBinding StrokeDashArray}"
                        StrokeThickness="{TemplateBinding StrokeThickness}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsTextEditMode" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="ShapePresenter" Property="ShowContent" Value="False" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BaseDiagramContainer.DefaultStyleBase" TargetType="{x:Type dxdiag:BaseDiagramContainer}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinWidth" Value="{x:Static dxdiagc:DiagramItemController.ContainerMinSize}" />
        <Setter Property="MinHeight" Value="{x:Static dxdiagc:DiagramItemController.ContainerMinSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:BaseDiagramContainer}">
                    <dx:DXBorder
                        x:Name="ItemsContainer"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        EnableDPICorrection="False" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiagramContainer.DefaultStyleBase" BasedOn="{StaticResource BaseDiagramContainer.DefaultStyleBase}" TargetType="{x:Type dxdiag:DiagramContainer}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:DiagramContainer}">
                    <Grid>
                        <dxdiag:ShapePresenter
                            x:Name="ShapePresenter"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            Content="{TemplateBinding Header}"
                            ContentBackground="{TemplateBinding ContentBackground}"
                            ContentPadding="{TemplateBinding HeaderPadding}"
                            EditorBounds="{TemplateBinding EditorBounds}"
                            Shape="{TemplateBinding ShapeGeometry}"
                            ShowContent="True"
                            Stroke="{TemplateBinding Stroke}"
                            StrokeDashArray="{TemplateBinding StrokeDashArray}"
                            StrokeThickness="{TemplateBinding StrokeThickness}" />
                        <dx:DXBorder
                            x:Name="ItemsContainer"
                            Padding="{TemplateBinding ActualPadding}"
                            ClipToBounds="{TemplateBinding ClipItemsToBounds}"
                            EnableDPICorrection="False" />
                        <Canvas x:Name="canvas" Visibility="Collapsed">
                            <Control
                                x:Name="PART_CollapseButton"
                                Canvas.Left="{Binding ActualCollapseContainerButtonPosition.X, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                Canvas.Top="{Binding ActualCollapseContainerButtonPosition.Y, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                Width="{TemplateBinding ActualCollapseContainerButtonWidth}"
                                Height="{TemplateBinding ActualCollapseContainerButtonHeight}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding Stroke}"
                                Foreground="{TemplateBinding Foreground}"
                                Template="{DynamicResource {dxdiagt:LWKey Controls.DiagramContainerCollapseButtonTemplate}}" />
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsTextEditMode" Value="True">
                            <Setter TargetName="ShapePresenter" Property="ShowContent" Value="False" />
                        </Trigger>
                        <Trigger Property="ShowHeader" Value="False">
                            <Setter TargetName="ShapePresenter" Property="ShowContent" Value="False" />
                        </Trigger>
                        <Trigger Property="ActualIsContainerCollapseButtonVisible" Value="True">
                            <Setter TargetName="canvas" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiagramContentItem.DefaultStyleBase" TargetType="{x:Type dxdiag:DiagramContentItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinWidth" Value="{x:Static dxdiagc:DiagramItemController.ItemMinSize}" />
        <Setter Property="MinHeight" Value="{x:Static dxdiagc:DiagramItemController.ItemMinSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:DiagramContentItem}">
                    <dx:DXBorder
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentSource="Content" />
                    </dx:DXBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiagramConnector.DefaultStyleBase" TargetType="{x:Type dxdiag:DiagramConnector}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BeginArrowSize" Value="{DynamicResource {dxdiagt:LWKey Controls.DiagramConnectorArrowSize}}" />
        <Setter Property="EndArrowSize" Value="{DynamicResource {dxdiagt:LWKey Controls.DiagramConnectorArrowSize}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ContentBackground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:DiagramConnector}">
                    <dxdiag:ScaleCanvas x:Name="PART_ScaleCanvas">
                        <TextBlock
                            x:Name="Text"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            dxdiag:ScaleCanvas.Position="{TemplateBinding TextPosition}"
                            Background="{TemplateBinding ContentBackground}"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{TemplateBinding Content}"
                            TextWrapping="Wrap" />
                    </dxdiag:ScaleCanvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="">
                            <Setter TargetName="Text" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="Text" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsTextEditMode" Value="True">
                            <Setter TargetName="Text" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiagramImage.DefaultStyleBase" TargetType="{x:Type dxdiag:DiagramImage}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinWidth" Value="{x:Static dxdiagc:DiagramItemController.ItemMinSize}" />
        <Setter Property="MinHeight" Value="{x:Static dxdiagc:DiagramItemController.ItemMinSize}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:DiagramImage}">
                    <Grid>
                        <dxdiag:ShapePresenter
                            x:Name="ShapePresenter"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            ClipToBounds="True"
                            RenderTransform="{TemplateBinding ImageTransform}"
                            Shape="{TemplateBinding PlaceholderGeometry}"
                            Visibility="Collapsed" />
                        <TextBlock Name="PART_TextBlock" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Image" Value="{x:Null}">
                            <Setter TargetName="ShapePresenter" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiagramRoot.DefaultStyleBase" TargetType="{x:Type dxdiag:DiagramRoot}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:DiagramRoot}">
                    <dx:DXBorder x:Name="ItemsContainer" Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DragPreview.DefaultStyleBase" TargetType="{x:Type dxdiag:DragPreview}">
        <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:LWKey Controls.DragPreviewBrush}}" />
        <Setter Property="Opacity" Value="{DynamicResource {dxdiagt:LWKey Controls.DragPreviewOpacity}}" />
        <Setter Property="IsHitTestVisible" Value="False" />
    </Style>
    <Style x:Key="SelectionPreview.DefaultStyleBase" TargetType="{x:Type dxdiag:SelectionPreview}">
        <Setter Property="Background" Value="{DynamicResource {dxdiagt:LWKey Controls.SelectionPreviewBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:LWKey Controls.SelectionPreviewBorderBrush}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:SelectionPreview}">
                    <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScaleItemsControl.DefaultStyleBase" TargetType="dxdiag:ScaleItemsControl">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxdiag:ScaleCanvas Scale="{Binding Path=(dxdiag:AdornerLayer.Zoom), RelativeSource={RelativeSource TemplatedParent}}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxdiag:ScaleItemsControl">
                    <ItemsPresenter dxdiag:AdornerLayer.Zoom="{TemplateBinding Scale}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PageBackgroundControl.DefaultStyleBase" TargetType="{x:Type dxdiag:PageBackgroundControl}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="{DynamicResource {dxdiagt:LWKey DiagramControl.PageBackground}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxdiagt:LWKey Controls.PageBorderThickness}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:PageBackgroundControl}">
                    <ContentControl
                        Focusable="False"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Template="{DynamicResource {dxdiagt:LWKey DiagramControl.PageBackgroundTemplate}}">
                        <Grid Margin="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Converter={dxdiagi:InvertThicknessConverter}}">
                            <Viewbox>
                                <dxdiag:PagesBackgroundControl
                                    x:Name="PART_PageBackground"
                                    Width="{Binding Path=Tag.Width, RelativeSource={RelativeSource Self}}"
                                    Height="{Binding Path=Tag.Height, RelativeSource={RelativeSource Self}}"
                                    Background="{TemplateBinding Background}"
                                    BackgroundTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.BackgroundTemplate}"
                                    Diagram="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram}"
                                    ItemsOffset="{Binding Path=(dxdiag:AdornerLayer.Location), RelativeSource={RelativeSource TemplatedParent}}"
                                    PageBackgroundTemplate="{Binding Path=Diagram.DiagramPageBackgroundTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                    PageBackgroundTemplateSelector="{Binding Path=Diagram.DiagramPageBackgroundTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                    PageMargin="{Binding Path=Diagram.PageMargin, RelativeSource={RelativeSource TemplatedParent}}"
                                    Tag="{Binding Path=(dxdiag:AdornerLayer.Viewbox), RelativeSource={RelativeSource TemplatedParent}}"
                                    ZoomFactor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.ZoomFactor}" />
                            </Viewbox>
                            <dxdiagi:GridPainter
                                x:Name="PART_GridPainter"
                                GridSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.GridSize}"
                                LineBrush="{DynamicResource {dxdiagt:LWKey Controls.GridLineBrush}}"
                                Location="{Binding Path=(dxdiag:AdornerLayer.Location), RelativeSource={RelativeSource TemplatedParent}}"
                                MeasureUnit="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.MeasureUnit}"
                                PageMargin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.PageMargin}"
                                PageSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.PageSize}"
                                Viewport="{Binding Path=(dxdiag:AdornerLayer.Viewport), RelativeSource={RelativeSource TemplatedParent}}"
                                ZoomFactor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.ZoomFactor}"
                                Offset="{Binding Path=(dxdiag:AdornerLayer.Offset), RelativeSource={RelativeSource TemplatedParent}}" />
                            <dxdiag:PageBorderControl
                                x:Name="PART_PageBorderControl"
                                Margin="{TemplateBinding BorderThickness}"
                                Location="{Binding Path=(dxdiag:AdornerLayer.Location), RelativeSource={RelativeSource TemplatedParent}}"
                                PageMargin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.PageMargin}"
                                PageSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.PageSize}"
                                Pen="{StaticResource PageBackgroundPen}"
                                ShowPageBreaks="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.ShowPageBreaks}"
                                ZoomFactor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diagram.ZoomFactor}" />
                        </Grid>
                    </ContentControl>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=ShowPageBreaks, RelativeSource={RelativeSource AncestorType=dxdiag:DiagramControl}}" Value="False">
                            <Setter TargetName="PART_GridPainter" Property="PageMargin" Value="0" />
                            <Setter TargetName="PART_PageBorderControl" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=ShowGrid, RelativeSource={RelativeSource AncestorType=dxdiag:DiagramControl}}" Value="False">
                            <Setter TargetName="PART_GridPainter" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PagesBackgroundControl.DefaultStyleBase" TargetType="{x:Type dxdiag:PagesBackgroundControl}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:PagesBackgroundControl}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentControl Name="BackgroundPresenter" Content="{TemplateBinding BackgroundInfo}" ContentTemplate="{TemplateBinding BackgroundTemplate}" Focusable="False" />
                        <ItemsControl
                            Name="PagesPresenter"
                            Focusable="False"
                            ItemTemplate="{TemplateBinding PageBackgroundTemplate}"
                            ItemTemplateSelector="{TemplateBinding PageBackgroundTemplateSelector}"
                            ItemsSource="{TemplateBinding PagesInfo}"
                            RenderTransform="{TemplateBinding ItemsTransform}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="ContentPresenter">
                                    <Setter Property="Canvas.Left" Value="{Binding Left, Mode=OneTime}" />
                                    <Setter Property="Canvas.Top" Value="{Binding Top, Mode=OneTime}" />
                                    <Setter Property="Width" Value="{Binding Width, Mode=OneTime}" />
                                    <Setter Property="Height" Value="{Binding Height, Mode=OneTime}" />
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                        </ItemsControl>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="BackgroundTemplate" Value="{x:Null}">
                            <Setter TargetName="BackgroundPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="PageBackgroundTemplate" Value="{x:Null}" />
                                <Condition Property="PageBackgroundTemplateSelector" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PagesPresenter" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PagesPresenter" Property="ItemsSource" Value="{x:Null}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ItemEditorControl.DefaultStyleBase" TargetType="{x:Type dxdiag:ItemEditorControl}">
        <Setter Property="Foreground" Value="#FF6E6E6E" />
        <Setter Property="BorderBrush" Value="#FFB9B9B9"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ItemEditorControl}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle Stroke="{TemplateBinding BorderBrush}" StrokeDashArray="2,2" StrokeThickness="1" />
                        <TextBox
                            x:Name="Editor"
                            AcceptsReturn="True"
                            AcceptsTab="True"
                            Background="Transparent"
                            BorderThickness="0"
                            Foreground="{TemplateBinding Foreground}"
                            dx:LightweightThemeManager.AllowStandardControlsTheming="False"
                            TextWrapping="Wrap" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ShapeGeometryPresenter.DefaultStyleBase" TargetType="{x:Type dxdiagi:ShapeGeometryPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiagi:ShapeGeometryPresenter}">
                    <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ShapePresenter.DefaultStyleBase" TargetType="{x:Type dxdiag:ShapePresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ShapePresenter}">
                    <TextBlock
                        x:Name="Text"
                        Margin="{TemplateBinding ContentPadding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Background="{TemplateBinding ContentBackground}"
                        Text="{TemplateBinding Content}"
                        TextWrapping="Wrap"
                        UseLayoutRounding="False" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShowContent" Value="False">
                            <Setter TargetName="Text" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="Text" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter TargetName="Text" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiagramControl.DefaultStyleBase" TargetType="{x:Type dxdiag:DiagramControl}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Background" Value="{DynamicResource {dxdiagt:LWKey DiagramControl.DiagramControlBackground}}" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="dx:ScrollBarExtensions.ScrollBarMode" Value="TouchOverlap" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:DiagramControl}">
                    <ScrollViewer
                        Name="ScrollViewer"
                        dx:ScrollBarExtensions.AllowMouseScrolling="True"
                        dx:ScrollBarExtensions.AllowShiftKeyMode="True"
                        dx:ScrollBarExtensions.ScrollBehavior="{dx:ScrollViewerScrollBehavior}"
                        AllowDrop="False"
                        Background="{TemplateBinding Background}"
                        CanContentScroll="True">
                        <dxdiagi:LayersHost
                            x:Name="LayersHost"
                            Background="{TemplateBinding Background}"/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ThemePresenter.DefaultStyleBase" TargetType="{x:Type dxdiag:ThemePresenter}">
        <Setter Property="Text" Value="Aa" />
        <Setter Property="Width" Value="62" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:ThemePresenter}">
                    <Canvas Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Rectangle
                            x:Name="PART_RectangleVariant1"
                            Canvas.Left="5"
                            Canvas.Top="4"
                            Width="34"
                            Height="34"
                            Fill="LightGray"
                            Stroke="Black" />
                        <Rectangle
                            x:Name="PART_RectangleVariant4"
                            Canvas.Left="41"
                            Canvas.Top="18"
                            Width="16"
                            Height="16"
                            Fill="LightGray"
                            Stroke="Black" />
                        <Rectangle
                            x:Name="PART_RectangleVariant2"
                            Canvas.Left="36"
                            Canvas.Top="13"
                            Width="16"
                            Height="16"
                            Fill="LightGray"
                            Stroke="Black" />
                        <Rectangle
                            x:Name="PART_RectangleVariant3"
                            Canvas.Left="31"
                            Canvas.Top="8"
                            Width="16"
                            Height="16"
                            Fill="LightGray"
                            Stroke="Black" />
                        <Polyline x:Name="PART_Line1Variant1" Points="22,38 22,43 49,43 49,33" Stroke="Black" />
                        <Line
                            x:Name="PART_Line2Variant1"
                            Canvas.Left="49"
                            Canvas.Top="34"
                            Stroke="Black"
                            X1="0"
                            X2="2"
                            Y1="0"
                            Y2="4" />
                        <Line
                            x:Name="PART_Line3Variant1"
                            Canvas.Left="49"
                            Canvas.Top="34"
                            Stroke="Black"
                            X1="0"
                            X2="-2"
                            Y1="0"
                            Y2="4" />
                        <TextBlock
                            x:Name="PART_TextVariant1"
                            Canvas.Left="8"
                            Canvas.Top="18"
                            FontSize="12"
                            Text="Aa" />
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiagramDesignerControl.DefaultStyleBase" BasedOn="{StaticResource DiagramControl.DefaultStyleBase}" TargetType="{x:Type dxdiag:DiagramDesignerControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:DiagramDesignerControl}">
                    <DockPanel AllowDrop="False">
                        <dxdiag:DiagramRibbonControl
                            x:Name="PART_RibbonControl"
                            dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:DefaultBarItemNames.Ribbon}"
                            DockPanel.Dock="Top"
                            RibbonStyle="Office2010" />
                        <dxr:RibbonStatusBarControl dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:DefaultBarItemNames.StatusBar}" DockPanel.Dock="Bottom">
                            <dxr:RibbonStatusBarControl.RightItems>
                                <dxb:BarEditItem
                                    dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:DefaultBarItemNames.StatusBarZoomEditor}"
                                    Content="{TemplateBinding ZoomFactor, Converter={dxmvvm:FormatStringConverter FormatString=P0}}"
                                    CustomizationContent="{dxdiag:DiagramControlLocalizedString StatusBarZoomEditor}"
                                    EditStyle="{StaticResource ZoomTrackBarEditStyle}"
                                    EditValue="{Binding ZoomFactor, RelativeSource={RelativeSource TemplatedParent}, Converter={dxdiagi:NonlinearZoomConverter}, Mode=TwoWay}"
                                    EditWidth="100"
                                    IsVisible="{TemplateBinding AllowZoom}">
                                    <dxb:BarEditItem.EditSettings>
                                        <dxe:TrackBarEditSettings />
                                    </dxb:BarEditItem.EditSettings>
                                </dxb:BarEditItem>
                            </dxr:RibbonStatusBarControl.RightItems>
                            <dxr:RibbonStatusBarControl.LeftItems>
                                <!--<dxb:BarStaticItem ShowBorder="{Binding Path=Content, RelativeSource={RelativeSource Self}, Converter={dxmvvm:StringToBooleanConverter}}" RibbonStyle="SmallWithText" dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:DefaultBarItemNames.StatusBarShapeInfo}" CustomizationContent="{dxdiag:DiagramControlLocalizedString StatusBarShapeInfo}">
                                    <dxb:BarStaticItem.Content>
                                        <MultiBinding Converter="{dxdiagi:ItemPropertiesToStringConverter}">
                                            <Binding Path="SelectionToolsModel[Width]" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="SelectionToolsModel[Height]" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="SelectionToolsModel[Angle]" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        </MultiBinding>
                                    </dxb:BarStaticItem.Content>
                                </dxb:BarStaticItem>-->
                                <dxb:BarLinkContainerItem dxdiag:DiagramDesignerControl.BarItemName="{x:Static dxdiagc:DefaultBarItemNames.StatusBarShapeInfo}" CustomizationContent="{dxdiag:DiagramControlLocalizedString StatusBarShapeInfo}">
                                    <dxb:BarStaticItem Style="{DynamicResource {dxdiagt:LWKey DiagramDesignerControl.StatusBarWidthItemStyle}}" />
                                    <dxb:BarStaticItem Style="{DynamicResource {dxdiagt:LWKey DiagramDesignerControl.StatusBarHeightItemStyle}}" />
                                    <dxb:BarStaticItem Style="{DynamicResource {dxdiagt:LWKey DiagramDesignerControl.StatusBarAngleItemStyle}}" />
                                </dxb:BarLinkContainerItem>
                            </dxr:RibbonStatusBarControl.LeftItems>
                        </dxr:RibbonStatusBarControl>
                        <dxdo:DockLayoutManager x:Name="PART_DockLayoutManager" DockPanel.Dock="Left" Style="{DynamicResource {dxdiagt:LWKey DiagramControl.DockLayoutManagerStyle}}">
                            <dxmvvm:Interaction.Behaviors>
                                <dxdiagi:CloseFloatWindowsBehavior />
                            </dxmvvm:Interaction.Behaviors>
                            <dxdo:LayoutGroup Orientation="Horizontal">
                                <dxdo:LayoutPanel
                                    x:Name="PART_ToolboxPane"
                                    MaxWidth="470"
                                    AllowContextMenu="False"
                                    AllowDock="True"
                                    AllowDockToDocumentGroup="False"
                                    AllowFloat="False"
                                    ItemWidth="243"
                                    ShowInDocumentSelector="False"
                                    Style="{StaticResource DiagramLayoutPanelStyle}">
                                    <dxdo:LayoutPanel.CaptionTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{dxdiag:DiagramControlLocalizedString Panel_Shapes_Name}" Visibility="{Binding ElementName=CollapsedBehavior, Path=IsCompact, Converter={dxmvvm:BooleanToVisibilityConverter Inverse=True}}" />
                                        </DataTemplate>
                                    </dxdo:LayoutPanel.CaptionTemplate>
                                    <dxdo:LayoutPanel.ControlBoxContent>
                                        <ToggleButton x:Name="CollapseButton" Style="{StaticResource HideButtonStyle}" />
                                    </dxdo:LayoutPanel.ControlBoxContent>
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxdiagi:PanelCollapsedBehavior
                                            x:Name="CollapsedBehavior"
                                            ButtonChecked="{Binding ElementName=CollapseButton, Path=IsChecked, Mode=TwoWay}"
                                            InitialCompactWidth="68"
                                            LayoutError="{Binding ElementName=Toolbox, Path=LayoutError}"
                                            ToolboxVisibility="{Binding ToolboxVisibility, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                                    </dxmvvm:Interaction.Behaviors>
                                    <dxdiag:DiagramToolboxControl
                                        x:Name="Toolbox"
                                        CompactWidth="{Binding ElementName=CollapsedBehavior, Path=InitialCompactWidth, Mode=OneWay}"
                                        DiagramControl="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                        IsCompact="{Binding ElementName=CollapsedBehavior, Path=IsCompact}" />
                                </dxdo:LayoutPanel>
                                <dxdo:DocumentPanel x:Name="PART_DiagramPanel" Caption="{dxdiag:DiagramControlLocalizedString Category_DiagramDocument}">
                                    <ScrollViewer
                                        Name="ScrollViewer"
                                        Margin="{DynamicResource {dxdiagt:LWKey DiagramDesignerControl.DiagramControlMargin}}"
                                        dx:ScrollBarExtensions.AllowMouseScrolling="True"
                                        dx:ScrollBarExtensions.AllowShiftKeyMode="True"
                                        dx:ScrollBarExtensions.ScrollBehavior="{dx:ScrollViewerScrollBehavior}"
                                        Background="{DynamicResource {dxdiagt:LWKey DiagramControl.DiagramControlBackground}}"
                                        CanContentScroll="True">
                                        <dxdiagi:LayersHost x:Name="LayersHost" />
                                    </ScrollViewer>
                                </dxdo:DocumentPanel>
                                <dxdo:LayoutPanel
                                    x:Name="PART_PropertiesPane"
                                    MinWidth="200"
                                    MaxWidth="500"
                                    AllowClose="True"
                                    AllowHide="True"
                                    Caption="{dxdiag:DiagramControlLocalizedString Panel_Properties_Name}"
                                    ContentTemplate="{DynamicResource {dxdiagt:LWKey DiagramControl.PropertiesPanelContentTemplate}}"
                                    ItemWidth="300"
                                    Style="{StaticResource DiagramLayoutPanelStyle}">
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxdiagi:PropertiesPanelVisibilityBehavior PropertiesPanelVisibility="{Binding PropertiesPanelVisibility, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                                    </dxmvvm:Interaction.Behaviors>
                                </dxdo:LayoutPanel>
                            </dxdo:LayoutGroup>
                        </dxdo:DockLayoutManager>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_ToolboxPane" Property="IsActive" Value="True">
                            <Setter TargetName="CollapseButton" Property="Foreground" Value="{DynamicResource {dxdot:LWKey DockPaneElements.CaptionActiveForeground}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PrintPreviewControl.DefaultStyleBase" TargetType="{x:Type dxdiagi:PrintPreviewControl}">
        <Setter Property="HorizontalPageSpacing" Value="20" />
        <Setter Property="Template" Value="{DynamicResource {dxdvt:LWKey DocumentViewer.Template}}" />
        <Setter Property="BarsTemplate" Value="{DynamicResource {dxdvt:LWKey DocumentViewer.BarsTemplate}}" />
        <Setter Property="RibbonTemplate" Value="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.RibbonTemplate}}" />
        <Setter Property="PresenterTemplate" Value="{DynamicResource {dxdvt:LWKey DocumentViewer.PresenterTemplate}}" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="DocumentViewerItemsControl.DefaultStyleBase" TargetType="{x:Type dxdiagi:DocumentViewerItemsControl}">
        <Setter Property="Template" Value="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.ItemsControlTemplate}}" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="PageControl.DefaultStyleBase" TargetType="{x:Type dxdiagi:PageControl}">
        <Setter Property="Template" Value="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.PageTemplate}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PageControlItem.DefaultStyleBase" TargetType="{x:Type dxdiagi:PageControlItem}">
        <Setter Property="Template" Value="{DynamicResource {dxdiagt:LWKey PrintPreviewControl.PageControlItemTemplate}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Pen">
            <Setter.Value>
                <Pen Brush="#FFB3B3B3" Thickness="1">
                    <Pen.DashStyle>
                        <DashStyle Dashes="8" Offset="3" />
                    </Pen.DashStyle>
                </Pen>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PanAndZoomClientFramePresenter.DefaultStyleBase" TargetType="{x:Type dxdiag:PanAndZoomClientFramePresenter}">
        <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:LWKey DiagramPanAndZoomControl.ClientFrameBorderBrush}}"/>
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:PanAndZoomClientFramePresenter}">
                    <dx:DXBorder
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Background="Transparent"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PanAndZoomPreviewFramePresenter.DefaultStyleBase" TargetType="{x:Type dxdiag:PanAndZoomPreviewFramePresenter}">
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxdiagt:LWKey DiagramPanAndZoomControl.PreviewFrameBorderBrush}}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:PanAndZoomPreviewFramePresenter}">
                    <dx:DXBorder
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Background="Transparent"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PanAndZoomDiagramPresenter.DefaultStyleBase" TargetType="{x:Type dxdiag:PanAndZoomDiagramPresenter}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:PanAndZoomDiagramPresenter}">
                    <Canvas
                        x:Name="PART_Canvas"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}">
                        <Canvas.Children>
                            <dxdiag:PanAndZoomClientFramePresenter x:Name="PART_ClientFramePresenter" />
                            <dxdiag:PanAndZoomPreviewFramePresenter x:Name="PART_PreviewFramePresenter" Visibility="Collapsed" />
                        </Canvas.Children>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DiagramPanAndZoomControl.DefaultStyleBase" TargetType="{x:Type dxdiag:DiagramPanAndZoomControl}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxdiag:DiagramPanAndZoomControl}">
                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <dx:DXBorder Padding="3" Background="{DynamicResource {dxdiagt:LWKey DiagramPanAndZoomControl.PresenterBackground}}">
                            <dxdiag:PanAndZoomDiagramPresenter x:Name="PART_DiagramPresenter" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </dx:DXBorder>
                        <dx:DXBorder
                            x:Name="PART_ZoomTrackBarContainer"
                            Grid.Column="1"
                            Padding="3"
                            Background="{DynamicResource {dxdiagt:LWKey DiagramPanAndZoomControl.ZoomTrackBarBackground}}"
                            Visibility="{Binding Diagram.AllowZoom, RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                            <dxe:TrackBarEdit
                                EditValue="{Binding Diagram.ZoomFactor, RelativeSource={RelativeSource TemplatedParent}, Converter={dxdiagi:NonlinearZoomConverter}, Mode=TwoWay}"
                                LargeStep="240"
                                Maximum="3600"
                                Minimum="-3600"
                                Orientation="Vertical"
                                SmallStep="120"
                                TickFrequency="3600"
                                TickPlacement="None">
                                <dxe:TrackBarEdit.StyleSettings>
                                    <dxe:TrackBarZoomStyleSettings />
                                </dxe:TrackBarEdit.StyleSettings>
                            </dxe:TrackBarEdit>
                        </dx:DXBorder>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion DEFAULT STYLES-->
</ResourceDictionary>