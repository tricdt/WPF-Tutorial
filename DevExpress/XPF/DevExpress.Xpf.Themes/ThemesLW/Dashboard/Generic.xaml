<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
    xmlns:dxct="http://schemas.devexpress.com/winfx/2008/xaml/charts/themekeys"
    xmlns:dxdash="clr-namespace:DevExpress.DashboardWpf;assembly=DevExpress.Xpf.Dashboard.v24.1"
    xmlns:dxdashi="clr-namespace:DevExpress.DashboardWpf.Internal;assembly=DevExpress.Xpf.Dashboard.v24.1"
    xmlns:dxdasht="clr-namespace:DevExpress.Xpf.Dashboard.Themes;assembly=DevExpress.Xpf.Dashboard.v24.1"
    xmlns:dxdo="http://schemas.devexpress.com/winfx/2008/xaml/docking"
    xmlns:dxdove="http://schemas.devexpress.com/winfx/2008/xaml/docking/visualelements"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxga="http://schemas.devexpress.com/winfx/2008/xaml/gauges"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:dxm="http://schemas.devexpress.com/winfx/2008/xaml/map"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
    xmlns:dxp="http://schemas.devexpress.com/winfx/2008/xaml/printing"
    xmlns:dxpbars="http://schemas.devexpress.com/winfx/2008/xaml/printing/bars"
    xmlns:dxpg="http://schemas.devexpress.com/winfx/2008/xaml/pivotgrid"
    xmlns:dxprg="http://schemas.devexpress.com/winfx/2008/xaml/propertygrid"
    xmlns:dxre="http://schemas.devexpress.com/winfx/2008/xaml/richedit"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
    xmlns:dxtm="http://schemas.devexpress.com/winfx/2008/xaml/treemap">

    <ResourceDictionary.MergedDictionaries>
        <dxi:ThemeResourceDictionary Path="Dashboard/_{ThemeCategory}.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <dxdashi:EventToCommandConverter x:Key="EventToCommandConverter" />
    <dx:BoolInverseConverter x:Key="boolInverceConverter" />
    <dxdashi:MouseButtonEventArgsConverter x:Key="mouseButtonEventArgsConverter" />
    <dxdashi:MouseEventArgsConverter x:Key="mouseEventArgsConverter" />
    <dxdashi:AxisLabelContentConverter x:Key="axisLabelContentConverter" />
    <dxdasht:SeriesTemplateSelector x:Key="seriesTemplateSelectorKey" />
    <dxmvvm:ObjectToObjectConverter x:Key="ViewTypeToLabelVisibilityConverter" DefaultTarget="Collapsed">
        <dxmvvm:MapItem Source="CircularFull" Target="Visible" />
    </dxmvvm:ObjectToObjectConverter>
    <Thickness x:Key="DeltaValuePresenterPadding">0,0,0,0</Thickness>
    <dxdashi:GridCustomSummaryArgsConverter x:Key="customSummaryArgsConverter" />
    <dxdasht:GridCellTemplateSelector x:Key="gridCellTemplateSelector" />
    <dx:BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
    <dxdashi:LegendLabelConverter x:Key="LegendLabelConverter" />
    <dxc:BrushOverlayConverter x:Key="brushOverlayConverter" />
    <dxdashi:PivotMouseEventArgsConverter x:Key="PivotMouseEventArgsConverter" />
    <dxdashi:PivotDataPointInfoConverter x:Key="PivotDataPointInfoConverter" />
    <dxre:RtfToContentConverter x:Key="rtfToContentConverter" />
    <dxdashi:TreemapMouseEventArgsConverter x:Key="TreemapMouseEventArgsConverter" />
    <dx:BoolToObjectConverter x:Key="isSearchEnabledToShowSearchPanelModeConverter">
        <dx:BoolToObjectConverter.TrueValue>
            <dxg:ShowSearchPanelMode>Always</dxg:ShowSearchPanelMode>
        </dx:BoolToObjectConverter.TrueValue>
        <dx:BoolToObjectConverter.FalseValue>
            <dxg:ShowSearchPanelMode>Never</dxg:ShowSearchPanelMode>
        </dx:BoolToObjectConverter.FalseValue>
    </dx:BoolToObjectConverter>
    <dxdashi:ParametersTemplateSelector x:Key="ParametersControlEditorTemplateSelector">
        <dxdashi:ParametersTemplateSelector.IntegerTemplate>
            <DataTemplate>
                <dxe:SpinEdit
                    x:Name="PART_Editor"
                    AllowNullInput="{Binding Parent.Value.Model.AllowNull}"
                    IsFloatValue="False"
                    NullText="" />
            </DataTemplate>
        </dxdashi:ParametersTemplateSelector.IntegerTemplate>
        <dxdashi:ParametersTemplateSelector.GuidTemplate>
            <DataTemplate>
                <dxe:TextEdit
                    x:Name="PART_Editor"
                    AllowNullInput="{Binding Parent.Value.Model.AllowNull}"
                    Mask="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                    MaskType="Simple"
                    NullText="" />
            </DataTemplate>
        </dxdashi:ParametersTemplateSelector.GuidTemplate>
        <dxdashi:ParametersTemplateSelector.FloatingTemplate>
            <DataTemplate>
                <dxe:SpinEdit
                    x:Name="PART_Editor"
                    AllowNullInput="{Binding Parent.Value.Model.AllowNull}"
                    IsFloatValue="True"
                    NullText="" />
            </DataTemplate>
        </dxdashi:ParametersTemplateSelector.FloatingTemplate>
        <dxdashi:ParametersTemplateSelector.DateTimeTemplate>
            <DataTemplate>
                <dxe:DateEdit x:Name="PART_Editor" AllowNullInput="{Binding Parent.Value.Model.AllowNull}" NullText="" />
            </DataTemplate>
        </dxdashi:ParametersTemplateSelector.DateTimeTemplate>
        <dxdashi:ParametersTemplateSelector.BooleanTemplate>
            <DataTemplate>
                <dxe:CheckEdit x:Name="PART_Editor" IsThreeState="{Binding Parent.Value.Model.AllowNull}" NullText="" />
            </DataTemplate>
        </dxdashi:ParametersTemplateSelector.BooleanTemplate>
        <dxdashi:ParametersTemplateSelector.SimpleTemplate>
            <DataTemplate>
                <dxe:TextEdit x:Name="PART_Editor" AllowNullInput="{Binding Parent.Value.Model.AllowNull}" NullText="" />
            </DataTemplate>
        </dxdashi:ParametersTemplateSelector.SimpleTemplate>
        <dxdashi:ParametersTemplateSelector.ListTemplate>
            <DataTemplate>
                <dxe:ComboBoxEdit
                    x:Name="PART_Editor"
                    AllowNullInput="{Binding Parent.Value.Model.AllowNull}"
                    AllowUpdateTwoWayBoundPropertiesOnSynchronization="True"
                    DisplayMember="DisplayText"
                    IsTextEditable="False"
                    ItemsSource="{Binding Parent.Value.Values,Mode=TwoWay}"
                    NullText=""
                    ValueMember="Value" />
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Parent.Value.Model.AllowMultiselect}" Value="True">
                        <DataTrigger.Setters>
                            <Setter TargetName="PART_Editor" Property="StyleSettings">
                                <Setter.Value>
                                    <dxe:CheckedComboBoxStyleSettings />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger.Setters>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </dxdashi:ParametersTemplateSelector.ListTemplate>
    </dxdashi:ParametersTemplateSelector>


    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\BoundImageItem.xaml-->





    <Style x:Key="{dxdasht:LWKey BoundImageItem.ViewStyle}" TargetType="{x:Type dx:DXImage}">
        <Setter Property="HorizontalAlignment" Value="{Binding HorizontalAlignment}" />
        <Setter Property="VerticalAlignment" Value="{Binding VerticalAlignment}" />
        <Setter Property="Source" Value="{Binding Image}" />
        <Setter Property="Stretch" Value="{Binding Stretch}" />
        <Setter Property="StretchDirection" Value="{Binding StretchDirection}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseUpCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseDownCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseDown"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseMoveCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseMove"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey BoundImageItem.Template}">
        <dx:DXImage Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\BoundImageItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\DeltaValuePresenter.xaml-->
    <DataTemplate x:Key="UpArrowKey">
        <Path
            Width="16"
            Height="12"
            Data="F1 M 8,0L 0,8L 16,8L 8,0 Z "
            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
            Stretch="Fill" />
    </DataTemplate>
    <DataTemplate x:Key="DownArrowKey">
        <Path
            Width="16"
            Height="12"
            Data="F1 M 8,8L 0,0L 16,0L 8,8 Z "
            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
            Stretch="Fill" />
    </DataTemplate>
    <DataTemplate x:Key="WarningKey">
        <Ellipse
            Width="12"
            Height="12"
            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
            Stretch="UniformToFill" />
    </DataTemplate>





    <dx:EnumToObjectConverter x:Key="IndicatorTypeToTemplateConverter" DefaultValue="{x:Null}">
        <dx:EnumToObjectConverter.Values>
            <dx:EnumObjectProvider x:Key="UpArrow" Value="{StaticResource UpArrowKey}" />
            <dx:EnumObjectProvider x:Key="DownArrow" Value="{StaticResource DownArrowKey}" />
            <dx:EnumObjectProvider x:Key="Warning" Value="{StaticResource WarningKey}" />
        </dx:EnumToObjectConverter.Values>
    </dx:EnumToObjectConverter>

    <ControlTemplate x:Key="{dxdasht:LWKey DeltaValuePresenter.Template}" TargetType="dxdashi:DeltaValuePresenter">
        <Grid TextElement.Foreground="{TemplateBinding ActualForeground}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <ContentPresenter
                x:Name="Delta"
                Margin="{TemplateBinding Padding}"
                VerticalAlignment="Center"
                Content="{x:Null}"
                ContentTemplate="{Binding IndicatorType, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IndicatorTypeToTemplateConverter}}" />
            <ContentPresenter x:Name="Value" Grid.Column="1" Content="{TemplateBinding Value}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowValue" Value="True">
                <Setter TargetName="Delta" Property="Visibility" Value="Visible" />
                <Setter TargetName="Value" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="ShowValue" Value="False">
                <Setter TargetName="Delta" Property="Visibility" Value="Visible" />
                <Setter TargetName="Value" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\DeltaValuePresenter.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\CardItem.xaml-->
    <DataTemplate x:Key="ConditionFormattingImageTemplateKey">
        <dx:DXImage Source="{Binding Image}" Stretch="None" />
    </DataTemplate>
    <DataTemplate x:Key="ActualValueTemplateKey">
        <TextBlock Text="{Binding DisplayText}" TextDecorations="{Binding TextDecorations}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>
    <DataTemplate x:Key="TitleTemplateKey">
        <dxe:TextEdit
            EditMode="InplaceInactive"
            Text="{Binding DisplayText}"
            TextDecorations="{Binding TextDecorations}"
            TextTrimming="CharacterEllipsis" />
    </DataTemplate>
    <DataTemplate x:Key="SubtitleTemplateKey">
        <dxe:TextEdit
            EditMode="InplaceInactive"
            Text="{Binding DisplayText}"
            TextDecorations="{Binding TextDecorations}"
            TextTrimming="CharacterEllipsis" />
    </DataTemplate>
    <DataTemplate x:Key="PercentVariationTemplateKey">
        <TextBlock Text="{Binding DisplayText}" TextDecorations="{Binding TextDecorations}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>
    <DataTemplate x:Key="AbsoluteVariationTemplateKey">
        <TextBlock Text="{Binding DisplayText}" TextDecorations="{Binding TextDecorations}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>
    <DataTemplate x:Key="IndicatorTemplateKey">
        <dxdashi:DeltaValuePresenter
            Padding="1,0,1,0"
            IndicatorType="{Binding Path=IndicatorType}"
            IsGood="{Binding Path=IsGood}"
            ShowValue="False" />
    </DataTemplate>
    <DataTemplate x:Key="SparklineTemplateKey">
        <dx:DXBorder Background="Transparent">
            <dx:DXBorder.ToolTip>
                <StackPanel>
                    <DockPanel>
                        <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipStartValue}" />
                        <TextBlock Text=" " />
                        <TextBlock Text="{Binding TooltipValues.Start}" />
                    </DockPanel>
                    <DockPanel>
                        <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipEndValue}" />
                        <TextBlock Text=" " />
                        <TextBlock Text="{Binding TooltipValues.End}" />
                    </DockPanel>
                    <DockPanel>
                        <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipMinValue}" />
                        <TextBlock Text=" " />
                        <TextBlock Text="{Binding TooltipValues.Min}" />
                    </DockPanel>
                    <DockPanel>
                        <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipMaxValue}" />
                        <TextBlock Text=" " />
                        <TextBlock Text="{Binding TooltipValues.Max}" />
                    </DockPanel>
                </StackPanel>
            </dx:DXBorder.ToolTip>
            <dxe:SparklineEdit
                MinHeight="0"
                Background="Transparent"
                EditValue="{Binding Value}"
                Focusable="False"
                StyleSettings="{Binding StyleSettings}" />
        </dx:DXBorder>
    </DataTemplate>





    <ControlTemplate x:Key="ItemTemplate" TargetType="{x:Type dxdashi:CardItem}">
        <Grid>
            <dx:DXBorder
                Background="{Binding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{DynamicResource {dxdasht:LWKey CardItem.CardBackgroundCornerRadius}}" />
            <dx:DXBorder
                x:Name="highlight"
                Background="{DynamicResource {dxdasht:LWKey CardItem.HighlightedBackground}}"
                BorderBrush="{DynamicResource {dxdasht:LWKey CardItem.HighlightedBorderBrush}}"
                BorderThickness="1"
                CornerRadius="{DynamicResource {dxdasht:LWKey CardItem.CardBackgroundCornerRadius}}"
                IsHitTestVisible="False"
                Visibility="{Binding HasHighlightedBackground, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
            <Grid Margin="{TemplateBinding Padding}">
                <dxmvvm:Interaction.Behaviors>
                    <dxdashi:CardLayoutBehavior
                        AbsoluteVariationTemplate="{StaticResource AbsoluteVariationTemplateKey}"
                        ActualValueTemplate="{StaticResource ActualValueTemplateKey}"
                        BadForeground="{DynamicResource {dxdasht:LWKey DeltaValuePresenter.BadForeground}}"
                        CardBackground="{DynamicResource {dxdasht:LWKey CardItem.Background}}"
                        ConditionFormattingImageTemplate="{StaticResource ConditionFormattingImageTemplateKey}"
                        GoodForeground="{DynamicResource {dxdasht:LWKey DeltaValuePresenter.GoodForeground}}"
                        IndicatorTemplate="{StaticResource IndicatorTemplateKey}"
                        MainTextForeground="{DynamicResource {dxdasht:LWKey CardItem.MainTextForeground}}"
                        NeutralForeground="{DynamicResource {dxdasht:LWKey DeltaValuePresenter.NeutralForeground}}"
                        PercentVariationTemplate="{StaticResource PercentVariationTemplateKey}"
                        SparklineTemplate="{StaticResource SparklineTemplateKey}"
                        SubtitleTemplate="{StaticResource SubtitleTemplateKey}"
                        TitleTemplate="{StaticResource TitleTemplateKey}"
                        WarningForeground="{DynamicResource {dxdasht:LWKey DeltaValuePresenter.WarningForeground}}" />
                </dxmvvm:Interaction.Behaviors>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                <Setter TargetName="highlight" Property="Background" Value="{DynamicResource {dxdasht:LWKey DashboardControl.SelectedItemBackground}}" />
                <Setter TargetName="highlight" Property="BorderBrush" Value="{DynamicResource {dxdasht:LWKey DashboardControl.SelectedItemBorder}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey CardItem.Template}">
        <dxdashi:CardItemsControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <Style x:Key="{dxdasht:LWKey CardItem.ViewStyle}" TargetType="{x:Type dxdashi:CardItemsControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="ItemsSource" Value="{Binding ItemsSource}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxdashi:CardsPanel VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxdashi:CardItem />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <Grid VerticalAlignment="Center">
                        <ScrollViewer
                            CanContentScroll="True"
                            HorizontalScrollBarVisibility="Auto"
                            VerticalScrollBarVisibility="Auto"
                            Visibility="{Binding ShowCards}">
                            <ItemsPresenter />
                        </ScrollViewer>
                        <TextBlock
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontWeight="Bold"
                            Text="{Binding WarningMessage}"
                            TextTrimming="CharacterEllipsis"
                            TextWrapping="Wrap"
                            Visibility="{Binding ShowWarning}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type dxdashi:CardItemContainer}">
                    <Setter Property="Focusable" Value="False" />
                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="dxdashi:CardItemContainer">
                                <ContentPresenter />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ItemsControl>
                                    <dxmvvm:FocusBehavior EventName="MouseDown" />
                                    <dxmvvm:EventToCommand
                                        Command="{Binding MouseDownCommand}"
                                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                                        EventName="MouseDown"
                                        MarkRoutedEventsAsHandled="True"
                                        PassEventArgsToCommand="True" />
                                    <dxmvvm:EventToCommand
                                        Command="{Binding MouseUpCommand}"
                                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                                        EventName="MouseUp"
                                        PassEventArgsToCommand="True" />
                                    <dxmvvm:EventToCommand
                                        Command="{Binding MouseMoveCommand}"
                                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                                        EventName="MouseMove"
                                        PassEventArgsToCommand="True" />
                                    <dxmvvm:EventToCommand
                                        Command="{Binding MouseDoubleClickCommand}"
                                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                                        EventName="MouseDoubleClick"
                                        PassEventArgsToCommand="True" />
                                    <dxmvvm:EventToCommand
                                        Command="{Binding MouseLeaveCommand}"
                                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                                        EventName="MouseLeave"
                                        PassEventArgsToCommand="True" />
                                </ItemsControl>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\CardItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\ChartItem.xaml-->
    <DataTemplate x:Key="visibilityInPaneItemTemplateKey">
        <ContentControl>
            <dxc:VisibilityInPane Pane="{Binding Pane}" Visible="{Binding Visible}" />
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="AxisXVisualRangeKey">
        <ContentControl>
            <dxc:Range MaxValue="{Binding AxisXVisualRangeMaxValue}" />
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="AxisXTitleKey">
        <dxc:AxisTitle Content="{Binding AxisXTitle}" Visible="{Binding AxisXTitleVisible}" />
    </DataTemplate>
    <DataTemplate x:Key="paneItemTemplateKey">
        <dxc:Pane FocusVisualStyle="{x:Null}">
            <dxc:Pane.AxisXScrollBarOptions>
                <dxc:ScrollBarOptions Alignment="Near" />
            </dxc:Pane.AxisXScrollBarOptions>
        </dxc:Pane>
    </DataTemplate>
    <DataTemplate x:Key="DefaultPaneTemplateKey">
        <dxc:Pane Visibility="Collapsed" />
    </DataTemplate>
    <DataTemplate x:Key="AxisYTemplateKey">
        <dxc:AxisY2D GridLinesVisible="False" Interlaced="False" Visible="False" />
    </DataTemplate>
    <DataTemplate x:Key="customItemTemplateKey">
        <dxc:CustomLegendItem MarkerBrush="{Binding Color}" Text="{Binding Text}" />
    </DataTemplate>




    <Style x:Key="{dxdasht:LWKey ChartItem.SeriesStyle}" TargetType="{x:Type dxc:XYSeries2D}">
        <Setter Property="ArgumentDataMember" Value="{Binding ArgumentDataMember}" />
        <Setter Property="ValueDataMember" Value="{Binding ValueDataMember}" />
        <Setter Property="ColorDataMember" Value="{Binding ColorDataMember}" />
        <Setter Property="LabelsVisibility" Value="{Binding LabelsVisibility}" />
        <Setter Property="FilterCriteria" Value="{Binding FilterCriteria}" />
        <Setter Property="DataSource" Value="{Binding SeriesData}" />
        <Setter Property="ShowInLegend" Value="{Binding ShowInLegend}" />
        <Setter Property="Brush" Value="{Binding Color}" />
        <Setter Property="Pane" Value="{Binding Pane}" />
        <Setter Property="AxisY" Value="{Binding AxisY}" />
        <Setter Property="DisplayName" Value="{Binding Name}" />
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.BarSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:BarSideBySideSeries2D}">
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:BarSeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                    <Binding Path="BarShowForZeroValues" />
                    <Binding Path="BarLabelPosition" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Model">
            <Setter.Value>
                <dxc:SimpleBar2DModel />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.BarStackedSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:BarStackedSeries2D}">
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:BarStackedSeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                    <Binding Path="BarShowForZeroValues" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Model">
            <Setter.Value>
                <dxc:SimpleBar2DModel />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdasht:LWKey ChartItem.BarSideBySideStackedSeriesStyle}"
           TargetType="{x:Type dxc:BarSideBySideStackedSeries2D}"
           BasedOn="{StaticResource {dxdasht:LWKey ChartItem.BarStackedSeriesStyle}}">
        <Setter Property="StackedGroup" Value="{Binding AxisY}" />
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.BarSideBySideFullStackedSeriesStyle}"
           TargetType="{x:Type dxc:BarSideBySideFullStackedSeries2D}"
           BasedOn="{StaticResource {dxdasht:LWKey ChartItem.BarStackedSeriesStyle}}">
        <Setter Property="StackedGroup" Value="{Binding AxisY}" />
    </Style>

    <Style x:Key="{dxdasht:LWKey ChartItem.PointSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:PointSeries2D}">
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:SeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.LineSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:LineSeries2D}">
        <Setter Property="MarkerVisible" Value="{Binding MarkerVisible}" />
        <Setter Property="LineStyle" Value="{Binding LineStyle}" />
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:SeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.AreaSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:AreaSeries2D}">
        <Setter Property="MarkerVisible" Value="{Binding MarkerVisible}" />
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:SeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.StackedAreaSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:AreaStackedSeries2D}">
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:SeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.RangeAreaSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:RangeAreaSeries2D}">
        <Setter Property="Value2DataMember" Value="{Binding Value2DataMember}" />
        <Setter Property="Marker1Visible" Value="{Binding MarkerVisible}" />
        <Setter Property="Marker2Visible" Value="{Binding MarkerVisible}" />
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:SeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.RangeBarSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:RangeBarSideBySideSeries2D}">
        <Setter Property="Value2DataMember" Value="{Binding Value2DataMember}" />
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:SeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Model">
            <Setter.Value>
                <dxc:SimpleRangeBar2DModel />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.BubbleSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:BubbleSeries2D}">
        <Setter Property="WeightDataMember" Value="{Binding Value2DataMember}" />
        <Setter Property="Transparency" Value="0.529" />
        <Setter Property="SizeUnit" Value="Pixel" />
        <Setter Property="AutoSize" Value="True" />
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:BubbleSeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                    <Binding Path="BubbleLabelPosition" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.StockSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:StockSeries2D}">
        <Setter Property="OpenValueDataMember" Value="{Binding OpenValueDataMember}" />
        <Setter Property="HighValueDataMember" Value="{Binding HighValueDataMember}" />
        <Setter Property="LowValueDataMember" Value="{Binding LowValueDataMember}" />
        <Setter Property="CloseValueDataMember" Value="{Binding CloseValueDataMember}" />
        <Setter Property="ShowOpenClose" Value="{Binding ShowOpenClose}" />
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:SeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey ChartItem.CandleStickSeriesStyle}" BasedOn="{StaticResource {dxdasht:LWKey ChartItem.SeriesStyle}}" TargetType="{x:Type dxc:CandleStickSeries2D}">
        <Setter Property="OpenValueDataMember" Value="{Binding OpenValueDataMember}" />
        <Setter Property="HighValueDataMember" Value="{Binding HighValueDataMember}" />
        <Setter Property="LowValueDataMember" Value="{Binding LowValueDataMember}" />
        <Setter Property="CloseValueDataMember" Value="{Binding CloseValueDataMember}" />
        <Setter Property="Label">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:SeriesLabelOptionsConverter}">
                    <Binding Path="LabelsResolveOverlappingMode" />
                    <Binding Path="TextOrientation" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.BarSeriesTemplate}">
        <dxc:BarSideBySideSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.BarSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.StackedBarSeriesTemplate}">
        <dxc:BarSideBySideStackedSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.BarSideBySideStackedSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.FullStackedBarSeriesTemplate}">
        <dxc:BarSideBySideFullStackedSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.BarSideBySideFullStackedSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.PointSeriesTemplate}">
        <dxc:PointSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.PointSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.LineSeriesTemplate}">
        <dxc:LineSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.LineSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.StackedLineSeriesTemplate}">
        <dxc:LineStackedSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.LineSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.FullStackedLineSeriesTemplate}">
        <dxc:LineFullStackedSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.LineSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.StepLineSeriesTemplate}">
        <dxc:LineStepSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.LineSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.SplineSeriesTemplate}">
        <dxc:SplineSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.LineSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.AreaSeriesTemplate}">
        <dxc:AreaSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.AreaSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.StackedAreaSeriesTemplate}">
        <dxc:AreaStackedSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.StackedAreaSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.FullStackedAreaSeriesTemplate}">
        <dxc:AreaFullStackedSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.StackedAreaSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.StepAreaSeriesTemplate}">
        <dxc:AreaStepSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.AreaSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.SplineAreaSeriesTemplate}">
        <dxc:SplineAreaSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.AreaSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.StackedSplineAreaSeriesTemplate}">
        <dxc:SplineAreaStackedSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.StackedAreaSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.FullStackedSplineAreaSeriesTemplate}">
        <dxc:SplineAreaFullStackedSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.StackedAreaSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.RangeAreaSeriesTemplate}">
        <dxc:RangeAreaSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.RangeAreaSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.RangeBarSeriesTemplate}">
        <dxc:RangeBarSideBySideSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.RangeBarSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.BubbleSeriesTemplate}">
        <dxc:BubbleSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.BubbleSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.StockSeriesTemplate}">
        <dxc:StockSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.StockSeriesStyle}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.CandleStickTemplate}">
        <dxc:CandleStickSeries2D Style="{StaticResource {dxdasht:LWKey ChartItem.CandleStickSeriesStyle}}" />
    </DataTemplate>

    <Style x:Key="{dxdasht:LWKey ChartItem.AxisXStyle}" TargetType="{x:Type dxc:AxisX2D}">
        <Setter Property="Reverse" Value="{Binding AxisXReverse}" />
        <Setter Property="GridLinesVisible" Value="{Binding AxisXShowGridLines}" />
        <Setter Property="Logarithmic" Value="{Binding AxisXLogarithmic}" />
        <Setter Property="LogarithmicBase" Value="{Binding AxisXLogarithmicBase}" />
        <Setter Property="Visible" Value="{Binding AxisXVisible}" />
        <Setter Property="DateTimeScaleOptions" Value="{Binding DateTimeScaleOptions}" />
        <Setter Property="NumericScaleOptions" Value="{Binding NumericScaleOptions}" />
        <Setter Property="QualitativeScaleOptions" Value="{Binding QualitativeScaleOptions}" />
        <Setter Property="Tag" Value="{Binding AxisXFormatter}" />
        <Setter Property="VisibilityInPaneItemsSource" Value="{Binding PanesVisibility}" />
        <Setter Property="VisibilityInPaneItemTemplate" Value="{StaticResource visibilityInPaneItemTemplateKey}" />
    </Style>

    <DataTemplate x:Key="AxisLabelElementTemplateKey">
        <ContentPresenter Content="{Binding Converter={StaticResource axisLabelContentConverter}}" />
    </DataTemplate>
    <DataTemplate x:Key="AxisXLabelKey">
        <dxc:AxisLabel dxc:Axis2D.ResolveOverlappingOptions="{Binding AxisXLabelResolveOverlappingOptions}" ElementTemplate="{StaticResource AxisLabelElementTemplateKey}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.AxisXTemplate}">
        <dxc:AxisX2D />
    </DataTemplate>

    <Style x:Key="{dxdasht:LWKey ChartItem.SecondaryAxisYStyle}" TargetType="{x:Type dxc:SecondaryAxisY2D}">
        <Setter Property="Alignment" Value="{Binding Alignment}" />
        <Setter Property="Visible" Value="{Binding ViewModel.Visible}" />
        <Setter Property="Reverse" Value="{Binding ViewModel.Reverse}" />
        <Setter Property="GridLinesVisible" Value="{Binding ViewModel.ShowGridLines}" />
        <Setter Property="Logarithmic" Value="{Binding ViewModel.Logarithmic}" />
        <Setter Property="LogarithmicBase" Value="{Binding LogarithmicBase}" />
        <Setter Property="WholeRange" Value="{Binding Path=ViewModel.ShowZeroLevel, Converter={dxdashi:RangeConverter}}" />
        <Setter Property="Label" Value="{Binding Source={StaticResource AxisLabelElementTemplateKey}, Converter={dxdashi:AxisLabelConverter}}" />
        <Setter Property="DateTimeScaleOptions" Value="{Binding Path=GridSpacing, Converter={dxdashi:ScaleOptionsConverter}, ConverterParameter=True}" />
        <Setter Property="NumericScaleOptions" Value="{Binding Path=GridSpacing, Converter={dxdashi:ScaleOptionsConverter}, ConverterParameter=False}" />
        <Setter Property="Title">
            <Setter.Value>
                <MultiBinding Converter="{dxdashi:AxisTitleConverter}">
                    <Binding Path="Title" />
                    <Binding Path="TitleVisible" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.SecondaryAxisYTemplate}">
        <dxc:SecondaryAxisY2D Style="{Binding Path=(dxdash:ChartDashboardLayoutItem.SecondaryAxisYStyle), RelativeSource={RelativeSource Self}}" />
    </DataTemplate>

    <Style x:Key="{dxdasht:LWKey ChartItem.DiagramStyle}" TargetType="{x:Type dxc:XYDiagram2D}">
        <Setter Property="SeriesItemTemplateSelector" Value="{StaticResource seriesTemplateSelectorKey}" />
        <Setter Property="Rotated" Value="{Binding Rotated}" />
        <Setter Property="PaneOrientation" Value="{Binding PaneLayoutDirection}" />
        <Setter Property="EnableAxisXNavigation" Value="{Binding EnableAxisXNavigation}" />
        <Setter Property="SeriesItemsSource" Value="{Binding Series}" />
        <Setter Property="SecondaryAxisYItemsSource" Value="{Binding AxesY}" />
        <Setter Property="PaneItemsSource" Value="{Binding Panes}" />
        <Setter Property="PaneItemTemplate" Value="{StaticResource paneItemTemplateKey}" />
        <Setter Property="SecondaryAxisYItemTemplate" Value="{DynamicResource {dxdasht:LWKey ChartItem.SecondaryAxisYTemplate}}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxmvvm:EventToCommand
                            Command="{Binding BeforeZoomCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="BeforeZoom"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.DiagramTemplate}">
        <dxc:XYDiagram2D Style="{Binding Path=(dxdash:ChartDashboardLayoutItem.DiagramStyle), RelativeSource={RelativeSource Self}}" />
    </DataTemplate>

    <Style x:Key="{dxdasht:LWKey ChartItem.LegendStyle}" TargetType="{x:Type dxc:Legend}">
        <Setter Property="Visible" Value="{Binding Visible}" />
        <Setter Property="HorizontalPosition" Value="{Binding HorizontalPosition}" />
        <Setter Property="CustomItemsSource" Value="{Binding LegendItems}" />
        <Setter Property="VerticalPosition" Value="{Binding VerticalPosition}" />
        <Setter Property="Orientation" Value="{Binding Orientation}" />
        <Setter Property="DockTarget" Value="{Binding DefaultPane}" />
        <Setter Property="CustomItemTemplate" Value="{StaticResource customItemTemplateKey}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource {dxdasht:LWKey ChartItem.LegendBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxdasht:LWKey ChartItem.LegendForegroundBrush}}" />
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.LegendTemplate}">
        <dxc:Legend Style="{Binding Path=(dxdash:ChartDashboardLayoutItem.LegendStyle), RelativeSource={RelativeSource Self}}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey ChartItem.Template}">
        <dxc:ChartControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>

    <Style x:Key="{dxdasht:LWKey ChartItem.ViewStyle}" TargetType="{x:Type dxc:ChartControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="SelectionMode" Value="None" />
        <Setter Property="CrosshairOptions" Value="{Binding CrosshairOptions}" />
        <Setter Property="LegendItemsSource" Value="{Binding Legends}" />
        <Setter Property="LegendItemTemplate" Value="{DynamicResource {dxdasht:LWKey ChartItem.LegendTemplate}}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdashi:ChartInteractivityService UnregisterOnUnloaded="True" />
                        <dxdashi:ChartItemBehavior
                            AxisXLabelTemplate="{StaticResource AxisXLabelKey}"
                            AxisXStyle="{DynamicResource {dxdasht:LWKey ChartItem.AxisXStyle}}"
                            AxisXTemplate="{DynamicResource {dxdasht:LWKey ChartItem.AxisXTemplate}}"
                            AxisXTitleTemplate="{StaticResource AxisXTitleKey}"
                            AxisXVisualRangeTemplate="{StaticResource AxisXVisualRangeKey}"
                            DiagramAxisYTemplate="{StaticResource AxisYTemplateKey}"
                            DiagramDefaultPaneTemplate="{StaticResource DefaultPaneTemplateKey}"
                            DiagramStyle="{DynamicResource {dxdasht:LWKey ChartItem.DiagramStyle}}"
                            DiagramTemplate="{DynamicResource {dxdasht:LWKey ChartItem.DiagramTemplate}}" />
                        <dxmvvm:EventToCommand Command="{Binding CustomDrawSeriesPointCommand}" EventName="CustomDrawSeriesPoint" PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand Command="{Binding CustomDrawCrosshairCommand}" EventName="CustomDrawCrosshair" PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand Command="{Binding BoundDataChangedCommand}" EventName="BoundDataChanged" PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseUpCommand}"
                            EventArgsConverter="{StaticResource mouseButtonEventArgsConverter}"
                            EventName="MouseUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseDoubleClickCommand}"
                            EventArgsConverter="{StaticResource mouseButtonEventArgsConverter}"
                            EventName="MouseDoubleClick"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseMoveCommand}"
                            EventArgsConverter="{StaticResource mouseEventArgsConverter}"
                            EventName="MouseMove"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseLeaveCommand}"
                            EventArgsConverter="{StaticResource mouseEventArgsConverter}"
                            EventName="MouseLeave"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseDownCommand}"
                            EventArgsConverter="{StaticResource mouseEventArgsConverter}"
                            EventName="MouseDown"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\ChartItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\ComboBoxItem.xaml-->
    <Style x:Key="{dxdasht:LWKey ComboBoxItem.ViewStyle}" TargetType="{x:Type dxe:ComboBoxEdit}">
        <Setter Property="AllowUpdateTwoWayBoundPropertiesOnSynchronization" Value="False" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="DisplayMember" Value="Caption" />
        <Setter Property="FilterCondition" Value="Contains" />
        <Setter Property="IncrementalFiltering" Value="{Binding IsSearchEnabled}" />
        <Setter Property="IsTextEditable" Value="{Binding IsSearchEnabled}" />
        <Setter Property="ShowCustomItems" Value="{Binding ShowAllValue}" />
        <Setter Property="ValidateOnTextInput" Value="False" />
        <Setter Property="ImmediatePopup" Value="True" />
        <Setter Property="FocusPopupOnOpen" Value="False" />
        <Setter Property="SelectAllOnAcceptPopup" Value="False" />
        <Setter Property="SelectAllOnGotFocus" Value="False" />
        <Setter Property="EditValue" Value="{Binding SelectedItems, UpdateSourceTrigger=PropertyChanged}" />
        <Setter Property="ItemsSource" Value="{Binding Items}" />
        <Setter Property="StyleSettings" Value="{Binding IsChecked, Converter={dxdashi:ComboBoxStyleSettingsConverter}}" />
        <Setter Property="NullText" Value="{dxdashi:DashboardLocalizationString FilterElementRadioComboBoxNoDataCaption}" />
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey ComboBoxItem.Template}">
        <dxe:ComboBoxEdit Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\ComboBoxItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\DateFilterItem.xaml-->





    <Style x:Key="{dxdasht:LWKey DateFilterItem.DateNavigatorStyle}" TargetType="{x:Type dxe:DateNavigator}">
        <Setter Property="ShowTodayButton" Value="False" />
        <Setter Property="ShowWeekNumbers" Value="False" />
        <Setter Property="IsMultiSelect" Value="False" />
        <Setter Property="Margin" Value="5,5,5,5" />
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey DateFilterItem.DatePickerPopupTemplate}">
        <StackPanel Background="{DynamicResource {dxdasht:LWKey DateFilterItem.PopupBackground}}" Orientation="Horizontal" TextElement.Foreground="{DynamicResource {dxdasht:LWKey DateFilterItem.PopupForeground}}">
            <StackPanel Orientation="Vertical" Visibility="{Binding ShowFirstEditor}">
                <dxe:DateNavigator
                    ColumnCount="1"
                    FocusedDate="{Binding FirstValue, Mode=TwoWay}"
                    RowCount="1"
                    SelectedDates="{Binding FirstValues}"
                    Style="{Binding Path=(dxdash:DateFilterDashboardLayoutItem.DateNavigatorStyle), RelativeSource={RelativeSource TemplatedParent}}">
                    <dxmvvm:Interaction.Behaviors>
                        <dxdashi:DateNavigatorBehavior />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnFirstSelectedDatesChangedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="SelectedDatesChanged"
                            PassEventArgsToCommand="True" />
                    </dxmvvm:Interaction.Behaviors>
                </dxe:DateNavigator>
                <dxe:TextEdit
                    Margin="5,5,5,5"
                    EditValue="{Binding FirstValue}"
                    MaskType="DateTime"
                    MaskUseAsDisplayFormat="True">
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand
                            Command="{Binding OnFirstEditValueChangedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="EditValueChanged"
                            PassEventArgsToCommand="True" />
                    </dxmvvm:Interaction.Behaviors>
                </dxe:TextEdit>
                <dx:SimpleButton
                    Margin="5,5,5,5"
                    HorizontalAlignment="Right"
                    Content="{dxdashi:DashboardLocalizationString ButtonApply}"
                    Visibility="{Binding ShowApplyButtonInFirstEditor}">
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand Command="{Binding OnApplyButtonClickCommand}" EventName="Click" />
                    </dxmvvm:Interaction.Behaviors>
                </dx:SimpleButton>
            </StackPanel>
            <StackPanel Orientation="Vertical" Visibility="{Binding ShowSecondEditor}">
                <dxe:DateNavigator
                    ColumnCount="1"
                    FocusedDate="{Binding SecondValue, Mode=TwoWay}"
                    RowCount="1"
                    SelectedDates="{Binding SecondValues}"
                    Style="{Binding Path=(dxdash:DateFilterDashboardLayoutItem.DateNavigatorStyle), RelativeSource={RelativeSource TemplatedParent}}">
                    <dxmvvm:Interaction.Behaviors>
                        <dxdashi:DateNavigatorBehavior />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnSecondSelectedDatesChangedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="SelectedDatesChanged"
                            PassEventArgsToCommand="True" />
                    </dxmvvm:Interaction.Behaviors>
                </dxe:DateNavigator>
                <dxe:TextEdit
                    Margin="5,5,5,5"
                    EditValue="{Binding SecondValue}"
                    MaskType="DateTime"
                    MaskUseAsDisplayFormat="True">
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand
                            Command="{Binding OnSecondEditValueChangedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="EditValueChanged"
                            PassEventArgsToCommand="True" />
                    </dxmvvm:Interaction.Behaviors>
                </dxe:TextEdit>
                <dx:SimpleButton Margin="5,5,5,5" HorizontalAlignment="Right" Content="{dxdashi:DashboardLocalizationString ButtonApply}">
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand Command="{Binding OnApplyButtonClickCommand}" EventName="Click" />
                    </dxmvvm:Interaction.Behaviors>
                </dx:SimpleButton>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey DateFilterItem.DatePickerTemplate}">
        <Grid>
            <dx:SplitButton
                ArrowGlyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Edit.svg'}"
                ButtonKind="Toggle"
                Content="{Binding FilterButtonName}"
                IsChecked="{Binding IsDatePickerButtonChecked}"
                IsPopupOpen="{Binding ShowCalendars, Mode=TwoWay}"
                PopupContent="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"
                PopupContentTemplate="{Binding Path=(dxdash:DateFilterDashboardLayoutItem.DatePickerPopupTemplate), RelativeSource={RelativeSource Mode=Self}}"
                Visibility="{Binding ShowSplitButtonDatePicker}">
                <dxmvvm:Interaction.Behaviors>
                    <dxmvvm:EventToCommand
                        Command="{Binding OnFilterButtonClickCommand}"
                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                        EventName="Click"
                        PassEventArgsToCommand="True" />
                </dxmvvm:Interaction.Behaviors>
            </dx:SplitButton>
            <Grid Visibility="{Binding ShowDefaultDatePickerButton}">
                <dx:SimpleButton x:Name="dropDownButton" Content="{dxdashi:DashboardLocalizationString DateFilterDatePickerButtonDefaultText}">
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand
                            Command="{Binding OnDropDownButtonClickCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="Click"
                            PassEventArgsToCommand="True" />
                        <dxdashi:ButtonForegroundBehavior />
                    </dxmvvm:Interaction.Behaviors>
                </dx:SimpleButton>
                <dxe:FlyoutControl
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Content="{Binding DataContext, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                    ContentTemplate="{Binding Path=(dxdash:DateFilterDashboardLayoutItem.DatePickerPopupTemplate), RelativeSource={RelativeSource Mode=Self}}"
                    IsOpen="{Binding ShowCalendarsBeforeFiltering}"
                    PlacementTarget="{Binding ElementName=dropDownButton}">
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand Command="{Binding OnPopupClosedCommand}" EventName="Closed" />
                    </dxmvvm:Interaction.Behaviors>
                </dxe:FlyoutControl>
            </Grid>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey DateFilterItem.QuickButtonTemplate}">
        <dx:SimpleButton MinWidth="{Binding MinWidth, Mode=TwoWay}" Content="{Binding Name}" IsChecked="{Binding IsChecked}">
            <dxmvvm:Interaction.Behaviors>
                <dxmvvm:ReadOnlyDependencyPropertyBindingBehavior Binding="{Binding ActualWidth, Mode=OneWayToSource}" DependencyProperty="{x:Static FrameworkElement.ActualWidthProperty}" />
                <dxmvvm:EventToCommand
                    Command="{Binding DataContext.OnButtonClickCommand, RelativeSource={RelativeSource AncestorType=dxdash:DateFilterDashboardLayoutItem}}"
                    EventArgsConverter="{StaticResource EventToCommandConverter}"
                    EventName="Click"
                    PassEventArgsToCommand="True" />
            </dxmvvm:Interaction.Behaviors>
        </dx:SimpleButton>
    </DataTemplate>

    <dxdashi:DateFilterButtonTemplateSelector x:Key="{dxdasht:LWKey DateFilterItem.QuickButtonTemplateSelector}">
        <dxdashi:DateFilterButtonTemplateSelector.QuickButtonTemplate>
            <DataTemplate>
                <ContentControl Content="{Binding}" ContentTemplate="{Binding Path=(dxdash:DateFilterDashboardLayoutItem.QuickButtonTemplate), RelativeSource={RelativeSource Mode=Self}}" />

            </DataTemplate>
        </dxdashi:DateFilterButtonTemplateSelector.QuickButtonTemplate>
        <dxdashi:DateFilterButtonTemplateSelector.DropDownButtonTemplate>
            <DataTemplate>
                <ContentControl Content="{Binding Context}" ContentTemplate="{Binding Path=(dxdash:DateFilterDashboardLayoutItem.DatePickerTemplate), RelativeSource={RelativeSource Mode=Self}}" />
            </DataTemplate>
        </dxdashi:DateFilterButtonTemplateSelector.DropDownButtonTemplate>
    </dxdashi:DateFilterButtonTemplateSelector>

    <Style x:Key="{dxdasht:LWKey DateFilterItem.ViewStyle}" TargetType="{x:Type dxlc:FlowLayoutControl}">
        <Setter Property="ItemsSource" Value="{Binding ButtonModels}" />
        <Setter Property="ItemTemplateSelector" Value="{DynamicResource {dxdasht:LWKey DateFilterItem.QuickButtonTemplateSelector}}" />
        <Setter Property="Orientation" Value="{Binding ButtonsOrientation}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdashi:DateFilterPaddingBehavior />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey DateFilterItem.Template}">
        <dxlc:FlowLayoutControl Style="{Binding Path=(dxdash:DateFilterDashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\DateFilterItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\GaugeItem.xaml-->





    <DataTemplate x:Key="{dxdasht:LWKey GaugeItem.CircularGaugeControlTemplate}">
        <dxdashi:GaugeControlDecorator ViewType="{Binding ViewType}">
            <dxga:CircularGaugeControl Focusable="False">
                <dxga:CircularGaugeControl.Model>
                    <dxga:CircularThemeableModel />
                </dxga:CircularGaugeControl.Model>
                <dxga:CircularGaugeControl.Scales>
                    <dxga:ArcScale
                        HorizontalAlignment="Center"
                        EndAngle="{Binding EndAngle}"
                        EndValue="{Binding GaugeRangeModel.MaxRangeValue}"
                        MajorIntervalCount="{Binding MajorIntervalCount}"
                        StartAngle="{Binding StartAngle}"
                        StartValue="{Binding GaugeRangeModel.MinRangeValue}">
                        <dxga:ArcScale.Layers>
                            <dxga:ArcScaleLayer />
                            <dxga:ArcScaleLayer />
                        </dxga:ArcScale.Layers>
                        <dxga:ArcScale.Needles>
                            <dxga:ArcScaleNeedle Value="{Binding Value}" />
                        </dxga:ArcScale.Needles>
                        <dxga:ArcScale.Markers>
                            <dxga:ArcScaleMarker Visible="{Binding HasTarget}" Value="{Binding Target}" />
                        </dxga:ArcScale.Markers>
                        <dxga:ArcScale.LabelOptions>
                            <dxga:ArcScaleLabelOptions FormatString="{Binding ValueLabelFormat}" Offset="-6" />
                        </dxga:ArcScale.LabelOptions>
                        <dxga:ArcScale.LabelPresentation>
                            <dxga:CustomScaleLabelPresentation>
                                <dxga:CustomScaleLabelPresentation.LabelTemplate>
                                    <ControlTemplate>
                                        <TextBlock
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Center"
                                            FontSize="13.333"
                                            Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeScaleLabelForeground}}"
                                            RenderTransformOrigin="0.5, 0.5"
                                            Text="{Binding Text}" />
                                    </ControlTemplate>
                                </dxga:CustomScaleLabelPresentation.LabelTemplate>
                            </dxga:CustomScaleLabelPresentation>
                        </dxga:ArcScale.LabelPresentation>
                        <dxga:ArcScale.CustomElements>
                            <dxga:ScaleCustomElement>
                                <dxdashi:DeltaValuePresenter
                                    Margin="0,52,0,0"
                                    Padding="{StaticResource DeltaValuePresenterPadding}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    FontSize="14"
                                    IndicatorType="{Binding IndicatorType}"
                                    IsGood="{Binding GaugeModel.DeltaIsGood}"
                                    Visibility="{Binding ViewType, Converter={StaticResource ViewTypeToLabelVisibilityConverter}}"
                                    Value="{Binding ValueLabel}" />
                            </dxga:ScaleCustomElement>
                        </dxga:ArcScale.CustomElements>
                    </dxga:ArcScale>
                </dxga:CircularGaugeControl.Scales>
            </dxga:CircularGaugeControl>
        </dxdashi:GaugeControlDecorator>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GaugeItem.ViewTypeCircularHalfTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {dxdasht:LWKey GaugeItem.CircularGaugeControlTemplate}}" />
            <DockPanel Grid.Row="1" LastChildFill="False">
                <StackPanel DockPanel.Dock="Left" Visibility="{Binding ShowGaugeCaptions, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                    <TextBlock
                        MaxWidth="90"
                        FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionFontSize}}"
                        Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionForeground}}"
                        Text="{Binding SeriesLabel}"
                        TextAlignment="Left"
                        TextWrapping="Wrap" />
                    <TextBlock
                        MaxWidth="90"
                        FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionFontSize}}"
                        Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionForeground}}"
                        Text="{Binding SeriesSubLabel}"
                        TextAlignment="Left"
                        TextWrapping="Wrap"
                        Visibility="{Binding HasSeriesSubLabel, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
                </StackPanel>
                <dxdashi:DeltaValuePresenter
                    Padding="{StaticResource DeltaValuePresenterPadding}"
                    VerticalAlignment="Top"
                    DockPanel.Dock="Right"
                    FontSize="14"
                    IndicatorType="{Binding IndicatorType}"
                    IsGood="{Binding GaugeModel.DeltaIsGood}"
                    Value="{Binding ValueLabel}" />
            </DockPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GaugeItem.ViewTypeCircularQuarterRightTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ContentPresenter Grid.Row="1" Content="{Binding}" ContentTemplate="{DynamicResource {dxdasht:LWKey GaugeItem.CircularGaugeControlTemplate}}" />
            <StackPanel HorizontalAlignment="Left" Visibility="{Binding ShowGaugeCaptions, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                <TextBlock
                    MaxWidth="150"
                    FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionFontSize}}"
                    Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionForeground}}"
                    Text="{Binding SeriesLabel}"
                    TextAlignment="Left"
                    TextWrapping="Wrap" />
                <TextBlock
                    MaxWidth="150"
                    FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionFontSize}}"
                    Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionForeground}}"
                    Text="{Binding SeriesSubLabel}"
                    TextAlignment="Left"
                    TextWrapping="Wrap"
                    Visibility="{Binding HasSeriesSubLabel, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
            </StackPanel>
            <dxdashi:DeltaValuePresenter
                Grid.Row="2"
                Padding="{StaticResource DeltaValuePresenterPadding}"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                FontSize="14"
                IndicatorType="{Binding IndicatorType}"
                IsGood="{Binding GaugeModel.DeltaIsGood}"
                Value="{Binding ValueLabel}" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GaugeItem.ViewTypeCircularQuarterLeftTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ContentPresenter Grid.Row="1" Content="{Binding}" ContentTemplate="{DynamicResource {dxdasht:LWKey GaugeItem.CircularGaugeControlTemplate}}" />
            <StackPanel HorizontalAlignment="Right" Visibility="{Binding ShowGaugeCaptions, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                <TextBlock
                    MaxWidth="150"
                    FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionFontSize}}"
                    Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionForeground}}"
                    Text="{Binding SeriesLabel}"
                    TextAlignment="Right"
                    TextWrapping="Wrap" />
                <TextBlock
                    MaxWidth="150"
                    FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionFontSize}}"
                    Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionForeground}}"
                    Text="{Binding SeriesSubLabel}"
                    TextAlignment="Right"
                    TextWrapping="Wrap"
                    Visibility="{Binding HasSeriesSubLabel, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
            </StackPanel>
            <dxdashi:DeltaValuePresenter
                Grid.Row="2"
                Padding="{StaticResource DeltaValuePresenterPadding}"
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                FontSize="14"
                IndicatorType="{Binding IndicatorType}"
                IsGood="{Binding GaugeModel.DeltaIsGood}"
                Value="{Binding ValueLabel}" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GaugeItem.ViewTypeCircularThreeFourthTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {dxdasht:LWKey GaugeItem.CircularGaugeControlTemplate}}" />
            <DockPanel Grid.Row="1" LastChildFill="False">
                <StackPanel DockPanel.Dock="Left" Visibility="{Binding ShowGaugeCaptions, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                    <TextBlock
                        MaxWidth="90"
                        FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionFontSize}}"
                        Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionForeground}}"
                        Text="{Binding SeriesLabel}"
                        TextAlignment="Left"
                        TextWrapping="Wrap" />
                    <TextBlock
                        MaxWidth="90"
                        FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionFontSize}}"
                        Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionForeground}}"
                        Text="{Binding SeriesSubLabel}"
                        TextAlignment="Left"
                        TextWrapping="Wrap"
                        Visibility="{Binding HasSeriesSubLabel, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
                </StackPanel>
                <dxdashi:DeltaValuePresenter
                    Padding="{StaticResource DeltaValuePresenterPadding}"
                    VerticalAlignment="Top"
                    DockPanel.Dock="Right"
                    FontSize="14"
                    IndicatorType="{Binding IndicatorType}"
                    IsGood="{Binding GaugeModel.DeltaIsGood}"
                    Value="{Binding ValueLabel}" />
            </DockPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GaugeItem.ViewTypeCircularFullTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {dxdasht:LWKey GaugeItem.CircularGaugeControlTemplate}}" />
            <StackPanel Grid.Row="1" HorizontalAlignment="Center" Visibility="{Binding ShowGaugeCaptions, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                <TextBlock
                    MaxWidth="150"
                    FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionFontSize}}"
                    Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionForeground}}"
                    Text="{Binding SeriesLabel}"
                    TextAlignment="Center"
                    TextWrapping="Wrap" />
                <TextBlock
                    MaxWidth="150"
                    FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionFontSize}}"
                    Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionForeground}}"
                    Text="{Binding SeriesSubLabel}"
                    TextAlignment="Center"
                    TextWrapping="Wrap"
                    Visibility="{Binding HasSeriesSubLabel, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GaugeItem.LinearGaugeControlTemplate}">
        <dxdashi:GaugeControlDecorator ViewType="{Binding ViewType}">
            <dxga:LinearGaugeControl Focusable="False">
                <dxga:LinearGaugeControl.Model>
                    <dxga:LinearThemeableModel />
                </dxga:LinearGaugeControl.Model>
                <dxga:LinearGaugeControl.Scales>
                    <dxga:LinearScale
                        HorizontalAlignment="Center"
                        EndValue="{Binding GaugeRangeModel.MaxRangeValue}"
                        LayoutMode="{Binding LayoutMode}"
                        MajorIntervalCount="{Binding MajorIntervalCount}"
                        StartValue="{Binding GaugeRangeModel.MinRangeValue}">
                        <dxga:LinearScale.Layers>
                            <dxga:LinearScaleLayer />
                            <dxga:LinearScaleLayer />
                        </dxga:LinearScale.Layers>
                        <dxga:LinearScale.LevelBars>
                            <dxga:LinearScaleLevelBar Value="{Binding Value}" />
                        </dxga:LinearScale.LevelBars>
                        <dxga:LinearScale.Markers>
                            <dxga:LinearScaleMarker Visible="{Binding HasTarget}" Value="{Binding Target}" />
                        </dxga:LinearScale.Markers>
                        <dxga:LinearScale.LabelOptions>
                            <dxga:LinearScaleLabelOptions FormatString="{Binding ValueLabelFormat}" Offset="-25" />
                        </dxga:LinearScale.LabelOptions>
                        <dxga:LinearScale.LabelPresentation>
                            <dxga:CustomScaleLabelPresentation>
                                <dxga:CustomScaleLabelPresentation.LabelTemplate>
                                    <ControlTemplate>
                                        <TextBlock
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Center"
                                            FontSize="13.333"
                                            Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeScaleLabelForeground}}"
                                            RenderTransformOrigin="0.5, 0.5"
                                            Text="{Binding Text}" />
                                    </ControlTemplate>
                                </dxga:CustomScaleLabelPresentation.LabelTemplate>
                            </dxga:CustomScaleLabelPresentation>
                        </dxga:LinearScale.LabelPresentation>
                    </dxga:LinearScale>
                </dxga:LinearGaugeControl.Scales>
            </dxga:LinearGaugeControl>
        </dxdashi:GaugeControlDecorator>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GaugeItem.ViewTypeLinearHorizontalTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <DockPanel
                Grid.Row="1"
                Margin="0,2,0,0"
                DockPanel.Dock="Bottom"
                LastChildFill="False">
                <StackPanel DockPanel.Dock="Left" Visibility="{Binding ShowGaugeCaptions, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                    <TextBlock
                        MaxWidth="90"
                        FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionFontSize}}"
                        Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionForeground}}"
                        Text="{Binding SeriesLabel}"
                        TextAlignment="Left"
                        TextWrapping="Wrap" />
                    <TextBlock
                        MaxWidth="90"
                        FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionFontSize}}"
                        Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionForeground}}"
                        Text="{Binding SeriesSubLabel}"
                        TextAlignment="Left"
                        TextWrapping="Wrap"
                        Visibility="{Binding HasSeriesSubLabel, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
                </StackPanel>
                <dxdashi:DeltaValuePresenter
                    Padding="{StaticResource DeltaValuePresenterPadding}"
                    VerticalAlignment="Top"
                    DockPanel.Dock="Right"
                    FontSize="14"
                    IndicatorType="{Binding IndicatorType}"
                    IsGood="{Binding GaugeModel.DeltaIsGood}"
                    Value="{Binding ValueLabel}" />
            </DockPanel>
            <ContentPresenter Margin="-20,0" Content="{Binding}" ContentTemplate="{DynamicResource {dxdasht:LWKey GaugeItem.LinearGaugeControlTemplate}}" />
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GaugeItem.ViewTypeLinearVerticalTemplate}">
        <DockPanel>
            <dxdashi:DeltaValuePresenter
                Padding="{StaticResource DeltaValuePresenterPadding}"
                VerticalAlignment="Top"
                Panel.ZIndex="1"
                DockPanel.Dock="Bottom"
                FontSize="14"
                IndicatorType="{Binding IndicatorType}"
                IsGood="{Binding GaugeModel.DeltaIsGood}"
                Value="{Binding ValueLabel}" />
            <StackPanel DockPanel.Dock="Top" Visibility="{Binding ShowGaugeCaptions, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                <TextBlock
                    MaxWidth="90"
                    Panel.ZIndex="1"
                    FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionFontSize}}"
                    Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeCaptionForeground}}"
                    Text="{Binding SeriesLabel}"
                    TextAlignment="Left"
                    TextWrapping="Wrap" />
                <TextBlock
                    MaxWidth="90"
                    Panel.ZIndex="1"
                    FontSize="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionFontSize}}"
                    Foreground="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeSubCaptionForeground}}"
                    Text="{Binding SeriesSubLabel}"
                    TextAlignment="Left"
                    TextWrapping="Wrap"
                    Visibility="{Binding HasSeriesSubLabel, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
            </StackPanel>
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {dxdasht:LWKey GaugeItem.LinearGaugeControlTemplate}}" />
        </DockPanel>
    </DataTemplate>
    <dxdasht:GaugeViewTypeTemplateSelector x:Key="{dxdasht:LWKey GaugeItem.ViewTypeTemplateSelector}" />


    <Style x:Key="{dxdasht:LWKey GaugeItem.ItemContainerStyle}" TargetType="{x:Type dxdashi:GaugeItemContainer}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxdashi:GaugeItemContainer">
                    <Grid>
                        <dx:DXBorder
                            x:Name="highlight"
                            Background="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeHighlightedBackgroundBrush}}"
                            BorderBrush="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeHighlightedBorderBrush}}"
                            BorderThickness="1"
                            CornerRadius="{DynamicResource {dxdasht:LWKey GaugeItem.GaugeBackgroundCornerRadius}}"
                            IsHitTestVisible="False"
                            Visibility="{Binding HasHighlightedBackground, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
                        <Viewbox Stretch="Uniform" StretchDirection="Both">
                            <ContentPresenter Content="{Binding}" ContentTemplateSelector="{DynamicResource {dxdasht:LWKey GaugeItem.ViewTypeTemplateSelector}}" />
                        </Viewbox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                            <Setter TargetName="highlight" Property="Background" Value="{DynamicResource {dxdasht:LWKey DashboardControl.SelectedItemBackground}}" />
                            <Setter TargetName="highlight" Property="BorderBrush" Value="{DynamicResource {dxdasht:LWKey DashboardControl.SelectedItemBorder}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxmvvm:FocusBehavior EventName="MouseDown" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseDownCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseDown"
                            MarkRoutedEventsAsHandled="True"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseUpCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseMoveCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseMove"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseDoubleClickCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseDoubleClick"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseLeaveCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseLeave"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdasht:LWKey GaugeItem.ViewStyle}" TargetType="{x:Type dxdashi:GaugeItemsControl}">
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="ItemsSource" Value="{Binding ItemsSource}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxdashi:GaugesPanel VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <ScrollViewer CanContentScroll="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {dxdasht:LWKey GaugeItem.ItemContainerStyle}}" />
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey GaugeItem.Template}">
        <dxdashi:GaugeItemsControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\GaugeItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\GridItem.xaml-->
    <DataTemplate x:Key="GridSparklineTooltipTemplate">
        <StackPanel>
            <DockPanel>
                <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipStartValue}" />
                <TextBlock Text=" " />
                <TextBlock Text="{Binding Start}" />
            </DockPanel>
            <DockPanel>
                <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipEndValue}" />
                <TextBlock Text=" " />
                <TextBlock Text="{Binding End}" />
            </DockPanel>
            <DockPanel>
                <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipMinValue}" />
                <TextBlock Text=" " />
                <TextBlock Text="{Binding Min}" />
            </DockPanel>
            <DockPanel>
                <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipMaxValue}" />
                <TextBlock Text=" " />
                <TextBlock Text="{Binding Max}" />
            </DockPanel>
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="TotalSummaryGeneratorTemplateKey">
        <ContentControl>
            <dxg:GridSummaryItem
                FieldName="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).DataId, RelativeSource={RelativeSource Self}}"
                DisplayFormat="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Total.Caption, RelativeSource={RelativeSource Self}}"
                SummaryType="Custom"
                Tag="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Total.DataId, RelativeSource={RelativeSource Self}}" />
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="FormatConditionSimpleTemplate">
        <ContentControl>
            <dxg:FormatCondition
                FieldName="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Rule.ApplyToDataId, RelativeSource={RelativeSource Self}}"
                ApplyToRow="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Rule.ApplyToRow, RelativeSource={RelativeSource Self}}"
                Expression="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Expression, RelativeSource={RelativeSource Self}}"
                Format="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Format, RelativeSource={RelativeSource Self}}" />
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="FormatConditionBarTemplate">
        <ContentControl>
            <dxg:DataBarFormatCondition
                FieldName="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Rule.ApplyToDataId, RelativeSource={RelativeSource Self}}"
                Expression="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Expression, RelativeSource={RelativeSource Self}}"
                Format="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Format, RelativeSource={RelativeSource Self}}"
                MaxValue="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).MaxValue, RelativeSource={RelativeSource Self}}"
                MinValue="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).MinValue, RelativeSource={RelativeSource Self}}"
                SelectiveExpression="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).SelectiveExpression, RelativeSource={RelativeSource Self}}" />
        </ContentControl>
    </DataTemplate>





    <dxdashi:GridCellTooltipConverter x:Key="gridCellTooltipConverter" SparklineTemplate="{StaticResource GridSparklineTooltipTemplate}" />

    <Style x:Key="{dxdasht:LWKey GridItem.ColumnStyle}" TargetType="dxg:GridColumn">
        <Setter Property="FieldName" Value="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).DataId, RelativeSource={RelativeSource Self}}" />
        <Setter Property="CellTemplateSelector" Value="{StaticResource gridCellTemplateSelector}" />
        <Setter Property="Header" Value="{Binding ColumnViewModel.Caption}" />
        <Setter Property="ImmediateUpdateAutoFilter" Value="False" />
        <Setter Property="AllowColumnFiltering" Value="{Binding AllowFiltering}" />
        <Setter Property="AllowAutoFilter" Value="{Binding AllowAutoFilter}" />
        <Setter Property="EditSettings" Value="{Binding Converter={dxdashi:GridColumnConverter}}" />
        <Setter Property="SortOrder" Value="{Binding SortOrder, Mode=TwoWay}" />
        <Setter Property="SortIndex" Value="{Binding SortIndex, Mode=TwoWay}" />
        <Setter Property="Visible" Value="{Binding IsHiddenColumn, Converter={dx:BoolInverseConverter}}" />
        <Setter Property="CellToolTipTemplate" Value="{Binding Converter={StaticResource gridCellTooltipConverter}}" />
        <Setter Property="Width">
            <Setter.Value>
                <MultiBinding>
                    <MultiBinding.Bindings>
                        <Binding Path="ColumnViewModel.FixedWidth" />
                        <Binding Path="ColumnViewModel.Weight" />
                        <Binding Path="IsManualWidthType" />
                    </MultiBinding.Bindings>
                    <MultiBinding.Converter>
                        <dxdashi:GridColumnWidthConverter />
                    </MultiBinding.Converter>
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxmvvm:EventToCommand
                            Command="{Binding OnLoadedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="Loaded"
                            PassEventArgsToCommand="True" />
                        <dxdashi:GridSparklineEditBehavior>
                            <dxdashi:GridSparklineEditBehavior.StartValueTemplate>
                                <DataTemplate>
                                    <dxdashi:GridBestFitDecorator>
                                        <TextBlock Style="{DynamicResource {dxt:LWKey TextEdit.TextBlockInplaceStyle}}">
                                            <TextBlock.Text>
                                                <MultiBinding>
                                                    <Binding Path="RowData.RowHandle.Value" />
                                                    <Binding Path="Column" />
                                                    <MultiBinding.Converter>
                                                        <dxdashi:GridSparklineStartValueConverter />
                                                    </MultiBinding.Converter>
                                                </MultiBinding>
                                            </TextBlock.Text>
                                        </TextBlock>
                                    </dxdashi:GridBestFitDecorator>
                                </DataTemplate>
                            </dxdashi:GridSparklineEditBehavior.StartValueTemplate>
                            <dxdashi:GridSparklineEditBehavior.EndValueTemplate>
                                <DataTemplate>
                                    <dxdashi:GridBestFitDecorator>
                                        <TextBlock Style="{DynamicResource {dxt:LWKey TextEdit.TextBlockInplaceStyle}}">
                                            <TextBlock.Text>
                                                <MultiBinding>
                                                    <Binding Path="RowData.RowHandle.Value" />
                                                    <Binding Path="Column" />
                                                    <MultiBinding.Converter>
                                                        <dxdashi:GridSparklineEndValueConverter />
                                                    </MultiBinding.Converter>
                                                </MultiBinding>
                                            </TextBlock.Text>
                                        </TextBlock>
                                    </dxdashi:GridBestFitDecorator>
                                </DataTemplate>
                            </dxdashi:GridSparklineEditBehavior.EndValueTemplate>
                        </dxdashi:GridSparklineEditBehavior>
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey GridItem.HyperlinkCellTemplate}">
        <dxe:HyperlinkEdit
            x:Name="PART_Editor"
            AllowAutoNavigate="True"
            RequestNavigation="{DXEvent Handler='@c.View.DataContext.OnNavigate(@args, @c.RowData.Row)'}"
            Text="{Binding Path=Value, Mode=OneWay}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GridItem.DeltaCellTemplate}">
        <DockPanel>
            <dxdashi:DeltaValuePresenter
                x:Name="DeltaValuePresenter"
                Padding="1,3,1,1"
                DockPanel.Dock="Right"
                IndicatorType="{Binding Path=IndicatorType}"
                IsGood="{Binding Path=IsGood}"
                ShowValue="False">
                <dxdashi:DeltaValuePresenter.Width>22</dxdashi:DeltaValuePresenter.Width>
                <dxdashi:DeltaValuePresenter.DataContext>
                    <MultiBinding>
                        <MultiBinding.Bindings>
                            <Binding Path="RowData.RowHandle.Value" />
                            <Binding Path="Column" />
                            <Binding Path="View.Grid" />
                        </MultiBinding.Bindings>
                        <MultiBinding.Converter>
                            <dxdashi:GridDeltaValueInfoConverter />
                        </MultiBinding.Converter>
                    </MultiBinding>
                </dxdashi:DeltaValuePresenter.DataContext>
            </dxdashi:DeltaValuePresenter>
            <dxe:TextEdit
                x:Name="PART_Editor"
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                TextElement.Foreground="{Binding Path=ActualForeground, ElementName=DeltaValuePresenter}" />
        </DockPanel>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GridItem.SparklineCellTemplate}">
        <DockPanel>
            <dxe:SparklineEdit EditValue="{Binding Path=Value, Mode=OneWay}" StyleSettings="{Binding Path=Column.DataContext, Converter={dxdashi:GridSparklineTypeConverter}}" />
        </DockPanel>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey GridItem.StartEndSparklineCellTemplate}">
        <DockPanel>
            <Decorator Width="{Binding Path=Column.(dxdashi:GridSparklineEditBehavior.StartElementWidth)}">
                <TextBlock Style="{DynamicResource {dxt:LWKey TextEdit.TextBlockInplaceStyle}}" TextAlignment="Right">
                    <TextBlock.Text>
                        <MultiBinding>
                            <Binding Path="RowData.RowHandle.Value" />
                            <Binding Path="Column" />
                            <MultiBinding.Converter>
                                <dxdashi:GridSparklineStartValueConverter />
                            </MultiBinding.Converter>
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </Decorator>
            <Decorator Width="{Binding Path=Column.(dxdashi:GridSparklineEditBehavior.EndElementWidth)}" DockPanel.Dock="Right">
                <TextBlock DockPanel.Dock="Right" Style="{DynamicResource {dxt:LWKey TextEdit.TextBlockInplaceStyle}}" TextAlignment="Left">
                    <TextBlock.Text>
                        <MultiBinding>
                            <Binding Path="RowData.RowHandle.Value" />
                            <Binding Path="Column" />
                            <MultiBinding.Converter>
                                <dxdashi:GridSparklineEndValueConverter />
                            </MultiBinding.Converter>
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </Decorator>
            <dxe:SparklineEdit EditValue="{Binding Path=Value, Mode=OneWay}" StyleSettings="{Binding Path=Column.DataContext, Converter={dxdashi:GridSparklineTypeConverter}}" />
        </DockPanel>
    </DataTemplate>
    <DataTemplate x:Key="DashboardColumnTemplate">
        <dxg:GridColumn Style="{StaticResource {dxdasht:LWKey GridItem.ColumnStyle}}" />
    </DataTemplate>
    <dxdashi:FormatConditionGeneratorTemplateSelector x:Key="formatConditionGeneratorTemplateSelector" BarTemplate="{StaticResource FormatConditionBarTemplate}" SimpleTemplate="{StaticResource FormatConditionSimpleTemplate}" />

    <Style x:Key="{dxdasht:LWKey GridItem.GridViewStyle}" TargetType="{x:Type dxg:TableView}">
        <Setter Property="ShowAutoFilterRow" Value="{Binding ShowAutoFilterRow}" />
        <Setter Property="ShowCriteriaInAutoFilterRow" Value="True" />
        <Setter Property="ShowFilterPanelMode" Value="Never" />
        <Setter Property="AllowGrouping" Value="False" />
        <Setter Property="ShowGroupPanel" Value="False" />
        <Setter Property="AllowEditing" Value="False" />
        <Setter Property="AllowColumnMoving" Value="False" />
        <Setter Property="IsColumnMenuEnabled" Value="False" />
        <Setter Property="IsTotalSummaryMenuEnabled" Value="False" />
        <Setter Property="NavigationStyle" Value="{Binding NavigationStyle}" />
        <Setter Property="EnableSelectedRowAppearance" Value="{Binding IsInteractivityEnabled}" />
        <Setter Property="FormatConditionsSource" Value="{Binding FormatConditions}" />
        <Setter Property="FormatConditionGeneratorTemplateSelector" Value="{StaticResource formatConditionGeneratorTemplateSelector}" />
        <Setter Property="AllowCellMerge" Value="{Binding AllowCellMerge, Mode=OneWay}" />
        <Setter Property="ShowHorizontalLines" Value="{Binding ShowHorizontalLines, Mode=OneWay}" />
        <Setter Property="ShowVerticalLines" Value="{Binding ShowVerticalLines, Mode=OneWay}" />
        <Setter Property="ShowColumnHeaders" Value="{Binding ShowColumnHeaders, Mode=OneWay}" />
        <Setter Property="UseEvenRowBackground" Value="{Binding EnableBandedRows, Mode=OneWay}" />
        <Setter Property="ShowTotalSummary" Value="{Binding HasTotals}" />
        <Setter Property="ShowIndicator" Value="False" />
        <Setter Property="BestFitMaxRowCount" Value="{Binding BestFitMaxRowCount}" />
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey GridItem.GridViewTemplate}">
        <dxg:TableView Style="{Binding Path=(dxdash:GridDashboardLayoutItem.GridViewStyle), RelativeSource={RelativeSource Self}}" />
    </DataTemplate>


    <DataTemplate x:Key="{dxdasht:LWKey GridItem.Template}">
        <dxg:GridControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>

    <Style x:Key="{dxdasht:LWKey GridItem.ViewStyle}" TargetType="{x:Type dxg:GridControl}">
        <Setter Property="AllowUpdateTwoWayBoundPropertiesOnSynchronization" Value="False" />
        <Setter Property="ColumnsSource" Value="{Binding Columns}" />
        <Setter Property="ItemsSource" Value="{Binding Data}" />
        <Setter Property="SelectionMode" Value="{Binding SelectionMode}" />
        <Setter Property="SelectedItems" Value="{Binding SelectedItems}" />
        <Setter Property="CurrentItem" Value="{Binding CurrentItem, Mode=TwoWay}" />
        <Setter Property="TotalSummarySource" Value="{Binding Totals}" />
        <Setter Property="AllowInitiallyFocusedRow" Value="{Binding AllowInitiallyFocusedRow}" />
        <Setter Property="TotalSummaryGeneratorTemplate" Value="{StaticResource TotalSummaryGeneratorTemplateKey}" />
        <Setter Property="ColumnGeneratorTemplate" Value="{StaticResource DashboardColumnTemplate}" />
        <Setter Property="ShowBorder" Value="False" />
        <Setter Property="IsFilterEnabled" Value="{Binding IsFilterEnabled, Mode=TwoWay}" />
        <Setter Property="FilterString" Value="{Binding FilterString, Mode=TwoWay}" />
        <Setter Property="MaxWidth" Value="{Binding MaxWidth}" />
        <Setter Property="MaxHeight" Value="{Binding MaxHeight}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdashi:GridItemViewGenerator GridViewTemplate="{DynamicResource {dxdasht:LWKey GridItem.GridViewTemplate}}" />
                        <dxmvvm:EventToCommand Command="{Binding CustomColumnDisplayTextCommand}" EventName="CustomColumnDisplayText" PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnFilterChangedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="FilterChanged"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding CustomSummaryCommand}"
                            EventArgsConverter="{StaticResource customSummaryArgsConverter}"
                            EventName="CustomSummary"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseDoubleClickCommand}"
                            EventArgsConverter="{StaticResource mouseButtonEventArgsConverter}"
                            EventName="MouseDoubleClick"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseUpCommand}"
                            EventArgsConverter="{StaticResource mouseButtonEventArgsConverter}"
                            EventName="MouseUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseDownCommand}"
                            EventArgsConverter="{StaticResource mouseButtonEventArgsConverter}"
                            EventName="MouseDown"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding MouseMoveCommand}"
                            EventArgsConverter="{StaticResource mouseEventArgsConverter}"
                            EventName="MouseMove"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand EventName="SubstituteFilter" Command="{Binding OnSubstituteFilterCommand}" PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\GridItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\ImageItem.xaml-->





    <Style x:Key="{dxdasht:LWKey ImageItem.ViewStyle}" TargetType="{x:Type dx:DXImage}">
        <Setter Property="HorizontalAlignment" Value="{Binding HorizontalAlignment}" />
        <Setter Property="VerticalAlignment" Value="{Binding VerticalAlignment}" />
        <Setter Property="Source" Value="{Binding Image}" />
        <Setter Property="Stretch" Value="{Binding Stretch}" />
        <Setter Property="StretchDirection" Value="{Binding StretchDirection}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseUpCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseDownCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseDown"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseMoveCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseMove"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey ImageItem.Template}">
        <dx:DXImage Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\ImageItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\ListBoxItem.xaml-->





    <Style x:Key="{dxdasht:LWKey ListBoxItem.ViewStyle}" TargetType="{x:Type dxe:ListBoxEdit}">
        <Setter Property="AllowUpdateTwoWayBoundPropertiesOnSynchronization" Value="False" />
        <Setter Property="ShowBorder" Value="False" />
        <Setter Property="DisplayMember" Value="Caption" />
        <Setter Property="ShowCustomItems" Value="{Binding ShowAllValue}" />
        <Setter Property="EditValue" Value="{Binding SelectedItems}" />
        <Setter Property="ItemsSource" Value="{Binding Items}" />
        <Setter Property="FilterCriteria" Value="{Binding FilterCriteria}" />
        <Setter Property="StyleSettings" Value="{Binding IsChecked, Converter={dxdashi:ListBoxStyleSettingsConverter}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxdasht:LWKey ListBoxItem.Foreground}}" />
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey ListBoxItem.Template}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <dxe:SearchControl
                Grid.Row="0"
                Margin="-1,0"
                HorizontalAlignment="Stretch"
                FilterByColumnsMode="Custom"
                FilterCondition="Contains"
                FilterCriteria="{Binding FilterCriteria, Mode=TwoWay}"
                ImmediateMRUPopup="False"
                ShowMRUButton="False"
                Visibility="{Binding IsSearchEnabled, Converter={StaticResource booleanToVisibilityConverter}}">
                <dxe:SearchControl.ColumnProvider>
                    <dxe:SelectorEditColumnProvider>
                        <dxe:SelectorEditColumnProvider.CustomColumns>
                            <sys:String>Caption</sys:String>
                        </dxe:SelectorEditColumnProvider.CustomColumns>
                    </dxe:SelectorEditColumnProvider>
                </dxe:SearchControl.ColumnProvider>
            </dxe:SearchControl>
            <dxe:ListBoxEdit Grid.Row="1" Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\ListBoxItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\MapItem.xaml-->




    <DataTemplate x:Key="LegendLabelTemplate">
        <TextBlock Text="{Binding Converter={StaticResource LegendLabelConverter}}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey MapItem.DashboardColorListLegendTemplate}">
        <dxm:ColorListLegend
            Alignment="{Binding ColorLegendAlignment}"
            ItemLabelTemplate="{StaticResource LegendLabelTemplate}"
            Tag="{Binding ColorLegendFormatter}"
            Visibility="{Binding ColorListLegendVisibility}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey MapItem.DashboardColorScaleLegendTemplate}">
        <dxm:ColorScaleLegend
            Alignment="{Binding ColorLegendAlignment}"
            ItemLabelTemplate="{StaticResource LegendLabelTemplate}"
            Tag="{Binding ColorLegendFormatter}"
            Visibility="{Binding ColorScaleLegendVisibility}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey MapItem.BubbleColorListLegendTemplate}">
        <dxm:ColorListLegend
            Alignment="{Binding ColorLegendAlignment}"
            ItemLabelTemplate="{StaticResource LegendLabelTemplate}"
            Tag="{Binding ColorLegendFormatter}"
            Visibility="{Binding BubbleColorListLegendVisibility}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey MapItem.BubbleColorScaleLegendTemplate}">
        <dxm:ColorScaleLegend
            Alignment="{Binding ColorLegendAlignment}"
            ItemLabelTemplate="{StaticResource LegendLabelTemplate}"
            Tag="{Binding ColorLegendFormatter}"
            Visibility="{Binding BubbleColorScaleLegendVisibility}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey MapItem.BubbleSizeLegendTemplate}">
        <dxm:SizeLegend
            Alignment="{Binding SizeLegendAlignment}"
            ItemLabelTemplate="{StaticResource LegendLabelTemplate}"
            Tag="{Binding SizeLegendFormatter}"
            Type="{Binding SizeLegendMode}"
            Visibility="{Binding BubbleSizeVisibility}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey MapItem.PieColorListLegendTemplate}">
        <dxm:ColorListLegend Alignment="{Binding ColorLegendAlignment}" Visibility="{Binding PieColorListLegendVisibility}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey MapItem.PieColorScaleLegendTemplate}">
        <dxm:ColorScaleLegend Alignment="{Binding ColorLegendAlignment}" Visibility="{Binding PieColorScaleLegendVisibility}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey MapItem.PieSizeLegendTemplate}">
        <dxm:SizeLegend
            Alignment="{Binding SizeLegendAlignment}"
            ItemLabelTemplate="{StaticResource LegendLabelTemplate}"
            Tag="{Binding SizeLegendFormatter}"
            Type="{Binding SizeLegendMode}"
            Visibility="{Binding PieSizeVisibility}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey MapItem.DashboardsLayerTemplate}">
        <ContentControl>
            <dxm:VectorLayer x:Name="DashboardsLayer" SelectedItems="{Binding SelectedItems}">
                <dxm:VectorLayer.Resources>
                    <dxm:ListSourceDataAdapter x:Key="dashboardsLayerDataAdapter" DataSource="{Binding Items}" />
                    <dxm:ShapeTitleOptions x:Key="dashboardsLayerShapeTitleOptions" Pattern="{Binding ShapeTitlesPattern}" VisibilityMode="{Binding ShapeTitlesVisibility}" />
                    <dxm:ChoroplethColorizer x:Key="choroplethColorizer" Colors="{Binding Colorizer.Colors}" RangeStops="{Binding Colorizer.RangeStops}">
                        <dxm:ChoroplethColorizer.ValueProvider>
                            <dxm:ShapeAttributeValueProvider AttributeName="{Binding Colorizer.AttributeName}" />
                        </dxm:ChoroplethColorizer.ValueProvider>
                    </dxm:ChoroplethColorizer>
                </dxm:VectorLayer.Resources>
                <dxmvvm:Interaction.Behaviors>
                    <dxmvvm:EventToCommand Command="{Binding OnViewportChangedCommand}" EventName="ViewportChanged" PassEventArgsToCommand="True" />
                </dxmvvm:Interaction.Behaviors>
                <dxm:VectorLayer.Data>
                    <Binding Source="{StaticResource dashboardsLayerDataAdapter}" />
                </dxm:VectorLayer.Data>
                <dxm:VectorLayer.ShapeTitleOptions>
                    <Binding Source="{StaticResource dashboardsLayerShapeTitleOptions}" />
                </dxm:VectorLayer.ShapeTitleOptions>
                <dxm:VectorLayer.Colorizer>
                    <Binding Source="{StaticResource choroplethColorizer}" />
                </dxm:VectorLayer.Colorizer>
            </dxm:VectorLayer>
        </ContentControl>
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey MapItem.BubbleLayerTemplate}">
        <dxm:VectorLayer x:Name="BubbleLayer" SelectedItems="{Binding BubblesSelection}">
            <dxm:VectorLayer.Resources>
                <dxm:BubbleChartDataAdapter
                    x:Key="bubbleDataAdapter"
                    DataSource="{Binding Bubbles}"
                    ItemMaxSize="{Binding BubbleMaxSize}"
                    ItemMinSize="20">
                    <dxm:BubbleChartDataAdapter.AttributeMappings>
                        <dxm:MapItemAttributeMapping Name="LatitudeSelection" Member="LatitudeSelection" />
                        <dxm:MapItemAttributeMapping Name="LongitudeSelection" Member="LongitudeSelection" />
                        <dxm:MapItemAttributeMapping Name="TooltipDimensions" Member="TooltipDimensions" />
                        <dxm:MapItemAttributeMapping Name="TooltipMeasures" Member="TooltipMeasures" />
                        <dxm:MapItemAttributeMapping Name="MainTooltip" Member="MainTooltip" />
                        <dxm:MapItemAttributeMapping Name="Weight" Member="Weight" />
                        <dxm:MapItemAttributeMapping Name="Color" Member="Color" />
                        <dxm:MapItemAttributeMapping Name="ClusteredCount" Member="ClusteredCount" />
                    </dxm:BubbleChartDataAdapter.AttributeMappings>
                    <dxm:BubbleChartDataAdapter.Mappings>
                        <dxm:MapBubbleMappingInfo Latitude="Latitude" Longitude="Longitude" Value="Weight" />
                    </dxm:BubbleChartDataAdapter.Mappings>
                    <dxm:BubbleChartDataAdapter.MeasureRules>
                        <dxm:MeasureRules RangeStops="{Binding BubbleRangeStops}">
                            <dxm:MeasureRules.ValueProvider>
                                <dxm:ItemAttributeValueProvider AttributeName="Weight" />
                            </dxm:MeasureRules.ValueProvider>
                        </dxm:MeasureRules>
                    </dxm:BubbleChartDataAdapter.MeasureRules>
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand Command="{Binding Path=Owner.CustomizeMapItemCommand}" EventName="CustomizeMapItem" PassEventArgsToCommand="True" />
                    </dxmvvm:Interaction.Behaviors>
                </dxm:BubbleChartDataAdapter>
                <dxm:ChoroplethColorizer x:Key="bubbleColorizer" Colors="{Binding Colorizer.Colors}" RangeStops="{Binding Colorizer.RangeStops}">
                    <dxm:ChoroplethColorizer.ValueProvider>
                        <dxm:ShapeAttributeValueProvider AttributeName="{Binding Colorizer.AttributeName}" />
                    </dxm:ChoroplethColorizer.ValueProvider>
                </dxm:ChoroplethColorizer>
            </dxm:VectorLayer.Resources>
            <dxm:VectorLayer.Data>
                <Binding Source="{StaticResource bubbleDataAdapter}" />
            </dxm:VectorLayer.Data>
            <dxm:VectorLayer.Colorizer>
                <Binding Source="{StaticResource bubbleColorizer}" />
            </dxm:VectorLayer.Colorizer>
        </dxm:VectorLayer>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey MapItem.GeoPointLayerTemplate}">
        <dxm:VectorLayer x:Name="GeoPointLayer" SelectedItems="{Binding GeoPointSelection}">
            <dxm:VectorLayer.Resources>
                <dxm:ListSourceDataAdapter x:Key="geoPointDataAdapter" DataSource="{Binding GeoPoints}">
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand Command="{Binding Path=Owner.CustomizeMapItemCommand}" EventName="CustomizeMapItem" PassEventArgsToCommand="True" />
                    </dxmvvm:Interaction.Behaviors>
                    <dxm:ListSourceDataAdapter.ItemSettings>
                        <dxm:MapCustomElementSettings>
                            <dxm:MapCustomElementSettings.ContentTemplate>
                                <DataTemplate>
                                    <Grid Margin="-13,-13">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid>
                                            <dx:DXBorder
                                                x:Name="Stroke"
                                                Width="26"
                                                Height="26"
                                                Background="{DynamicResource {dxdasht:LWKey MapItem.GeoPointBorderBrush}}"
                                                CornerRadius="45"
                                                Opacity="0.38" />
                                            <dx:DXBorder
                                                x:Name="Point"
                                                Width="{Binding PointSize}"
                                                Height="{Binding PointSize}"
                                                Background="{DynamicResource {dxdasht:LWKey MapItem.GeoPointBackgroundBrush}}"
                                                BorderBrush="{DynamicResource {dxdasht:LWKey MapItem.GeoPointBorderBrush}}"
                                                BorderThickness="2"
                                                CornerRadius="45" />
                                        </Grid>
                                        <TextBlock
                                            Grid.Column="1"
                                            Margin="8,0,0,0"
                                            FontSize="{DynamicResource {dxdasht:LWKey MapItem.GeoPointDisplayTextFontSize}}"
                                            FontWeight="{DynamicResource {dxdasht:LWKey MapItem.GeoPointDisplayTextFontWeight}}"
                                            Foreground="{Binding DisplayTextForeground}"
                                            Text="{Binding DisplayText}" />
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Highlighted}" Value="True">
                                            <DataTrigger.Setters>
                                                <Setter TargetName="Point" Property="Background" Value="{DynamicResource {dxdasht:LWKey MapItem.GeoPointHighLightedBackgroundBrush}}" />
                                            </DataTrigger.Setters>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </dxm:MapCustomElementSettings.ContentTemplate>
                        </dxm:MapCustomElementSettings>
                    </dxm:ListSourceDataAdapter.ItemSettings>
                    <dxm:ListSourceDataAdapter.Mappings>
                        <dxm:MapItemMappingInfo Latitude="Latitude" Longitude="Longitude" />
                    </dxm:ListSourceDataAdapter.Mappings>
                </dxm:ListSourceDataAdapter>
            </dxm:VectorLayer.Resources>
            <dxm:VectorLayer.Data>
                <Binding Source="{StaticResource geoPointDataAdapter}" />
            </dxm:VectorLayer.Data>
        </dxm:VectorLayer>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey MapItem.ClusteredGeoPointLayerTemplate}">
        <dxm:VectorLayer x:Name="ClusteredGeoPointLayer" SelectedItems="{Binding GeoPointClusteredSelection}">
            <dxm:VectorLayer.Resources>
                <dxm:BubbleChartDataAdapter
                    x:Key="clusteredGeoPointDataAdapter"
                    DataSource="{Binding ClusteredGeoPoints}"
                    ItemMaxSize="{Binding ClusteredGeoPointMaxSize}"
                    ItemMinSize="30">
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand Command="{Binding Path=Owner.CustomizeMapItemCommand}" EventName="CustomizeMapItem" PassEventArgsToCommand="True" />
                    </dxmvvm:Interaction.Behaviors>
                    <dxm:BubbleChartDataAdapter.AttributeMappings>
                        <dxm:MapItemAttributeMapping Name="LatitudeSelection" Member="LatitudeSelection" />
                        <dxm:MapItemAttributeMapping Name="LongitudeSelection" Member="LongitudeSelection" />
                        <dxm:MapItemAttributeMapping Name="TooltipDimensions" Member="TooltipDimensions" />
                        <dxm:MapItemAttributeMapping Name="TooltipMeasures" Member="TooltipMeasures" />
                        <dxm:MapItemAttributeMapping Name="MainTooltip" Member="MainTooltip" />
                        <dxm:MapItemAttributeMapping Name="Value" Member="Value" />
                        <dxm:MapItemAttributeMapping Name="ClusteredCount" Member="ClusteredCount" />
                    </dxm:BubbleChartDataAdapter.AttributeMappings>
                    <dxm:BubbleChartDataAdapter.Mappings>
                        <dxm:MapBubbleMappingInfo Latitude="Latitude" Longitude="Longitude" Value="ClusteredCount" />
                    </dxm:BubbleChartDataAdapter.Mappings>
                    <dxm:BubbleChartDataAdapter.MeasureRules>
                        <dxm:MeasureRules RangeStops="{Binding ClusteredGeoPointRangeStops}">
                            <dxm:MeasureRules.ValueProvider>
                                <dxm:ItemAttributeValueProvider AttributeName="ClusteredCount" />
                            </dxm:MeasureRules.ValueProvider>
                        </dxm:MeasureRules>
                    </dxm:BubbleChartDataAdapter.MeasureRules>
                </dxm:BubbleChartDataAdapter>
                <dxm:ChoroplethColorizer x:Key="clusteredGeoPointColorizer" Colors="{Binding Colorizer.Colors}" RangeStops="{Binding Colorizer.RangeStops}">
                    <dxm:ChoroplethColorizer.ValueProvider>
                        <dxm:ShapeAttributeValueProvider AttributeName="{Binding Colorizer.AttributeName}" />
                    </dxm:ChoroplethColorizer.ValueProvider>
                </dxm:ChoroplethColorizer>
            </dxm:VectorLayer.Resources>
            <dxm:VectorLayer.Data>
                <Binding Source="{StaticResource clusteredGeoPointDataAdapter}" />
            </dxm:VectorLayer.Data>
            <dxm:VectorLayer.Colorizer>
                <Binding Source="{StaticResource clusteredGeoPointColorizer}" />
            </dxm:VectorLayer.Colorizer>
        </dxm:VectorLayer>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey MapItem.PieLayerTemplate}">
        <dxm:VectorLayer x:Name="PieLayer" SelectedItems="{Binding PieSelection}">
            <dxm:VectorLayer.Resources>
                <dxm:ListSourceDataAdapter x:Key="pieSource" DataSource="{Binding PieData}" />
                <dxm:PieChartDataAdapter
                    x:Key="segmentSource"
                    DataSource="{Binding PieSegmentData}"
                    ItemIdDataMember="PieItemDataMember"
                    ItemMaxSize="60"
                    ItemMinSize="20">
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand Command="{Binding Path=Owner.CustomizeMapItemCommand}" EventName="CustomizeMapItem" PassEventArgsToCommand="True" />
                    </dxmvvm:Interaction.Behaviors>
                    <dxm:PieChartDataAdapter.AttributeMappings>
                        <dxm:MapItemAttributeMapping Name="LatitudeSelection" Member="LatitudeSelection" />
                        <dxm:MapItemAttributeMapping Name="LongitudeSelection" Member="LongitudeSelection" />
                        <dxm:MapItemAttributeMapping Name="TooltipDimensions" Member="TooltipDimensions" />
                        <dxm:MapItemAttributeMapping Name="TooltipMeasures" Member="TooltipMeasures" />
                        <dxm:MapItemAttributeMapping Name="MainTooltip" Member="MainTooltip" />
                        <dxm:MapItemAttributeMapping Name="ClusteredCount" Member="ClusteredCount" />
                    </dxm:PieChartDataAdapter.AttributeMappings>
                    <dxm:PieChartDataAdapter.Mappings>
                        <dxm:MapPieMappingInfo
                            Latitude="Latitude"
                            Longitude="Longitude"
                            SegmentId="Argument"
                            SegmentValue="Value" />
                    </dxm:PieChartDataAdapter.Mappings>
                    <dxm:PieChartDataAdapter.MeasureRules>
                        <dxm:MeasureRules RangeStops="{Binding PieRangeStops}" />
                    </dxm:PieChartDataAdapter.MeasureRules>
                </dxm:PieChartDataAdapter>
                <dx:BoolToObjectConverter x:Key="pieDataConverter" FalseValue="{StaticResource pieSource}" TrueValue="{StaticResource segmentSource}" />
                <dxm:KeyColorColorizer x:Key="pieColorizer" Colors="{Binding KeyColorColorizer.Colors}" Keys="{Binding KeyColorColorizer.Keys}">
                    <dxm:KeyColorColorizer.ItemKeyProvider>
                        <dxm:IdItemKeyProvider />
                    </dxm:KeyColorColorizer.ItemKeyProvider>
                </dxm:KeyColorColorizer>
            </dxm:VectorLayer.Resources>
            <dxm:VectorLayer.Data>
                <Binding Converter="{StaticResource pieDataConverter}" Path="WeightedPies" />
            </dxm:VectorLayer.Data>
            <dxm:VectorLayer.Colorizer>
                <Binding Source="{StaticResource pieColorizer}" />
            </dxm:VectorLayer.Colorizer>
        </dxm:VectorLayer>
    </DataTemplate>

    <dxdasht:MapLegendTemplateSelector x:Key="{dxdasht:LWKey MapItem.LegendTemplateSelector}" />
    <dxdasht:MapLayerTemplateSelector x:Key="{dxdasht:LWKey MapItem.LayerTemplateSelector}" />

    <Style x:Key="{dxdasht:LWKey MapItem.ViewStyle}" TargetType="dxm:MapControl">
        <Setter Property="MinZoomLevel" Value="0.1" />
        <Setter Property="ZoomLevel" Value="{Binding ZoomLevel, Mode=TwoWay}" />
        <Setter Property="CenterPoint" Value="{Binding CenterPoint, Mode=TwoWay}" />
        <Setter Property="EnableScrolling" Value="{Binding EnableNavigation}" />
        <Setter Property="EnableZooming" Value="{Binding EnableNavigation}" />
        <Setter Property="UseSprings" Value="False" />
        <Setter Property="SelectionMode" Value="None" />
        <Setter Property="CoordinatesPanelOptions">
            <Setter.Value>
                <dxm:CoordinatesPanelOptions Visible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollButtonsOptions">
            <Setter.Value>
                <dxm:ScrollButtonsOptions Visible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="ZoomTrackbarOptions">
            <Setter.Value>
                <dxm:ZoomTrackbarOptions Visible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="ScalePanelOptions">
            <Setter.Value>
                <dxm:ScalePanelOptions Visible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdashi:MapItemElementGenerator
                            LayerTemplateSelector="{DynamicResource {dxdasht:LWKey MapItem.LayerTemplateSelector}}"
                            LayersSource="{Binding Layers}"
                            LegendTemplateSelector="{DynamicResource {dxdasht:LWKey MapItem.LegendTemplateSelector}}"
                            LegendsSource="{Binding Legends}" />
                        <dxdashi:MapControlToolTipService UnregisterOnUnloaded="True">
                            <dxdashi:MapControlToolTipService.ToolTip>
                                <ItemsControl ItemsSource="{Binding ToolTipItems}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock FontWeight="{Binding FontWeight}" Text="{Binding Text}" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </dxdashi:MapControlToolTipService.ToolTip>
                        </dxdashi:MapControlToolTipService>
                        <dxmvvm:EventToCommand
                            Command="{Binding OnKeyUpCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="KeyUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnKeyDownCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="KeyDown"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnSizeChangedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="SizeChanged"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseUpCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseDoubleClickCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseDoubleClick"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseDownCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseDown"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseMoveCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseMove"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseWheelCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseWheel"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnSelectionChangingCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="SelectionChanging"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey MapItem.Template}">
        <dxm:MapControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\MapItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\PieItem.xaml-->





    <Style x:Key="{dxdasht:LWKey PieItem.ChartStyle}" TargetType="{x:Type dxc:ChartControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Padding" Value="0,0,0,8" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="SelectionMode" Value="None" />
        <Setter Property="AutoLayout" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="CrosshairOptions" Value="{Binding CrosshairOptions}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxmvvm:EventToCommand
                            Command="{Binding OnCustomDrawSeriesPointCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="CustomDrawSeriesPoint"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnBoundDataChangedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="BoundDataChanged"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnSizeChangedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="SizeChanged"
                            PassEventArgsToCommand="True" />
                        <dxdashi:ChartItemBehavior DiagramTemplate="{DynamicResource {dxdasht:LWKey PieItem.ChartDiagramTemplate}}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <!-- //TODO: check theming -->
            <ControlTemplate x:Key="{dxct:LWKey ChartControl.ChartWrapperTemplate}" TargetType="ContentControl">
                <dx:DXBorder
                    x:Name="OutsideBorder"
                    Padding="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding BorderBrush}"
                    CornerRadius="4">
                    <dx:DXBorder
                        x:Name="InsideBorder"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="3">
                        <Grid>
                            <dx:DXBorder
                                x:Name="highlight"
                                Background="{DynamicResource {dxdasht:LWKey PieItem.PieHighlightedBackgroundBrush}}"
                                BorderBrush="{DynamicResource {dxdasht:LWKey PieItem.PieHighlightedBorderBrush}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {dxdasht:LWKey PieItem.PieBackgroundCornerRadius}}"
                                IsHitTestVisible="False"
                                Visibility="{Binding HasHighlightedBackground, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
                            <dxc:ChartContentPresenter Content="{TemplateBinding Content}" />
                        </Grid>
                    </dx:DXBorder>
                </dx:DXBorder>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                        <Setter TargetName="highlight" Property="Background" Value="{DynamicResource {dxdasht:LWKey DashboardControl.SelectedItemBackground}}" />
                        <Setter TargetName="highlight" Property="BorderBrush" Value="{DynamicResource {dxdasht:LWKey DashboardControl.SelectedItemBorder}}" />
                    </DataTrigger>
                    <Trigger Property="Background" Value="{x:Null}">
                        <Setter TargetName="OutsideBorder" Property="Background" Value="{x:Null}" />
                        <Setter TargetName="InsideBorder" Property="Background" Value="{x:Null}" />
                        <Setter TargetName="OutsideBorder" Property="CornerRadius" Value="0,0,0,0" />
                        <Setter TargetName="OutsideBorder" Property="Padding" Value="0,0,0,0" />
                        <Setter TargetName="InsideBorder" Property="CornerRadius" Value="0,0,0,0" />
                    </Trigger>
                    <Trigger Property="BorderThickness" Value="0,0,0,0">
                        <Setter TargetName="OutsideBorder" Property="CornerRadius" Value="0,0,0,0" />
                        <Setter TargetName="OutsideBorder" Property="Padding" Value="0,0,0,0" />
                        <Setter TargetName="InsideBorder" Property="CornerRadius" Value="0,0,0,0" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
    </Style>
    <DataTemplate x:Key="{dxdasht:LWKey PieItem.ChartDiagramTemplate}">
        <dxc:SimpleDiagram2D SeriesItemsSource="{Binding Series}">
            <dxc:SimpleDiagram2D.SeriesItemTemplate>
                <DataTemplate>
                    <dxc:PieSeries2D
                        ArgumentDataMember="{Binding ArgumentDataMember}"
                        ColorDataMember="{Binding ColorDataMember}"
                        DataSource="{Binding DataSource}"
                        HoleRadiusPercent="{Binding HoleRadiusPercent}"
                        ValueDataMember="{Binding ValueDataMember}">
                        <dxc:PieSeries2D.Label>
                            <dxc:SeriesLabel
                                MaxWidth="{Binding MaxLabelWidth}"
                                MaxHeight="60"
                                dxc:PieSeries.LabelPosition="{Binding LabelPosition}"
                                Indent="0"
                                RenderMode="RectangleConnectedToCenter"
                                ResolveOverlappingMode="Default"
                                Visible="True" />
                        </dxc:PieSeries2D.Label>
                        <dxc:PieSeries2D.Model>
                            <dxc:CustomPie2DModel>
                                <dxc:CustomPie2DModel.PointTemplate>
                                    <ControlTemplate>
                                        <dxdashi:PiePointPresenter />
                                    </ControlTemplate>
                                </dxc:CustomPie2DModel.PointTemplate>
                            </dxc:CustomPie2DModel>
                        </dxc:PieSeries2D.Model>
                    </dxc:PieSeries2D>
                </DataTemplate>
            </dxc:SimpleDiagram2D.SeriesItemTemplate>
        </dxc:SimpleDiagram2D>
    </DataTemplate>
    <Style x:Key="{dxdasht:LWKey PieItem.ViewStyle}" TargetType="{x:Type ItemsControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="ItemsSource" Value="{Binding ItemsSource}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxdashi:PiesPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <dxc:ChartControl Style="{Binding Path=(dxdash:PieDashboardLayoutItem.ChartStyle), RelativeSource={RelativeSource Self}}">
                            <dxc:ChartControl.ToolTipController>
                                <dxc:ChartToolTipController>
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxmvvm:EventToCommand
                                            Command="{Binding Path=DataContext.OnToolTipOpeningCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                                            EventName="ToolTipOpening"
                                            PassEventArgsToCommand="True" />
                                    </dxmvvm:Interaction.Behaviors>
                                </dxc:ChartToolTipController>
                            </dxc:ChartControl.ToolTipController>
                            <dxc:ChartControl.Titles>
                                <dxc:Title
                                    HorizontalAlignment="Center"
                                    Content="{Binding Title}"
                                    Dock="Top"
                                    FontSize="16"
                                    Visible="{Binding ShowTitle}" />
                            </dxc:ChartControl.Titles>
                        </dxc:ChartControl>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <ScrollViewer CanContentScroll="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type dxdashi:PieItemContainer}">
                    <Setter Property="Focusable" Value="False" />
                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="dxdashi:PieItemContainer">
                                <ContentPresenter />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ItemsControl>
                                    <dxmvvm:FocusBehavior EventName="MouseDown" />
                                    <dxmvvm:EventToCommand
                                        Command="{Binding MouseDownCommand}"
                                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                                        EventName="MouseDown"
                                        MarkRoutedEventsAsHandled="True"
                                        PassEventArgsToCommand="True" />
                                    <dxmvvm:EventToCommand
                                        Command="{Binding MouseUpCommand}"
                                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                                        EventName="MouseUp"
                                        PassEventArgsToCommand="True" />
                                    <dxmvvm:EventToCommand
                                        Command="{Binding MouseMoveCommand}"
                                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                                        EventName="MouseMove"
                                        PassEventArgsToCommand="True" />
                                    <dxmvvm:EventToCommand
                                        Command="{Binding MouseDoubleClickCommand}"
                                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                                        EventName="MouseDoubleClick"
                                        PassEventArgsToCommand="True" />
                                    <dxmvvm:EventToCommand
                                        Command="{Binding MouseLeaveCommand}"
                                        EventArgsConverter="{StaticResource EventToCommandConverter}"
                                        EventName="MouseLeave"
                                        PassEventArgsToCommand="True" />
                                </ItemsControl>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey PieItem.Template}">
        <dxdashi:PieItemsControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>

    <ControlTemplate x:Key="{dxdasht:LWKey PieItem.PiePointPresenterTemplate}" TargetType="dxdashi:PiePointPresenter">
        <ControlTemplate.Resources>
            <LinearGradientBrush x:Key="selectedMask" MappingMode="Absolute" SpreadMethod="Repeat" EndPoint="8,8">
                <LinearGradientBrush.GradientStops>
                    <GradientStop Offset="0.5" Color="#B5000000" />
                    <GradientStop Offset="0.5" Color="Black" />
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="highlightedMask" MappingMode="Absolute" SpreadMethod="Repeat" EndPoint="8,8">
                <LinearGradientBrush.GradientStops>
                    <GradientStop Offset="0.5" Color="#E5000000" />
                    <GradientStop Offset="0.5" Color="Black" />
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
        </ControlTemplate.Resources>
        <Grid x:Name="model" Background="Transparent">
            <Ellipse x:Name="fill" Fill="{Binding Path=PointColor, ConverterParameter=Gray, Converter={StaticResource brushOverlayConverter}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsHighlighted}" Value="True">
                <Setter TargetName="fill" Property="OpacityMask" Value="{StaticResource highlightedMask}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                <Setter TargetName="fill" Property="OpacityMask" Value="{StaticResource selectedMask}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\PieItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\PivotItem.xaml-->
    <DataTemplate x:Key="PivotFormatConditionSimpleTemplate">
        <ContentControl>
            <dxpg:FormatCondition Expression="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Expression, RelativeSource={RelativeSource Self}}" Format="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Format, RelativeSource={RelativeSource Self}}" MeasureName="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).MeasureName, RelativeSource={RelativeSource Self}}" />
        </ContentControl>
    </DataTemplate>
    <DataTemplate x:Key="PivotFormatConditionBarTemplate">
        <ContentControl>
            <dxpg:DataBarFormatCondition
                Expression="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Expression, RelativeSource={RelativeSource Self}}"
                Format="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Format, RelativeSource={RelativeSource Self}}"
                MaxValue="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).MaxValue, RelativeSource={RelativeSource Self}}"
                MeasureName="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).MeasureName, RelativeSource={RelativeSource Self}}"
                MinValue="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).MinValue, RelativeSource={RelativeSource Self}}"
                SelectiveExpression="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).SelectiveExpression, RelativeSource={RelativeSource Self}}" />
        </ContentControl>
    </DataTemplate>





    <dxdashi:PivotFormatConditionGeneratorTemplateSelector x:Key="PivotFormatConditionGeneratorTemplateSelector" BarTemplate="{StaticResource PivotFormatConditionBarTemplate}" SimpleTemplate="{StaticResource PivotFormatConditionSimpleTemplate}" />

    <Style x:Key="{dxdasht:LWKey PivotItem.ViewStyle}" TargetType="{x:Type dxpg:PivotGridControl}">
        <Setter Property="ShowBorder" Value="False" />
        <Setter Property="DataSource" Value="{Binding DataSource}" />
        <Setter Property="FieldsSource" Value="{Binding Fields}" />
        <Setter Property="DataFieldAreaIndex" Value="-1" />
        <Setter Property="DataFieldArea" Value="{Binding PivotDataArea}" />
        <Setter Property="FormatConditionsSource" Value="{Binding FormatConditions}" />
        <Setter Property="FormatConditionGeneratorTemplateSelector" Value="{StaticResource formatConditionGeneratorTemplateSelector}" />
        <Setter Property="ShowColumnGrandTotals" Value="{Binding ShowColumnGrandTotals, Mode=OneWay}" />
        <Setter Property="ShowRowGrandTotals" Value="{Binding ShowRowGrandTotals, Mode=OneWay}" />
        <Setter Property="ShowColumnTotals" Value="{Binding ShowColumnTotals, Mode=OneWay}" />
        <Setter Property="ShowRowTotals" Value="{Binding ShowRowTotals}" />
        <Setter Property="RowTotalsLocation" Value="{Binding RowTotalsLocation}" />
        <Setter Property="ColumnTotalsLocation" Value="{Binding ColumnTotalsLocation}" />
        <Setter Property="ShowTotalsForSingleValues" Value="True" />
        <Setter Property="ShowGrandTotalsForSingleValues" Value="True" />
        <Setter Property="AllowResizing" Value="False" />
        <Setter Property="AllowPrefilter" Value="False" />
        <Setter Property="AllowDrag" Value="False" />
        <Setter Property="ShowFilterHeaders" Value="False" />
        <Setter Property="ShowDataHeaders" Value="False" />
        <Setter Property="ShowRowHeaders" Value="False" />
        <Setter Property="ShowColumnHeaders" Value="False" />
        <Setter Property="AllowDragInCustomizationForm" Value="False" />
        <Setter Property="CopyToClipboardWithFieldValues" Value="True" />
        <Setter Property="IsFieldValueMenuEnabled" Value="False" />
        <Setter Property="IsHeaderAreaMenuEnabled" Value="False" />
        <Setter Property="IsCellMenuEnabled" Value="False" />
        <Setter Property="AllowConditionalFormattingMenu" Value="False" />
        <Setter Property="MaxWidth" Value="{Binding MaxWidth}" />
        <Setter Property="MaxHeight" Value="{Binding MaxHeight}" />
        <Setter Property="FieldGeneratorTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl>
                        <dxpg:PivotGridField
                            FieldName="{Binding Name}"
                            dx:XamlHelper.Name="{Binding ComponentName}"
                            Area="{Binding Area}"
                            CalculateHiddenSummaries="True"
                            Caption="{Binding Model.Caption}"
                            ShowGrandTotal="{Binding Model.ShowGrandTotals}"
                            ShowTotals="{Binding Model.ShowTotals}"
                            ShowValues="{Binding Model.ShowValues}"
                            Visible="{Binding IsVisible}" />
                    </ContentControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxmvvm:EventToCommand Command="{Binding OnFieldValueDisplayTextCommand}" EventName="FieldValueDisplayText" PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand Command="{Binding OnCustomCellDisplayTextCommand}" EventName="CustomCellDisplayText" PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseDoubleClickCommand}"
                            EventArgsConverter="{StaticResource PivotDataPointInfoConverter}"
                            EventName="MouseDoubleClick"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseUpCommand}"
                            EventArgsConverter="{StaticResource PivotDataPointInfoConverter}"
                            EventName="MouseUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseDownCommand}"
                            EventArgsConverter="{StaticResource PivotDataPointInfoConverter}"
                            EventName="MouseDown"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseMoveCommand}"
                            EventArgsConverter="{StaticResource PivotDataPointInfoConverter}"
                            EventName="MouseMove"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey PivotItem.Template}">
        <dxpg:PivotGridControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\PivotItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\RangeItem.xaml-->





    <Style x:Key="{dxdasht:LWKey RangeItem.ViewStyle}" TargetType="{x:Type dxe:RangeControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="AllowZoom" Value="False" />
        <Setter Property="AllowImmediateRangeUpdate" Value="False" />
        <Setter Property="AllowSnapToInterval" Value="False" />
        <Setter Property="AllowScroll" Value="False" />
        <Setter Property="ShowRangeBar" Value="False" />
        <Setter Property="UpdateDelay" Value="100" />
        <Setter Property="AllowImmediateRangeUpdate" Value="False" />
        <Setter Property="SelectionRangeStart" Value="{Binding SelectionStart, Mode=TwoWay}" />
        <Setter Property="SelectionRangeEnd" Value="{Binding SelectionEnd, Mode=TwoWay}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdashi:RangeItemClientGenerator RangeControlClientTemplate="{DynamicResource {dxdasht:LWKey RangeItem.RangeControlClientTemplate}}" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseUpCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseDownCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="PreviewMouseDown"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseDoubleClickCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseDoubleClick"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseMoveCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseMove"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey RangeItem.RangeControlClientStyle}" TargetType="{x:Type dxdashi:RangeControlClient}">
        <Setter Property="ItemsSource" Value="{Binding Data}" />
        <Setter Property="ChangeToken" Value="{Binding ChangeToken}" />
    </Style>
    <DataTemplate x:Key="{dxdasht:LWKey RangeItem.RangeControlClientTemplate}">
        <dxdashi:RangeControlClient Style="{Binding Path=(dxdash:RangeDashboardLayoutItem.RangeControlClientStyle), RelativeSource={RelativeSource Self}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey RangeItem.Template}">
        <dxe:RangeControl Style="{Binding Path=(dxdash:RangeDashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey RangeItem.CustomPeriodDialogWindowTemplate}">
        <Grid Width="292" Height="175">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid Grid.Row="0" Width="190" Margin="0,20,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" VerticalAlignment="Bottom">
                    <Label Height="20" Content="{dxdashi:DashboardLocalizationString RangeFilterSelectRangeFromCaption}" />
                </Grid>
                <Grid Grid.Row="1" VerticalAlignment="Top">
                    <dxe:DateEdit
                        Height="20"
                        EditValue="{Binding DialogStartDate}"
                        Mask="{Binding DialogMask}"
                        MaskUseAsDisplayFormat="{Binding DialogMaskUseAsDisplayFormat}"
                        StyleSettings="{Binding DialogStyleSettings}" />
                </Grid>
            </Grid>
            <Grid Grid.Row="1" Width="190" Margin="0,0,0,20">
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" VerticalAlignment="Bottom">
                    <Label Height="20" Content="{dxdashi:DashboardLocalizationString RangeFilterSelectRangeToCaption}" />
                </Grid>
                <Grid Grid.Row="1" VerticalAlignment="Top">
                    <dxe:DateEdit
                        Height="20"
                        EditValue="{Binding DialogEndDate}"
                        Mask="{Binding DialogMask}"
                        MaskUseAsDisplayFormat="{Binding DialogMaskUseAsDisplayFormat}"
                        StyleSettings="{Binding DialogStyleSettings}" />
                </Grid>
            </Grid>
        </Grid>
    </DataTemplate>
    <Style x:Key="{dxdasht:LWKey RangeItem.CustomPeriodDialogWindowStyle}" TargetType="{x:Type dx:ThemedWindow}">
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="ShowIcon" Value="False" />
    </Style>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\RangeItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\TextBoxItem.xaml-->





    <Style x:Key="{dxdasht:LWKey TextBoxItem.ViewStyle}" TargetType="{x:Type dxre:RichEditControl}">
        <Setter Property="Content" Value="{Binding Rtf, Converter={StaticResource rtfToContentConverter}}" />
        <Setter Property="ActiveViewType" Value="Simple" />
        <Setter Property="ShowCaretInReadOnly" Value="False" />
        <Setter Property="ShowBorder" Value="False" />
        <Setter Property="ReadOnly" Value="{Binding ReadOnly}" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Collapsed" />
        <Setter Property="VerticalScrollBarVisibility" Value="Collapsed" />
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="HorizontalRulerOptions">
            <Setter.Value>
                <dxre:DXRichEditHorizontalRulerOptions Visibility="Hidden" />
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalRulerOptions">
            <Setter.Value>
                <dxre:DXRichEditVerticalRulerOptions Visibility="Hidden" />
            </Setter.Value>
        </Setter>
        <Setter Property="BehaviorOptions">
            <Setter.Value>
                <dxre:DXRichEditBehaviorOptions Open="Disabled" Printing="Disabled" ShowPopupMenu="Disabled" />
            </Setter.Value>
        </Setter>
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdashi:RichEditControlDashboardBehavior />
                        <dxmvvm:EventToCommand Command="{Binding OnCalculateDocumentVariableCommand}" EventName="CalculateDocumentVariable" PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnTextBoxLoadedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="Loaded"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseUpCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseDownCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="PreviewMouseDown"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseDoubleClickCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseDoubleClick"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnMouseMoveCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseMove"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey TextBoxItem.Template}">
        <dxre:RichEditControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\TextBoxItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\TreemapItem.xaml-->
    <DataTemplate x:Key="ColorizerKey">
        <ContentControl>
            <dxdashi:DashboardTreemapColorizer />
        </ContentControl>
    </DataTemplate>




    <DataTemplate x:Key="tooltipTemplate">
        <TextBlock
            Margin="20,15,20,18"
            FontSize="{DynamicResource {dxdasht:LWKey TreemapItem.ToolTipFontSize}}"
            FontWeight="{DynamicResource {dxdasht:LWKey TreemapItem.ToolTipFontWeight}}"
            Foreground="{DynamicResource {dxdasht:LWKey TreemapItem.ToolTipForeground}}"
            Text="{Binding Item.ToolTip}"
            TextWrapping="Wrap" />
    </DataTemplate>
    <Style x:Key="{dxdasht:LWKey TreemapItem.ViewStyle}" TargetType="{x:Type dxtm:TreeMapControl}">
        <Setter Property="LayoutAlgorithm" Value="{Binding LayoutAlgorithm}" />
        <Setter Property="ToolTipEnabled" Value="True" />
        <Setter Property="ToolTipContentTemplate" Value="{StaticResource tooltipTemplate}" />
        <Setter Property="ToolTipGroupContentTemplate" Value="{StaticResource tooltipTemplate}" />
        <Setter Property="SelectedItems" Value="{Binding SelectedItems}" />
        <Setter Property="SelectionMode" Value="None" />
        <Setter Property="MaxWidth" Value="{Binding MaxWidth}" />
        <Setter Property="MaxHeight" Value="{Binding MaxHeight}" />
        <Setter Property="ToolTipOptions">
            <Setter.Value>
                <dxtm:ToolTipOptions OpenMode="OnHover" />
            </Setter.Value>
        </Setter>
        <Setter Property="DataAdapter" Value="{Binding Data, Converter={dxdashi:TreemapDataAdapterConverter}}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdashi:TreemapItemBehavior ColorizerTemplate="{StaticResource ColorizerKey}" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnTreeMapMouseUpCommand}"
                            EventArgsConverter="{StaticResource TreemapMouseEventArgsConverter}"
                            EventName="MouseUp"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnTreeMapMouseDoubleClickCommand}"
                            EventArgsConverter="{StaticResource TreemapMouseEventArgsConverter}"
                            EventName="MouseDoubleClick"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnTreeMapMouseMoveCommand}"
                            EventArgsConverter="{StaticResource TreemapMouseEventArgsConverter}"
                            EventName="MouseMove"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding OnTreeMapMouseDownCommand}"
                            EventArgsConverter="{StaticResource TreemapMouseEventArgsConverter}"
                            EventName="MouseDown"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <HierarchicalDataTemplate DataType="{x:Type dxdashi:TreemapNodeXpf}" ItemsSource="{Binding Children}">
                <dxtm:HierarchicalTreeMapItemControl Text="{Binding Label}" />
            </HierarchicalDataTemplate>
        </Style.Resources>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey TreemapItem.Template}">
        <dxtm:TreeMapControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\TreemapItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\TreeViewItem.xaml-->





    <Style x:Key="{dxdasht:LWKey TreeViewItem.ViewStyle}" TargetType="{x:Type dxg:GridControl}">
        <Setter Property="AllowUpdateTwoWayBoundPropertiesOnSynchronization" Value="False" />
        <Setter Property="ShowBorder" Value="False" />
        <Setter Property="AutoGenerateColumns" Value="AddNew" />
        <Setter Property="ItemsSource" Value="{Binding Items}" />
        <Setter Property="MaxWidth" Value="{Binding MaxWidth}" />
        <Setter Property="MaxHeight" Value="{Binding MaxHeight}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdashi:GridItemViewGenerator GridViewTemplate="{DynamicResource {dxdasht:LWKey TreeViewItem.TreeListViewTemplate}}" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdasht:LWKey TreeViewItem.TreeListViewStyle}" TargetType="{x:Type dxg:TreeListView}">
        <Setter Property="SearchPanelHorizontalAlignment" Value="Stretch" />
        <Setter Property="ShowSearchPanelMode" Value="{Binding IsSearchEnabled, Converter={StaticResource isSearchEnabledToShowSearchPanelModeConverter}}" />
        <Setter Property="SearchPanelImmediateMRUPopup" Value="True" />
        <Setter Property="ExpandNodesOnFiltering" Value="True" />
        <Setter Property="FilterMode" Value="Extended" />
        <Setter Property="RestoreTreeStateOnClearFilter" Value="False" />
        <Setter Property="KeyFieldName" Value="ID" />
        <Setter Property="ParentFieldName" Value="ParentID" />
        <Setter Property="CheckBoxFieldName" Value="IsChecked" />
        <Setter Property="ShowIndicator" Value="False" />
        <Setter Property="ShowColumnHeaders" Value="False" />
        <Setter Property="ShowCheckboxes" Value="{Binding IsChecked}" />
        <Setter Property="AutoExpandAllNodes" Value="{Binding AutoExpandNodes}" />
        <Setter Property="AllowRecursiveNodeChecking" Value="False" />
        <Setter Property="ShowVerticalLines" Value="False" />
        <Setter Property="ShowHorizontalLines" Value="False" />
        <Setter Property="AutoWidth" Value="True" />
        <Setter Property="AllowChildNodeSourceUpdates" Value="True" />
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey TreeViewItem.TreeListViewTemplate}">
        <dxg:TreeListView Style="{Binding Path=(dxdash:TreeViewDashboardLayoutItem.TreeListViewStyle), RelativeSource={RelativeSource Self}}" />
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey TreeViewItem.Template}">
        <dxg:GridControl Style="{Binding Path=(dxdash:TreeViewDashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\TreeViewItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\Generic.xaml-->
    <Style x:Key="RowControl" TargetType="{x:Type dxprg:RowControl}">
        <Setter Property="IsEnabled" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly, Converter={dxmvvm:BooleanNegationConverter}}" />
    </Style>
    <DataTemplate x:Key="ElementActionButtons">
        <StackPanel dxb:BarNameScope.IsScopeOwner="True" Orientation="Horizontal">
            <dxmvvm:Interaction.Behaviors>
                <dxb:ControllerBehavior ExecutionMode="OnEvent">
                    <dxb:ControllerBehavior.Triggers>
                        <dxb:ActionTrigger EventName="Loaded" ExecuteOnce="True" />
                    </dxb:ControllerBehavior.Triggers>
                    <dxb:ActionGroup ActionsTemplate="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dxdo:BaseLayoutItem}}, Path=CaptionCustomizationsTemplate}" />
                </dxb:ControllerBehavior>
            </dxmvvm:Interaction.Behaviors>
            <dxdashi:DashboardItemWaitIndicator Margin="4,0,0,0" IsIndeterminate="{Binding IsLoading, Converter={dxmvvm:BooleanToVisibilityConverter}}" Visibility="{Binding IsLoading, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
            <dxb:ToolBarControl
                Margin="4,0,0,0"
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_Toolbar}"
                AllowCustomizationMenu="False"
                AllowQuickCustomization="False"
                Focusable="False"
                ShowBackground="False"
                ShowDragWidget="False">
                <!-- NAMING RULES: http://gitserver/Serov.Alexey/OfficeUI -->
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ScrollPrevButton}"
                    Command="{Binding Path=(dxdove:BaseControlBoxControl.ContextCommand), RelativeSource={RelativeSource Self}}"
                    CommandParameter="ScrollPrev"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Prev.svg'}"
                    IsVisible="{Binding IsScrollPrevButtonVisible}"
                    ToolTipService.ShowOnDisabled="True" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ScrollNextButton}"
                    Command="{Binding Path=(dxdove:BaseControlBoxControl.ContextCommand), RelativeSource={RelativeSource Self}}"
                    CommandParameter="ScrollNext"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Next.svg'}"
                    IsVisible="{Binding IsScrollNextButtonVisible}"
                    ToolTipService.ShowOnDisabled="True" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_DropDownButton}"
                    Command="{Binding Path=(dxdove:BaseControlBoxControl.ContextCommand), RelativeSource={RelativeSource Self}}"
                    CommandParameter="Menu"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/MoveDown.svg'}"
                    IsVisible="{Binding IsDropDownButtonVisible}"
                    ToolTipService.ShowOnDisabled="True" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_InitialExtentButton}"
                    Command="{Binding InitialExtentCommand}"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/InitialExtent.svg'}"
                    IsVisible="{Binding IsInitialExtentButtonVisible}"
                    ToolTip="{dxdashi:DashboardLocalizationString InitialExtent}"
                    ToolTipService.ShowOnDisabled="True" />
                <dxb:BarSplitButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportToButton}"
                    ActAsDropDown="True"
                    Content="{dxdashi:DashboardLocalizationString ActionExportTo}"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Export.svg'}"
                    IsVisible="{Binding AllowPrintDashboardItems}"
                    ToolTip="{dxdashi:DashboardLocalizationString ActionExportTo}"
                    ToolTipService.ShowOnDisabled="True">
                    <dxb:PopupMenu dxb:BarManager.ShowGlyphsInPopupMenus="False">
                        <dxb:BarButtonItem dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportPreviewButton}" Command="{Binding ShowPreviewCommand}" Content="{dxdashi:DashboardLocalizationString ActionPrintPreview}" />
                        <dxb:BarButtonItem dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportToPdfButton}" Command="{Binding ExportToPdfCommand}" Content="{dxdashi:DashboardLocalizationString ActionExportToPdf}" />
                        <dxb:BarButtonItem dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportToImageButton}" Command="{Binding ExportToImageCommand}" Content="{dxdashi:DashboardLocalizationString ActionExportToImage}" />
                        <dxb:BarButtonItem
                            dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportToExcelButton}"
                            Command="{Binding ExportToExcelCommand}"
                            Content="{dxdashi:DashboardLocalizationString ActionExportToExcel}"
                            IsVisible="{Binding IsExportToExcelButtonVisible}" />
                    </dxb:PopupMenu>
                </dxb:BarSplitButtonItem>
                <dxb:BarSplitButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_SelectElementButton}"
                    ActAsDropDown="True"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/SelectLayer.svg'}"
                    IsVisible="{Binding IsSelectElementButtonVisible}"
                    ToolTip="{dxdashi:DashboardLocalizationString ActionOtherValues}"
                    ToolTipService.ShowOnDisabled="True">
                    <dxb:PopupMenu dxb:BarManager.ShowGlyphsInPopupMenus="True">
                        <dxb:BarItemSelector AllowEmptySelection="False" ItemLinksSource="{Binding ItemViewModel.ContentDescription.ElementNames}" SelectedItem="{Binding SelectedElementName, Mode=OneWay}">
                            <dxb:BarItemSelector.ItemTemplate>
                                <DataTemplate>
                                    <ContentControl>
                                        <dxb:BarCheckItem Command="{Binding Path=DataContext.SelectElementCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dxb:BarItemSelector}}}" CommandParameter="{Binding}" Content="{Binding}" />
                                    </ContentControl>
                                </DataTemplate>
                            </dxb:BarItemSelector.ItemTemplate>
                        </dxb:BarItemSelector>
                    </dxb:PopupMenu>
                </dxb:BarSplitButtonItem>
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ClearMasterFilterButton}"
                    Command="{Binding ClearMasterFilterCommand}"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/ClearMasterFilter.svg'}"
                    IsVisible="{Binding IsClearMasterFilterButtonVisible}"
                    ToolTip="{dxdashi:DashboardLocalizationString ActionClearMasterFilter}"
                    ToolTipService.ShowOnDisabled="True" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_DrillUpButton}"
                    Command="{Binding DrillUpCommand}"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/DrillUp.svg'}"
                    IsVisible="{Binding IsDrillUpButtonVisible}"
                    ToolTip="{dxdashi:DashboardLocalizationString ActionDrillUp}"
                    ToolTipService.ShowOnDisabled="True" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_CustomRangePeriodButton}"
                    Command="{Binding CustomRangePeriodCommand}"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/DateTimePeriods.svg'}"
                    IsVisible="{Binding IsCustomRangePeriodButtonVisible}"
                    ToolTip="{dxdashi:DashboardLocalizationString RangeFilterCustomDateTimePeriod}"
                    ToolTipService.ShowOnDisabled="True" />
                <dxb:BarSplitButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_SelectDateTimePeriod}"
                    ActAsDropDown="True"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/DateTimePeriods.svg'}"
                    IsVisible="{Binding IsDateTimePeriodVisible}"
                    ToolTip="{dxdashi:DashboardLocalizationString ActionSelectDateTimePeriod}"
                    ToolTipService.ShowOnDisabled="True">
                    <dxb:PopupMenu dxb:BarManager.ShowGlyphsInPopupMenus="True">
                        <dxb:BarItemSelector AllowEmptySelection="True" ItemLinksSource="{Binding DateTimePeriodNames}" SelectedItem="{Binding DateTimePeriodSelectedItem, Mode=TwoWay}">
                            <dxb:BarItemSelector.ItemTemplate>
                                <DataTemplate>
                                    <ContentControl>
                                        <dxb:BarCheckItem Content="{Binding}" />
                                    </ContentControl>
                                </DataTemplate>
                            </dxb:BarItemSelector.ItemTemplate>
                        </dxb:BarItemSelector>
                    </dxb:PopupMenu>
                </dxb:BarSplitButtonItem>
                <dxb:BarCheckItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_MultiSelectButton}"
                    Command="{Binding MultiSelectCommand}"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Multiselect.svg'}"
                    IsVisible="{Binding IsMultiSelectButtonVisible}"
                    ToolTip="{dxdashi:DashboardLocalizationString ActionAllowMultiselection}"
                    ToolTipService.ShowOnDisabled="True" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_DataInspectorBarItemButton}"
                    Command="{Binding ShowDataInspectorCommand}"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/DataInspector.svg'}"
                    IsVisible="{Binding IsDataInspectorButtonVisible}"
                    ToolTip="{dxdashi:DashboardLocalizationString ActionShowDataInspector}" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_MinimizeBarItemButton}"
                    Command="{Binding MinimizeItemCommand}"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Minimize.svg'}"
                    IsVisible="{Binding IsMinimizeButtonVisible}"
                    ToolTip="{dxdashi:DashboardLocalizationString ActionRestoreDashboardItem}" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_MaximizeBarItemButton}"
                    Command="{Binding MaximizeItemCommand}"
                    Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Maximize.svg'}"
                    IsVisible="{Binding IsMaximizeButtonVisible}"
                    ToolTip="{dxdashi:DashboardLocalizationString ActionMaximizeDashboardItem}" />
            </dxb:ToolBarControl>
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="ElementPopupMenu">
        <dxb:PopupMenu dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ContextMenu}" dxb:BarNameScope.IsScopeOwner="True" Placement="MousePoint">
            <dxmvvm:Interaction.Behaviors>
                <dxb:ControllerBehavior ExecutionMode="OnEvent">
                    <dxb:ControllerBehavior.Triggers>
                        <dxb:ActionTrigger EventName="Loaded" ExecuteOnce="True" ExecutionPriority="DataBind" />
                    </dxb:ControllerBehavior.Triggers>
                    <dxb:ActionGroup ActionsTemplate="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dxdo:BaseLayoutItem}}, Path=ContextMenuCustomizationsTemplate}" />
                </dxb:ControllerBehavior>
            </dxmvvm:Interaction.Behaviors>
            <!-- NAMING RULES: http://gitserver/Serov.Alexey/OfficeUI -->
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_InitialExtentButton}"
                Command="{Binding InitialExtentCommand}"
                Content="{dxdashi:DashboardLocalizationString InitialExtent}"
                IsVisible="{Binding IsInitialExtentButtonVisible}" />
            <dxb:BarItemLinkSeparator />
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_DataInspectorBarItemButton}"
                Command="{Binding ShowDataInspectorCommand}"
                Content="{dxdashi:DashboardLocalizationString ActionShowDataInspector}"
                IsVisible="{Binding IsDataInspectorButtonVisible}" />
            <dxb:BarItemLinkSeparator />
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_MaximizeBarItemButton}"
                Command="{Binding MaximizeItemCommand}"
                Content="{dxdashi:DashboardLocalizationString ActionMaximizeDashboardItem}"
                IsVisible="{Binding IsMaximizeButtonVisible}" />
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_MinimizeBarItemButton}"
                Command="{Binding MinimizeItemCommand}"
                Content="{dxdashi:DashboardLocalizationString ActionRestoreDashboardItem}"
                IsVisible="{Binding IsMinimizeButtonVisible}" />
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_DrillUpButton}"
                Command="{Binding DrillUpCommand}"
                Content="{dxdashi:DashboardLocalizationString ActionDrillUp}"
                IsVisible="{Binding IsDrillUpButtonVisible}" />
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ClearMasterFilterButton}"
                Command="{Binding ClearMasterFilterCommand}"
                Content="{dxdashi:DashboardLocalizationString ActionClearMasterFilter}"
                IsVisible="{Binding IsClearMasterFilterButtonVisible}" />
            <dxb:BarSubItem dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_SelectElementButton}" Content="{dxdashi:DashboardLocalizationString ActionOtherValues}" IsVisible="{Binding IsSelectElementButtonVisible}">
                <dxb:BarItemSelector AllowEmptySelection="False" ItemLinksSource="{Binding ItemViewModel.ContentDescription.ElementNames}" SelectedItem="{Binding SelectedElementName, Mode=OneWay}">
                    <dxb:BarItemSelector.ItemTemplate>
                        <DataTemplate>
                            <ContentControl>
                                <dxb:BarCheckItem Command="{Binding Path=DataContext.SelectElementCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dxb:BarItemSelector}}}" CommandParameter="{Binding}" Content="{Binding}" />
                            </ContentControl>
                        </DataTemplate>
                    </dxb:BarItemSelector.ItemTemplate>
                </dxb:BarItemSelector>
            </dxb:BarSubItem>
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_CustomRangePeriodButton}"
                Command="{Binding CustomRangePeriodCommand}"
                Content="{dxdashi:DashboardLocalizationString RangeFilterCustomDateTimePeriod}"
                IsVisible="{Binding IsCustomRangePeriodButtonVisible}" />
            <dxb:BarSubItem dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_SelectDateTimePeriod}" Content="{dxdashi:DashboardLocalizationString ActionSelectDateTimePeriod}" IsVisible="{Binding IsDateTimePeriodVisible}">
                <dxb:BarItemSelector AllowEmptySelection="True" ItemLinksSource="{Binding DateTimePeriodNames}" SelectedItem="{Binding DateTimePeriodSelectedItem, Mode=TwoWay}">
                    <dxb:BarItemSelector.ItemTemplate>
                        <DataTemplate>
                            <ContentControl>
                                <dxb:BarCheckItem Content="{Binding}" />
                            </ContentControl>
                        </DataTemplate>
                    </dxb:BarItemSelector.ItemTemplate>
                </dxb:BarItemSelector>
            </dxb:BarSubItem>
            <dxb:BarItemLinkSeparator />
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportPreviewButton}"
                Command="{Binding ShowPreviewCommand}"
                Content="{dxdashi:DashboardLocalizationString ActionPrintPreview}"
                IsVisible="{Binding AllowPrintDashboardItems}" />
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportToPdfButton}"
                Command="{Binding ExportToPdfCommand}"
                Content="{dxdashi:DashboardLocalizationString ActionExportToPdf}"
                IsVisible="{Binding AllowPrintDashboardItems}" />
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportToImageButton}"
                Command="{Binding ExportToImageCommand}"
                Content="{dxdashi:DashboardLocalizationString ActionExportToImage}"
                IsVisible="{Binding AllowPrintDashboardItems}" />
            <dxb:BarButtonItem
                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportToExcelButton}"
                Command="{Binding ExportToExcelCommand}"
                Content="{dxdashi:DashboardLocalizationString ActionExportToExcel}"
                IsVisible="{Binding IsExportToExcelButtonVisible}" />
            <dxb:BarItemLinkSeparator />
            <dxb:BarSubItem dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportDashboardButton}" Content="{dxdashi:DashboardLocalizationString ActionExportDashboard}" IsVisible="{Binding DashboardViewModel.AllowPrintDashboard}">
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportDashboardPreviewButton}"
                    Command="{Binding DashboardViewModel.ShowPreviewCommand}"
                    Content="{dxdashi:DashboardLocalizationString ActionPrintPreview}"
                    IsVisible="{Binding DashboardViewModel.AllowPrintDashboard}" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportDashboardToPdfButton}"
                    Command="{Binding DashboardViewModel.ExportToPdfCommand}"
                    Content="{dxdashi:DashboardLocalizationString ActionExportToPdf}"
                    IsVisible="{Binding DashboardViewModel.AllowPrintDashboard}" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportDashboardToImageButton}"
                    Command="{Binding DashboardViewModel.ExportToImageCommand}"
                    Content="{dxdashi:DashboardLocalizationString ActionExportToImage}"
                    IsVisible="{Binding DashboardViewModel.AllowPrintDashboard}" />
                <dxb:BarButtonItem
                    dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardItemCaption_ExportDashboardToExcelButton}"
                    Command="{Binding DashboardViewModel.ExportToExcelCommand}"
                    Content="{dxdashi:DashboardLocalizationString ActionExportToExcel}"
                    IsVisible="{Binding DashboardViewModel.AllowPrintDashboard}" />
            </dxb:BarSubItem>
        </dxb:PopupMenu>
    </DataTemplate>



    <DataTemplate x:Key="{dxdasht:LWKey DashboardControl.ParametersTemplate}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <dxprg:PropertyGridControl
                Grid.Row="1"
                Grid.ColumnSpan="2"
                Margin="-14,30,10,30"
                Background="Transparent"
                BorderThickness="0"
                HighlightingMode="None"
                RowPadding="3"
                ScrollViewer.VerticalScrollBarVisibility="Auto"
                SelectedObject="{Binding ItemViewModels}"
                ShowCategories="Hidden"
                ShowGridLines="False"
                ShowMenuButtonInRows="False"
                ShowSearchBox="False"
                ShowToolPanel="False">
                <dxprg:PropertyDefinition
                    dxprg:CollectionDefinition.HideCollectionButton="True"
                    AllowExpanding="Never"
                    IsReadOnly="False"
                    Path="*">
                    <dxprg:PropertyDefinition.HeaderTemplate>
                        <DataTemplate>
                            <TextBlock HorizontalAlignment="Left" Text="{Binding Path=Value.DisplayName}" />
                        </DataTemplate>
                    </dxprg:PropertyDefinition.HeaderTemplate>
                    <dxprg:PropertyDefinition.ContentTemplate>
                        <DataTemplate>
                            <dxprg:CellEditorPresenter Path="Value" />
                        </DataTemplate>
                    </dxprg:PropertyDefinition.ContentTemplate>
                    <dxprg:PropertyDefinition CellTemplateSelector="{StaticResource ParametersControlEditorTemplateSelector}" Path="Value" IsReadOnly="False" PostOnEditValueChanged="True" />
                </dxprg:PropertyDefinition>
            </dxprg:PropertyGridControl>
            <dx:ThemedWindowDialogButton
                Grid.Row="2"
                Width="70"
                Margin="10,0,20,10"
                HorizontalAlignment="Left"
                AllowCloseWindow="False"
                Command="{Binding ResetCommand}"
                Content="{dxdashi:DashboardLocalizationString ButtonReset}" />
            <StackPanel
                Grid.Row="2"
                Grid.Column="1"
                HorizontalAlignment="Right"
                Orientation="Horizontal">
                <dx:ThemedWindowDialogButton
                    Margin="0,0,10,10"
                    Command="{Binding ApplyCommand}"
                    Content="{dxdashi:DashboardLocalizationString ButtonSubmit}"
                    DialogResult="OK"
                    IsDefault="True" />
                <dx:ThemedWindowDialogButton
                    Margin="0,0,10,10"
                    Command="{Binding CancelCommand}"
                    Content="{dxdashi:DashboardLocalizationString ButtonCancel}"
                    DialogResult="Cancel"
                    IsCancel="True" />
            </StackPanel>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey DashboardControl.PrintPreviewOptionsTemplate}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <dxprg:PropertyGridControl
                Grid.Row="1"
                Grid.ColumnSpan="2"
                MinWidth="300"
                MaxHeight="700"
                Margin="-14,30,10,30"
                Background="Transparent"
                BorderThickness="0"
                HighlightingMode="None"
                RowPadding="3"
                ScrollViewer.VerticalScrollBarVisibility="Auto"
                SelectedObject="{Binding Properties}"
                ShowCategories="Hidden"
                ShowGridLines="False"
                ShowMenuButtonInRows="False"
                ShowSearchBox="False"
                ShowToolPanel="False">
                <dxmvvm:Interaction.Behaviors>
                    <dxdashi:StylePropertyGridBehavior Style="{StaticResource RowControl}" />
                </dxmvvm:Interaction.Behaviors>
                <dxprg:PropertyGridControl.Resources>
                    <DataTemplate x:Key="RadioList">
                        <dxe:ListBoxEdit x:Name="PART_Editor" ItemsSource="{Binding StandardValues}" ShowBorder="False">
                            <dxe:ListBoxEdit.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={dxdashi:EnumToDisplayNameConverter}}" />
                                </DataTemplate>
                            </dxe:ListBoxEdit.ItemTemplate>
                            <dxe:ListBoxEdit.StyleSettings>
                                <dxe:RadioListBoxEditStyleSettings />
                            </dxe:ListBoxEdit.StyleSettings>
                        </dxe:ListBoxEdit>
                    </DataTemplate>
                    <DataTemplate x:Key="ComboList">
                        <dxe:ComboBoxEdit
                            x:Name="PART_Editor"
                            MinWidth="150"
                            MaxWidth="150"
                            ApplyItemTemplateToSelectedItem="True"
                            IsTextEditable="False"
                            ItemsSource="{Binding StandardValues}">
                            <dxe:ComboBoxEdit.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={dxdashi:EnumToDisplayNameConverter}}" />
                                </DataTemplate>
                            </dxe:ComboBoxEdit.ItemTemplate>
                        </dxe:ComboBoxEdit>
                    </DataTemplate>
                    <DataTemplate x:Key="Text">
                        <dxe:TextEdit x:Name="PART_Editor" MinWidth="150" MaxWidth="150" />
                    </DataTemplate>
                </dxprg:PropertyGridControl.Resources>
                <dxprg:PropertyDefinition EditorHorizontalAlignment="Right" Path="*" PostOnEditValueChanged="True" />
            </dxprg:PropertyGridControl>
            <dx:ThemedWindowDialogButton
                Grid.Row="2"
                Width="70"
                Margin="10,0,20,10"
                HorizontalAlignment="Left"
                AllowCloseWindow="False"
                Command="{Binding ResetCommand}"
                Content="{dxdashi:DashboardLocalizationString ButtonReset}" />
            <StackPanel
                Grid.Row="2"
                Grid.Column="1"
                HorizontalAlignment="Right"
                Orientation="Horizontal">
                <dx:ThemedWindowDialogButton
                    Margin="0,0,10,10"
                    Command="{Binding ApplyCommand}"
                    Content="{dxdashi:DashboardLocalizationString ButtonSubmit}"
                    DialogResult="OK"
                    IsDefault="True" />
                <dx:ThemedWindowDialogButton
                    Margin="0,0,10,10"
                    Content="{dxdashi:DashboardLocalizationString ButtonCancel}"
                    DialogResult="Cancel"
                    IsCancel="True" />
            </StackPanel>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey DashboardControl.PrintPreviewTemplate}">
        <Grid>
            <dxmvvm:Interaction.Behaviors>
                <dx:DialogService ViewTemplate="{Binding Path=DashboardControl.PrintPreviewOptionsTemplate}">
                    <dx:DialogService.DialogStyle>
                        <Style TargetType="{x:Type dx:ThemedWindow}">
                            <Setter Property="ResizeMode" Value="NoResize" />
                            <Setter Property="SizeToContent" Value="WidthAndHeight" />
                            <Setter Property="ShowIcon" Value="False" />
                        </Style>
                    </dx:DialogService.DialogStyle>
                </dx:DialogService>
            </dxmvvm:Interaction.Behaviors>
            <dxp:DocumentPreviewControl x:Name="PART_DocumentPreviewControl" DocumentSource="{Binding Report}" RequestDocumentCreation="True">
                <dxp:DocumentPreviewControl.CommandProvider>
                    <dxp:DocumentCommandProvider>
                        <dxp:DocumentCommandProvider.RibbonActions>
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.Export}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.ExportCsv}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.ExportDocx}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.ExportHtm}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.ExportMht}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.ExportTxt}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.ExportXls}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.ExportXlsx}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.ExportRtf}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.SendCsv}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.SendDocx}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.SendMht}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.SendTxt}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.SendXls}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.SendXlsx}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.SendRtf}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.Watermark}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.Parameters}" />
                            <dxb:RemoveAction ElementName="{x:Static dxpbars:DefaultPreviewBarItemNames.DocumentMapShowOptions}" />
                            <dxb:InsertAction ContainerName="{x:Static dxpbars:DefaultPreviewBarItemNames.PrintGroup}">
                                <dxb:InsertAction.Element>
                                    <dxb:BarButtonItem
                                        Command="{Binding Path=(dxp:DocumentPreviewControl.ActualViewer).DataContext.ShowOptionsCommand, RelativeSource={RelativeSource Self}}"
                                        Content="{Binding Path=(dxp:DocumentPreviewControl.ActualViewer).DataContext.Caption, RelativeSource={RelativeSource Self}}"
                                        Glyph="{dx:DXImage Image=Customization_16x16.png}"
                                        LargeGlyph="{dx:DXImage Image=Customization_32x32.png}" />
                                </dxb:InsertAction.Element>
                            </dxb:InsertAction>
                        </dxp:DocumentCommandProvider.RibbonActions>
                    </dxp:DocumentCommandProvider>
                </dxp:DocumentPreviewControl.CommandProvider>
            </dxp:DocumentPreviewControl>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{dxdasht:LWKey DashboardControl.ExportTemplate}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <dxprg:PropertyGridControl
                Grid.Row="1"
                Grid.ColumnSpan="2"
                MinWidth="300"
                MaxHeight="700"
                Margin="-14,30,10,30"
                Background="Transparent"
                BorderThickness="0"
                HighlightingMode="None"
                RowPadding="3"
                ScrollViewer.VerticalScrollBarVisibility="Auto"
                SelectedObject="{Binding Properties}"
                ShowCategories="Hidden"
                ShowGridLines="False"
                ShowMenuButtonInRows="False"
                ShowSearchBox="False"
                ShowToolPanel="False">
                <dxmvvm:Interaction.Behaviors>
                    <dxdashi:StylePropertyGridBehavior Style="{StaticResource RowControl}" />
                </dxmvvm:Interaction.Behaviors>
                <dxprg:PropertyGridControl.Resources>
                    <DataTemplate x:Key="Numeric">
                        <ContentControl>
                            <dxprg:PropertyDefinition>
                                <dxprg:PropertyDefinition.EditSettings>
                                    <dxe:SpinEditSettings MinValue="1" />
                                </dxprg:PropertyDefinition.EditSettings>
                            </dxprg:PropertyDefinition>
                        </ContentControl>
                    </DataTemplate>
                    <DataTemplate x:Key="RadioList">
                        <dxe:ListBoxEdit x:Name="PART_Editor" ItemsSource="{Binding StandardValues}" ShowBorder="False">
                            <dxe:ListBoxEdit.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={dxdashi:EnumToDisplayNameConverter}}" />
                                </DataTemplate>
                            </dxe:ListBoxEdit.ItemTemplate>
                            <dxe:ListBoxEdit.StyleSettings>
                                <dxe:RadioListBoxEditStyleSettings />
                            </dxe:ListBoxEdit.StyleSettings>
                        </dxe:ListBoxEdit>
                    </DataTemplate>
                    <DataTemplate x:Key="ComboList">
                        <dxe:ComboBoxEdit
                            x:Name="PART_Editor"
                            MinWidth="150"
                            MaxWidth="150"
                            ApplyItemTemplateToSelectedItem="True"
                            IsTextEditable="False"
                            ItemsSource="{Binding StandardValues}">
                            <dxe:ComboBoxEdit.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={dxdashi:EnumToDisplayNameConverter}}" />
                                </DataTemplate>
                            </dxe:ComboBoxEdit.ItemTemplate>
                        </dxe:ComboBoxEdit>
                    </DataTemplate>
                    <DataTemplate x:Key="Text">
                        <dxe:TextEdit x:Name="PART_Editor" MinWidth="150" MaxWidth="150" />
                    </DataTemplate>
                </dxprg:PropertyGridControl.Resources>
                <dxprg:PropertyDefinition EditorHorizontalAlignment="Right" Path="*" PostOnEditValueChanged="True" />
            </dxprg:PropertyGridControl>
            <dx:ThemedWindowDialogButton
                Grid.Row="2"
                Width="70"
                Margin="10,0,20,10"
                HorizontalAlignment="Left"
                AllowCloseWindow="False"
                Command="{Binding ResetCommand}"
                Content="{dxdashi:DashboardLocalizationString ButtonReset}" />
            <StackPanel
                Grid.Row="2"
                Grid.Column="1"
                HorizontalAlignment="Right"
                Orientation="Horizontal">
                <dx:ThemedWindowDialogButton
                    Margin="0,0,10,10"
                    Command="{Binding ApplyCommand}"
                    Content="{dxdashi:DashboardLocalizationString ButtonExport}"
                    DialogResult="OK"
                    IsDefault="True" />
                <dx:ThemedWindowDialogButton
                    Margin="0,0,10,10"
                    Content="{dxdashi:DashboardLocalizationString ButtonCancel}"
                    DialogResult="Cancel"
                    IsCancel="True" />
            </StackPanel>
        </Grid>
    </DataTemplate>

    <Style x:Key="{dxdasht:LWKey DashboardControl.ExportDialogStyle}" TargetType="{x:Type dx:ThemedWindow}">
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="ShowIcon" Value="False" />
    </Style>
    <Style x:Key="{dxdasht:LWKey DashboardControl.ParametersDialogStyle}" TargetType="{x:Type dx:ThemedWindow}">
        <Setter Property="ResizeMode" Value="CanResize" />
        <Setter Property="SizeToContent" Value="Height" />
        <Setter Property="ShowIcon" Value="False" />
        <Setter Property="MaxWidth" Value="1000" />
        <Setter Property="MinWidth" Value="450" />
        <Setter Property="Width" Value="450" />
        <Setter Property="MaxHeight" Value="624" />
        <Setter Property="MinHeight" Value="170" />
    </Style>

    <ControlTemplate x:Key="{dxdasht:LWKey DashboardControl.Template}" TargetType="dxdash:DashboardControlBase">
        <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid x:Name="DashboardControlGrid">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid
                    HorizontalAlignment="Left"
                    Width="{Binding ElementName=DashboardControlGrid, Path=ActualWidth}"
                    MaxWidth="{Binding DashboardViewModel.TitleWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Image
                        Name="ErrorImage"
                        Source="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Error.svg'}"
                        Grid.Column="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        Width="24"
                        Height="24"
                        Margin="12,12,0,0"
                        Visibility="{Binding DashboardViewModel.DashboardError.HasErrors, FallbackValue=Hidden, RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:BooleanToVisibilityConverter}}"/>
                    <dxdashi:DashboardTitlePresenter
                        x:Name="DashboardTitlePresenter"
                        Grid.Column="1"
                        Style="{TemplateBinding TitleStyle}"
                        Visibility="{Binding ShowTitle, RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:BooleanToVisibilityConverter}}"
                        HorizontalAlignment="Stretch"/>
                </Grid>
                <ScrollViewer
                    x:Name="DashboardScrollViewer"
                    Grid.Row="1"
                    Grid.ColumnSpan="2"
                    Margin="{TemplateBinding LayoutMargin}"
                    HorizontalScrollBarVisibility="{Binding DashboardViewModel.HorizontalScrollBarVisibilityMode, RelativeSource={RelativeSource TemplatedParent}}"
                    VerticalScrollBarVisibility="{Binding DashboardViewModel.VerticalScrollBarVisibilityMode, RelativeSource={RelativeSource TemplatedParent}}">
                    <dxdashi:DashboardLayoutManager
                        x:Name="DashboardLayoutManager"
                        Width="{Binding DashboardViewModel.ScrollableWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                        Height="{Binding DashboardViewModel.ScrollableHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                        HorizontalAlignment="{Binding DashboardViewModel.HorizontalAlignmentMode, RelativeSource={RelativeSource TemplatedParent}}"
                        VerticalAlignment="{Binding DashboardViewModel.VerticalAlignmentMode, RelativeSource={RelativeSource TemplatedParent}}"
                        dx:DXSerializer.Enabled="False"
                        AllowCustomization="False"
                        Background="Transparent"
                        Foreground="{TemplateBinding Foreground}">
                        <dxmvvm:Interaction.Behaviors>
                            <dxdashi:DockLayoutManagerDashboardBehavior
                                BoundImageItemStyle="{Binding BoundImageItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                BoundImageItemStyleSelector="{Binding BoundImageItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                CardItemStyle="{Binding CardItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                CardItemStyleSelector="{Binding CardItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                ChartItemStyle="{Binding ChartItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                ChartItemStyleSelector="{Binding ChartItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                ComboBoxItemStyle="{Binding ComboBoxItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                ComboBoxItemStyleSelector="{Binding ComboBoxItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                CustomItemStyle="{Binding CustomItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                CustomItemStyleSelector="{Binding CustomItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                DashboardItemStyle="{Binding DashboardItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                DashboardItemStyleSelector="{Binding DashboardItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                DashboardViewModel="{Binding DashboardViewModel, RelativeSource={RelativeSource TemplatedParent}}"
                                DateFilterItemStyle="{Binding DateFilterItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                DateFilterItemStyleSelector="{Binding DateFilterItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                GaugeItemStyle="{Binding GaugeItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                GaugeItemStyleSelector="{Binding GaugeItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                GridItemStyle="{Binding GridItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                GridItemStyleSelector="{Binding GridItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                ImageItemStyle="{Binding ImageItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                ImageItemStyleSelector="{Binding ImageItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                ItemGroupStyle="{Binding ItemGroupStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                ItemGroupStyleSelector="{Binding ItemGroupStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                ListBoxItemStyle="{Binding ListBoxItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                ListBoxItemStyleSelector="{Binding ListBoxItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                MapItemStyle="{Binding MapItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                MapItemStyleSelector="{Binding MapItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                PieItemStyle="{Binding PieItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                PieItemStyleSelector="{Binding PieItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                PivotItemStyle="{Binding PivotItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                PivotItemStyleSelector="{Binding PivotItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                RangeItemStyle="{Binding RangeItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                RangeItemStyleSelector="{Binding RangeItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                TextBoxItemStyle="{Binding TextBoxItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                TextBoxItemStyleSelector="{Binding TextBoxItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                TreeViewItemStyle="{Binding TreeViewItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                TreeViewItemStyleSelector="{Binding TreeViewItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                TreemapItemStyle="{Binding TreemapItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                TreemapItemStyleSelector="{Binding TreemapItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}" />
                        </dxmvvm:Interaction.Behaviors>
                    </dxdashi:DashboardLayoutManager>
                </ScrollViewer>
                <dxdashi:DashboardLayoutManager
                    x:Name="FullscreenDashboardLayoutManager"
                    Grid.Row="1"
                    Grid.ColumnSpan="2"
                    Margin="12"
                    dx:DXSerializer.Enabled="False"
                    AllowCustomization="False"
                    Background="{TemplateBinding Background}"
                    Foreground="{TemplateBinding Foreground}"
                    Visibility="{TemplateBinding ActualMaximizedDashboardItemVisibility}">
                    <dxmvvm:Interaction.Behaviors>
                        <dxdashi:DockLayoutManagerDashboardBehavior
                            BoundImageItemStyle="{Binding BoundImageItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            BoundImageItemStyleSelector="{Binding BoundImageItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            CardItemStyle="{Binding CardItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            CardItemStyleSelector="{Binding CardItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            ChartItemStyle="{Binding ChartItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            ChartItemStyleSelector="{Binding ChartItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            ComboBoxItemStyle="{Binding ComboBoxItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            ComboBoxItemStyleSelector="{Binding ComboBoxItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            DashboardItemStyle="{Binding DashboardItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            DashboardItemStyleSelector="{Binding DashboardItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            DashboardViewModel="{Binding FullscreenDashboardViewModel, RelativeSource={RelativeSource TemplatedParent}}"
                            DateFilterItemStyle="{Binding DateFilterItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            DateFilterItemStyleSelector="{Binding DateFilterItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            GaugeItemStyle="{Binding GaugeItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            GaugeItemStyleSelector="{Binding GaugeItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            GridItemStyle="{Binding GridItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            GridItemStyleSelector="{Binding GridItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            ImageItemStyle="{Binding ImageItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            ImageItemStyleSelector="{Binding ImageItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            ItemGroupStyle="{Binding ItemGroupStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            ItemGroupStyleSelector="{Binding ItemGroupStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            ListBoxItemStyle="{Binding ListBoxItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            ListBoxItemStyleSelector="{Binding ListBoxItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            MapItemStyle="{Binding MapItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            MapItemStyleSelector="{Binding MapItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            PieItemStyle="{Binding PieItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            PieItemStyleSelector="{Binding PieItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            PivotItemStyle="{Binding PivotItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            PivotItemStyleSelector="{Binding PivotItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            RangeItemStyle="{Binding RangeItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            RangeItemStyleSelector="{Binding RangeItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            TextBoxItemStyle="{Binding TextBoxItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            TextBoxItemStyleSelector="{Binding TextBoxItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            TreeViewItemStyle="{Binding TreeViewItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            TreeViewItemStyleSelector="{Binding TreeViewItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}"
                            TreemapItemStyle="{Binding TreemapItemStyle, RelativeSource={RelativeSource TemplatedParent}}"
                            TreemapItemStyleSelector="{Binding TreemapItemStyleSelector, RelativeSource={RelativeSource TemplatedParent}}" />
                    </dxmvvm:Interaction.Behaviors>
                </dxdashi:DashboardLayoutManager>
                <dxe:FlyoutControl
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Content="{Binding DashboardViewModel.DashboardError.ErrorMessage, RelativeSource={RelativeSource TemplatedParent}}"
                    IsOpen="{Binding DashboardViewModel.DashboardError.HasErrors, RelativeSource={RelativeSource TemplatedParent}}"
                    OpenOnHover="True"
                    PlacementTarget="{Binding ElementName=ErrorImage}">
                    <dxe:FlyoutControl.Settings>
                        <dxe:FlyoutSettings IndicatorHorizontalAlignment="Center" ShowIndicator="True" />
                    </dxe:FlyoutControl.Settings>
                    <dxe:FlyoutControl.ContentTemplate>
                        <DataTemplate>
                            <dxe:TextEdit
                                MinWidth="200"
                                MaxWidth="400"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                FontSize="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionFontSize}}"
                                FontWeight="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionFontWeight}}"
                                Foreground="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionForeground}}"
                                IsReadOnly="True"
                                Text="{Binding ., Mode=OneWay}"
                                TextWrapping="Wrap" />
                        </DataTemplate>
                    </dxe:FlyoutControl.ContentTemplate>
                </dxe:FlyoutControl>
            </Grid>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <Trigger Property="ActualMaximizedDashboardItemVisibility" Value="Visible">
                <Setter TargetName="DashboardTitlePresenter" Property="DashboardViewModel" Value="{Binding FullscreenDashboardViewModel, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="ActualMaximizedDashboardItemVisibility" Value="Collapsed">
                <Setter TargetName="DashboardTitlePresenter" Property="DashboardViewModel" Value="{Binding DashboardViewModel, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{dxdasht:LWKey DashboardControl.TitleStyle}" TargetType="dxdashi:DashboardTitlePresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxdashi:DashboardTitlePresenter">
                    <DockPanel MinHeight="40" MaxHeight="50" Visibility="{Binding ActualContent.Visibility, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                        <dxmvvm:Interaction.Behaviors>
                            <dxb:ControllerBehavior ExecutionMode="OnEvent">
                                <dxb:ControllerBehavior.Triggers>
                                    <dxb:ActionTrigger EventName="Loaded" ExecuteOnce="True" />
                                </dxb:ControllerBehavior.Triggers>
                                <dxb:ActionGroup ActionsTemplate="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type dxdash:DashboardControlBase}}, Path=TitleCustomizationsTemplate}" />
                            </dxb:ControllerBehavior>
                        </dxmvvm:Interaction.Behaviors>
                        <dxe:FlyoutControl
                            Content="{Binding ActualContent.MasterFilterValues, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                            OpenOnHover="True"
                            PlacementTarget="{Binding ElementName=FilterIcon}"
                            VerticalOffset="20">
                            <dxe:FlyoutControl.ContentTemplate>
                                <DataTemplate>
                                    <ItemsControl ItemsSource="{Binding}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <dxdashi:SplitPanel ChildSpacing="8" Orientation="Vertical" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <dxdashi:SplitPanel ChildSpacing="4" Orientation="Vertical">
                                                    <ContentPresenter Content="{Binding Name}" TextElement.FontWeight="Bold" />
                                                    <ItemsControl ItemsSource="{Binding Values}">
                                                        <ItemsControl.ItemsPanel>
                                                            <ItemsPanelTemplate>
                                                                <dxdashi:SplitPanel ChildSpacing="4" Orientation="Vertical" />
                                                            </ItemsPanelTemplate>
                                                        </ItemsControl.ItemsPanel>
                                                    </ItemsControl>
                                                </dxdashi:SplitPanel>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </DataTemplate>
                            </dxe:FlyoutControl.ContentTemplate>
                        </dxe:FlyoutControl>
                        <dxb:ToolBarControl
                            Margin="12,12,12,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardTitle_Toolbar}"
                            AllowCustomizationMenu="False"
                            AllowQuickCustomization="False"
                            DataContext="{TemplateBinding ActualContent}"
                            DockPanel.Dock="Right"
                            Focusable="False"
                            ShowBackground="False"
                            ShowDragWidget="False">
                            <dxb:BarSplitButtonItem
                                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardTitle_ExportToButton}"
                                ActAsDropDown="True"
                                Content="{dxdashi:DashboardLocalizationString ActionExportTo}"
                                Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Export.svg'}"
                                IsVisible="{Binding DashboardViewModel.AllowPrintDashboard}"
                                ToolTip="{dxdashi:DashboardLocalizationString ActionExportTo}"
                                ToolTipService.ShowOnDisabled="True">
                                <dxb:PopupMenu dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardTitle_ExportToPopupMenu}" dxb:BarManager.ShowGlyphsInPopupMenus="False">
                                    <dxb:BarButtonItem dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardTitle_ExportPreviewButton}" Command="{Binding DashboardViewModel.ShowPreviewCommand}" Content="{dxdashi:DashboardLocalizationString ActionPrintPreview}" />
                                    <dxb:BarButtonItem dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardTitle_ExportToPdfButton}" Command="{Binding DashboardViewModel.ExportToPdfCommand}" Content="{dxdashi:DashboardLocalizationString ActionExportToPdf}" />
                                    <dxb:BarButtonItem dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardTitle_ExportToImageButton}" Command="{Binding DashboardViewModel.ExportToImageCommand}" Content="{dxdashi:DashboardLocalizationString ActionExportToImage}" />
                                    <dxb:BarButtonItem dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardTitle_ExportToExcelButton}" Command="{Binding DashboardViewModel.ExportToExcelCommand}" Content="{dxdashi:DashboardLocalizationString ActionExportToExcel}" />
                                </dxb:PopupMenu>
                            </dxb:BarSplitButtonItem>
                            <dxb:BarButtonItem
                                dx:XamlHelper.Name="{x:Static Member=dxdasht:DefaultBarItemNames.DashboardTitle_ParametersButton}"
                                Command="{Binding DashboardViewModel.ParametersViewModel.ShowParametersCommand}"
                                Content="{dxdashi:DashboardLocalizationString ExportParameters}"
                                Glyph="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Parameters.svg'}"
                                IsVisible="{Binding DashboardViewModel.ParametersViewModel.IsParametersButtonVisible}"
                                ToolTip="{dxdashi:DashboardLocalizationString ExportParameters}"
                                ToolTipService.ShowOnDisabled="True" />
                        </dxb:ToolBarControl>
                        <dx:DXBorder
                            Margin="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            DockPanel.Dock="Left">
                            <Grid Margin="12,12,12,0" HorizontalAlignment="{Binding ActualContent.TitleAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <dx:DXImage
                                    Margin="0,0,4,0"
                                    VerticalAlignment="Center"
                                    Source="{Binding ActualContent.Image, RelativeSource={RelativeSource TemplatedParent}}"
                                    Stretch="Uniform" />
                                <ContentPresenter
                                    Grid.Column="1"
                                    Margin="0,0,0,0"
                                    VerticalAlignment="Bottom"
                                    Content="{Binding ActualContent.TitleContent, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                    ContentTemplate="{Binding ActualContent.TitleContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                    ContentTemplateSelector="{Binding ActualContent.TitleContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                    TextElement.FontSize="{DynamicResource {dxdasht:LWKey DashboardControl.TitleFontSize}}"
                                    TextElement.FontWeight="{DynamicResource {dxdasht:LWKey DashboardControl.TitleFontWeight}}"
                                    TextElement.Foreground="{DynamicResource {dxdasht:LWKey DashboardControl.TitleForeground}}" />
                                <ContentPresenter
                                    Grid.Column="2"
                                    Margin="8,0,0,0"
                                    VerticalAlignment="Bottom"
                                    Content="{Binding ActualContent.MasterFilterValues, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                    Opacity="0.75"
                                    TextElement.FontSize="{DynamicResource {dxdasht:LWKey DashboardControl.SubTitleFontSize}}"
                                    TextElement.FontWeight="{DynamicResource {dxdasht:LWKey DashboardControl.SubTitleFontWeight}}"
                                    TextElement.Foreground="{DynamicResource {dxdasht:LWKey DashboardControl.SubTitleForeground}}"
                                    Visibility="{Binding ActualContent.IsFilterStringVisible, RelativeSource={RelativeSource TemplatedParent}}" />
                                <dx:DXImage
                                    x:Name="FilterIcon"
                                    Grid.Column="3"
                                    Margin="4,0,0,0"
                                    VerticalAlignment="Top"
                                    dxb:ImageColorizer.Color="{DynamicResource {dxdasht:LWKey DashboardControl.MasterFilterIconColor}}"
                                    dxb:ImageColorizer.IsEnabled="True"
                                    Source="{dx:SvgImageSource Uri='/DevExpress.Xpf.Dashboard.v24.1;component/Images/Filter.svg'}"
                                    Stretch="None"
                                    Visibility="{Binding ActualContent.IsFilterIconVisible, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </dx:DXBorder>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:LWKey DashboardControl.DataInspectorTemplate}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <StackPanel
                Grid.Row="0"
                Margin="12,12,12,0"
                HorizontalAlignment="Left"
                Orientation="Horizontal"
                Visibility="{Binding TypeGroupVisibility}">
                <TextBlock Margin="0,0,10,0" VerticalAlignment="Center" Text="{dxdashi:DashboardLocalizationString InspectedData}" />
                <dxe:ListBoxEdit
                    ItemsSource="{Binding DataTypeItems}"
                    SelectedIndex="0"
                    SelectedItem="{Binding SelectedType}"
                    ShowBorder="False">
                    <dxe:ListBoxEdit.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </dxe:ListBoxEdit.ItemsPanel>
                    <dxe:ListBoxEdit.StyleSettings>
                        <dxe:RadioListBoxEditStyleSettings />
                    </dxe:ListBoxEdit.StyleSettings>
                    <dxmvvm:Interaction.Behaviors>
                        <dxmvvm:EventToCommand
                            Command="{Binding OnSelectedIndexChangedCommand}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="SelectedIndexChanged"
                            PassEventArgsToCommand="True" />
                    </dxmvvm:Interaction.Behaviors>
                </dxe:ListBoxEdit>
            </StackPanel>
            <dxg:GridControl
                Grid.Row="1"
                Margin="12,12,12,0"
                AutoGenerateColumns="AddNew"
                ItemsSource="{Binding RawData}"
                Visibility="{Binding RawDataVisibility}">
                <dxg:GridControl.View>
                    <dxg:TableView
                        Name="rawGridView"
                        AutoWidth="True"
                        ShowColumnHeaders="{Binding ShowRawDataColumnHeaders}"
                        ShowGroupPanel="False"
                        VerticalScrollbarVisibility="Auto" />
                </dxg:GridControl.View>
            </dxg:GridControl>
            <TextBlock
                Grid.Row="1"
                Margin="0,12,0,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Text="{dxdashi:DashboardLocalizationString OLAPUnavailableRawData}"
                Visibility="{Binding OlapErrorMessageVisibility}" />
            <dxg:GridControl
                Grid.Row="1"
                Margin="12,12,12,0"
                AutoGenerateColumns="AddNew"
                ItemsSource="{Binding AggregatedData}"
                Visibility="{Binding AggregatedDataVisibility}">
                <dxg:GridControl.View>
                    <dxg:TableView
                        Name="aggregatedGridView"
                        AutoWidth="True"
                        ShowGroupPanel="False"
                        VerticalScrollbarVisibility="Auto" />
                </dxg:GridControl.View>
                <dxmvvm:Interaction.Behaviors>
                    <dxmvvm:EventToCommand Command="{Binding OnCustomColumnDisplayTextCommand}" EventName="CustomColumnDisplayText" PassEventArgsToCommand="True" />
                </dxmvvm:Interaction.Behaviors>
            </dxg:GridControl>
            <dx:ThemedWindowDialogButton
                Grid.Row="2"
                Width="70"
                Margin="0,12,12,12"
                HorizontalAlignment="Right"
                AllowCloseWindow="True"
                Content="{dxdashi:DashboardLocalizationString DataInspectorButtonClose}" />
            <dx:ThemedWindowDialogButton
                Grid.Row="2"
                Width="110"
                Margin="12,12,0,12"
                HorizontalAlignment="Left"
                AllowCloseWindow="False"
                Command="{Binding Commands.ShowRibbonPrintPreviewDialog, ElementName=aggregatedGridView}"
                Content="{dxdashi:DashboardLocalizationString ActionPrintPreview}"
                Visibility="{Binding AggregatedDataVisibility}" />
            <dx:ThemedWindowDialogButton
                Grid.Row="2"
                Width="110"
                Margin="12,12,0,12"
                HorizontalAlignment="Left"
                AllowCloseWindow="False"
                Command="{Binding Commands.ShowRibbonPrintPreviewDialog, ElementName=rawGridView}"
                Content="{dxdashi:DashboardLocalizationString ActionPrintPreview}"
                Visibility="{Binding RawDataVisibility}" />
        </Grid>
    </DataTemplate>
    <Style x:Key="{dxdasht:LWKey DashboardControl.DataInspectorStyle}" TargetType="{x:Type dx:ThemedWindow}">
        <Setter Property="ResizeMode" Value="CanResize" />
        <Setter Property="SizeToContent" Value="Manual" />
        <Setter Property="ShowIcon" Value="False" />
        <Setter Property="MinWidth" Value="300" />
        <Setter Property="MinHeight" Value="300" />
        <Setter Property="Height" Value="520" />
        <Setter Property="Width" Value="800" />
        <Setter Property="ShowInTaskbar" Value="False" />
    </Style>

    <DataTemplate x:Key="DashboardLayoutGroupControlBoxThemeKey">
        <ContentPresenter
            Name="DashboardLayoutGroupActionButtons"
            HorizontalAlignment="Right"
            Content="{Binding}"
            ContentTemplate="{StaticResource ElementActionButtons}" />
    </DataTemplate>

    <DataTemplate x:Key="DashboardLayoutGroupThemeKey">
        <!-- <dx:DXBorder TextBlock.Foreground="Red ... > - for theming -->
        <Grid Margin="4,2" Visibility="{Binding ShowCaption, Converter={dxmvvm:BooleanToVisibilityConverter}}">
            <ContentPresenter
                x:Name="DashboardLayoutItemCaption"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Content="{Binding Caption}"
                TextBlock.FontSize="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionFontSize}}"
                TextBlock.FontWeight="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionFontWeight}}"
                ToolTip="{Binding}">
                <ContentPresenter.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="DashboardLayoutGroupTabCaptionThemeKey">
        <Grid Margin="4,2">
            <ContentPresenter
                x:Name="DashboardLayoutItemCaption"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Content="{Binding Caption}"
                TextBlock.FontSize="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionFontSize}}"
                TextBlock.FontWeight="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionFontWeight}}"
                ToolTip="{Binding}">
                <ContentPresenter.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxdasht:LWKey DashboardLayoutItem.CaptionTemplate}">
        <dx:DXBorder Background="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionBackground}}">
            <Grid Margin="4,2" Visibility="{Binding ShowCaption, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter
                    VerticalAlignment="Center"
                    Content="{Binding Caption}"
                    TextBlock.FontSize="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionFontSize}}"
                    TextBlock.FontWeight="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionFontWeight}}"
                    TextBlock.Foreground="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionForeground}}"
                    ToolTip="{Binding}">
                    <ContentPresenter.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                        </Style>
                    </ContentPresenter.Resources>
                </ContentPresenter>
                <ContentPresenter Grid.Column="1" Content="{Binding}" ContentTemplate="{StaticResource ElementActionButtons}" />
            </Grid>
        </dx:DXBorder>
    </DataTemplate>
    <ControlTemplate x:Key="{dxdasht:LWKey DashboardLayoutItem.Template}" TargetType="dxdash:DashboardLayoutItem">
        <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <ContentPresenter x:Name="DashboardLayoutItemCaption" ContentSource="Caption" />
                <ContentPresenter Grid.Row="1" Margin="{TemplateBinding Padding}" ContentSource="Content" />
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>

    <Style x:Key="WaitIndicatorPathStyle" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="F1 M 16.1,8.09999C 16.9284,8.09999 17.6,8.77157 17.6,9.59999C 17.6,10.4284 16.9284,11.1 16.1,11.1C 15.2716,11.1 14.6,10.4284 14.6,9.59999C 14.6,8.77157 15.2716,8.09999 16.1,8.09999 Z M 3.1,8.09999C 3.92843,8.09999 4.6,8.77157 4.6,9.59999C 4.6,10.4284 3.92843,11.1 3.1,11.1C 2.27157,11.1 1.6,10.4284 1.6,9.59999C 1.6,8.77157 2.27157,8.09999 3.1,8.09999 Z M 11.1,16.1C 11.1,16.9284 10.4284,17.6 9.6,17.6C 8.77157,17.6 8.1,16.9284 8.1,16.1C 8.1,15.2716 8.77157,14.6 9.6,14.6C 10.4284,14.6 11.1,15.2716 11.1,16.1 Z M 11.1,3.1C 11.1,3.92843 10.4284,4.6 9.6,4.6C 8.77157,4.6 8.1,3.92843 8.1,3.1C 8.1,2.27157 8.77157,1.6 9.6,1.6C 10.4284,1.6 11.1,2.27157 11.1,3.1 Z M 15.2835,13.0925C 15.8738,13.6738 15.881,14.6235 15.2997,15.2137C 14.7183,15.8039 13.7686,15.8112 13.1784,15.2298C 12.5882,14.6485 12.581,13.6988 13.1623,13.1086C 13.7436,12.5184 14.6933,12.5112 15.2835,13.0925 Z M 6.02161,3.97017C 6.61182,4.55149 6.61904,5.50121 6.03772,6.09142C 5.4564,6.68164 4.50668,6.68886 3.91646,6.10754C 3.32624,5.52621 3.31903,4.57649 3.90035,3.98628C 4.48167,3.39606 5.43139,3.38884 6.02161,3.97017 Z M 6.10753,15.2835C 5.52621,15.8738 4.57649,15.881 3.98627,15.2997C 3.39606,14.7183 3.38884,13.7686 3.97016,13.1784C 4.55148,12.5882 5.5012,12.581 6.09142,13.1623C 6.68164,13.7436 6.68885,14.6933 6.10753,15.2835 Z M 15.2298,6.02161C 14.6485,6.61183 13.6988,6.61904 13.1086,6.03772C 12.5184,5.4564 12.5111,4.50668 13.0925,3.91646C 13.6738,3.32625 14.6235,3.31903 15.2137,3.90035C 15.8039,4.48167 15.8112,5.43139 15.2298,6.02161 Z " />
        <Setter Property="Fill" Value="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.WaitIndicatorForeground}}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Stretch" Value="Fill" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <ControlTemplate x:Key="WaitIndicatorTemplate" TargetType="{x:Type ProgressBar}">
        <Grid x:Name="Root">
            <Path
                x:Name="Content"
                Width="{TemplateBinding Width}"
                Height="{TemplateBinding Height}"
                Margin="{TemplateBinding Margin}"
                RenderTransformOrigin="0.5,0.5"
                Style="{StaticResource WaitIndicatorPathStyle}">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform />
                        <SkewTransform />
                        <RotateTransform Angle="0" />
                        <TranslateTransform />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Determinate" />
                    <VisualState x:Name="Indeterminate">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="Content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="359" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Dashboard\DevExpress.Xpf.Dashboard\Themes\Generic\Generic.xaml-->


    <!--#region DEFAULT STYLES-->

    <Style x:Key="DeltaValuePresenter.DefaultStyleBase" TargetType="dxdashi:DeltaValuePresenter">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {dxdasht:LWKey DeltaValuePresenter.Template}}" />
        <Setter Property="GoodForeground" Value="{DynamicResource {dxdasht:LWKey DeltaValuePresenter.GoodForeground}}" />
        <Setter Property="BadForeground" Value="{DynamicResource {dxdasht:LWKey DeltaValuePresenter.BadForeground}}" />
        <Setter Property="WarningForeground" Value="{DynamicResource {dxdasht:LWKey DeltaValuePresenter.WarningForeground}}" />
        <Setter Property="NeutralForeground" Value="{DynamicResource {dxdasht:LWKey DeltaValuePresenter.NeutralForeground}}" />
    </Style>
    <Style x:Key="CardItem.DefaultStyleBase" TargetType="{x:Type dxdashi:CardItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{StaticResource ItemTemplate}" />
        <Setter Property="Background" Value="{DynamicResource {dxdasht:LWKey CardItem.CardItemBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxdasht:LWKey CardItem.CardItemBorderBrush}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="16" />
    </Style>
    <Style x:Key="PiePointPresenter.DefaultStyleBase" TargetType="dxdashi:PiePointPresenter">
        <Setter Property="Template" Value="{DynamicResource {dxdasht:LWKey PieItem.PiePointPresenterTemplate}}" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="DashboardControlBase.DefaultStyleBase" TargetType="dxdash:DashboardControlBase">
        <Setter Property="dx:ScrollBarExtensions.ScrollBarMode" Value="TouchOverlap" />
        <Setter Property="TitleStyle" Value="{DynamicResource {dxdasht:LWKey DashboardControl.TitleStyle}}" />
        <Setter Property="Template" Value="{DynamicResource {dxdasht:LWKey DashboardControl.Template}}" />
        <Setter Property="ParametersTemplate" Value="{DynamicResource {dxdasht:LWKey DashboardControl.ParametersTemplate}}" />
        <Setter Property="ParametersDialogStyle" Value="{DynamicResource {dxdasht:LWKey DashboardControl.ParametersDialogStyle}}" />
        <Setter Property="ExportTemplate" Value="{DynamicResource {dxdasht:LWKey DashboardControl.ExportTemplate}}" />
        <Setter Property="ExportDialogStyle" Value="{DynamicResource {dxdasht:LWKey DashboardControl.ExportDialogStyle}}" />
        <Setter Property="PrintPreviewOptionsTemplate" Value="{DynamicResource {dxdasht:LWKey DashboardControl.PrintPreviewOptionsTemplate}}" />
        <Setter Property="DataInspectorTemplate" Value="{DynamicResource {dxdasht:LWKey DashboardControl.DataInspectorTemplate}}" />
        <Setter Property="DataInspectorStyle" Value="{DynamicResource {dxdasht:LWKey DashboardControl.DataInspectorStyle}}" />
        <Setter Property="Background" Value="{DynamicResource {dxdasht:LWKey DashboardControl.Background}}" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="DashboardLayoutGroup.DefaultStyleBase" BasedOn="{dx:TargetStaticResource LayoutGroup.DefaultStyleBase, TargetDictionary={dxi:ThemeResourceDictionary Path='Docking/Generic.xaml'}}" TargetType="dxdash:DashboardLayoutGroup">
        <Setter Property="dx:DXSerializer.Enabled" Value="False" />
        <Setter Property="ItemHeight" Value="{Binding ItemHeight, Mode=TwoWay}" />
        <Setter Property="ItemWidth" Value="{Binding ItemWidth, Mode=TwoWay}" />
        <Setter Property="LastChildFill" Value="True" />
        <Setter Property="AllowSplitters" Value="True" />
        <Setter Property="LayoutItemInterval" Value="4" />
        <Setter Property="AllowContextMenu" Value="False" />
        <Setter Property="ControlBoxContent" Value="{Binding}" />
        <Setter Property="ControlBoxContentTemplate" Value="{StaticResource DashboardLayoutGroupControlBoxThemeKey}" />
        <Setter Property="CaptionTemplate" Value="{StaticResource DashboardLayoutGroupThemeKey}" />
        <Setter Property="TabCaptionTemplate" Value="{StaticResource DashboardLayoutGroupTabCaptionThemeKey}" />
        <Setter Property="ShowCaption" Value="{Binding ShowCaption}" />
        <Setter Property="GroupBorderStyle" Value="{Binding GroupBorderStyle}" />
        <Setter Property="ShowTabHeaders" Value="{Binding ShowTabHeaders}" />
        <Setter Property="TabContentCacheMode" Value="{Binding TabContentCacheMode}" />
        <Setter Property="IsSelectedItem" Value="{Binding IsSelectedItem, Mode=TwoWay}" />
        <Setter Property="TabHeaderLayoutType" Value="Scroll" />
        <Setter Property="ShowScrollNextButton" Value="False" />
        <Setter Property="ShowScrollPrevButton" Value="False" />
        <Setter Property="AutoScrollOnOverflow" Value="PartiallyVisibleItem" />
        <Setter Property="Caption" Value="{Binding}" />
        <Setter Property="CustomizationCaption" Value="{Binding Caption}" />
        <Setter Property="ContextMenuTemplate" Value="{StaticResource ElementPopupMenu}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdashi:LayoutItemProviderService UnregisterOnUnloaded="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DashboardLayoutItem.DefaultStyleBase" TargetType="dxdash:DashboardLayoutItem">
        <Setter Property="dx:DXSerializer.Enabled" Value="False" />
        <Setter Property="ItemHeight" Value="{Binding ItemHeight, Mode=TwoWay}" />
        <Setter Property="ItemWidth" Value="{Binding ItemWidth, Mode=TwoWay}" />
        <Setter Property="Template" Value="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.Template}}" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Background" Value="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.Background}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.BorderThickness}}" />
        <Setter Property="Caption" Value="{Binding}" />
        <Setter Property="CaptionTemplate" Value="{DynamicResource {dxdasht:LWKey DashboardLayoutItem.CaptionTemplate}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsHitTestVisible" Value="{Binding IsLoading, Converter={dxmvvm:BooleanNegationConverter}}" />
        <Setter Property="AllowSizing" Value="{Binding AllowSizing, Mode=OneWay}" />
        <Setter Property="ContextMenuTemplate" Value="{StaticResource ElementPopupMenu}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxdashi:LayoutItemProviderService UnregisterOnUnloaded="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding Path=AssociatedObject.DataContext.OnItemMouseLeaveCommand, RelativeSource={RelativeSource Self}}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseLeave"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding Path=AssociatedObject.DataContext.OnItemMouseEnterCommand, RelativeSource={RelativeSource Self}}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="MouseEnter"
                            PassEventArgsToCommand="True" />
                        <dxmvvm:EventToCommand
                            Command="{Binding Path=AssociatedObject.DataContext.OnItemMouseWheelCommand, RelativeSource={RelativeSource Self}}"
                            EventArgsConverter="{StaticResource EventToCommandConverter}"
                            EventName="PreviewMouseWheel"
                            PassEventArgsToCommand="True" />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ShowBorder}" Value="False">
                <DataTrigger.Setters>
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Background" Value="{DynamicResource {dxdasht:LWKey DashboardControl.Background}}" />
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DashboardItemWaitIndicator.DefaultStyleBase" TargetType="{x:Type dxdashi:DashboardItemWaitIndicator}">
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="Template" Value="{StaticResource WaitIndicatorTemplate}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="ListBoxDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:ListBoxDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey ListBoxItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey ListBoxItem.ViewStyle}}" />
    </Style>
    <Style x:Key="DateFilterDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:DateFilterDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey DateFilterItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey DateFilterItem.ViewStyle}}" />
        <Setter Property="DatePickerTemplate" Value="{DynamicResource {dxdasht:LWKey DateFilterItem.DatePickerTemplate}}" />
        <Setter Property="QuickButtonTemplate" Value="{DynamicResource {dxdasht:LWKey DateFilterItem.QuickButtonTemplate}}" />
        <Setter Property="DateNavigatorStyle" Value="{DynamicResource {dxdasht:LWKey DateFilterItem.DateNavigatorStyle}}" />
        <Setter Property="DatePickerPopupTemplate" Value="{DynamicResource {dxdasht:LWKey DateFilterItem.DatePickerPopupTemplate}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="BoundImageDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:BoundImageDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey BoundImageItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey BoundImageItem.ViewStyle}}" />
    </Style>
    <Style x:Key="CardDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:CardDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey CardItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey CardItem.ViewStyle}}" />
    </Style>
    <Style x:Key="ChartDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:ChartDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey ChartItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.ViewStyle}}" />
        <Setter Property="DiagramStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.DiagramStyle}}" />
        <Setter Property="LegendStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.LegendStyle}}" />
        <Setter Property="AxisXStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.AxisXStyle}}" />
        <Setter Property="SecondaryAxisYStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.SecondaryAxisYStyle}}" />
        <Setter Property="BarSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.BarSeriesStyle}}" />
        <Setter Property="BarStackedSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.BarStackedSeriesStyle}}" />
        <Setter Property="PointSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.PointSeriesStyle}}" />
        <Setter Property="LineSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.LineSeriesStyle}}" />
        <Setter Property="AreaSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.AreaSeriesStyle}}" />
        <Setter Property="StackedAreaSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.StackedAreaSeriesStyle}}" />
        <Setter Property="RangeAreaSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.RangeAreaSeriesStyle}}" />
        <Setter Property="RangeBarSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.RangeBarSeriesStyle}}" />
        <Setter Property="BubbleSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.BubbleSeriesStyle}}" />
        <Setter Property="StockSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.StockSeriesStyle}}" />
        <Setter Property="CandleStickSeriesStyle" Value="{DynamicResource {dxdasht:LWKey ChartItem.CandleStickSeriesStyle}}" />
    </Style>
    <Style x:Key="ComboBoxDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:ComboBoxDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey ComboBoxItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey ComboBoxItem.ViewStyle}}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="GaugeDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:GaugeDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey GaugeItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey GaugeItem.ViewStyle}}" />
    </Style>
    <Style x:Key="GridDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:GridDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey GridItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey GridItem.ViewStyle}}" />
        <Setter Property="GridViewStyle" Value="{DynamicResource {dxdasht:LWKey GridItem.GridViewStyle}}" />
        <Setter Property="ColumnStyle" Value="{DynamicResource {dxdasht:LWKey GridItem.ColumnStyle}}" />
    </Style>
    <Style x:Key="ImageDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:ImageDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey ImageItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey ImageItem.ViewStyle}}" />
    </Style>
    <Style x:Key="MapDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:MapDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey MapItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey MapItem.ViewStyle}}" />
    </Style>
    <Style x:Key="PieDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:PieDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey PieItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey PieItem.ViewStyle}}" />
        <Setter Property="ChartStyle" Value="{DynamicResource {dxdasht:LWKey PieItem.ChartStyle}}" />
    </Style>
    <Style x:Key="PivotDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:PivotDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey PivotItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey PivotItem.ViewStyle}}" />
    </Style>
    <Style x:Key="RangeDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:RangeDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey RangeItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey RangeItem.ViewStyle}}" />
        <Setter Property="RangeControlClientStyle" Value="{DynamicResource {dxdasht:LWKey RangeItem.RangeControlClientStyle}}" />
    </Style>
    <Style x:Key="TextBoxDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:TextBoxDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey TextBoxItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey TextBoxItem.ViewStyle}}" />
    </Style>
    <Style x:Key="TreemapDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:TreemapDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey TreemapItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey TreemapItem.ViewStyle}}" />
    </Style>
    <Style x:Key="TreeViewDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:TreeViewDashboardLayoutItem}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxdasht:LWKey TreeViewItem.Template}}" />
        <Setter Property="ViewStyle" Value="{DynamicResource {dxdasht:LWKey TreeViewItem.ViewStyle}}" />
        <Setter Property="TreeListViewStyle" Value="{DynamicResource {dxdasht:LWKey TreeViewItem.TreeListViewStyle}}" />
    </Style>
    <Style x:Key="CustomItemDashboardLayoutItem.DefaultStyleBase" BasedOn="{StaticResource DashboardLayoutItem.DefaultStyleBase}" TargetType="{x:Type dxdash:CustomItemDashboardLayoutItem}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        FontWeight="Bold"
                        Text="{dxdashi:DashboardLocalizationString MessageCustomItemIsNotSupported}"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="Wrap" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion DEFAULT STYLES-->

</ResourceDictionary>