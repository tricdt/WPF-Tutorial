<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxa="clr-namespace:DevExpress.Xpf.Accordion;assembly=DevExpress.Xpf.Accordion.v24.1"
    xmlns:dxan="clr-namespace:DevExpress.Xpf.Accordion.Native;assembly=DevExpress.Xpf.Accordion.v24.1"
    xmlns:dxat="clr-namespace:DevExpress.Xpf.Accordion.Themes;assembly=DevExpress.Xpf.Accordion.v24.1"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">

    <sys:Double x:Key="HeaderTouchHeight">44</sys:Double>
    <sys:Double x:Key="ExpandButtonTouchSize">34</sys:Double>
    <sys:Double x:Key="ItemTouchOffset">35</sys:Double>
    <sys:Double x:Key="ExpandButtonContainerTouchMinWidth">35</sys:Double>
    <Thickness x:Key="HeaderTouchMargin">12,0,0,0</Thickness>
    <Thickness x:Key="GlyphTouchMargin">8,0,0,0</Thickness>
    <Thickness x:Key="CollapsedItemRightTouchMargin">4,8,0,8</Thickness>
    <Thickness x:Key="LeftExpanderTouchMargin">1,3,0,3</Thickness>
    <Thickness x:Key="RightExpanderTouchMargin">12,3,-11,3</Thickness>
    <Thickness x:Key="PopupContentMargin">3,3,3,3</Thickness>
    <Thickness x:Key="PopupScrollingContentMargin">3,3,0,3</Thickness>
    <sys:Double x:Key="SearchControlButtonTouchSize">34</sys:Double>
    <dxmvvm:ObjectToObjectConverter x:Key="scrollBarVisibilityConverter" DefaultTarget="Auto">
        <dxmvvm:MapItem Source="False" Target="Hidden" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="glyphViewModeToBoolConverter" DefaultTarget="False">
        <dxmvvm:MapItem Source="Glyph" Target="True" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="glyphViewModeToBoolInvertedConverter" DefaultTarget="True">
        <dxmvvm:MapItem Source="Glyph" Target="False" />
    </dxmvvm:ObjectToObjectConverter>
    <dxmvvm:ObjectToObjectConverter x:Key="contentAndGlyphViewModeToBoolConverter" DefaultTarget="False">
        <dxmvvm:MapItem Source="ContentAndGlyph" Target="True" />
    </dxmvvm:ObjectToObjectConverter>
    <dx:EditorStringIdConverter x:Key="EditorStringIdConverter" />
    <dxan:AccordionItemConverter x:Key="accordionItemConverter" />
    <dxmvvm:ObjectToObjectConverter x:Key="collapseItemConverter" DefaultTarget="False">
        <dxmvvm:MapItem Source="Container" Target="True" />
    </dxmvvm:ObjectToObjectConverter>


    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic\Resources.xaml-->
    <sys:Double x:Key="{dxat:LWKey AccordionItem.ItemRotateAngle}">-90</sys:Double>
    <sys:Double x:Key="{dxat:LWKey Accordion.PopupDefaultWidth}">200</sys:Double>
    <Style x:Key="glyphPresenterStyle" TargetType="dxa:GlyphPresenter">
        <Setter Property="Content" Value="{Binding Glyph, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ContentTemplate" Value="{Binding GlyphTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ContentTemplateSelector" Value="{Binding GlyphTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="GlyphSize" Value="{Binding GlyphSize, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="GlyphStretch" Value="{Binding GlyphStretch, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Visibility" Value="Collapsed" />
    </Style>



    <Storyboard x:Key="{dxat:LWKey Accordion.ExpandStoryboard}">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="AnimationProgress">
            <SplineDoubleKeyFrame KeySpline=".2,.8,.2,.8" KeyTime="0:0:0.3" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <SplineDoubleKeyFrame KeySpline=".4,.8,.8,.4" KeyTime="0:0:0.3" Value="1" />
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="{dxat:LWKey Accordion.CollapseStoryboard}">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="AnimationProgress">
            <SplineDoubleKeyFrame KeySpline=".2,.8,.2,.8" KeyTime="0:0:0.3" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <SplineDoubleKeyFrame KeySpline=".8,.4,.4,.8" KeyTime="0:0:0.3" Value="0" />
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="{dxat:LWKey Accordion.ExpandAccordionStoryboard}">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="AnimationProgress">
            <SplineDoubleKeyFrame KeySpline=".2,.8,.2,.8" KeyTime="0:0:0.3" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <SplineDoubleKeyFrame KeySpline=".4,.8,.8,.4" KeyTime="0:0:0.03" Value="0" />
            <SplineDoubleKeyFrame KeySpline=".8,.4,.4,.8" KeyTime="0:0:0.3" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsContentCollapsed">
            <DiscreteBooleanKeyFrame KeyTime="0:0:0.03" Value="False" />
        </BooleanAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="{dxat:LWKey Accordion.CollapseAccordionStoryboard}">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="AnimationProgress">
            <SplineDoubleKeyFrame KeySpline=".2,.8,.2,.8" KeyTime="0:0:0.2" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <SplineDoubleKeyFrame KeySpline=".4,1.0,.4,1.0" KeyTime="0:0:0.15" Value="0" />
            <SplineDoubleKeyFrame KeySpline="1.0,.0,1.0,.0" KeyTime="0:0:0.3" Value="1" />
        </DoubleAnimationUsingKeyFrames>
        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsContentCollapsed">
            <DiscreteBooleanKeyFrame KeyTime="0:0:0.15" Value="True" />
        </BooleanAnimationUsingKeyFrames>
    </Storyboard>

    <ControlTemplate x:Key="{dxat:LWKey Accordion.EmptySourceTemplate}">
        <TextBlock
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Text="{Binding Path=Accordion.EmptySourceText, RelativeSource={RelativeSource AncestorType=dxa:AccordionView}}"
            TextWrapping="Wrap" />
    </ControlTemplate>

    <Style x:Key="decoratorGlyphPresenterStyle" BasedOn="{StaticResource glyphPresenterStyle}" TargetType="dxa:GlyphPresenter">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Glyph, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}" />
                    <Condition Binding="{Binding Path=ShowDefaultGlyph, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Content" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.DefaultGlyph, RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <DataTemplate x:Key="{dxat:LWKey AccordionItem.AccordionItemDefaultGlyphTemplate}">
        <dx:DXImage
            x:Name="glyph"
            Width="{Binding GlyphWidth, RelativeSource={RelativeSource TemplatedParent}}"
            Height="{Binding GlyphHeight, RelativeSource={RelativeSource TemplatedParent}}"
            Margin="{DynamicResource {dxat:LWKey AccordionItem.HeaderElementsMargin}}"
            SnapsToDevicePixels="True"
            Source="{Binding}"
            Stretch="{Binding GlyphStretch, RelativeSource={RelativeSource TemplatedParent}}" />
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding}" Value="{x:Null}">
                <Setter TargetName="glyph" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic\Resources.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic\Controls.xaml-->



    <Style x:Key="{dxat:LWKey AccordionItem.ExpanderButtonStyle}" TargetType="dxa:AccordionExpandButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemExpandButtonSize}}" />
        <Setter Property="Height" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemExpandButtonSize}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource {dxat:LWKey AccordionItem.ExpanderButtonTemplate}}" />
        <Setter Property="Margin" Value="{DynamicResource {dxat:LWKey AccordionItem.HeaderElementsMargin}}" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderDefaultForeground}}" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="IsChecked" Value="{Binding Path=IsExpanded, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Command" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.Commands.ChangeItemExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource accordionItemConverter}}" />
        <Setter Property="ItemType" Value="{Binding ItemType, RelativeSource={RelativeSource TemplatedParent}}" />
        <Style.Triggers>
            <Trigger Property="ItemType" Value="RootItem">
                <Setter Property="Width" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemExpandButtonSize}}" />
                <Setter Property="Height" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemExpandButtonSize}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Width" Value="{StaticResource ExpandButtonTouchSize}" />
                <Setter Property="Height" Value="{StaticResource ExpandButtonTouchSize}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxat:LWKey Accordion.SearchControlSearchButtonTemplate}" TargetType="dxe:ButtonClose">
        <Grid
            x:Name="Root"
            Width="16"
            Height="16"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Background="Transparent"
            Opacity="0.62">
            <Path
                x:Name="CloseButtonPath"
                Width="14"
                Height="14"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="F1 M 4,1.90735e-006C 6.20914,1.90735e-006 8,1.79086 8,4C 8,4.84917 7.73539,5.63653 7.28414,6.28414L 10,9L 9,10L 6.28414,7.28414C 5.63653,7.7354 4.84917,8 4,8C 1.79086,8 0,6.20914 0,4C 0,1.79086 1.79086,1.90735e-006 4,1.90735e-006 Z M 4,1C 2.34315,1 1,2.34315 1,4C 1,5.65686 2.34315,7 4,7C 5.65685,7 7,5.65686 7,4C 7,2.34315 5.65685,1 4,1 Z "
                Fill="{DynamicResource {dxat:LWKey Accordion.SearchControlSearchButtonFill}}"
                SnapsToDevicePixels="True"
                Stretch="Fill" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="Root" Property="Width" Value="{StaticResource SearchControlButtonTouchSize}" />
                <Setter TargetName="Root" Property="Height" Value="{StaticResource SearchControlButtonTouchSize}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter TargetName="Root" Property="Width" Value="{StaticResource SearchControlButtonTouchSize}" />
                <Setter TargetName="Root" Property="Height" Value="{StaticResource SearchControlButtonTouchSize}" />
                <Setter TargetName="CloseButtonPath" Property="Width" Value="26" />
                <Setter TargetName="CloseButtonPath" Property="Height" Value="26" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxat:LWKey Accordion.SearchControlClearButtonTemplate}" TargetType="dxe:ButtonClose">
        <Grid
            x:Name="Root"
            Width="16"
            Height="16"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Background="Transparent"
            Opacity="0.62">
            <Path
                x:Name="CloseButtonPath"
                Width="8"
                Height="8"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="F1 M 0,1 1,0 4,3 7,0 8,1 5,4 8,7 7,8 4,5 1,8 0,7 3,4 0,1 Z "
                Fill="{DynamicResource {dxat:LWKey Accordion.SearchControlClearButtonFill}}"
                SnapsToDevicePixels="True"
                Stretch="Fill" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="Root" Property="Width" Value="{StaticResource SearchControlButtonTouchSize}" />
                <Setter TargetName="Root" Property="Height" Value="{StaticResource SearchControlButtonTouchSize}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter TargetName="Root" Property="Width" Value="{StaticResource SearchControlButtonTouchSize}" />
                <Setter TargetName="Root" Property="Height" Value="{StaticResource SearchControlButtonTouchSize}" />
                <Setter TargetName="CloseButtonPath" Property="Width" Value="16" />
                <Setter TargetName="CloseButtonPath" Property="Height" Value="16" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxat:LWKey Accordion.SearchControlStyle}" TargetType="{x:Type dxa:AccordionSearchControl}">
        <Setter Property="Margin" Value="{DynamicResource {dxat:LWKey Accordion.SearchControlMargin}}" />
        <Setter Property="ShowMRUButton" Value="False" />
        <Setter Property="ImmediateMRUPopup" Value="False" />
        <Setter Property="SearchTextPostDelay" Value="500" />
        <Setter Property="IsEditorTabStop" Value="False" />
        <Setter Property="FontSize" Value="{DynamicResource {dxat:LWKey Accordion.SearchControlFontSize}}" />
        <Setter Property="FontStretch" Value="Normal" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="NullTextForeground" Value="{DynamicResource {dxat:LWKey Accordion.SearchControlNullTextForeground}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxa:AccordionSearchControl}">
                    <ContentControl HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" dx:FocusHelper2.Focusable="False">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <dxe:ButtonClose
                                x:Name="searchButton"
                                Margin="0,0,4,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Template="{DynamicResource {dxat:LWKey Accordion.SearchControlSearchButtonTemplate}}" />
                            <dxei:ChildMinWidthPanel Grid.Column="1" VerticalAlignment="Center" ChildMinWidth="{TemplateBinding SearchTextBoxMinWidth}">
                                <dxe:ComboBoxEdit
                                    x:Name="editor"
                                    MinHeight="{DynamicResource {dxat:LWKey Accordion.SearchControlMinHeight}}"
                                    Margin="0"
                                    dxei:MVVMFocusBehavior.IsFocused="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                    AllowDefaultButton="False"
                                    EditValue="{Binding Path=SearchText, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                    EditValuePostDelay="{TemplateBinding SearchTextPostDelay}"
                                    EditValuePostMode="{Binding Path=SearchControlPropertyProvider.ActualPostMode, RelativeSource={RelativeSource TemplatedParent}}"
                                    Foreground="{DynamicResource {dxat:LWKey AccordionItem.TextForeground}}"
                                    ImmediatePopup="{Binding Path=SearchControlPropertyProvider.ActualImmediateMRUPopup, RelativeSource={RelativeSource TemplatedParent}}"
                                    IncrementalFiltering="False"
                                    IsCaseSensitiveSearch="True"
                                    IsTabStop="{TemplateBinding IsEditorTabStop}"
                                    ItemsSource="{TemplateBinding MRU}"
                                    NullTextForeground="{TemplateBinding NullTextForeground}"
                                    ShowNullText="{Binding Path=SearchControlPropertyProvider.ActualShowFindButton, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Converter={dxmvvm:BooleanNegationConverter}}"
                                    ValidateOnEnterKeyPressed="True">
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxmvvm:FocusBehavior EventName="Click" SourceName="searchButton" />
                                    </dxmvvm:Interaction.Behaviors>
                                    <dxe:ComboBoxEdit.EditTemplate>
                                        <ControlTemplate>
                                            <TextBox
                                                x:Name="PART_Editor"
                                                dxei:EditorMarginHelper.Margin="2,2,2,2,0,2,2,2"
                                                CaretBrush="{DynamicResource {dxat:LWKey AccordionItem.TextForeground}}"
                                                Style="{DynamicResource {dxt:LWKey TextEdit.TextStyle}}" />
                                        </ControlTemplate>
                                    </dxe:ComboBoxEdit.EditTemplate>
                                    <dxe:ComboBoxEdit.BorderTemplate>
                                        <ControlTemplate TargetType="ContentControl">
                                            <ContentPresenter />
                                        </ControlTemplate>
                                    </dxe:ComboBoxEdit.BorderTemplate>
                                    <dxe:ComboBoxEdit.NullText>
                                        <MultiBinding>
                                            <Binding Path="NullText" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding
                                                Converter="{StaticResource EditorStringIdConverter}"
                                                ConverterParameter="LookUpSearch"
                                                Path="IsTabStop"
                                                RelativeSource="{RelativeSource Self}" />
                                            <MultiBinding.Converter>
                                                <dx:SearchControlNullTextConverter />
                                            </MultiBinding.Converter>
                                        </MultiBinding>
                                    </dxe:ComboBoxEdit.NullText>
                                    <dxe:ComboBoxEdit.Buttons>
                                        <dxe:ButtonInfo
                                            x:Name="buttonClear"
                                            Command="{Binding Path=SearchControlPropertyProvider.ClearSearchTextCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            GlyphKind="Custom"
                                            Visibility="{Binding Path=SearchControlPropertyProvider.ActualShowClearButton, RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                                            <dxe:ButtonInfo.Template>
                                                <DataTemplate>
                                                    <dxe:ButtonClose
                                                        Margin="2,0"
                                                        HorizontalAlignment="Center"
                                                        VerticalAlignment="Center"
                                                        Command="{Binding Command}"
                                                        Template="{DynamicResource {dxat:LWKey Accordion.SearchControlClearButtonTemplate}}"
                                                        Visibility="{Binding Visibility}" />
                                                </DataTemplate>
                                            </dxe:ButtonInfo.Template>
                                        </dxe:ButtonInfo>
                                        <dxe:ButtonInfo Command="{Binding Path=OpenPopupCommand, ElementName=editor}" GlyphKind="DropDown" Visibility="{Binding Path=ShowMRUButton, RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
                                    </dxe:ComboBoxEdit.Buttons>
                                </dxe:ComboBoxEdit>
                            </dxei:ChildMinWidthPanel>
                        </Grid>
                    </ContentControl>
                    <ControlTemplate.Triggers>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter TargetName="searchButton" Property="Margin" Value="0,0,2,0" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                            <Setter TargetName="searchButton" Property="Margin" Value="0,0,8,0" />
                            <Setter TargetName="editor" Property="FontSize" Value="18" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="8,1,0,1" />
                <Setter Property="MinHeight" Value="42" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxat:LWKey Accordion.ItemPresenterTemplate}" TargetType="dxa:ItemPresenter">
        <Grid x:Name="Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid x:Name="PART_RotateContainer" Grid.Row="1">
                <Grid
                    x:Name="PART_HeaderInternalContainer"
                    Margin="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderMargin}}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <dxa:GlyphPresenter x:Name="PART_Glyph" Grid.Row="1" Style="{StaticResource decoratorGlyphPresenterStyle}" />
                    <dx:DXBorder
                        x:Name="PART_Header"
                        Grid.Row="1"
                        Grid.Column="1"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            x:Name="PART_HeaderContent"
                            Margin="{DynamicResource {dxat:LWKey AccordionItem.HeaderElementsMargin}}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentSource="Header"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ContentPresenter.Resources>
                                <Style x:Key="{x:Type TextBlock}" TargetType="TextBlock">
                                    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </dx:DXBorder>
                    <dx:DXBorder
                        x:Name="PART_RightBorder"
                        Grid.Row="1"
                        Grid.Column="3"
                        Margin="{DynamicResource {dxat:LWKey AccordionItem.HeaderElementsMargin}}"
                        BorderThickness="0" />
                </Grid>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsRotatedView" Value="True">
                <Setter TargetName="PART_HeaderInternalContainer" Property="TextOptions.TextFormattingMode" Value="Display" />
                <Setter TargetName="PART_HeaderInternalContainer" Property="TextOptions.TextRenderingMode" Value="ClearType" />
            </Trigger>
            <Trigger Property="GlyphPosition" Value="Left">
                <Setter TargetName="PART_Glyph" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="GlyphPosition" Value="Right">
                <Setter TargetName="PART_Glyph" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_Glyph" Property="Grid.Column" Value="2" />
                <Setter TargetName="PART_Glyph" Property="Grid.Row" Value="1" />
            </Trigger>
            <Trigger Property="GlyphPosition" Value="Top">
                <Setter TargetName="PART_Glyph" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_Glyph" Property="Grid.Column" Value="1" />
                <Setter TargetName="PART_Glyph" Property="Grid.Row" Value="0" />
            </Trigger>
            <Trigger Property="ShowHeader" Value="False">
                <Setter TargetName="PART_Header" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_Glyph" Property="Grid.Column" Value="0" />
                <Setter TargetName="PART_Glyph" Property="Grid.Row" Value="1" />
                <Setter TargetName="PART_HeaderInternalContainer" Property="Margin" Value="{DynamicResource {dxat:LWKey AccordionItem.CollapsedItemGlyphMargin}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter TargetName="Root" Property="MinHeight" Value="{StaticResource HeaderTouchHeight}" />
                <Setter TargetName="Root" Property="MinWidth" Value="{StaticResource HeaderTouchHeight}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
                <Setter TargetName="PART_RightBorder" Property="Margin" Value="{StaticResource CollapsedItemRightTouchMargin}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=CoerceGlyphMarginOnTouchTheme, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=GlyphPosition, RelativeSource={RelativeSource Self}}" Value="Right" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_Glyph" Property="Margin" Value="4,0,0,0" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=CoerceGlyphMarginOnTouchTheme, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchlineTheme), RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=GlyphPosition, RelativeSource={RelativeSource Self}}" Value="Right" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_Glyph" Property="Margin" Value="4,0,0,0" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{dxat:LWKey Accordion.CollapseButtonStyleBase}" TargetType="ToggleButton">
        <Setter Property="Template" Value="{DynamicResource {dxat:LWKey Accordion.CollapseButtonTemplate}}" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Width" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemExpandButtonSize}}" />
        <Setter Property="Height" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemExpandButtonSize}}" />
        <Setter Property="Margin" Value="{DynamicResource {dxat:LWKey Accordion.CollapseButtonMargin}}" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Margin" Value="{DynamicResource {dxat:LWKey Accordion.CollapseButtonCheckedMargin}}" />
            </Trigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Width" Value="{StaticResource ExpandButtonTouchSize}" />
                <Setter Property="Height" Value="{StaticResource ExpandButtonTouchSize}" />
                <Setter Property="Margin" Value="7,5,7,5" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="dx:ThemeManager.IsTouchlineTheme" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" Value="8,9,16,9" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxat:LWKey Accordion.CollapsedContainerStyleBase}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template" Value="{DynamicResource {dxat:LWKey Accordion.CollapsedItemTemplate}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
        <Setter Property="Background" Value="{Binding Background}" />
        <Setter Property="BorderBrush" Value="{Binding BorderBrush}" />
        <Setter Property="BorderThickness" Value="{Binding BorderThickness}" />
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.CollapsedItemStyleBase}" BasedOn="{StaticResource {dxat:LWKey Accordion.CollapsedContainerStyleBase}}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="FontSize" Value="{DynamicResource {dxat:LWKey Accordion.CollapsedItemFontSize}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {dxat:LWKey Accordion.CollapsedItemFontWeight}}" />
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxa:CollapsedItemHoverSuppressBehavior />
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.CollapsedItemStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.CollapsedItemStyleBase}}" TargetType="{x:Type dxe:ListBoxEditItem}" />

    <Style x:Key="{dxat:LWKey Accordion.ItemPresenterStyleBase}" TargetType="{x:Type dxa:ItemPresenter}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="GlyphPosition" Value="Left" />
        <Setter Property="GlyphTemplate" Value="{DynamicResource {dxat:LWKey AccordionItem.AccordionItemDefaultGlyphTemplate}}" />
        <Setter Property="MinWidth" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}" />
        <Setter Property="MinHeight" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}" />
        <Setter Property="RotateAngle" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemRotateAngle}}" />
        <Setter Property="Template" Value="{DynamicResource {dxat:LWKey Accordion.ItemPresenterTemplate}}" />
        <Setter Property="FontStretch" Value="Normal" />
        <Setter Property="FontStyle" Value="Normal" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=GlyphTemplateSelector, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                <Setter Property="GlyphTemplate" Value="{x:Null}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxat:LWKey Accordion.HeaderPresenterStyleBase}" BasedOn="{StaticResource {dxat:LWKey Accordion.ItemPresenterStyleBase}}" TargetType="{x:Type dxa:ItemPresenter}">
        <Setter Property="Header" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.HeaderContent, RelativeSource={RelativeSource Self}}" />
        <Setter Property="HeaderTemplate" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.HeaderContentTemplate, RelativeSource={RelativeSource Self}}" />
        <Setter Property="HeaderTemplateSelector" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.HeaderContentTemplateSelector, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Glyph" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.HeaderGlyph, RelativeSource={RelativeSource Self}}" />
        <Setter Property="GlyphTemplate" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.HeaderGlyphTemplate, RelativeSource={RelativeSource Self}}" />
        <Setter Property="GlyphTemplateSelector" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.HeaderGlyphTemplateSelector, RelativeSource={RelativeSource Self}}" />
        <Setter Property="GlyphSize" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.HeaderGlyphSize, RelativeSource={RelativeSource Self}}" />
        <Setter Property="GlyphStretch" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.HeaderGlyphStretch, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxat:LWKey Accordion.HeaderForeground}}" />
        <Setter Property="FontSize" Value="{DynamicResource {dxat:LWKey Accordion.HeaderFontSize}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {dxat:LWKey Accordion.HeaderFontWeight}}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="ShowDefaultGlyph" Value="False" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Margin" Value="{StaticResource GlyphTouchMargin}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxat:LWKey Accordion.HeaderPresenterStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.HeaderPresenterStyleBase}}" TargetType="{x:Type dxa:ItemPresenter}" />

    <Style x:Key="{dxat:LWKey Accordion.ItemDecoratorStyleBase}" BasedOn="{StaticResource {dxat:LWKey Accordion.ItemPresenterStyleBase}}" TargetType="{x:Type dxa:CollapsedItemDecorator}">
        <Setter Property="Item" Value="{Binding}" />
        <Setter Property="IsRotatedView" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.CollapsedItemDisplayMode, Converter={StaticResource glyphViewModeToBoolInvertedConverter}, RelativeSource={RelativeSource Self}}" />
        <Setter Property="CoerceGlyphMarginOnTouchTheme" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.CollapsedItemDisplayMode, Converter={StaticResource contentAndGlyphViewModeToBoolConverter}, RelativeSource={RelativeSource Self}}" />
        <Setter Property="GlyphSize" Value="{Binding GlyphSize}" />
        <Setter Property="GlyphStretch" Value="{Binding GlyphStretch}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSummaryItemDecorator, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="GlyphSize" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.SummaryItemGlyphSize, RelativeSource={RelativeSource Self}}" />
                <Setter Property="GlyphStretch" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.SummaryItemGlyphStretch, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxat:LWKey Accordion.CollapsedItemDecoratorStyleBase}" BasedOn="{StaticResource {dxat:LWKey Accordion.ItemDecoratorStyleBase}}" TargetType="{x:Type dxa:CollapsedItemDecorator}">
        <Setter Property="ShowDefaultGlyph" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.CollapsedItemDisplayMode, RelativeSource={RelativeSource Self}, Converter={StaticResource glyphViewModeToBoolConverter}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.CollapsedItemDisplayMode, RelativeSource={RelativeSource Self}}" Value="Content">
                <Setter Property="GlyphPosition" Value="None" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.CollapsedItemDisplayMode, RelativeSource={RelativeSource Self}}" Value="Glyph">
                <Setter Property="ShowHeader" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxat:LWKey Accordion.OverflowDecoratorStyleBase}" BasedOn="{StaticResource {dxat:LWKey Accordion.ItemDecoratorStyleBase}}" TargetType="{x:Type dxa:CollapsedItemDecorator}">
        <Setter Property="IsRotatedView" Value="False" />
        <Setter Property="ShowHeader" Value="False" />
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.OverflowDecoratorStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.OverflowDecoratorStyleBase}}" TargetType="{x:Type dxa:CollapsedItemDecorator}" />
    <Style x:Key="{dxat:LWKey Accordion.CollapsedItemDecoratorStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.CollapsedItemDecoratorStyleBase}}" TargetType="{x:Type dxa:CollapsedItemDecorator}" />
    <Style x:Key="{dxat:LWKey Accordion.CollapseButtonStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.CollapseButtonStyleBase}}" TargetType="ToggleButton" />

    <Style x:Key="{dxat:LWKey Accordion.OverflowItemStyleBase}" BasedOn="{StaticResource {dxat:LWKey Accordion.CollapsedContainerStyleBase}}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Margin" Value="{DynamicResource {dxat:LWKey Accordion.OverflowItemMargin}}" />
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.OverflowItemStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.OverflowItemStyleBase}}" TargetType="{x:Type dxe:ListBoxEditItem}" />
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic\Controls.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic\NavigationControls.xaml-->
    <Style x:Key="{dxat:LWKey Accordion.SplitterStyleBase}" TargetType="{x:Type dxa:AccordionSplitter}">
        <Setter Property="Template" Value="{DynamicResource {dxat:LWKey Accordion.SplitterTemplate}}" />
        <Setter Property="ShowBorder" Value="True" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Cursor" Value="SizeNS" />
        <Setter Property="Visibility" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.IsExpandedView, RelativeSource={RelativeSource Self}, Converter={dxmvvm:BooleanToVisibilityConverter Inverse=True}}" />
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.SplitterStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.SplitterStyleBase}}" TargetType="{x:Type dxa:AccordionSplitter}" />

    <Style x:Key="{dxat:LWKey Accordion.DropDownMenuButtonStyleBase}" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="{DynamicResource {dxat:LWKey Accordion.OverflowItemMargin}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}" />
        <Setter Property="Template" Value="{DynamicResource {dxat:LWKey Accordion.DropDownMenuButtonTemplate}}" />
        <Setter Property="Visibility" Value="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.AllowPopupMenu, RelativeSource={RelativeSource Self}, Converter={dxmvvm:BooleanToVisibilityConverter}}" />
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinHeight" Value="{StaticResource HeaderTouchHeight}" />
                <Setter Property="MinWidth" Value="{StaticResource HeaderTouchHeight}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.DropDownMenuButtonStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.DropDownMenuButtonStyleBase}}" TargetType="ToggleButton" />
    <Style x:Key="{dxat:LWKey Accordion.OverflowContainerStyleBase}" TargetType="dxe:ListBoxEdit">
        <Setter Property="ShowBorder" Value="False" />
        <Setter Property="AllowItemHighlighting" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="1" />
        <Setter Property="ItemsSource" Value="{Binding ItemsSource, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="SelectedItem" Value="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.OverflowContainerStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.OverflowContainerStyleBase}}" TargetType="dxe:ListBoxEdit" />

    <ControlTemplate x:Key="{dxat:LWKey Accordion.AccordionOverflowControlTemplate}" TargetType="dxa:AccordionOverflowControl">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <dxa:AccordionSplitter x:Name="PART_Splitter" Style="{DynamicResource {dxat:LWKey Accordion.SplitterStyle}}" />
            <ContentControl
                x:Name="PART_ExpandBackground"
                Grid.Row="1"
                Focusable="False"
                Template="{DynamicResource {dxat:LWKey Accordion.OverflowBackgroundTemplate}}" />
            <Grid
                x:Name="PART_OverflowGridContainer"
                Grid.Row="1"
                MinHeight="1"
                HorizontalAlignment="Left"
                VerticalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentControl
                    x:Name="PART_CollapseBackground"
                    Grid.Row="1"
                    Grid.ColumnSpan="2"
                    Focusable="False"
                    Template="{DynamicResource {dxat:LWKey Accordion.OverflowBackgroundTemplate}}"
                    Visibility="Collapsed" />
                <DockPanel x:Name="PART_OverflowPanel" Grid.Row="1">
                    <dxe:ListBoxEdit
                        x:Name="PART_OverflowContainer"
                        IncrementalSearch="False"
                        ItemContainerStyle="{DynamicResource {dxat:LWKey Accordion.OverflowItemStyle}}"
                        Style="{DynamicResource {dxat:LWKey Accordion.OverflowContainerStyle}}">
                        <dxe:ListBoxEdit.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                    <dxa:OverflowItemDecorator Style="{DynamicResource {dxat:LWKey Accordion.OverflowDecoratorStyle}}" />
                                    <dxa:AccordionFlyoutControl
                                        x:Name="PART_AccordionFlyout"
                                        Padding="0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        StaysOpen="True">
                                        <dxe:FlyoutControl.Settings>
                                            <dxe:FlyoutSettings Placement="Top" />
                                        </dxe:FlyoutControl.Settings>
                                    </dxa:AccordionFlyoutControl>
                                </Grid>
                            </DataTemplate>
                        </dxe:ListBoxEdit.ItemTemplate>
                        <dxe:ListBoxEdit.ItemsPanel>
                            <ItemsPanelTemplate>
                                <dxan:OverflowVirtualizingPanel
                                    VerticalAlignment="Center"
                                    ActualChildrenLength="{Binding Path=OverflowItemActualLength, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=dxa:AccordionOverflowControl}}"
                                    CanCollapseAllChildren="True"
                                    CollapsedItems="{Binding Path=CollapsedItemsSource, RelativeSource={RelativeSource AncestorType=dxa:AccordionOverflowControl}, Mode=TwoWay}"
                                    MaxVisibleItems="{Binding Path=ActualMaxVisibleItems, RelativeSource={RelativeSource AncestorType=dxa:AccordionOverflowControl}}" />
                            </ItemsPanelTemplate>
                        </dxe:ListBoxEdit.ItemsPanel>
                    </dxe:ListBoxEdit>
                </DockPanel>
                <ToggleButton
                    x:Name="PART_PopupMenuButton"
                    Grid.Row="1"
                    Grid.Column="1"
                    Style="{DynamicResource {dxat:LWKey Accordion.DropDownMenuButtonStyle}}">
                    <dxb:BarManager.DXContextMenu>
                        <dxb:PopupMenu x:Name="PART_PopupMenu" Placement="Right">
                            <dxb:BarItemSeparator dxa:AccordionOverflowControl.BarItemName="{x:Static dxa:DefaultMenuItemNames.Separator}" />
                            <dxb:BarLinkContainerItem dxa:AccordionOverflowControl.BarItemName="{x:Static dxa:DefaultMenuItemNames.MenuButtonsGroup}" ItemLinksSource="{TemplateBinding MenuItemsSource}">
                                <dxb:BarLinkContainerItem.ItemTemplate>
                                    <DataTemplate>
                                        <ContentControl>
                                            <dxb:BarButtonItem
                                                Command="{Binding Path=SelectItemCommand, RelativeSource={RelativeSource AncestorType=dxa:AccordionOverflowControl}}"
                                                CommandParameter="{Binding}"
                                                Content="{Binding Header}"
                                                Glyph="{Binding Glyph}" />
                                        </ContentControl>
                                    </DataTemplate>
                                </dxb:BarLinkContainerItem.ItemTemplate>
                            </dxb:BarLinkContainerItem>
                        </dxb:PopupMenu>
                    </dxb:BarManager.DXContextMenu>
                </ToggleButton>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.IsExpandedView, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_OverflowPanel" Property="Grid.Row" Value="0" />
                <Setter TargetName="PART_OverflowPanel" Property="Grid.Column" Value="0" />
                <Setter TargetName="PART_PopupMenuButton" Property="Grid.Row" Value="1" />
                <Setter TargetName="PART_PopupMenuButton" Property="Grid.Column" Value="0" />
                <Setter TargetName="PART_PopupMenuButton" Property="MinWidth" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}" />
                <Setter TargetName="PART_ExpandBackground" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_OverflowGridContainer" Property="HorizontalAlignment" Value="Center" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.IsExpandedView, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.AllowPopupMenu, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_CollapseBackground" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{dxat:LWKey Accordion.AccordionOverflowControlStyleBase}" TargetType="dxa:AccordionOverflowControl">
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.AccordionOverflowControlStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.AccordionOverflowControlStyleBase}}" TargetType="dxa:AccordionOverflowControl" />
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic\NavigationControls.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic\AccordionItem.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic\AccordionItem.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic\AccordionControl.xaml-->
    <Style x:Key="{dxat:LWKey Accordion.PopupStyleBase}" TargetType="dxa:AccordionPopup">
        <Setter Property="DefaultWidth" Value="{DynamicResource {dxat:LWKey Accordion.PopupDefaultWidth}}" />
        <Setter Property="StaysOpen" Value="True" />
        <Setter Property="Placement" Value="Right" />
        <Setter Property="HorizontalOffset" Value="3" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.CollapsePopupPlacement, RelativeSource={RelativeSource Self}}" Value="Left">
                <Setter Property="Placement" Value="Left" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.PopupStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.PopupStyleBase}}" TargetType="dxa:AccordionPopup" />

    <Style x:Key="{dxat:LWKey Accordion.AccordionViewExpanderStyleBase}" TargetType="dxan:AccordionViewExpander">
        <Setter Property="HorizontalExpand" Value="FromLeftToRight" />
        <Setter Property="Duration" Value="0" />
        <Setter Property="VerticalExpand" Value="None" />
        <Setter Property="ExpandStoryboard" Value="{DynamicResource {dxat:LWKey Accordion.ExpandAccordionStoryboard}}" />
        <Setter Property="CollapseStoryboard" Value="{DynamicResource {dxat:LWKey Accordion.CollapseAccordionStoryboard}}" />
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.AccordionViewExpanderStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.AccordionViewExpanderStyleBase}}" TargetType="dxan:AccordionViewExpander" />

    <Style x:Key="{dxat:LWKey Accordion.CollapsedAccordionPanelStyleBase}" TargetType="dxan:CollapsedAccordionVirtualizingPanel">
        <Setter Property="MinWidth" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}" />
        <Setter Property="MinHeight" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}" />
        <Setter Property="StretchSingleChild" Value="True" />
    </Style>
    <Style x:Key="{dxat:LWKey Accordion.CollapsedAccordionPanelStyle}" BasedOn="{StaticResource {dxat:LWKey Accordion.CollapsedAccordionPanelStyleBase}}" TargetType="dxan:CollapsedAccordionVirtualizingPanel" />
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic\AccordionControl.xaml-->

    <!--#region C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic.xaml-->
    <!--#endregion C:\work\2023.1\XPF\DevExpress.Xpf.Accordion\DevExpress.Xpf.Accordion\Themes\Generic.xaml-->


    <!--#region DEFAULT STYLES-->

    <Style x:Key="HeaderPresenter.DefaultStyleBase" BasedOn="{StaticResource {dxat:LWKey Accordion.HeaderPresenterStyle}}" TargetType="{x:Type dxa:HeaderPresenter}" />
    <Style x:Key="AccordionItem.DefaultStyleBase" TargetType="{x:Type dxa:AccordionItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="GlyphTemplate" Value="{DynamicResource {dxat:LWKey AccordionItem.AccordionItemDefaultGlyphTemplate}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.TextForeground}}" />
        <Setter Property="FontSize" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderFontSize}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderFontWeight}}" />
        <Setter Property="FontStretch" Value="Normal" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxa:AccordionItem}">
                    <ContentControl
                        x:Name="PART_RootContentControl"
                        Background="Transparent"
                        BorderThickness="0"
                        FocusVisualStyle="{x:Null}"
                        Focusable="False"
                        Foreground="{DynamicResource {dxat:LWKey AccordionItem.TextForeground}}">
                        <dxmvvm:Interaction.Behaviors>
                            <dxa:AccordionItemForegroundBehavior
                                Foreground="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                                ItemDefaultForeground="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderDefaultForeground}}"
                                ItemType="{Binding ItemType, RelativeSource={RelativeSource TemplatedParent}}"
                                RootItemDefaultForeground="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderDefaultForeground}}"
                                TextDefaultForeground="{DynamicResource {dxat:LWKey AccordionItem.TextForeground}}" />
                        </dxmvvm:Interaction.Behaviors>
                        <Grid x:Name="PART_ItemContainer">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition>
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxa:AccordionItemOffsetBehavior
                                            IsTouchEnabled="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource TemplatedParent}}"
                                            ItemLevel="{Binding ItemLevel, RelativeSource={RelativeSource TemplatedParent}}"
                                            ItemType="{Binding ItemType, RelativeSource={RelativeSource TemplatedParent}}"
                                            RemoveOffset="{Binding Path=(dxa:AccordionView.CurrentView).IsSingleRootItemViewMode, RelativeSource={RelativeSource TemplatedParent}}"
                                            RootItemDisplayMode="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.RootItemDisplayMode, RelativeSource={RelativeSource TemplatedParent}}"
                                            TouchOffset="{StaticResource ItemTouchOffset}"
                                            Offset="{DynamicResource {dxat:LWKey AccordionItem.ItemOffset}}" />
                                    </dxmvvm:Interaction.Behaviors>
                                </ColumnDefinition>
                                <ColumnDefinition x:Name="HeaderColumn" Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="HeaderRow" Height="Auto" MinHeight="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderHeight}}" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <dxa:AccordionItemBackgroundControl
                                x:Name="PART_BackgroundControl"
                                Grid.Column="1"
                                Margin="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderContainerMargin}}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Focusable="False"
                                ItemState="Default"
                                ItemType="{TemplateBinding ItemType}"
                                Template="{DynamicResource {dxat:LWKey AccordionItem.ItemBackgroundTemplate}}" />
                            <Grid
                                x:Name="PART_HeaderContainer"
                                Grid.Column="1"
                                Margin="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderContainerMargin}}"
                                Background="Transparent">
                                <Grid x:Name="PART_HeaderInternalContainer" Grid.Column="1" Margin="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderMargin}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition x:Name="LeftExpandButtonColumn" Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition x:Name="RightExpandButtonColumn" Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <dxa:AccordionItemBackgroundControl
                                        x:Name="PART_SelectionIndicator"
                                        Grid.RowSpan="2"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Focusable="False"
                                        ItemState="Default"
                                        ItemType="{TemplateBinding ItemType}"
                                        Template="{DynamicResource {dxat:LWKey AccordionItem.SelectionIndicatorTemplate}}" />
                                    <dxa:AccordionExpandButton
                                        x:Name="PART_ExpandButton"
                                        Grid.RowSpan="2"
                                        Grid.Column="1"
                                        Style="{DynamicResource {dxat:LWKey AccordionItem.ExpanderButtonStyle}}" />
                                    <dxa:GlyphPresenter
                                        x:Name="PART_Glyph"
                                        Grid.Row="1"
                                        Grid.Column="2"
                                        Style="{StaticResource glyphPresenterStyle}">
                                        <dxmvvm:Interaction.Behaviors>
                                            <dxa:GlyphMarginBehavior
                                                GlyphPosition="{Binding ActualGlyphPosition, RelativeSource={RelativeSource TemplatedParent}}"
                                                GlyphTouchMargin="{StaticResource GlyphTouchMargin}"
                                                HasGlyph="{Binding Glyph, RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:ObjectToBooleanConverter}}"
                                                HeaderElementsMargin="{DynamicResource {dxat:LWKey AccordionItem.HeaderElementsMargin}}"
                                                IsTouchEnabled="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource TemplatedParent}}" />
                                        </dxmvvm:Interaction.Behaviors>
                                    </dxa:GlyphPresenter>
                                    <dx:DXBorder
                                        x:Name="PART_Header"
                                        Grid.Row="1"
                                        Grid.Column="3"
                                        Grid.ColumnSpan="3"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        SnapsToDevicePixels="True">
                                        <ContentPresenter
                                            x:Name="PART_HeaderContent"
                                            Margin="{DynamicResource {dxat:LWKey AccordionItem.HeaderElementsMargin}}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            ContentSource="Header"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                            <ContentPresenter.Resources>
                                                <Style x:Key="{x:Type TextBlock}" TargetType="TextBlock">
                                                    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                                </Style>
                                            </ContentPresenter.Resources>
                                        </ContentPresenter>
                                    </dx:DXBorder>
                                    <dx:DXBorder
                                        x:Name="PART_RightBorder"
                                        Grid.RowSpan="2"
                                        Grid.Column="8"
                                        Margin="{DynamicResource {dxat:LWKey AccordionItem.HeaderElementsMargin}}"
                                        BorderThickness="0" />
                                </Grid>
                            </Grid>
                            <dxan:AccordionExpander
                                x:Name="PART_Expander"
                                Grid.Row="1"
                                Grid.Column="1"
                                CollapseStoryboard="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.CollapseStoryboard, RelativeSource={RelativeSource TemplatedParent}}"
                                ExpandStoryboard="{Binding Path=(dxa:AccordionView.CurrentView).Accordion.ExpandStoryboard, RelativeSource={RelativeSource TemplatedParent}}"
                                IsExpanded="True"
                                Duration="0">
                                <ItemsPresenter x:Name="ItemsHost" />
                            </dxan:AccordionExpander>
                        </Grid>
                    </ContentControl>
                    <ControlTemplate.Triggers>
                        <!-- begin Misc -->
                        <Trigger Property="AllowAnimation" Value="false">
                            <Setter TargetName="PART_Expander" Property="ExpandStoryboard" Value="{x:Null}" />
                            <Setter TargetName="PART_Expander" Property="CollapseStoryboard" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_HeaderContainer" Property="Opacity" Value="{DynamicResource {dxat:LWKey AccordionItem.DisabledItemOpacity}}" />
                        </Trigger>
                        <Trigger Property="ItemType" Value="RootItem">
                            <Setter TargetName="PART_HeaderInternalContainer" Property="Margin" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderMargin}}" />
                            <Setter TargetName="PART_Expander" Property="Margin" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemContainerMargin}}" />
                            <Setter TargetName="PART_HeaderContainer" Property="Margin" Value="0" />
                            <Setter TargetName="PART_BackgroundControl" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                            <Setter TargetName="PART_HeaderContent" Property="Margin" Value="{StaticResource HeaderTouchMargin}" />
                            <Setter TargetName="PART_RightBorder" Property="Margin" Value="{StaticResource HeaderTouchMargin}" />
                        </Trigger>
                        <Trigger Property="ItemType" Value="Wrapper">
                            <Setter TargetName="PART_HeaderContent" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="PART_HeaderContent" Property="VerticalAlignment" Value="Stretch" />
                            <Setter TargetName="PART_HeaderContent" Property="Margin" Value="0" />
                            <Setter TargetName="PART_Header" Property="Margin" Value="0" />
                            <Setter TargetName="PART_HeaderInternalContainer" Property="Margin" Value="0" />
                            <Setter TargetName="PART_RightBorder" Property="Margin" Value="0" />
                            <Setter TargetName="PART_HeaderContainer" Property="Margin" Value="0" />
                            <Setter TargetName="PART_BackgroundControl" Property="Margin" Value="0" />
                        </Trigger>
                        <!-- end -->
                        <!-- begin Expand Collapse -->
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="PART_Expander" Property="IsExpanded" Value="False" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ItemVisibilityMode, RelativeSource={RelativeSource Self}}" Value="ShowSubItems" />
                                <Condition Binding="{Binding ItemLevel, RelativeSource={RelativeSource Self}}" Value="0" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Expander" Property="IsExpanded" Value="True" />
                            <Setter TargetName="PART_Expander" Property="ExpandStoryboard" Value="{x:Null}" />
                            <Setter TargetName="PART_Expander" Property="CollapseStoryboard" Value="{x:Null}" />
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Expander" Property="IsExpanded" Value="true" />
                                <Condition SourceName="PART_Expander" Property="Expanding" Value="false" />
                                <Condition Property="AllowAnimation" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Expander" Property="AnimationProgress" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Expander" Property="AnimationProgress" Value="0" />
                                <Condition Property="AllowAnimation" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Expander" Property="IsExpanded" Value="false" />
                                <Condition Property="AllowAnimation" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <!-- end -->
                        <!-- begin Glyph -->
                        <Trigger Property="ActualGlyphPosition" Value="Left">
                            <Setter TargetName="PART_Glyph" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ActualGlyphPosition" Value="Right">
                            <Setter TargetName="PART_Glyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Glyph" Property="Grid.Column" Value="6" />
                            <Setter TargetName="PART_Glyph" Property="Grid.Row" Value="1" />
                        </Trigger>
                        <Trigger Property="ActualGlyphPosition" Value="Top">
                            <Setter TargetName="PART_Glyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Glyph" Property="Grid.Column" Value="4" />
                            <Setter TargetName="PART_Glyph" Property="Grid.Row" Value="0" />
                        </Trigger>
                        <!-- end -->
                        <!-- begin Header row -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                                <Condition Property="ItemType" Value="SubItem" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HeaderRow" Property="MinHeight" Value="{StaticResource HeaderTouchHeight}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
                                <Condition Property="ItemType" Value="RootItem" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HeaderRow" Property="MinHeight" Value="{StaticResource HeaderTouchHeight}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ItemType" Value="RootItem" />
                                <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HeaderRow" Property="MinHeight" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}" />
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ItemVisibilityMode, RelativeSource={RelativeSource Self}}" Value="ShowSubItems" />
                                <Condition Binding="{Binding ItemLevel, RelativeSource={RelativeSource Self}}" Value="0" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="HeaderRow" Property="MinHeight" Value="0" />
                            <Setter TargetName="HeaderRow" Property="Height" Value="0" />
                            <Setter TargetName="PART_Expander" Property="Margin" Value="0" />
                        </MultiDataTrigger>
                        <!-- end -->
                        <!-- begin Expand buttons visibility setters -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HasItems, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ExpandButton" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HasItems, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Left" />
                                <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ExpandButton" Property="Margin" Value="{StaticResource LeftExpanderTouchMargin}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HasItems, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ExpandButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_ExpandButton" Property="Grid.Column" Value="7" />
                            <Setter TargetName="PART_ExpandButton" Property="IsRightExpandButton" Value="True" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HasItems, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Right" />
                                <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ExpandButton" Property="Margin" Value="{StaticResource RightExpanderTouchMargin}" />
                        </MultiDataTrigger>
                        <!-- end -->
                        <!-- begin ExpandButtonContainer -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Left" />
                                <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="LeftExpandButtonColumn" Property="MinWidth" Value="{DynamicResource {dxat:LWKey AccordionItem.ExpandButtonContainerMinWidth}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Left" />
                                <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="LeftExpandButtonColumn" Property="MinWidth" Value="{StaticResource ExpandButtonContainerTouchMinWidth}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Right" />
                                <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="RightExpandButtonColumn" Property="MinWidth" Value="{DynamicResource {dxat:LWKey AccordionItem.ExpandButtonContainerMinWidth}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ActualExpandButtonPosition, RelativeSource={RelativeSource Self}}" Value="Right" />
                                <Condition Binding="{Binding Path=(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="RightExpandButtonColumn" Property="MinWidth" Value="{StaticResource ExpandButtonContainerTouchMinWidth}" />
                        </MultiDataTrigger>
                        <!-- end -->
                        <!-- begin Foreground & States -->
                        <Trigger Property="ItemType" Value="RootItem">
                            <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderDefaultForeground}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Selected" />
                            <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Selected" />
                            <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="Selected" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsSelectionActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="SelectedInactive" />
                            <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="SelectedInactive" />
                            <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="SelectedInactive" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="ItemType" Value="SubItem" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderSelectedForeground}}" />
                            <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderSelectedForeground}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsSelectionActive" Value="False" />
                                <Condition Property="ItemType" Value="SubItem" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderSelectedInactiveForeground}}" />
                            <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderSelectedInactiveForeground}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="ItemType" Value="RootItem" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderSelectedForeground}}" />
                            <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderSelectedForeground}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsSelectionActive" Value="False" />
                                <Condition Property="ItemType" Value="RootItem" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderSelectedInactiveForeground}}" />
                            <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderSelectedInactiveForeground}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverHeader" Value="True" />
                                <Condition Property="ActualHighlightOnHover" Value="True" />
                                <Condition Property="ItemType" Value="SubItem" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderHoverForeground}}" />
                            <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderHoverForeground}}" />
                            <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Hover" />
                            <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Hover" />
                            <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="Hover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverHeader" Value="True" />
                                <Condition Property="ActualHighlightOnHover" Value="True" />
                                <Condition Property="ItemType" Value="RootItem" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHoverForeground}}" />
                            <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHoverForeground}}" />
                            <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Hover" />
                            <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Hover" />
                            <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="Hover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="ActualHighlightOnPress" Value="True" />
                                <Condition Property="ItemType" Value="SubItem" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="Pressed" />
                            <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Pressed" />
                            <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Pressed" />
                            <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderPressedForeground}}" />
                            <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderPressedForeground}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="ActualHighlightOnPress" Value="True" />
                                <Condition Property="ItemType" Value="RootItem" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ExpandButton" Property="ItemState" Value="Pressed" />
                            <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Pressed" />
                            <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Pressed" />
                            <Setter TargetName="PART_RootContentControl" Property="Tag" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderPressedForeground}}" />
                            <Setter TargetName="PART_ExpandButton" Property="Foreground" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderPressedForeground}}" />
                        </MultiTrigger>
                        <Trigger Property="ItemType" Value="Wrapper">
                            <Setter TargetName="PART_BackgroundControl" Property="ItemState" Value="Default" />
                            <Setter TargetName="PART_SelectionIndicator" Property="ItemState" Value="Default" />
                        </Trigger>
                        <!-- end -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <dxan:AccordionVirtualizingPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <DataTrigger Binding="{Binding Path=GlyphTemplateSelector, RelativeSource={RelativeSource Self}, Converter={dxmvvm:ObjectToBooleanConverter}}" Value="True">
                <Setter Property="GlyphTemplate" Value="{x:Null}" />
            </DataTrigger>
            <Trigger Property="ItemType" Value="RootItem">
                <Setter Property="FontWeight" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderFontWeight}}" />
                <Setter Property="FontSize" Value="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderFontSize}}" />
            </Trigger>
            <Trigger Property="ItemType" Value="Wrapper">
                <Setter Property="GlyphPosition" Value="None" />
                <Setter Property="HighlightOnHover" Value="False" />
                <Setter Property="HighlightOnPress" Value="False" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Focusable" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="AccordionControl.DefaultStyleBase" TargetType="{x:Type dxa:AccordionControl}">
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False" />
        <Setter Property="Background" Value="{DynamicResource {dxat:LWKey Accordion.Background}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxat:LWKey Accordion.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxat:LWKey Accordion.BorderThickness}}" />
        <Setter Property="ExpandStoryboard" Value="{DynamicResource {dxat:LWKey Accordion.ExpandStoryboard}}" />
        <Setter Property="CollapseStoryboard" Value="{DynamicResource {dxat:LWKey Accordion.CollapseStoryboard}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HeaderGlyphTemplate" Value="{DynamicResource {dxat:LWKey AccordionItem.AccordionItemDefaultGlyphTemplate}}" />
        <Setter Property="DefaultGlyph" Value="{dx:SvgImageSource Size='16,16', Uri='/DevExpress.Xpf.Accordion.v24.1;component/Images/DefaultGlyph.svg'}" />
        <Setter Property="HeaderStyle" Value="{DynamicResource {dxat:LWKey Accordion.HeaderPresenterStyle}}" />
        <Setter Property="SubItemExpandButtonPosition" Value="{DynamicResource {dxat:LWKey Accordion.DefaultSubItemExpandButtonPosition}}" />
        <Setter Property="EmptySourceText" Value="{dxe:EditorStringId EmptySource}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxa:AccordionControl}">
                    <dx:DXBorder Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="PART_ControlContentContainer" Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition x:Name="RightAccordionColumn" Width="0" />
                            </Grid.ColumnDefinitions>
                            <dxan:AccordionViewExpander
                                x:Name="PART_Expander"
                                ContentMinWidth="{Binding ActualWidth, ElementName=contentExpanderContainer}"
                                ItemMinWidth="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}"
                                Style="{DynamicResource {dxat:LWKey Accordion.AccordionViewExpanderStyle}}">
                                <Grid>
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxa:AccordionResizeBehavior ContentRowIndex="2" OverflowControl="{Binding ElementName=PART_OverflowControl}" />
                                    </dxmvvm:Interaction.Behaviors>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition MinHeight="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="SearchControlColumn" Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition x:Name="RightColumn" Width="0" />
                                    </Grid.ColumnDefinitions>
                                    <ContentControl
                                        x:Name="PART_HeaderBackgroundControl"
                                        Grid.ColumnSpan="2"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Focusable="False"
                                        IsTabStop="False"
                                        Background="{Binding Background, ElementName=PART_HeaderPresenter}"
                                        BorderBrush="{Binding BorderBrush, ElementName=PART_HeaderPresenter}"
                                        BorderThickness="{Binding BorderThickness, ElementName=PART_HeaderPresenter}"
                                        Template="{DynamicResource {dxat:LWKey Accordion.HeaderBackgroundTemplate}}"
                                        Visibility="Collapsed">
                                        <dxa:HeaderPresenter x:Name="PART_HeaderPresenter"
                                                             Focusable="False"
                                                             IsTabStop="False"
                                                             Style="{TemplateBinding HeaderStyle}"/>
                                    </ContentControl>
                                    <dxa:AccordionSearchControl
                                        x:Name="PART_SearchControl"
                                        Grid.Row="1"
                                        NullText="{TemplateBinding SearchControlNullText}"
                                        Style="{DynamicResource {dxat:LWKey Accordion.SearchControlStyle}}">
                                        <dxa:AccordionSearchControl.Visibility>
                                            <MultiBinding Converter="{dxan:ParametersToVisibilityConverter}">
                                                <Binding Path="ShowSearchControl" RelativeSource="{RelativeSource TemplatedParent}" />
                                                <Binding Path="IsExpandedView" RelativeSource="{RelativeSource TemplatedParent}" />
                                            </MultiBinding>
                                        </dxa:AccordionSearchControl.Visibility>
                                    </dxa:AccordionSearchControl>
                                    <ToggleButton
                                        x:Name="PART_AccordionCollapseButton"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Visibility="Collapsed"
                                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{DynamicResource {dxat:LWKey Accordion.CollapseButtonStyle}}" />
                                    <ContentControl
                                        x:Name="PART_ContentContainer"
                                        Grid.Row="2"
                                        Grid.ColumnSpan="2"
                                        Focusable="False">
                                        <ContentPresenter x:Name="PART_ViewPresenter" />
                                    </ContentControl>
                                    <Grid
                                        x:Name="contentExpanderContainer"
                                        Grid.Row="2"
                                        Grid.ColumnSpan="2"
                                        Visibility="Collapsed">
                                        <dxe:ListBoxEdit
                                            x:Name="PART_CollapsedItemsSelector"
                                            Padding="0"
                                            AllowItemHighlighting="True"
                                            IncrementalSearch="False"
                                            ItemContainerStyle="{DynamicResource {dxat:LWKey Accordion.CollapsedItemStyle}}"
                                            ScrollViewer.VerticalScrollBarVisibility="Hidden"
                                            SelectionMode="Multiple"
                                            ShowBorder="False">
                                            <dxe:ListBoxEdit.ItemTemplate>
                                                <DataTemplate>
                                                    <dxa:CollapsedItemDecorator Style="{DynamicResource {dxat:LWKey Accordion.CollapsedItemDecoratorStyle}}" />
                                                </DataTemplate>
                                            </dxe:ListBoxEdit.ItemTemplate>
                                            <dxe:ListBoxEdit.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <dxan:CollapsedAccordionVirtualizingPanel Style="{DynamicResource {dxat:LWKey Accordion.CollapsedAccordionPanelStyle}}" />
                                                </ItemsPanelTemplate>
                                            </dxe:ListBoxEdit.ItemsPanel>
                                        </dxe:ListBoxEdit>
                                        <dxa:AccordionPopup
                                            x:Name="PART_AccordionPopup"
                                            ActualContent="{Binding ElementName=PART_PopupContentContainer}"
                                            PlacementTarget="{Binding ElementName=PART_CollapsedItemsSelector}"
                                            Style="{DynamicResource {dxat:LWKey Accordion.PopupStyle}}">
                                            <ContentControl x:Name="PART_PopupContentContainer" Focusable="False" Template="{DynamicResource {dxat:LWKey Accordion.PopupWindowFrameTemplate}}" />
                                        </dxa:AccordionPopup>
                                    </Grid>
                                    <dxa:AccordionOverflowControl
                                        x:Name="PART_OverflowControl"
                                        Grid.Row="3"
                                        Grid.ColumnSpan="2"
                                        OverflowBackgroundPadding="{DynamicResource {dxat:LWKey Accordion.OverflowBackgroundPadding}}"
                                        OverflowItemMargin="{DynamicResource {dxat:LWKey Accordion.OverflowItemMargin}}"
                                        OverflowItemMinLength="{DynamicResource {dxat:LWKey AccordionItem.RootItemHeaderHeight}}"
                                        Style="{DynamicResource {dxat:LWKey Accordion.AccordionOverflowControlStyle}}"
                                        Template="{DynamicResource {dxat:LWKey Accordion.AccordionOverflowControlTemplate}}">
                                        <dxa:AccordionOverflowControl.Visibility>
                                            <MultiBinding Converter="{dxan:OverflowControlVisibilityConverter}">
                                                <Binding Path="CompactNavigation" RelativeSource="{RelativeSource TemplatedParent}" />
                                                <Binding Path="ActualViewMode" RelativeSource="{RelativeSource TemplatedParent}" />
                                            </MultiBinding>
                                        </dxa:AccordionOverflowControl.Visibility>
                                    </dxa:AccordionOverflowControl>
                                </Grid>
                            </dxan:AccordionViewExpander>
                        </Grid>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpandedView" Value="False">
                            <Setter TargetName="SearchControlColumn" Property="Width" Value="0" />
                            <Setter TargetName="contentExpanderContainer" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_ContentContainer" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_ContentContainer" Property="Width" Value="0" />
                            <Setter TargetName="PART_ViewPresenter" Property="Margin" Value="1" />
                            <Setter TargetName="PART_HeaderPresenter" Property="Visibility" Value="Collapsed"/>
                            <Setter Property="VerticalAlignment" Value="Stretch" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="RightAccordionColumn" Property="Width" Value="*" />
                            <Setter TargetName="RightColumn" Property="Width" Value="*" />
                        </Trigger>
                        <Trigger Property="ActualShowHeader" Value="True">
                            <Setter TargetName="PART_SearchControl" Property="Grid.ColumnSpan" Value="2" />
                            <Setter TargetName="PART_AccordionCollapseButton" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderBackgroundControl" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="AllowAnimation" Value="False">
                            <Setter TargetName="PART_Expander" Property="ExpandStoryboard" Value="{x:Null}" />
                            <Setter TargetName="PART_Expander" Property="CollapseStoryboard" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="IsCollapseButtonVisible" Value="True">
                            <Setter TargetName="PART_AccordionCollapseButton" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AccordionView.DefaultStyleBase" TargetType="{x:Type dxa:AccordionView}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxa:AccordionView">
                    <Grid>
                        <ScrollViewer
                            x:Name="PART_ScrollViewer"
                            BorderThickness="0"
                            CanContentScroll="False"
                            Focusable="False">
                            <dxmvvm:Interaction.Behaviors>
                                <dxa:ItemsViewerMarginBehavior HeaderContainerMargin="{DynamicResource {dxat:LWKey AccordionItem.ItemHeaderContainerMargin}}" IsSingleRootItemViewMode="{Binding Path=IsSingleRootItemViewMode, RelativeSource={RelativeSource TemplatedParent}}" RootItemDisplayMode="{Binding Path=Accordion.RootItemDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" />
                            </dxmvvm:Interaction.Behaviors>
                            <ItemsPresenter />
                        </ScrollViewer>
                        <ContentControl x:Name="PART_EmptySourceControl" Template="{DynamicResource {dxat:LWKey Accordion.EmptySourceTemplate}}" Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                            <Setter TargetName="PART_ScrollViewer" Property="CanContentScroll" Value="True" />
                        </Trigger>
                        <Trigger Property="ShowEmptySourceTemplate" Value="True">
                            <Setter TargetName="PART_EmptySourceControl" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <dxan:AccordionVirtualizingPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion DEFAULT STYLES-->
</ResourceDictionary>