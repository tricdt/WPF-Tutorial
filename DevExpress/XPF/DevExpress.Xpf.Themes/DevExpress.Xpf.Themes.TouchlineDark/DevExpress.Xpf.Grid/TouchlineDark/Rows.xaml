<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--BEGIN WPF-->

    <ResourceDictionary.MergedDictionaries>
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.TouchlineDark.v24.1;component/DevExpress.Xpf.Grid/TouchlineDark/Constants.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--END WPF-->

    <dxg:DetailLevelToObjectConverter x:Key="DetailLevelToBorderLeftConverter"
                                      DetailValue="1,0,0,0"
                                      NotDetailValue="0,0,0,0"/>

    <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

    <dx:EnumToObjectConverter x:Key="EnumToObjectConverter">
        <dx:EnumToObjectConverter.Values>
            <dx:EnumObjectProvider x:Key="None" Value="Transparent"/>
            <dx:EnumObjectProvider x:Key="Selected" Value="{StaticResource {dxgt:GridRowThemeKey ResourceKey=BorderSelectedBrush}}"/>
            <dx:EnumObjectProvider x:Key="Focused" Value="{StaticResource {dxgt:GridRowThemeKey ResourceKey=BorderFocusedBrush}}"/>
        </dx:EnumToObjectConverter.Values>
    </dx:EnumToObjectConverter>

    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter/>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Border x:Name="ContentBorder" TextBlock.Foreground="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupGridRowHeaderTextBrush}}">
            <ContentPresenter/>
        </Border>
    </ControlTemplate>

    <Style x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowPresenterStyle}" TargetType="{x:Type dxg:GroupGridRowPresenter}"></Style>

    <!--BEGIN WPF-->

    <ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Border x:Name="groupBorder"
                Background="#FF333333"
                BorderBrush="#FF515151"
                SnapsToDevicePixels="True">
            <ContentPresenter/>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="ContentGrid">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Border x:Name="ContentBorderTop"
                    BorderBrush="#FF515151"
                    BorderThickness="0,0,0,0"
                    Grid.Row="0"/>
            <Border x:Name="ContentBorder"
                    BorderBrush="#FFC0C0C0"
                    cs:Name="Border_0001"
                    DockPanel.Dock="Top"
                    Grid.Row="1"
                    TextBlock.Foreground="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupGridRowHeaderTextBrush}}">
                <ContentPresenter/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsPreviewExpanded}" Value="True">
                <Setter Property="BorderThickness"
                        TargetName="ContentBorderTop"
                        Value="0,1,0,0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsRowVisible}" Value="false">
                <Setter Property="Visibility"
                        TargetName="ContentBorder"
                        Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource TemplatedParent}}" Value="Horizontal">
                <Setter Property="LayoutTransform" TargetName="ContentGrid">
                    <Setter.Value>
                        <RotateTransform Angle="-90"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="DockPanel.Dock"
                        TargetName="ContentBorder"
                        Value="Left"/>
                <Setter Property="VerticalAlignment"
                        TargetName="ContentBorder"
                        Value="Stretch"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <SolidColorBrush x:Key="BorderFocusedBrush" Color="#FFF78A09"/>

    <SolidColorBrush x:Key="BorderSelectedUnfocusedBrush" Color="#FFC3C3C3"/>

    <!--END WPF-->

    <SolidColorBrush x:Key="RowControlContainerValidationErrorBackground" cs:Name="SolidColorBrush_0003">#FF332626</SolidColorBrush>

    <SolidColorBrush x:Key="RowControlContainerTransparentBackground" cs:Name="SolidColorBrush_0004">#00000000</SolidColorBrush>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=RowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid>
            <!--ONLY SL<Grid.Background>
                <Binding Path="(dxe:BaseEdit.HasValidationError)">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter TrueValue="{StaticResource RowControlContainerValidationErrorBackground}"
                            FalseValue="{StaticResource RowControlContainerTransparentBackground}"/>
                    </Binding.Converter>
                </Binding>
            </Grid.Background>
            <Grid x:Name="AlternateRowElement" Background="{Binding Path=View.AlternateRowBackground}" dxg:FadeSelectionHelper.IsKeyboardFocusWithinView="{Binding Path=(dxg:GridControl.ActiveView).IsKeyboardFocusWithin, RelativeSource={RelativeSource Mode=Self}}" dxg:FadeSelectionHelper.FadeSelectionOnLostFocus="{Binding Path=View.ActualFadeSelectionOnLostFocus}">
                        <Grid.Visibility>
                            <Binding Path="AlternateRow">
                                <Binding.Converter>
                                    <dx:BoolToVisibilityConverter />
                                </Binding.Converter>
                            </Binding>
                        </Grid.Visibility>
                    </Grid>
            ONLY SL-->
            <Border x:Name="RowContentBorder">
                <!--BEGIN WPF-->
                <Border.Background>
                    <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}"/>
                </Border.Background>
                <!--END WPF-->
                <!--ONLY SL
                <Border.Background>
                    <Binding Path="SelectionState" Converter="{StaticResource EnumToObjectConverter}" />
                </Border.Background>
                ONLY SL-->
            </Border>
            <Border Background="{StaticResource UnfocusedRowBrush}"
                    dxg:FadeSelectionHelper.FadeSelectionOnLostFocus="{Binding Path=View.ActualFadeSelectionOnLostFocus}"
                    dxg:FadeSelectionHelper.IsKeyboardFocusWithinView="{Binding Path=(dxg:GridControl.ActiveView).IsKeyboardFocusWithin, RelativeSource={RelativeSource Mode=Self}}"
                    dxg:FadeSelectionHelper.IsSelected="{Binding SelectionState, Converter={dxg:SelectionStateToBooleanConverter}}"
                    dxg:FadeSelectionHelper.Opacity="1"
                    Visibility="Collapsed"/>
            <Border x:Name="RowBottomLine"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Padding="{TemplateBinding Padding}">
                <Border.BorderThickness>
                    <Binding Path="View.ShowHorizontalLines">
                        <Binding.Converter>
                            <dx:BoolToObjectConverter FalseValue="0" TrueValue="0,0,0,1"/>
                        </Binding.Converter>
                    </Binding>
                </Border.BorderThickness>
            </Border>
            <ContentPresenter/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ShowBottomLine}" Value="True">
                <Setter Property="BorderThickness"
                        TargetName="RowBottomLine"
                        Value="0,0,0,1"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxg:RowData.CurrentRowData).(dxe:BaseEdit.HasValidationError), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                    <Condition Binding="{Binding Path=(dxg:RowData.CurrentRowData).IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="RowContentBorder"
                        Value="{StaticResource {dxgt:GridRowThemeKey ResourceKey=ValidationErrorBrush}}"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.FixedGroupsAdorner}" TargetType="{x:Type dxg:FixedGroupsAdorner}">
        <Setter Property="AdornerHeight" Value="12"/>
        <Setter Property="AdornerBrush">
            <Setter.Value>
                <LinearGradientBrush cs:Name="LinearGradientBrush_0041"
                                     EndPoint="0.5,1"
                                     StartPoint="0.5,0">
                    <GradientStop Color="#20000000" Offset="0"/>
                    <GradientStop Color="#00000000" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxg:FixedGroupsAdorner}">
                    <ContentPresenter Content="{TemplateBinding Content}" IsHitTestVisible="false"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowIndicatorControl}" TargetType="{x:Type dxg:RowIndicatorControl}">
        <Setter Property="Foreground" Value="{StaticResource ResourceKey={dxgt:RowIndicatorThemeKey ResourceKey=ForegroundBrush}}"/>
    </Style>

    <Style x:Key="{dxgt:GridRowThemeKey ResourceKey=DetailTotalSummaryIndentBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="#FF515151"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GridDetailExpandButtonContainer}" TargetType="{x:Type dxg:GridDetailExpandButtonContainer}">
        <Setter Property="IsMasterRowExpanded" Value="{Binding IsMasterRowExpanded}"/>
        <Setter Property="RowPosition" Value="Single"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxg:GridDetailExpandButtonContainer">
                    <Grid>
                        <dxg:GridDetailExpandButton Name="PART_ExpandButton"
                                                    Command="{Binding View.Commands.ChangeMasterRowExpanded}"
                                                    CommandParameter="{Binding Path=RowHandle.Value}"
                                                    dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible="{Binding Path=(dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible), RelativeSource={RelativeSource TemplatedParent}}"
                                                    IsChecked="{Binding Path=IsRowExpanded, Mode=OneWay}"/>
                        <Border x:Name="detailRightLine"
                                BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"
                                BorderThickness="0,0,1,0"
                                HorizontalAlignment="Right"
                                Visibility="Collapsed"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.DetailIndentControl}" TargetType="{x:Type dxg:DetailIndentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <dxg:BackgroundBorderControl IsDetailMargin="{Binding Path=IsDetailMargin}"
                                                     IsMasterRowExpanded="{Binding Path=(dx:DataObjectBase.DataObject).IsMasterRowExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                     ItemLevel="{Binding Path=Level}"
                                                     LineLevel="{Binding Path=(dx:DataObjectBase.DataObject).LineLevel, RelativeSource={RelativeSource TemplatedParent}}"
                                                     RowLevel="{Binding Path=(dx:DataObjectBase.DataObject).DetailLevel, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="detailLeftLine"
                                BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"
                                BorderThickness="1,0,0,0"
                                dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"
                                HorizontalAlignment="Right"/>
                        <Border x:Name="detailBottomLine" BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsDetailMargin}" Value="True">
                            <Setter Property="BorderBrush"
                                    TargetName="detailLeftLine"
                                    Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=BorderBrush}}"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ShowLastDetailMargin, RelativeSource={RelativeSource FindAncestor, AncestorType=dxg:DetailRowsIndentControl}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsLast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility"
                                    TargetName="detailLeftLine"
                                    Value="Collapsed"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ShowBottomLine, RelativeSource={RelativeSource FindAncestor, AncestorType=dxg:DetailRowsIndentControl}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsLast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness"
                                    TargetName="detailBottomLine"
                                    Value="0,0,0,1"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.DetailRowsIndentControl}" TargetType="{x:Type dxg:DetailRowsIndentControl}">
        <Setter Property="dxg:DetailSummaryControlBase.SummaryDetailLevel" Value="{Binding Path=(dxg:DetailSummaryControlBase.SummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxg:DetailIndentControl dx:DataObjectBase.DataObject="{Binding Path=(dx:DataObjectBase.DataObject), RelativeSource={RelativeSource TemplatedParent}}"
                                             dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"
                                             Width="{Binding Path=Width}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsLeft" Value="False">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <dxg:DetailIndentControl dx:DataObjectBase.DataObject="{Binding Path=(dx:DataObjectBase.DataObject), RelativeSource={RelativeSource TemplatedParent}}"
                                                     dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"
                                                     Width="{Binding Path=WidthAtRight}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="-1" ScaleY="1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Infinity Loading -->

    <ControlTemplate x:Key="LoadingIndicator" TargetType="{x:Type ProgressBar}">
        <Grid x:Name="TemplateRoot" SnapsToDevicePixels="true">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Determinate"/>
                    <VisualState x:Name="Indeterminate">
                        <Storyboard>
                            <DoubleAnimation Duration="00:00:1"
                                             From="-32"
                                             RepeatBehavior="Forever"
                                             Storyboard.TargetName="Glyph"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                             To="32"/>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <Border Background="{TemplateBinding BorderBrush}" CornerRadius="128">
                    <Grid Margin="{TemplateBinding BorderThickness}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="128"/>
                    </Grid>
                </Border>
                <Grid ClipToBounds="True"
                      dx:FrameworkElementHelper.IsClipped="True"
                      Margin="{TemplateBinding BorderThickness}">
                    <Path x:Name="Glyph"
                          Data="F1 M 506,131L 522.898,131L 513,122L 518.097,122L 530.097,133L 518.097,144L 513.097,144L 522.916,135L 506,135L 506,131 Z "
                          Fill="{TemplateBinding Foreground}"
                          Height="22"
                          RenderTransformOrigin="0.5,0.5"
                          Stretch="Fill"
                          Width="24">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                </Grid>
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=LoadingRowTemplate}" TargetType="dxg:LoadingRowControl">
        <Grid x:Name="Root"
              Margin="1"
              MinHeight="44">
            <ProgressBar x:Name="Indicator"
                         Background="#FF333333"
                         BorderBrush="#FFF78A09"
                         BorderThickness="4"
                         Foreground="#FFF78A09"
                         Height="40"
                         HorizontalAlignment="Center"
                         IsIndeterminate="{Binding ShowLoadingIndicator}"
                         Margin="18,18,12,18"
                         Template="{StaticResource LoadingIndicator}"
                         VerticalAlignment="Center"
                         Visibility="{Binding ShowLoadingIndicator, Converter={StaticResource BoolToVisibilityConverter}}"
                         Width="40"/>
            <dxg:LoadingRowButton Click="{DXEvent 'LoadMoreRows()'}"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  Visibility="{Binding AllowLoadMore, Converter={StaticResource BoolToVisibilityConverter}}">
                <StackPanel Margin="15,0,9,1" Orientation="Horizontal">
                    <Label Content="{dxg:GridControlStringId LoadingRowLoadMore}"/>
                    <Path x:Name="GlyphCollapsed"
                          Data="F1 M 348,807C 348,799.82 342.18,794 335,794C 327.821,794 322,799.82 322,807C 322,814.18 327.821,820 335,820C 342.18,820 348,814.18 348,807 Z M 346,807C 346,813.075 341.075,818 335,818C 328.925,818 324,813.075 324,807C 324,800.925 328.925,796 335,796C 341.075,796 346,800.925 346,807 Z M 335,816L 343,808L 343,805L 336,812L 336,799L 334,799L 334,812L 327,805L 327,808L 335,816 Z "
                          Fill="#FF929292"
                          Height="26"
                          Stretch="Fill"
                          Visibility="Collapsed"
                          Width="26"/>
                </StackPanel>
            </dxg:LoadingRowButton>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=LoadingRowErrorTemplate}" TargetType="dxg:LoadingRowControl">
        <Grid x:Name="Root" Margin="3">
            <Grid HorizontalAlignment="Center"
                  Margin="96,0,96,0"
                  MaxWidth="640"
                  VerticalAlignment="Top">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Path Data="F1 M 7,0C 10.866,0 14,3.13401 14,7C 14,10.866 10.866,14 7,14C 3.13401,14 -6.35783e-007,10.866 -6.35783e-007,7C -6.35783e-007,3.13401 3.13401,0 7,0 Z M 2.75736,4.17157L 5.58579,7L 2.75736,9.82843L 4.17157,11.2426L 7,8.41422L 9.82843,11.2426L 11.2426,9.82843L 8.41421,7L 11.2426,4.17157L 9.82843,2.75736L 7,5.58579L 4.17157,2.75736L 2.75736,4.17157 Z "
                      Fill="#FFF78A09"
                      Height="28"
                      HorizontalAlignment="Center"
                      Margin="6"
                      Stretch="Fill"
                      VerticalAlignment="Top"
                      Width="28"/>
                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <TextBlock HorizontalAlignment="Left"
                               Margin="8"
                               Text="{Binding ErrorText}"
                               TextWrapping="Wrap"/>
                    <TextBlock HorizontalAlignment="Center" Visibility="{Binding IsLoadingButtonVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                        <dxe:HyperlinkEdit Command="{Binding LoadRowsCommand}" Text="{Binding LoadingButtonText}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=LoadingRowButtonTemplate}" TargetType="dxg:LoadingRowButton">
        <Grid x:Name="Root">
            <Border x:Name="IsDefault" Background="Transparent"/>
            <ContentPresenter x:Name="Content"
                              HorizontalAlignment="Center"
                              Margin="8"
                              TextBlock.Foreground="#FFE3E3E3"
                              VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.Foreground"
                        TargetName="Content"
                        Value="#FFFFFFFF"/>
                <Setter Property="Background"
                        TargetName="IsDefault"
                        Value="#FF999999"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="TextBlock.Foreground"
                        TargetName="Content"
                        Value="#FF333333"/>
                <Setter Property="Background"
                        TargetName="IsDefault"
                        Value="#FFF78A09"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>