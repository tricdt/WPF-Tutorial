<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxeh="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:internal="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <ResourceDictionary.MergedDictionaries>
    <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.TouchlineDark.v24.1;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Editors/Themes/Generic/Common.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=DateEditButtonPadding}">0</Thickness>
  <CornerRadius x:Key="{dxet:ButtonsThemeKey ResourceKey=CornerRadius}">0</CornerRadius>
  <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=Padding}">0</Thickness>
  <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=DefaultBorderThickness}">1,1,1,1</Thickness>
  <sys:Boolean x:Key="{dxet:ButtonsThemeKey ResourceKey=DateEditUseArrowGlyph}">True</sys:Boolean>
  <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
  <Thickness x:Key="{dxet:ButtonEditThemeKey ResourceKey=ButtonEditPaddingCorrection}">0,0,0,0</Thickness>
  <Thickness x:Key="{dxet:ButtonEditThemeKey ResourceKey=ButtonEditPadding}">0</Thickness>
  <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=LeftButtonMargin}">0,0,1,0</Thickness>
  <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=RightButtonMargin}">1,0,0,0</Thickness>
  <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=LeftButtonMarginCorrection}">0</Thickness>
  <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=RightButtonMarginCorrection}">0</Thickness>
  <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=ButtonMargin}">-1</Thickness>
  <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=ButtonMarginCorrection}">0</Thickness>
  <Style x:Key="{dxet:ButtonsThemeKey ResourceKey=ImageButtonGlyphStyle}" TargetType="{x:Type Image}">
    <Setter Property="Width" Value="16" />
    <Setter Property="Height" Value="16" />
  </Style>
  <Style x:Key="{dxet:BrowsePathThemeKey ResourceKey=IconStyle}" TargetType="{x:Type dx:DXImage}">
    <Setter Property="Margin" Value="4,0,0,0" />
    <Setter Property="Width" Value="16" />
    <Setter Property="Height" Value="16" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Margin" Value="14,0,0,0" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
        <Setter Property="Margin" Value="14,0,0,0" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="0.35" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <internal:BrushToSvgPaletteConverter x:Key="BrushToSvgPaletteConverter" />
  <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=ImageButtonContentTemplate}">
    <Grid Name="root">
      <dx:DXImage x:Name="image" Source="{Binding Path=Glyph}" Style="{Binding Path=GlyphStyle}" />
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ButtonBase}}" Value="True">
        <Setter Property="dx:WpfSvgPalette.Palette" TargetName="image" Value="{Binding Path=(TextElement.Foreground), Converter={StaticResource BrushToSvgPaletteConverter}, ConverterParameter=BlackColor, RelativeSource={RelativeSource Self}}" />
      </DataTrigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="MinWidth" TargetName="root" Value="42" />
      </Trigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=DateEditButtonContentTemplate}">
    <Grid Name="root" Margin="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DateEditButtonPadding}}">
      <dx:DXImage x:Name="image" Source="{Binding Path=Glyph}" Style="{Binding Path=GlyphStyle}" />
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ButtonBase}}" Value="True">
        <Setter Property="dx:WpfSvgPalette.Palette" TargetName="image" Value="{Binding Path=(TextElement.Foreground), Converter={StaticResource BrushToSvgPaletteConverter}, ConverterParameter=BlackColor, RelativeSource={RelativeSource Self}}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceInactive">
        <Setter Property="dx:WpfSvgPalette.Palette" TargetName="image" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, Converter={StaticResource BrushToSvgPaletteConverter}, ConverterParameter=BlackColor, RelativeSource={RelativeSource Self}}" />
      </DataTrigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="MinWidth" TargetName="root" Value="42" />
      </Trigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=ButtonInfoTemplate}">
    <Border Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
      <Button x:Name="PART_Item" Style="{Binding Path=ButtonStyle}" />
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=RepeatButtonInfoTemplate}">
    <Border Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
      <RepeatButton x:Name="PART_Item" Style="{Binding Path=ButtonStyle}" />
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=ToggleButtonInfoTemplate}">
    <Border Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
      <dx:ToggleStateButton IsChecked="{Binding Path=IsChecked, Mode=TwoWay}" x:Name="PART_Item" internal:SetIsCheckedToButtonInfoBehavior.IsEnabled="True" Style="{Binding Path=ButtonStyle}" />
    </Border>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=IsDefaultButton}" Value="True">
        <Setter TargetName="PART_Item" Property="IsChecked" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsPopupOpen, RelativeSource={RelativeSource Self}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=IsDefaultButton}" Value="False">
        <Setter TargetName="PART_Item" Property="HandleToggle" Value="False" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <ControlTemplate x:Key="{dxet:ButtonEditThemeKey ResourceKey=TemplateWithoutEditBox}" TargetType="{x:Type dxe:ButtonEdit}">
    <ContentControl Template="{TemplateBinding ActualBorderTemplate}" IsTabStop="False" internal:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}" internal:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
      <Grid>
        <dxe:EditorControl x:Name="PART_Content" Opacity="0" IsEnabled="False" VerticalAlignment="Stretch" Template="{TemplateBinding ActualEditorControlTemplate}" />
        <dxe:ButtonsControl x:Name="PART_Buttons" ItemsSource="{TemplateBinding SortedButtons}" Visibility="Collapsed">
          <dxe:ButtonsControl.ItemsPanel>
            <ItemsPanelTemplate>
              <dxe:ButtonsPanel />
            </ItemsPanelTemplate>
          </dxe:ButtonsControl.ItemsPanel>
        </dxe:ButtonsControl>
      </Grid>
    </ContentControl>
    <ControlTemplate.Triggers>
      <Trigger Property="ShowEditorButtons" Value="True">
        <Setter TargetName="PART_Buttons" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="{dxet:ButtonEditThemeKey ResourceKey=InplaceTemplateWithoutEditBox}" TargetType="{x:Type dxe:ButtonEdit}">
    <Grid>
      <dxe:EditorControl x:Name="PART_Content" Opacity="0" IsEnabled="False" VerticalAlignment="Stretch" Template="{TemplateBinding ActualEditorControlTemplate}" />
      <dxe:ButtonsControl x:Name="PART_Buttons" ItemsSource="{TemplateBinding SortedButtons}" Visibility="Collapsed">
        <dxe:ButtonsControl.ItemsPanel>
          <ItemsPanelTemplate>
            <dxe:ButtonsPanel />
          </ItemsPanelTemplate>
        </dxe:ButtonsControl.ItemsPanel>
      </dxe:ButtonsControl>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ShowEditorButtons" Value="True">
        <Setter TargetName="PART_Buttons" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="{dxet:ButtonEditThemeKey ResourceKey=Template}" TargetType="{x:Type dxe:ButtonEdit}">
    <ContentControl x:Name="PART_Root" Template="{TemplateBinding ActualBorderTemplate}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" dxn:AppearanceOptions.CornerRadius="{Binding Path=(dxn:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" dxn:AppearanceOptions.HasCornerRadius="{Binding Path=(dxn:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}" dxn:AppearanceOptions.BorderThickness="{Binding Path=(dxn:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" dxn:AppearanceOptions.HasBorderThickness="{Binding Path=(dxn:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}" dxe:EditorAppearanceProperties.FocusedBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" dxe:EditorAppearanceProperties.ReadOnlyBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" dxe:EditorAppearanceProperties.ReadOnlyBackground="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource TemplatedParent}}" dx:FocusHelper2.Focusable="False" internal:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}" internal:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
      <Grid x:Name="ButtonEditGrid" SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" x:Name="PART_FirstRow" />
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Label x:Name="PART_Label" Grid.Row="0" Grid.Column="2" Content="{TemplateBinding Label}" Visibility="Collapsed" VerticalAlignment="Bottom" Margin="{DynamicResource {dxet:EmbeddedEditorLabelsThemeKey ResourceKey=Margin}}" Padding="{DynamicResource {dxet:EmbeddedEditorLabelsThemeKey ResourceKey=Padding}}" FontSize="{DynamicResource {dxet:EmbeddedEditorLabelsThemeKey ResourceKey=FontSize}}" Foreground="{DynamicResource {dxet:EmbeddedEditorLabelsThemeKey ResourceKey=Foreground}}" />
        <dxe:ErrorControl x:Name="PART_ErrorPresenter" Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" />
        <dxe:ButtonsControl x:Name="PART_LeftButtons" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" ItemsSource="{TemplateBinding LeftButtons}" Visibility="{Binding Path=ActualShowLeftButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
        <dxe:EditorControl x:Name="PART_Content" Grid.Row="1" Grid.Column="2" VerticalAlignment="Stretch" dx:FocusHelper2.Focusable="False" Template="{TemplateBinding ActualEditorControlTemplate}" />
        <dxe:ButtonsControl x:Name="PART_RightButtons" Grid.Row="0" Grid.RowSpan="2" Grid.Column="3" ItemsSource="{TemplateBinding RightButtons}" Visibility="{Binding Path=ActualShowRightButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
      </Grid>
    </ContentControl>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="true" />
          <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Template" TargetName="PART_Content" Value="{Binding Path=EditTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="false" />
          <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Template" TargetName="PART_Content" Value="{Binding Path=EditNonEditableTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Binding="{Binding Path=ShowBorder, RelativeSource={RelativeSource Self}}" Value="true">
        <Setter TargetName="PART_ErrorPresenter" Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxet:InplaceBaseEditThemeKey ResourceKey=ValidationErrorSvgPalette}}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}" Value="True">
        <Setter TargetName="PART_Label" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_Content" Property="Margin" Value="{DynamicResource {dxet:EmbeddedEditorLabelsThemeKey ResourceKey=ContentMargin}}" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoVerticalTemplate}">
    <Border UseLayoutRounding="True" Margin="{Binding Path=ActualMargin}">
      <Grid Style="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoVerticalStyle}}" x:Name="MainGrid" Height="Auto" Visibility="{Binding Path=Visibility}" SnapsToDevicePixels="True">
        <Grid.RowDefinitions>
          <RowDefinition />
          <RowDefinition />
        </Grid.RowDefinitions>
        <dxe:SpinButton Template="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinUpButtonTemplate}}" x:Name="PART_SpinUpButton" Foreground="{Binding Path=Foreground}" IsEnabled="{Binding IsEnabled}" dx:FocusHelper2.Focusable="False" Grid.Row="0" ClickMode="{Binding Path=ClickMode}" Interval="500" ContentTemplate="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinUpGlyph}}" Command="{Binding ActualSpinUpCommand}" CommandParameter="{Binding SpinUpCommandParameter}">
          <dxe:SpinButton.CommandTarget>
            <Binding Path="SpinUpCommandTarget" />
          </dxe:SpinButton.CommandTarget>
        </dxe:SpinButton>
        <dxe:SpinButton Template="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinDownButtonTemplate}}" x:Name="PART_SpinDownButton" Foreground="{Binding Path=Foreground}" IsEnabled="{Binding IsEnabled}" dx:FocusHelper2.Focusable="False" Grid.Row="1" ClickMode="{Binding Path=ClickMode}" Interval="500" ContentTemplate="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinDownGlyph}}" Command="{Binding ActualSpinDownCommand}" CommandParameter="{Binding SpinDownCommandParameter}">
          <dxe:SpinButton.CommandTarget>
            <Binding Path="SpinDownCommandTarget" />
          </dxe:SpinButton.CommandTarget>
        </dxe:SpinButton>
      </Grid>
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoHorizontalTemplate}">
    <Border UseLayoutRounding="True" Margin="{Binding Path=ActualMargin}">
      <Grid Style="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoHorizontalStyle}}" x:Name="MainGrid" Height="Auto" Visibility="{Binding Path=Visibility}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition />
          <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <dxe:SpinButton Template="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinLeftButtonTemplate}}" x:Name="PART_SpinDownButton" Foreground="{Binding Path=Foreground}" IsEnabled="{Binding IsEnabled}" dx:FocusHelper2.Focusable="False" Grid.Column="0" ClickMode="{Binding Path=ClickMode}" Interval="500" ContentTemplate="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinLeftGlyph}}" Command="{Binding ActualSpinDownCommand}" CommandParameter="{Binding SpinDownCommandParameter}">
          <dxe:SpinButton.CommandTarget>
            <Binding Path="SpinDownCommandTarget" />
          </dxe:SpinButton.CommandTarget>
        </dxe:SpinButton>
        <dxe:SpinButton Template="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinRightButtonTemplate}}" x:Name="PART_SpinUpButton" Foreground="{Binding Path=Foreground}" IsEnabled="{Binding IsEnabled}" dx:FocusHelper2.Focusable="False" Grid.Column="1" ClickMode="{Binding Path=ClickMode}" Interval="500" ContentTemplate="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinRightGlyph}}" Command="{Binding ActualSpinUpCommand}" CommandParameter="{Binding SpinUpCommandParameter}">
          <dxe:SpinButton.CommandTarget>
            <Binding Path="SpinUpCommandTarget" />
          </dxe:SpinButton.CommandTarget>
        </dxe:SpinButton>
      </Grid>
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=DeleteButtonInfoTemplate}">
    <Border Margin="{Binding Path=ActualMargin}">
      <dxe:ButtonClose x:Name="PART_Item" Style="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DeleteButtonStyle}}" />
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=LoadingButtonInfoTemplate}">
    <Button Visibility="{Binding Path=Visibility}" Style="{DynamicResource {dxet:ComboBoxEditThemeKey ResourceKey=LoadingButtonStyle}}" />
  </DataTemplate>
  <ControlTemplate x:Key="{dxet:BrowsePathThemeKey ResourceKey=Template}" TargetType="{x:Type dxe:BrowsePathEdit}">
    <ContentControl x:Name="PART_Root" Template="{TemplateBinding ActualBorderTemplate}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" dxn:AppearanceOptions.CornerRadius="{Binding Path=(dxn:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" dxn:AppearanceOptions.HasCornerRadius="{Binding Path=(dxn:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}" dxn:AppearanceOptions.BorderThickness="{Binding Path=(dxn:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}" dxn:AppearanceOptions.HasBorderThickness="{Binding Path=(dxn:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}" dxe:EditorAppearanceProperties.FocusedBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" dxe:EditorAppearanceProperties.ReadOnlyBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" dxe:EditorAppearanceProperties.ReadOnlyBackground="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource TemplatedParent}}" dx:FocusHelper2.Focusable="False" internal:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}" internal:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
      <Grid x:Name="ButtonEditGrid" SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" x:Name="PART_FirstRow" />
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Label x:Name="PART_Label" Grid.Row="0" Grid.Column="3" Content="{TemplateBinding Label}" Visibility="Collapsed" VerticalAlignment="Bottom" Margin="{DynamicResource {dxet:EmbeddedEditorLabelsThemeKey ResourceKey=Margin}}" Padding="{DynamicResource {dxet:EmbeddedEditorLabelsThemeKey ResourceKey=Padding}}" FontSize="{DynamicResource {dxet:EmbeddedEditorLabelsThemeKey ResourceKey=FontSize}}" Foreground="{DynamicResource {dxet:EmbeddedEditorLabelsThemeKey ResourceKey=Foreground}}" />
        <dxe:ErrorControl Grid.Row="0" Grid.RowSpan="2" x:Name="PART_ErrorPresenter" />
        <dxe:ButtonsControl x:Name="PART_LeftButtons" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" ItemsSource="{TemplateBinding LeftButtons}" Visibility="{Binding Path=ActualShowLeftButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
        <dx:DXImage Grid.Row="0" Grid.RowSpan="2" Grid.Column="2" Source="{TemplateBinding PathIcon}" Style="{DynamicResource {dxet:BrowsePathThemeKey ResourceKey=IconStyle}}" Visibility="{TemplateBinding ShowIcon, Converter={StaticResource BoolToVisibilityConverter}}" x:Name="PART_Icon" />
        <dxe:EditorControl x:Name="PART_Content" Grid.Row="1" Grid.Column="3" VerticalAlignment="Stretch" dx:FocusHelper2.Focusable="False" Template="{TemplateBinding ActualEditorControlTemplate}" />
        <dxe:ButtonsControl x:Name="PART_RightButtons" Grid.Row="0" Grid.RowSpan="2" Grid.Column="4" ItemsSource="{TemplateBinding RightButtons}" Visibility="{Binding Path=ActualShowRightButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
      </Grid>
    </ContentControl>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="true" />
          <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Template" TargetName="PART_Content" Value="{Binding Path=EditTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="false" />
          <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Template" TargetName="PART_Content" Value="{Binding Path=EditNonEditableTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Binding="{Binding Path=ShowBorder, RelativeSource={RelativeSource Self}}" Value="true">
        <Setter TargetName="PART_ErrorPresenter" Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxet:InplaceBaseEditThemeKey ResourceKey=ValidationErrorSvgPalette}}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}" Value="True">
        <Setter TargetName="PART_Label" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_Content" Property="Margin" Value="{DynamicResource {dxet:EmbeddedEditorLabelsThemeKey ResourceKey=ContentMargin}}" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>