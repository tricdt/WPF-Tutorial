<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:dxgcore="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--BEGIN WPF-->

    <ResourceDictionary.MergedDictionaries>
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.LightGray.v24.1;component/DevExpress.Xpf.Grid/LightGray/Constants.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--END WPF-->

    <dxg:DetailLevelToObjectConverter x:Key="DetailLevelToBorderLeftConverter"
                                      DetailValue="1,0,0,0"
                                      NotDetailValue="0,0,0,0"/>

    <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter/>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Border x:Name="ContentBorder"
                BorderBrush="{DynamicResource GroupGridRowBorderBrush}"
                TextBlock.Foreground="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupGridRowHeaderTextBrush}}">
            <ContentPresenter/>
        </Border>
    </ControlTemplate>

    <Style x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowPresenterStyle}" TargetType="{x:Type dxg:GroupGridRowPresenter}"></Style>

    <!--BEGIN WPF-->

    <ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Border Background="#FFFFFFFF "
                BorderBrush="#FFD3D3D3"
                SnapsToDevicePixels="True">
            <ContentPresenter/>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="ContentGrid">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Border x:Name="ContentBorderTop"
                    BorderBrush="#FFD3D3D3"
                    BorderThickness="0,0,0,0"
                    Grid.Row="0"/>
            <Border x:Name="ContentBorder"
                    BorderBrush="{DynamicResource GroupGridRowBorderBrush}"
                    BorderThickness="0"
                    DockPanel.Dock="Top"
                    Grid.Row="1"
                    TextBlock.Foreground="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupGridRowHeaderTextBrush}}">
                <ContentPresenter/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsPreviewExpanded}" Value="True">
                <Setter Property="BorderThickness"
                        TargetName="ContentBorderTop"
                        Value="0,1,0,0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsRowVisible}" Value="false">
                <Setter Property="Visibility"
                        TargetName="ContentBorder"
                        Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource TemplatedParent}}" Value="Horizontal">
                <Setter Property="LayoutTransform" TargetName="ContentGrid">
                    <Setter.Value>
                        <RotateTransform Angle="-90"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="DockPanel.Dock"
                        TargetName="ContentBorder"
                        Value="Left"/>
                <Setter Property="VerticalAlignment"
                        TargetName="ContentBorder"
                        Value="Stretch"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <SolidColorBrush x:Key="BorderFocusedBrush" Color="#FFD6E8FF "/>

    <SolidColorBrush x:Key="BorderSelectedUnfocusedBrush" Color="#FFE8F2FF "/>

    <!--END WPF-->

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=RowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <!--ONLY SL
            <Grid.Background>
                <Binding Path="(dxe:BaseEdit.HasValidationError)">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter TrueValue="#FFFFD9D9" FalseValue="Transparent"/>
                    </Binding.Converter>
                </Binding>
            </Grid.Background>
            <Grid x:Name="AlternateRowElement" Background="{Binding Path=View.ActualAlternateRowBackground}" dxg:FadeSelectionHelper.IsKeyboardFocusWithinView="{Binding Path=View.IsKeyboardFocusWithinView}" dxg:FadeSelectionHelper.FadeSelectionOnLostFocus="{Binding Path=View.ActualFadeSelectionOnLostFocus}">
                        <Grid.Visibility>
                            <Binding Path="AlternateRow">
                                <Binding.Converter>
                                    <dx:BoolToVisibilityConverter />
                                </Binding.Converter>
                            </Binding>
                        </Grid.Visibility>
                    </Grid>
            ONLY SL-->
            <Border x:Name="RowContentBorder"
                    dxg:FadeSelectionHelper.FadeSelectionOnLostFocus="{Binding Path=View.ActualFadeSelectionOnLostFocus}"
                    dxg:FadeSelectionHelper.IsKeyboardFocusWithinView="{Binding Path=(dxg:GridControl.ActiveView).IsKeyboardFocusWithin, RelativeSource={RelativeSource Mode=Self}}">
                <!--BEGIN WPF-->
                <Border.Background>
                    <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}"/>
                </Border.Background>
                <!--END WPF-->
                <!--ONLY SL<Border.Background>
                <Binding Path="SelectionState">
                    <Binding.Converter>
                        <dx:EnumToObjectConverter>
                            <dx:EnumToObjectConverter.Values>
                                <dx:EnumObjectProvider x:Key="None" Value="Transparent"/>
                                <dx:EnumObjectProvider x:Key="Selected" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderSelectedBrush}}"/>
                                <dx:EnumObjectProvider x:Key="Focused" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderFocusedBrush}}"/>
                            </dx:EnumToObjectConverter.Values>
                        </dx:EnumToObjectConverter>
                    </Binding.Converter>
                </Binding>
            </Border.Background>
            ONLY SL-->
            </Border>
            <Border x:Name="RowBottomLine"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Grid.Row="1"
                    Padding="{TemplateBinding Padding}">
                <Border.BorderThickness>
                    <Binding Path="View.ShowHorizontalLines">
                        <Binding.Converter>
                            <dx:BoolToObjectConverter FalseValue="0" TrueValue="0,0,0,1"/>
                        </Binding.Converter>
                    </Binding>
                </Border.BorderThickness>
            </Border>
            <ContentPresenter Grid.RowSpan="2"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ShowBottomLine}" Value="True">
                <Setter Property="BorderThickness"
                        TargetName="RowBottomLine"
                        Value="0,0,0,1"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxgcore:RowData.CurrentRowData).(dxe:BaseEdit.HasValidationError), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                    <Condition Binding="{Binding Path=(dxgcore:RowData.CurrentRowData).IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="RowContentBorder"
                        Value="{StaticResource {dxgt:GridRowThemeKey ResourceKey=ValidationErrorBrush}}"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.FixedGroupsAdorner}" TargetType="{x:Type dxg:FixedGroupsAdorner}">
        <Setter Property="AdornerHeight" Value="20"/>
        <Setter Property="AdornerBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#14000000" Offset="0.35"/>
                    <GradientStop Color="#00000000" Offset="1"/>
                    <GradientStop Color="#33000000"/>
                    <GradientStop Color="#1E000000" Offset="0.15"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxg:FixedGroupsAdorner}">
                    <ContentPresenter Content="{TemplateBinding Content}" IsHitTestVisible="false"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowIndicatorControl}" TargetType="{x:Type dxg:RowIndicatorControl}">
        <Setter Property="Foreground" Value="{StaticResource ResourceKey={dxgt:RowIndicatorThemeKey ResourceKey=ForegroundBrush}}"/>
    </Style>

    <Style x:Key="{dxgt:GridRowThemeKey ResourceKey=DetailTotalSummaryIndentBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="White"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GridDetailExpandButtonContainer}" TargetType="{x:Type dxg:GridDetailExpandButtonContainer}">
        <Setter Property="IsMasterRowExpanded" Value="{Binding IsMasterRowExpanded}"/>
        <Setter Property="RowPosition" Value="{Binding RowPosition}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxg:GridDetailExpandButtonContainer">
                    <dxg:GridDetailExpandButton Name="PART_ExpandButton"
                                                Command="{Binding View.Commands.ChangeMasterRowExpanded}"
                                                CommandParameter="{Binding Path=RowHandle.Value}"
                                                dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible="{Binding Path=(dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible), RelativeSource={RelativeSource TemplatedParent}}"
                                                IsChecked="{Binding Path=IsRowExpanded, Mode=OneWay}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.DetailIndentControl}" TargetType="{x:Type dxg:DetailIndentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <dxg:BackgroundBorderControl IsDetailMargin="{Binding Path=IsDetailMargin}"
                                                     IsMasterRowExpanded="{Binding Path=(dx:DataObjectBase.DataObject).IsMasterRowExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                     ItemLevel="{Binding Path=Level}"
                                                     LineLevel="{Binding Path=(dx:DataObjectBase.DataObject).LineLevel, RelativeSource={RelativeSource TemplatedParent}}"
                                                     RowLevel="{Binding Path=(dx:DataObjectBase.DataObject).DetailLevel, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="detailLeftLine"
                                BorderThickness="1,0,0,0"
                                dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"
                                HorizontalAlignment="Right">
                            <Border.Margin>
                                <Binding Path="(dxg:DetailRowsIndentControl.IsSummaryDetailLevel)" RelativeSource="{RelativeSource Self}">
                                    <Binding.Converter>
                                        <dx:BoolToObjectConverter FalseValue="0" TrueValue="0,0,0,1"/>
                                    </Binding.Converter>
                                </Binding>
                            </Border.Margin>
                            <Border.BorderBrush>
                                <Binding Path="(dxg:DetailRowsIndentControl.IsSummaryDetailLevel)" RelativeSource="{RelativeSource Self}">
                                    <Binding.Converter>
                                        <dx:BoolToObjectConverter FalseValue="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}" TrueValue="#FF6E6E6E"/>
                                    </Binding.Converter>
                                </Binding>
                            </Border.BorderBrush>
                        </Border>
                        <Border x:Name="detailBottomLine" BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsDetailMargin}" Value="True">
                            <Setter Property="BorderBrush"
                                    TargetName="detailLeftLine"
                                    Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=BorderBrush}}"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ShowLastDetailMargin, RelativeSource={RelativeSource FindAncestor, AncestorType=dxg:DetailRowsIndentControl}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsLast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility"
                                    TargetName="detailLeftLine"
                                    Value="Collapsed"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ShowBottomLine, RelativeSource={RelativeSource FindAncestor, AncestorType=dxg:DetailRowsIndentControl}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsLast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness"
                                    TargetName="detailBottomLine"
                                    Value="0,0,0,1"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.DetailRowsIndentControl}" TargetType="{x:Type dxg:DetailRowsIndentControl}">
        <Setter Property="dxg:DetailSummaryControlBase.SummaryDetailLevel" Value="{Binding Path=(dxg:DetailSummaryControlBase.SummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxg:DetailIndentControl dx:DataObjectBase.DataObject="{Binding Path=(dx:DataObjectBase.DataObject), RelativeSource={RelativeSource TemplatedParent}}"
                                             dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"
                                             Width="{Binding Path=Width}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsLeft" Value="False">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <dxg:DetailIndentControl dx:DataObjectBase.DataObject="{Binding Path=(dx:DataObjectBase.DataObject), RelativeSource={RelativeSource TemplatedParent}}"
                                                     dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"
                                                     Width="{Binding Path=WidthAtRight}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="-1" ScaleY="1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Infinity Loading -->

    <ControlTemplate x:Key="LoadingIndicator" TargetType="{x:Type ProgressBar}">
        <Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Determinate"/>
                    <VisualState x:Name="Indeterminate">
                        <Storyboard RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.Fill).(Brush.RelativeTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="00:00:01" Value="360"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="path"
                  Data="F1 M 94.5,284C 94.7762,284 95,284.224 95,284.5L 95,287.5C 95,287.776 94.7762,288 94.5,288C 94.2239,288 94,287.776 94,287.5L 94,284.5C 94,284.224 94.2239,284 94.5,284 Z M 96.1919,283.341C 96.3952,283.154 96.7115,283.167 96.8984,283.37L 98.9287,285.579C 99.1156,285.782 99.1023,286.099 98.899,286.286C 98.6957,286.472 98.3794,286.459 98.1925,286.256L 96.1622,284.047C 95.9753,283.844 95.9886,283.528 96.1919,283.341 Z M 94.5,275C 94.7761,275 95,275.224 95,275.5L 95,278.5C 95,278.776 94.7761,279 94.5,279C 94.2238,279 94,278.776 94,278.5L 94,275.5C 94,275.224 94.2238,275 94.5,275 Z M 90.101,276.715C 90.3043,276.528 90.6206,276.541 90.8075,276.745L 92.8378,278.953C 93.0247,279.157 93.0114,279.473 92.8081,279.66C 92.6048,279.847 92.2885,279.833 92.1016,279.63L 90.0713,277.421C 89.8844,277.218 89.8978,276.902 90.101,276.715 Z M 92,281.513C 92,281.789 91.7762,282.013 91.5,282.013L 88.5,282.013C 88.2238,282.013 88,281.789 88,281.513C 88,281.236 88.2238,281.013 88.5,281.013L 91.5,281.013C 91.7762,281.013 92,281.236 92,281.513 Z M 92.668,283.201C 92.8549,283.405 92.8416,283.721 92.6383,283.908L 90.4297,285.938C 90.2264,286.125 89.9101,286.112 89.7232,285.908C 89.5363,285.705 89.5496,285.389 89.7529,285.202L 91.9615,283.171C 92.1648,282.985 92.4811,282.998 92.668,283.201 Z M 101,281.45C 101,281.698 100.799,281.9 100.55,281.9L 97.45,281.9C 97.2015,281.9 97,281.698 97,281.45C 97,281.201 97.2015,281 97.45,281L 100.55,281C 100.799,281 101,281.201 101,281.45 Z M 99.2514,277.064C 99.4195,277.247 99.4076,277.532 99.2246,277.7L 96.9424,279.798C 96.7595,279.966 96.4748,279.954 96.3066,279.771C 96.1384,279.588 96.1504,279.304 96.3333,279.135L 98.6155,277.037C 98.7985,276.869 99.0832,276.881 99.2514,277.064 Z "
                  Fill="{TemplateBinding Background}"
                  Stretch="Fill"
                  Stroke="{x:Null}"
                  StrokeLineJoin="Round"
                  StrokeThickness="1"
                  VerticalAlignment="Stretch">
            </Path>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=LoadingRowTemplate}" TargetType="dxg:LoadingRowControl">
        <Grid x:Name="Root"
              Margin="1"
              MinHeight="32">
            <ProgressBar x:Name="Indicator"
                         Height="24"
                         HorizontalAlignment="Center"
                         IsIndeterminate="{Binding ShowLoadingIndicator}"
                         MinHeight="8"
                         MinWidth="8"
                         Padding="4"
                         Template="{StaticResource LoadingIndicator}"
                         VerticalAlignment="Center"
                         Visibility="{Binding ShowLoadingIndicator, Converter={StaticResource BoolToVisibilityConverter}}"
                         Width="24">
                <ProgressBar.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <LinearGradientBrush.RelativeTransform>
                            <TransformGroup>
                                <ScaleTransform CenterX="0.5" CenterY="0.5"/>
                                <SkewTransform CenterX="0.5" CenterY="0.5"/>
                                <RotateTransform CenterX="0.5" CenterY="0.5"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </LinearGradientBrush.RelativeTransform>
                        <GradientStop Color="#FF6EA2DE" Offset="1"/>
                        <GradientStop Color="#FFFFFFFF" Offset="0"/>
                    </LinearGradientBrush>
                </ProgressBar.Background>
            </ProgressBar>
            <dxg:LoadingRowButton Click="{DXEvent 'LoadMoreRows()'}"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  Visibility="{Binding AllowLoadMore, Converter={StaticResource BoolToVisibilityConverter}}">
                <StackPanel Margin="9,0,9,1" Orientation="Horizontal">
                    <Label Content="{dxg:GridControlStringId LoadingRowLoadMore}"/>
                    <Grid Height="16"
                          Margin="3"
                          Width="16">
                        <Path Data="F1 M 10,5L 5,10L 0,5L 3,5L 3,3L 7,3L 7,5L 10,5 Z M 3,2L 3,0L 7,0L 7,2L 3,2 Z "
                              Fill="#FF3E3E3E"
                              Height="10"
                              HorizontalAlignment="Center"
                              Margin="0,1,0,0"
                              Stretch="Fill"
                              VerticalAlignment="Center"
                              Width="10"/>
                    </Grid>
                </StackPanel>
            </dxg:LoadingRowButton>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=LoadingRowErrorTemplate}" TargetType="dxg:LoadingRowControl">
        <Grid x:Name="Root" Margin="3">
            <Grid HorizontalAlignment="Center"
                  Margin="96,0,96,0"
                  MaxWidth="640"
                  VerticalAlignment="Top">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Path Data="F1 M 7,0C 10.866,0 14,3.13401 14,7C 14,10.866 10.866,14 7,14C 3.13401,14 -6.35783e-007,10.866 -6.35783e-007,7C -6.35783e-007,3.13401 3.13401,0 7,0 Z M 2.75736,4.17157L 5.58579,7L 2.75736,9.82843L 4.17157,11.2426L 7,8.41422L 9.82843,11.2426L 11.2426,9.82843L 8.41421,7L 11.2426,4.17157L 9.82843,2.75736L 7,5.58579L 4.17157,2.75736L 2.75736,4.17157 Z "
                      Fill="#FFCC0000"
                      Height="14"
                      HorizontalAlignment="Center"
                      Margin="4"
                      Stretch="Fill"
                      VerticalAlignment="Top"
                      Width="14"/>
                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <TextBlock HorizontalAlignment="Left"
                               Margin="4,3,4,3"
                               Text="{Binding ErrorText}"
                               TextWrapping="Wrap"/>
                    <TextBlock HorizontalAlignment="Center" Visibility="{Binding IsLoadingButtonVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                        <dxe:HyperlinkEdit Command="{Binding LoadRowsCommand}" Text="{Binding LoadingButtonText}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=LoadingRowButtonTemplate}" TargetType="dxg:LoadingRowButton">
        <Grid x:Name="Root">
            <Border x:Name="IsHover" Opacity="0">
                <Rectangle x:Name="fillColor"
                           IsHitTestVisible="False"
                           RadiusX="2"
                           RadiusY="2"
                           Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowItemHighlighting, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                    <Rectangle.Fill>
                        <LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                            <GradientStop Color="#FFBDD9F8"/>
                            <GradientStop Color="#FFD2E5FA" Offset="1"/>
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>
            </Border>
            <Border x:Name="IsPressed" Opacity="0">
                <Rectangle x:Name="fillColor2"
                           IsHitTestVisible="False"
                           RadiusX="2"
                           RadiusY="2">
                    <Rectangle.Fill>
                        <LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                            <GradientStop Color="#FF6FA2DD"/>
                            <GradientStop Color="#FF8FB8E5" Offset="1"/>
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>
            </Border>
            <ContentPresenter x:Name="Content"
                              HorizontalAlignment="Center"
                              Margin="3"
                              TextBlock.Foreground="#FF000000"
                              VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.Foreground"
                        TargetName="Content"
                        Value="#FF000000"/>
                <Setter Property="Opacity"
                        TargetName="IsHover"
                        Value="1"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="TextBlock.Foreground"
                        TargetName="Content"
                        Value="#FFFFFFFF"/>
                <Setter Property="Opacity"
                        TargetName="IsPressed"
                        Value="1"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>