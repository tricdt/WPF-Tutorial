<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:local="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:utils="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxec="clr-namespace:DevExpress.Xpf.Editors.Controls;assembly=DevExpress.Xpf.Core.v24.1" xmlns:dxedn="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxednc="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxedp="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxep="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxepc="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars" xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxev="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxef="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxee="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxer="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxeh="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:core="clr-namespace:DevExpress.Xpf.Core;assembly=DevExpress.Data.Desktop.v24.1" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <ResourceDictionary.MergedDictionaries>
    <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2013.v24.1;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Editors/Themes/Generic/PopupListBox.xaml" />
    <!--<ResourceDictionary Source="/DevExpress.Xpf.Themes.Office2013.v24.1;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Editors/Themes/Generic/SparklineEdit.xaml"/>-->
    <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2013.v24.1;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Editors/Themes/Generic/FilterPanelControlBase.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}" TargetType="{x:Type dxe:BaseEdit}">
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="BorderTemplate" Value="{DynamicResource {dxet:BaseEditThemeKey ResourceKey=CommonBorderTemplate}}" />
    <Setter Property="ErrorToolTipContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding Path=ErrorContent}" TextWrapping="Wrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TrimmedTextToolTipContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding Path=Content}" TextWrapping="Wrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Style.Triggers>
      <Trigger Property="ShowBorder" Value="False">
        <Setter Property="BorderTemplate" Value="{DynamicResource {dxet:BaseEditThemeKey ResourceKey=EmptyBorderTemplate}}" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceInactive">
        <Setter Property="Template" Value="{Binding DisplayTemplate, RelativeSource={RelativeSource Self}}" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="Template" Value="{Binding EditTemplate, RelativeSource={RelativeSource Self}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ShowBorder" Value="True" />
          <Condition Property="EditMode" Value="Standalone" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Foreground" Value="{DynamicResource {dxtEx:ThemeColorsThemeKey ResourceKey=BlackForegroundColor}}" />
        </MultiTrigger.Setters>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.SparklineEdit}" TargetType="{x:Type dxe:SparklineEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="Template" Value="{DynamicResource {dxet:SparklineEditThemeKey ResourceKey=Template}}" />
    <Style.Triggers>
      <Trigger Property="SparklineType" Value="Line">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:SparklineEditThemeKey ResourceKey=LineDisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:SparklineEditThemeKey ResourceKey=LineDisplayTemplate}}" />
      </Trigger>
      <Trigger Property="SparklineType" Value="Area">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:SparklineEditThemeKey ResourceKey=AreaDisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:SparklineEditThemeKey ResourceKey=AreaDisplayTemplate}}" />
      </Trigger>
      <Trigger Property="SparklineType" Value="Bar">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:SparklineEditThemeKey ResourceKey=BarDisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:SparklineEditThemeKey ResourceKey=BarDisplayTemplate}}" />
      </Trigger>
      <Trigger Property="SparklineType" Value="WinLoss">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:SparklineEditThemeKey ResourceKey=WinLossDisplayTemplate}}" />
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:SparklineEditThemeKey ResourceKey=WinLossDisplayTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.HyperlinkEdit}" TargetType="{x:Type dxe:HyperlinkEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="Foreground" Value="{DynamicResource {dxet:HyperLinkEditThemeKey ResourceKey=Foreground}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:HyperLinkEditThemeKey ResourceKey=Template}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:HyperLinkEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:HyperLinkEditThemeKey ResourceKey=EditTemplate}}" />
    <Setter Property="ShowBorder" Value="false" />
    <Setter Property="BorderTemplate" Value="{DynamicResource {dxet:BaseEditThemeKey ResourceKey=TextEditBorderTemplate}}" />
    <Style.Triggers>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:HyperLinkEditThemeKey ResourceKey=DisplayTemplate}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxet:HyperLinkEditThemeKey ResourceKey=InplaceForeground}}" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceInactive">
        <Setter Property="Foreground" Value="{DynamicResource {dxet:HyperLinkEditThemeKey ResourceKey=InplaceForeground}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ShowBorder" Value="True" />
          <Condition Property="EditMode" Value="Standalone" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="EditTemplate" Value="{DynamicResource {dxet:HyperLinkEditThemeKey ResourceKey=EditTemplate}}" />
          <Setter Property="Foreground" Value="{DynamicResource {dxet:HyperLinkEditThemeKey ResourceKey=Foreground}}" />
        </MultiTrigger.Setters>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.TrackBarEdit}" TargetType="{x:Type dxe:TrackBarEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ThumbStyle" Value="{DynamicResource {dxet:TrackBarEditThumbThemeKey ResourceKey=HorizontalThumbStyle}}" />
    <Setter Property="NearTrackStyle" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=PanelLeftSideStyle}}" />
    <Setter Property="FarTrackStyle" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=PanelRightSideStyle}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=Template}}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="ThumbStyle" Value="{DynamicResource {dxet:TrackBarEditThumbThemeKey ResourceKey=VerticalThumbStyle}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ShowBorder" Value="True" />
          <Condition Property="EditMode" Value="Standalone" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Foreground" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=TickForeground}}" />
        </MultiTrigger.Setters>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.TrackBarEditTickItemsControl}" TargetType="{x:Type dxe:TrackBarEditTickItemsControl}" BasedOn="{StaticResource {x:Type ItemsControl}}">
    <Setter Property="ItemsPanel" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=ItemPanelTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.TrackBarEditTickItem}" TargetType="{x:Type dxe:TrackBarEditTickItem}" BasedOn="{StaticResource {x:Type ContentControl}}">
    <Setter Property="Template" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=TickBarItemTemplate}}" />
    <Setter Property="TickContentDistance" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=TickContentDistance}}" />
    <Setter Property="TickOpacity" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=TickOpacity}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="TickLength" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=TickLength}}" />
    <Style.Triggers>
      <Trigger Property="Placement" Value="Left">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
      </Trigger>
      <Trigger Property="Placement" Value="Right">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
      </Trigger>
      <Trigger Property="Placement" Value="Top">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
      </Trigger>
      <Trigger Property="Placement" Value="Bottom">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.RatingEdit}" TargetType="{x:Type dxe:RatingEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:RatingEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:RatingEditThemeKey ResourceKey=EditTemplate}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:RatingEditThemeKey ResourceKey=Template}}" />
    <Setter Property="BorderTemplate" Value="{DynamicResource {dxet:BaseEditThemeKey ResourceKey=TextEditBorderTemplate}}" />
    <Setter Property="ShowBorder" Value="False" />
  </Style>
  <Style x:Key="{dxet:TrackBarEditStyleThemeKey ResourceKey=TrackBarEditPanelHorizontalStyle}" TargetType="{x:Type dxe:RangeEditBasePanel}">
    <Setter Property="Template" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=PanelHorizontalTemplate}}" />
  </Style>
  <Style x:Key="{dxet:TrackBarEditStyleThemeKey ResourceKey=RangeTrackBarEditPanelHorizontalStyle}" TargetType="{x:Type dxe:RangeEditBasePanel}">
    <Setter Property="Template" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=RangePanelHorizontalTemplate}}" />
  </Style>
  <Style x:Key="{dxet:TrackBarEditStyleThemeKey ResourceKey=RangeTrackBarEditPanelVerticalStyle}" TargetType="{x:Type dxe:RangeEditBasePanel}">
    <Setter Property="Template" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=RangePanelVerticalTemplate}}" />
  </Style>
  <Style x:Key="{dxet:TrackBarEditStyleThemeKey ResourceKey=TrackBarEditPanelVerticalStyle}" TargetType="{x:Type dxe:RangeEditBasePanel}">
    <Setter Property="Template" Value="{DynamicResource {dxet:TrackBarEditThemeKey ResourceKey=PanelVerticalTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.TextEdit}" TargetType="{x:Type dxe:TextEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="CaretBrush" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=CaretBrush}}" />
    <Setter Property="SelectionBrush" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=SelectionBrush}}" />
    <Setter Property="SelectionOpacity" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=SelectionOpacity}}" />
    <Setter Property="dx:ScrollBarExtensions.ScrollBehavior" Value="{dx:EditorScrollBehavior}" />
    <Setter Property="NullTextForeground" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=NullTextForeground}}" />
    <Setter Property="BorderTemplate" Value="{DynamicResource {dxet:BaseEditThemeKey ResourceKey=TextEditBorderTemplate}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=EditTemplate}}" />
    <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=EditNonEditableTemplate}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=Template}}" />
    <Style.Triggers>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=EditInplaceTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=EditNonEditableInplaceTemplate}}" />
      </Trigger>
      <Trigger Property="IsPrintingMode" Value="True">
        <Setter Property="Padding" Value="0,2,0,2" />
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}" Value="True" />
          <Condition Binding="{Binding Path=TextWrapping, RelativeSource={RelativeSource Self}}" Value="Wrap" />
        </MultiDataTrigger.Conditions>
        <Setter Property="VerticalContentAlignment" Value="Top" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}" Value="True" />
          <Condition Binding="{Binding Path=TextWrapping, RelativeSource={RelativeSource Self}}" Value="WrapWithOverflow" />
        </MultiDataTrigger.Conditions>
        <Setter Property="VerticalContentAlignment" Value="Top" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PasswordBoxEdit}" TargetType="{x:Type dxe:PasswordBoxEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="PasswordChar" Value="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=PasswordChar}}" />
    <Setter Property="CaretBrush" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=CaretBrush}}" />
    <Setter Property="SelectionBrush" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=SelectionBrush}}" />
    <Setter Property="SelectionOpacity" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=SelectionOpacity}}" />
    <Setter Property="NullTextForeground" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=NullTextForeground}}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=EditTemplate}}" />
    <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=Template}}" />
    <Setter Property="BorderTemplate" Value="{DynamicResource {dxet:BaseEditThemeKey ResourceKey=TextEditBorderTemplate}}" />
    <Setter Property="CapsLockWarningToolTipTemplate" Value="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=CapsLockWarningToolTipTemplate}}" />
    <Setter Property="ShowPasswordButtonTemplate" Value="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=ShowPasswordButtonTemplate}}" />
    <Style.Triggers>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=EditTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=EditTemplate}}" />
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}" Value="True" />
          <Condition Binding="{Binding Path=TextWrapping, RelativeSource={RelativeSource Self}}" Value="Wrap" />
        </MultiDataTrigger.Conditions>
        <Setter Property="VerticalContentAlignment" Value="Top" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=Label, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNotNullOrEmptyConverter}}" Value="True" />
          <Condition Binding="{Binding Path=TextWrapping, RelativeSource={RelativeSource Self}}" Value="WrapWithOverflow" />
        </MultiDataTrigger.Conditions>
        <Setter Property="VerticalContentAlignment" Value="Top" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxet:ProgressBarEditStyleThemeKey ResourceKey=ProgressBarStyleHorizontal}" TargetType="dxe:RangeEditBasePanel">
    <Setter Property="Template" Value="{DynamicResource {dxet:ProgressBarEditStyleThemeKey ResourceKey=PanelTemplateHorizontal}}" />
  </Style>
  <Style x:Key="{dxet:ProgressBarEditStyleThemeKey ResourceKey=ProgressBarMarqueeStyleHorizontal}" TargetType="dxe:RangeEditBasePanel">
    <Setter Property="Template" Value="{DynamicResource {dxet:ProgressBarEditStyleThemeKey ResourceKey=ProgressBarMarqueeTemplateHorizontal}}" />
  </Style>
  <Style x:Key="{dxet:ProgressBarEditStyleThemeKey ResourceKey=ProgressBarStyleVertical}" TargetType="dxe:RangeEditBasePanel">
    <Setter Property="Template" Value="{DynamicResource {dxet:ProgressBarEditStyleThemeKey ResourceKey=PanelTemplateVertical}}" />
  </Style>
  <Style x:Key="{dxet:ProgressBarEditStyleThemeKey ResourceKey=ProgressBarMarqueeStyleVertical}" TargetType="dxe:RangeEditBasePanel">
    <Setter Property="Template" Value="{DynamicResource {dxet:ProgressBarEditStyleThemeKey ResourceKey=ProgressBarMarqueeTemplateVertical}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ProgressBarMarqueeHorizontalAnimationControl}" TargetType="{x:Type dxe:ProgressBarMarqueeHorizontalAnimationControl}">
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="Template" Value="{DynamicResource {dxet:ProgressBarEditStyleThemeKey ResourceKey=MarqueeHorizontalAnimationControlTemplate}}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="MinHeight" Value="40" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ProgressBarMarqueeVerticalAnimationControl}" TargetType="{x:Type dxe:ProgressBarMarqueeVerticalAnimationControl}">
    <Setter Property="MinWidth" Value="20" />
    <Setter Property="Template" Value="{DynamicResource {dxet:ProgressBarEditStyleThemeKey ResourceKey=MarqueeVerticalAnimationControlTemplate}}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="MinWidth" Value="40" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ProgressBarEdit}" TargetType="{x:Type dxe:ProgressBarEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="ShowBorder" Value="{DynamicResource {dxet:ProgressBarEditThemeKey ResourceKey=ShowBorderDefault}}" />
    <Setter Property="Foreground" Value="{DynamicResource {dxet:ProgressBarEditThemeKey ResourceKey=Foreground}}" />
    <Setter Property="AdditionalForeground" Value="{DynamicResource {dxet:ProgressBarEditThemeKey ResourceKey=AdditionalForeground}}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderTemplate" Value="{DynamicResource {dxet:BaseEditThemeKey ResourceKey=TextEditBorderTemplate}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:ProgressBarEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:ProgressBarEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:ProgressBarEditThemeKey ResourceKey=Template}}" />
    <Style.Triggers>
      <Trigger Property="ContentDisplayMode" Value="Value">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ProgressBarEditThemeKey ResourceKey=ContentTemplate}}" />
      </Trigger>
      <Trigger Property="ContentDisplayMode" Value="Content">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ProgressBarEditThemeKey ResourceKey=ContentTemplate_Content}}" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:ProgressBarEditThemeKey ResourceKey=DisplayTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxet:CheckEditThemeKey ResourceKey=EmptyFocusVisualStyle}" />
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.CheckEdit}" TargetType="{x:Type dxe:CheckEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=EmptyFocusVisualStyle}}" />
    <Setter Property="Padding" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=Padding}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=EditTemplate}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=Template}}" />
    <Setter Property="GlyphTemplate" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=GlyphTemplate}}" />
    <Style.Triggers>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=EditInplaceTemplate}}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="UseLayoutRounding" Value="True" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceInactive">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=EditInplaceTemplate}}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="UseLayoutRounding" Value="True" />
      </Trigger>
      <Trigger Property="DisplayMode" Value="Image">
        <Setter Property="Padding" Value="0" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ButtonEdit}" TargetType="{x:Type dxe:ButtonEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.TextEdit}}">
    <Setter Property="Template" Value="{DynamicResource {dxet:ButtonEditThemeKey ResourceKey=Template}}" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ShowText" Value="False" />
          <Condition Property="EditMode" Value="Standalone" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Template" Value="{DynamicResource {dxet:ButtonEditThemeKey ResourceKey=TemplateWithoutEditBox}}" />
        </MultiTrigger.Setters>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ShowText" Value="False" />
          <Condition Property="EditMode" Value="InplaceActive" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Template" Value="{DynamicResource {dxet:ButtonEditThemeKey ResourceKey=InplaceTemplateWithoutEditBox}}" />
          <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
          <Setter Property="EditTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
        </MultiTrigger.Setters>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ShowText" Value="False" />
          <Condition Property="EditMode" Value="InplaceInactive" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Template" Value="{DynamicResource {dxet:ButtonEditThemeKey ResourceKey=InplaceTemplateWithoutEditBox}}" />
          <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
          <Setter Property="EditTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
        </MultiTrigger.Setters>
      </MultiTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="False" />
          <Condition Binding="{Binding Path=ShowText, RelativeSource={RelativeSource Self}}" Value="true" />
          <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceActive" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Template" Value="{Binding Path=EditNonEditableTemplate, RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BrowsePathEdit}" TargetType="{x:Type dxe:BrowsePathEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ButtonEdit}}">
    <Setter Property="Template" Value="{DynamicResource {dxet:BrowsePathThemeKey ResourceKey=Template}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupBaseEdit}" TargetType="{x:Type dxe:PopupBaseEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ButtonEdit}}">
    <Setter Property="PopupContentContainerTemplate" Value="{DynamicResource {dxet:PopupBaseEditThemeKey ResourceKey=PopupContentContainerTemplate}}" />
    <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:PopupBaseEditThemeKey ResourceKey=PopupContentTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BrushEditBase}" TargetType="{x:Type dxe:BrushEditBase}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="Template" Value="{DynamicResource {dxet:BrushEditThemeKey ResourceKey=Template}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:BrushEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:BrushEditThemeKey ResourceKey=EditTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupBrushEditBase}" TargetType="{x:Type dxe:PopupBrushEditBase}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupBaseEdit}}">
    <Setter Property="ChipBorderBrush" Value="{DynamicResource {dxet:PopupBrushEditThemeKey ResourceKey=ChipBorderBrush}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:PopupBrushEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
    <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:PopupBrushEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
    <Style.Triggers>
      <Trigger Property="EditMode" Value="Standalone">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:PopupBrushEditThemeKey ResourceKey=DisplayTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:PopupBrushEditThemeKey ResourceKey=DisplayTemplate}}" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:PopupBrushEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:PopupBrushEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.MemoEdit}" TargetType="{x:Type dxe:MemoEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupBaseEdit}}">
    <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:MemoEditThemeKey ResourceKey=PopupContentTemplate}}" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ShowIcon" Value="True" />
          <Condition Property="EditMode" Value="InplaceActive" />
        </MultiTrigger.Conditions>
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:MemoEditThemeKey ResourceKey=EditNonEditableIconInplaceTemplate}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ShowIcon" Value="True" />
          <Condition Property="EditMode" Value="InplaceInactive" />
        </MultiTrigger.Conditions>
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:MemoEditThemeKey ResourceKey=DisplayIconTemplate}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ShowIcon" Value="True" />
          <Condition Property="EditMode" Value="Standalone" />
        </MultiTrigger.Conditions>
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:MemoEditThemeKey ResourceKey=EditNonEditableIconTemplate}}" />
      </MultiTrigger>
      <Trigger Property="IsPrintingMode" Value="true">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=DisplayInplaceTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateEdit}" TargetType="{x:Type dxe:DateEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupBaseEdit}}">
    <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="False" />
    <Setter Property="AllowNullInput" Value="true" />
    <Style.Triggers>
      <Trigger Property="DateEditPopupContentType" Value="Calendar">
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=CalendarPopupContentTemplate}}" />
      </Trigger>
      <Trigger Property="DateEditPopupContentType" Value="DateTimePicker">
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=PickerPopupContentTemplate}}" />
      </Trigger>
      <Trigger Property="DateEditPopupContentType" Value="Navigator">
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=NavigatorPopupContentTemplate}}" />
      </Trigger>
      <Trigger Property="DateEditPopupContentType" Value="TimePicker">
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=TimePickerPopupContentTemplate}}" />
      </Trigger>
      <Trigger Property="DateEditPopupContentType" Value="NavigatorWithTimePicker">
        <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=NavigatorWithTimePickerPopupContentTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.LookUpEditBase}" TargetType="{x:Type dxe:LookUpEditBase}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupBaseEdit}}">
    <Style.Triggers>
      <Trigger Property="IsTokenMode" Value="True">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:ComboBoxEditThemeKey ResourceKey=AutoCompleteBoxTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:ComboBoxEditThemeKey ResourceKey=AutoCompleteBoxNonEditableTemplate}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:ComboBoxEditThemeKey ResourceKey=AutoCompleteBoxDisplayTemplate}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="False" />
          <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceActive" />
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ApplyItemTemplateToSelectedItem, RelativeSource={RelativeSource Self}}" Value="False" />
        </MultiDataTrigger.Conditions>
        <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="False" />
          <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone" />
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ApplyItemTemplateToSelectedItem, RelativeSource={RelativeSource Self}}" Value="False" />
        </MultiDataTrigger.Conditions>
        <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ComboBoxEdit}" TargetType="{x:Type dxe:ComboBoxEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.LookUpEditBase}}">
    <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:ComboBoxEditThemeKey ResourceKey=PopupContentTemplate}}" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <dx:DXVirtualizingStackPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ApplyItemTemplateToSelectedItem" Value="True" />
          <Condition Property="ApplyImageTemplateToSelectedItem" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:ComboBoxEditThemeKey ResourceKey=SelectedItemImageTemplate}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:ComboBoxEditThemeKey ResourceKey=SelectedItemImageTemplate}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ApplyItemTemplateToSelectedItem" Value="True" />
          <Condition Property="ApplyImageTemplateToSelectedItem" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:ComboBoxEditThemeKey ResourceKey=SelectedItemTemplate}}" />
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:ComboBoxEditThemeKey ResourceKey=SelectedItemTemplate}}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.FontEdit}" TargetType="{x:Type dxe:FontEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ComboBoxEdit}}">
    <Setter Property="ItemTemplate" Value="{DynamicResource {dxet:FontEditThemeKey ResourceKey=ItemTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.AutoSuggestEdit}" TargetType="{x:Type dxe:AutoSuggestEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupBaseEdit}}">
    <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:AutoSuggestEditThemeKey ResourceKey=PopupContentTemplate}}" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <dx:DXVirtualizingStackPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ListBoxEditItem}" TargetType="{x:Type dxe:ListBoxEditItem}" BasedOn="{StaticResource {dxet:EditorListBoxThemeKey ResourceKey=DefaultItemStyle}}">
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="dx:SvgImageHelper.State" Value="Hover" />
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="dx:SvgImageHelper.State" Value="Pressed" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ListBoxEdit}" TargetType="{x:Type dxe:ListBoxEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="dx:ScrollBarExtensions.ScrollBehavior" Value="{x:Null}" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:ListBoxEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:ListBoxEditThemeKey ResourceKey=EditTemplate}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:ListBoxEditThemeKey ResourceKey=Template}}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <dx:DXVirtualizingStackPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="EditMode" Value="InplaceInactive">
        <Setter Property="Background" Value="{x:Null}" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="Background" Value="{x:Null}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Popups.Calendar.DateEditCalendar}" TargetType="{x:Type dxepc:DateEditCalendar}">
    <Setter Property="Template" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=CalendarTemplate}}" />
    <Setter Property="WeekdayAbbreviationStyle" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=WeekdayAbbreviationStyle}}" />
    <Setter Property="WeekNumbersStyle" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=WeekNumbersStyle}}" />
    <Setter Property="CellButtonStyle" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=CellButtonStyle}}" />
    <Setter Property="MonthInfoTemplate" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=MonthInfoTemplate}}" />
    <Setter Property="YearInfoTemplate" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=YearInfoTemplate}}" />
    <Setter Property="YearsInfoTemplate" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=YearInfoTemplate}}" />
    <Setter Property="YearsGroupInfoTemplate" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=YearInfoTemplate}}" />
    <Setter Property="CalendarTransferStyle" Value="{DynamicResource {dxet:DateEditThemeKey ResourceKey=CalendarTranserStyle}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateNavigator.DateNavigator}" TargetType="{x:Type dxedn:DateNavigator}">
    <Setter Property="Template" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=NewCalendarTemplate}}" />
    <Setter Property="CalendarPadding" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=DateNavigatorCalendarPadding}}" />
    <Setter Property="Background" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=BackgroundBrush}}" />
    <Setter Property="DefaultAppearance" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=Appearance}}" />
    <Setter Property="Appearance" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=Appearance}}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Source={x:Static core:CompatibilitySettings.UseLegacyCalendarInDateNavigator}}" Value="True">
        <Setter Property="Template" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=Template}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateNavigator.Controls.DateNavigatorCalendar}" TargetType="{x:Type dxednc:DateNavigatorCalendar}">
    <Setter Property="FirstDayOfWeek" Value="{Binding Path=(dxedn:DateNavigator.Navigator).ActualFirstDayOfWeek, RelativeSource={RelativeSource Self}}" />
    <Setter Property="HighlightSpecialDates" Value="{Binding Path=(dxedn:DateNavigator.Navigator).HighlightSpecialDates, RelativeSource={RelativeSource Self}}" />
    <Setter Property="HighlightHolidays" Value="{Binding Path=(dxedn:DateNavigator.Navigator).HighlightHolidays, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ShowWeekNumbers" Value="{Binding Path=(dxedn:DateNavigator.Navigator).ShowWeekNumbers, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=CalendarTemplate}}" />
    <Setter Property="WeekNumberRule" Value="{Binding Path=(dxedn:DateNavigator.Navigator).WeekNumberRule, RelativeSource={RelativeSource Self}}" />
    <Setter Property="WeekdayAbbreviationStyle" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=WeekdayAbbreviationStyle}}" />
    <Setter Property="WeekNumberStyle" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=WeekNumberStyle}}" />
    <Setter Property="CellButtonStyle" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=CellButtonStyle}}" />
    <Setter Property="MonthInfoTemplate" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=MonthInfoTemplate}}" />
    <Setter Property="YearInfoTemplate" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=YearInfoTemplate}}" />
    <Setter Property="YearsInfoTemplate" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=YearInfoTemplate}}" />
    <Setter Property="YearsRangeInfoTemplate" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=YearInfoTemplate}}" />
    <Setter Property="Padding" Value="{Binding Path=(dxedn:DateNavigator.Navigator).CalendarPadding, RelativeSource={RelativeSource Self}}" />
    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateNavigator.Controls.DateNavigatorCalendarControl}" TargetType="{x:Type dxednc:DateNavigatorCalendarControl}">
    <Setter Property="WeekNumberRule" Value="{Binding Path=(dxedn:DateNavigator.Navigator).WeekNumberRule, RelativeSource={RelativeSource Self}}" />
    <Setter Property="FirstDayOfWeek" Value="{Binding Path=(dxedn:DateNavigator.Navigator).ActualFirstDayOfWeek, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Padding" Value="{Binding Path=(dxedn:DateNavigator.Navigator).CalendarPadding, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=CalendarControlTemplate}}" />
    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    <Setter Property="CellSize" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=CalendarCellSize}}" />
    <Style.Triggers>
      <Trigger Property="utils:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="CellSize" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=CalendarTouchCellSize}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <dxeh:DateNavigatorCalendarContentTemplateSelector x:Key="DateNavigatorCalendarContentTemplateSelector" />
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateNavigator.Controls.DateNavigatorCalendarContentControl}" TargetType="{x:Type dxednc:DateNavigatorCalendarContentControl}">
    <Setter Property="Template" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=CalendarContentControlTemplate}}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <dxeh:DateNavigatorCalendarPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplateSelector" Value="{StaticResource DateNavigatorCalendarContentTemplateSelector}" />
    <Style.Triggers>
      <Trigger Property="State" Value="Month">
        <Setter Property="Template" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=CalendarContentControlMonthTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateNavigator.Controls.DateNavigatorCellButton}" TargetType="{x:Type dxednc:DateNavigatorCellButton}">
    <Setter Property="ClickMode" Value="Press" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="0,0,1,1" />
    <Setter Property="Background" Value="White" />
    <Setter Property="Template" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=CalendarCellButtonTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateNavigator.Controls.DateNavigatorContent}" TargetType="{x:Type dxednc:DateNavigatorContent}">
    <Setter Property="Template" Value="{DynamicResource {dxet:DateNavigatorContentThemeKey ResourceKey=Template}}" />
    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateNavigator.Controls.DateNavigatorCalendarCellButton}" TargetType="{x:Type dxednc:DateNavigatorCalendarCellButton}">
    <Setter Property="ClickMode" Value="Press" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="0,0,1,1" />
    <Setter Property="Background" Value="White" />
    <Setter Property="Template" Value="{DynamicResource {dxet:DateNavigatorThemeKey ResourceKey=CellButtonTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ErrorControl}" TargetType="{x:Type dxe:ErrorControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="DockPanel.Dock" Value="Left" />
    <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ErrorTypesThemeKeyExtension ResourceKey=Critical}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=ErrorControlTemplate}}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=Content.ErrorType, RelativeSource={RelativeSource Self}}" Value="Critical">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ErrorTypesThemeKeyExtension ResourceKey=Critical}}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=Content.ErrorType, RelativeSource={RelativeSource Self}}" Value="Warning">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ErrorTypesThemeKeyExtension ResourceKey=Warning}}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=Content.ErrorType, RelativeSource={RelativeSource Self}}" Value="Information">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ErrorTypesThemeKeyExtension ResourceKey=Information}}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasValidationErrorTemplate, RelativeSource={RelativeSource Self}}" Value="True">
        <Setter Property="ContentTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ValidationErrorTemplate, RelativeSource={RelativeSource Self}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ButtonsControl}" TargetType="{x:Type dxe:ButtonsControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Margin" Value="{DynamicResource {dxet:ButtonEditThemeKey ResourceKey=ButtonEditPadding}}" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ButtonContainerStyle}}" />
    <Setter Property="Padding" Value="{DynamicResource {dxet:ButtonEditThemeKey ResourceKey=ButtonEditPaddingCorrection}}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Orientation="Horizontal" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxe:ButtonsControl}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.GalleryBarItemLinkControl}" TargetType="{x:Type dxei:GalleryBarItemLinkControl}">
    <Setter Property="dxb:BarItemLinkControlTemplateProvider.TemplateInMenu" Value="{DynamicResource {dxet:ColorEditThemeKey ResourceKey=GalleryBarItemLinkControlTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ColorEdit}" TargetType="{x:Type dxe:ColorEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="ChipMargin" Value="2,0,2,0" />
    <Setter Property="ChipBorderBrush" Value="{DynamicResource {dxet:ColorEditThemeKey ResourceKey=ChipBorderBrush}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:ColorEditThemeKey ResourceKey=Template}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:ColorEditThemeKey ResourceKey=EditTemplate}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:ColorEditThemeKey ResourceKey=EditTemplate}}" />
    <Style.Triggers>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:ColorEditThemeKey ResourceKey=EditInplaceTemplate}}" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceInactive">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:ColorEditThemeKey ResourceKey=EditInplaceTemplate}}" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="ChipSize" Value="Large" />
        <Setter Property="ChipMargin" Value="8" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchlineTheme" Value="True">
        <Setter Property="ChipSize" Value="Large" />
        <Setter Property="ChipMargin" Value="8" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupColorEdit}" TargetType="{x:Type dxe:PopupColorEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupBaseEdit}}">
    <Setter Property="ChipBorderBrush" Value="{DynamicResource {dxet:ColorEditThemeKey ResourceKey=ChipBorderBrush}}" />
    <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:PopupColorEditThemeKey ResourceKey=PopupContentTemplate}}" />
    <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:PopupColorEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:PopupColorEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=EditTemplate}}" />
    <Style.Triggers>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:PopupColorEditThemeKey ResourceKey=DisplayTemplate}}" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="ChipSize" Value="Large" />
        <Setter Property="ChipMargin" Value="8" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="CalculatorBaseStyle" TargetType="{x:Type dxe:Calculator}">
    <Setter Property="OperationButtonStyle" Value="{DynamicResource {dxet:CalculatorThemeKey ResourceKey=ButtonOperationStyle}}" />
    <Setter Property="DigitButtonStyle" Value="{DynamicResource {dxet:CalculatorThemeKey ResourceKey=ButtonDigitStyle}}" />
    <Setter Property="CEButtonStyle" Value="{DynamicResource {dxet:CalculatorThemeKey ResourceKey=ButtonCEStyle}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Calculator}" TargetType="{x:Type dxe:Calculator}" BasedOn="{StaticResource CalculatorBaseStyle}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:CalculatorThemeKey ResourceKey=Template}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.CalculatorGaugeSegment}" TargetType="{x:Type dxe:CalculatorGaugeSegment}">
    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    <Setter Property="Height" Value="22" />
    <Setter Property="Template" Value="{DynamicResource {dxet:CalculatorThemeKey ResourceKey=GaugeSegmentTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.CalculatorGauge}" TargetType="{x:Type dxe:CalculatorGauge}">
    <Setter Property="Template" Value="{DynamicResource {dxet:CalculatorThemeKey ResourceKey=GaugeTemplate}}" />
    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.CalculatorMemoryIndicator}" TargetType="{x:Type dxe:CalculatorMemoryIndicator}">
    <Setter Property="Template" Value="{DynamicResource {dxet:CalculatorThemeKey ResourceKey=MemoryIndicatorTemplate}}" />
    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupCalcEdit}" TargetType="{x:Type dxe:PopupCalcEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupBaseEdit}}">
    <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:CalcEditThemeKey ResourceKey=PopupContentTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupCalcEditCalculator}" TargetType="{x:Type dxe:PopupCalcEditCalculator}" BasedOn="{StaticResource CalculatorBaseStyle}">
    <Setter Property="Template" Value="{DynamicResource {dxet:CalculatorThemeKey ResourceKey=PopupTemplate}}" />
    <Setter Property="Precision" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Precision, RelativeSource={RelativeSource Self}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ImageEditToolSeparator}" TargetType="{x:Type dxe:ImageEditToolSeparator}">
    <Style.Setters>
      <Setter Property="Margin" Value="5,0,6,0" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate>
            <Rectangle Fill="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=ImageEditToolSeparatorFillBrush}}" Width="1" Height="18" Opacity="0.25" />
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style.Setters>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ImageEdit}" TargetType="{x:Type dxe:ImageEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="Template" Value="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=Template}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=EditTemplateWithEditing}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=EditTemplate}}" />
    <Setter Property="EmptyContentTemplate" Value="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=EmptyContentTemplate}}" />
    <Setter Property="MenuTemplate" Value="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=EditMenuTemplate}}" />
    <Setter Property="MenuContainerTemplate" Value="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=MenuPopupTemplate}}" />
    <Style.Triggers>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=EditInplaceTemplate}}" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceInactive">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=EditInplaceTemplate}}" />
      </Trigger>
      <DataTrigger Binding="{Binding Path=(dxe:ImageEditToEditModeBehavior.ImageEditToEditModeBehavior), RelativeSource={RelativeSource Self}}" Value="{x:Null}">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=EditTemplate}}" />
        <Setter Property="MenuTemplate" Value="{DynamicResource {dxet:ImageEditThemeKey ResourceKey=MenuTemplate}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupImageEdit}" TargetType="{x:Type dxe:PopupImageEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PopupBaseEdit}}">
    <Setter Property="PopupContentTemplate" Value="{DynamicResource {dxet:PopupImageEditThemeKey ResourceKey=PopupContentTemplate}}" />
    <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:PopupImageEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:PopupImageEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:PopupImageEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="MenuTemplate" Value="{DynamicResource {dxet:PopupImageEditThemeKey ResourceKey=MenuTemplate}}" />
    <Style.Triggers>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="EditTemplate" Value="{DynamicResource {dxet:PopupImageEditThemeKey ResourceKey=DisplayTemplate}}" />
        <Setter Property="EditNonEditableTemplate" Value="{DynamicResource {dxet:PopupImageEditThemeKey ResourceKey=DisplayTemplate}}" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceInactive">
        <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:PopupImageEditThemeKey ResourceKey=DisplayTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.Native.MultiContentControl}" TargetType="{x:Type dxcn:MultiContentControl}">
    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxcn:MultiContentControl}">
          <Grid x:Name="PART_Root" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DataPager.DataPager}" TargetType="{x:Type dxedp:DataPager}">
    <Setter Property="HorizontalContentAlignment" Value="Right" />
    <Setter Property="Template" Value="{DynamicResource {dxet:DataPagerThemeKey ResourceKey=Template}}" />
    <Setter Property="UseLayoutRounding" Value="True" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DataPager.DataPagerNumericButtonContainer}" TargetType="{x:Type dxedp:DataPagerNumericButtonContainer}">
    <Setter Property="Template" Value="{DynamicResource {dxet:DataPagerNumericButtonContainerThemeKey ResourceKey=Template}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DataPager.DataPagerButton}" TargetType="{x:Type dxedp:DataPagerButton}">
    <Setter Property="Template" Value="{DynamicResource {dxet:DataPagerButtonThemeKey ResourceKey=Template}}" />
    <Style.Triggers>
      <Trigger Property="ButtonType" Value="PageFirst">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:DataPagerButtonThemeKey ResourceKey=FirstPageGlyph}}" />
      </Trigger>
      <Trigger Property="ButtonType" Value="PageLast">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:DataPagerButtonThemeKey ResourceKey=LastPageGlyph}}" />
      </Trigger>
      <Trigger Property="ButtonType" Value="PageNext">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:DataPagerButtonThemeKey ResourceKey=NextPageGlyph}}" />
      </Trigger>
      <Trigger Property="ButtonType" Value="PagePrevious">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:DataPagerButtonThemeKey ResourceKey=PrevPageGlyph}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DataPager.DataPagerNumericButton}" TargetType="{x:Type dxedp:DataPagerNumericButton}">
    <Setter Property="Template" Value="{DynamicResource {dxet:DataPagerNumericButtonThemeKey ResourceKey=Template}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PagerControl}" TargetType="{x:Type dxe:PagerControl}">
    <Setter Property="Template" Value="{DynamicResource {dxet:PagerControlThemeKey ResourceKey=Template}}" />
    <Setter Property="HorizontalContentAlignment" Value="Right" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PagerControlNavigationButton}" TargetType="{x:Type dxe:PagerControlNavigationButton}">
    <Setter Property="MinWidth" Value="18" />
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="Padding" Value="3" />
    <Setter Property="Margin" Value="0,0,1,0" />
    <Setter Property="Template" Value="{DynamicResource {dxet:PagerControlThemeKey ResourceKey=NavigationButtonTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PagerControlNumericButton}" TargetType="{x:Type dxe:PagerControlNumericButton}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.PagerControlNavigationButton}}">
    <Setter Property="MinWidth" Value="18" />
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="Padding" Value="3" />
    <Setter Property="Margin" Value="0,0,1,0" />
    <Setter Property="Template" Value="{DynamicResource {dxet:PagerControlThemeKey ResourceKey=NumericButtonTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.SearchControl}" TargetType="{x:Type dxe:SearchControl}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Margin" Value="12" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="NullTextForeground" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=NullTextForeground}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:SearchControlThemeKey ResourceKey=Template}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Filtering.FilterControl}" TargetType="{x:Type dxef:FilterControl}">
    <Setter Property="ShowBorder" Value="True" />
    <Setter Property="Template" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=FilterControlTemplate}}" />
    <Setter Property="EmptyValueTemplate" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=EmptyValueTemplate}}" />
    <Setter Property="EmptyStringTemplate" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=EmptyStringTemplate}}" />
    <Setter Property="ValueTemplate" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=ValueTemplate}}" />
    <Setter Property="BooleanValueTemplate" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=BooleanValueTemplate}}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=FocusVisualStyle}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Filtering.FilterControlGroupNode}" TargetType="{x:Type dxef:FilterControlGroupNode}">
    <Setter Property="Template" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=FilterControlGroupNodeTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Filtering.FilterControlClauseNode}" TargetType="{x:Type dxef:FilterControlClauseNode}">
    <Setter Property="Template" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=FilterControlClauseNodeTemplate}}" />
    <Setter Property="SecondOperandsOneTemplate" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=OneElementsInSecondOperandTemplate}}" />
    <Setter Property="SecondOperandsTwoTemplate" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=TwoElementsInSecondOperandTemplate}}" />
    <Setter Property="SecondOperandsSeveralTemplate" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=SeveralElementsInSecondOperandTemplate}}" />
    <Setter Property="SecondOperandsLocalDateTimeTemplate" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=OneLocalDateTimeTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Filtering.FilterControlEditor}" TargetType="{x:Type dxef:FilterControlEditor}">
    <Setter Property="Template" Value="{DynamicResource {dxet:FilterControlThemeKey ResourceKey=FilterControlEditorTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ExpressionEditor.ExpressionEditorControl}" TargetType="{x:Type dxee:ExpressionEditorControl}">
    <Setter Property="Template" Value="{DynamicResource {dxet:ExpressionEditorControlThemeKey ResourceKey=Template}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.ColorPicker}" TargetType="{x:Type dxei:ColorPicker}">
    <Setter Property="Template" Value="{DynamicResource {dxet:ColorPickerThemeKey ResourceKey=Template}}" />
    <Setter Property="MinHeight" Value="206" />
    <Setter Property="MinWidth" Value="200" />
    <Setter Property="Padding" Value="12" />
    <Style.Triggers>
      <Trigger Property="ShowAlphaChannel" Value="True">
        <Setter Property="MinHeight" Value="231" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <dx:BoolToDoubleConverter x:Key="SelectedThumbZIndexConverter" TrueValue="2" FalseValue="1" />
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.GradientMultiSlider}" TargetType="{x:Type dxei:GradientMultiSlider}">
    <Setter Property="MinWidth" Value="200" />
    <Setter Property="Template" Value="{DynamicResource {dxet:GradientMultiSliderThemeKey ResourceKey=Template}}" />
    <Setter Property="Padding" Value="12,0,12,0" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.GradientMultiSliderThumb}" TargetType="{x:Type dxei:GradientMultiSliderThumb}">
    <Setter Property="Template" Value="{DynamicResource {dxet:GradientMultiSliderThemeKey ResourceKey=ThumbTemplate}}" />
    <Setter Property="Canvas.Left" Value="{Binding Path=ActualOffset, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Canvas.ZIndex" Value="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}, Converter={StaticResource SelectedThumbZIndexConverter}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.GradientMultiSliderThumbSelector}" TargetType="{x:Type dxei:GradientMultiSliderThumbSelector}">
    <Setter Property="Template" Value="{DynamicResource {dxet:GradientMultiSliderThemeKey ResourceKey=ThumbSelectorTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DXItemsControl}" TargetType="{x:Type dxe:DXItemsControl}">
    <Setter Property="Template" Value="{DynamicResource {dxet:DateTimePickerThemeKey ResourceKey=ItemsControlTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DXSelector}" TargetType="{x:Type dxe:DXSelector}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DXItemsControl}}" />
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateTimePicker}" TargetType="{x:Type dxe:DateTimePicker}">
    <Setter Property="Template" Value="{DynamicResource {dxet:DateTimePickerThemeKey ResourceKey=Template}}" />
    <Setter Property="MinHeight" Value="80" />
    <Setter Property="MaxHeight" Value="700" />
    <Setter Property="Margin" Value="5,5,5,5" />
    <Setter Property="IsTabStop" Value="False" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateTimePickerItem}" TargetType="{x:Type dxe:DateTimePickerItem}">
    <Setter Property="Width" Value="90" />
    <Setter Property="Height" Value="70" />
    <Setter Property="Padding" Value="0,1,1,0" />
    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    <Setter Property="Template" Value="{DynamicResource {dxet:DateTimePickerThemeKey ResourceKey=ItemTemplate}}" />
  </Style>
  <dxer:DateTimePickerItemTemplateSelector x:Key="DateTimePicker_ItemTemplateSelector" />
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateTimePickerSelector}" TargetType="{x:Type dxe:DateTimePickerSelector}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DXSelector}}">
    <Setter Property="ItemTemplateSelector" Value="{StaticResource DateTimePicker_ItemTemplateSelector}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:DateTimePickerThemeKey ResourceKey=SelectorTemplate}}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.RangeControl.RangeControl}" TargetType="{x:Type dxer:RangeControl}">
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template" Value="{DynamicResource {dxet:RangeControlThemeKey ResourceKey=RangeControlTemplate}}" />
    <Setter Property="LabelTemplate" Value="{DynamicResource {dxet:RangeControlThemeKey ResourceKey=LabelTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.RangeControl.CalendarClient}" TargetType="{x:Type dxer:CalendarClient}">
    <Setter Property="UseLayoutRounding" Value="False" />
    <Setter Property="Template" Value="{DynamicResource {dxet:CalendarClientThemeKey ResourceKey=CalendarClientTemplate}}" />
    <Setter Property="Foreground" Value="{DynamicResource {dxet:CalendarClientThemeKey ResourceKey=CalendarClientForegroundBrush}}" />
    <Setter Property="ZoomOutSelectionMarkerTemplate" Value="{DynamicResource {dxet:CalendarClientThemeKey ResourceKey=CalendarSelectionMarkerTemplate}}" />
    <Setter Property="FontSize" Value="20" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BrushTypeSelectorControl}" TargetType="{x:Type dxe:BrushTypeSelectorControl}">
    <Setter Property="Template" Value="{DynamicResource {dxet:BrushEditThemeKey ResourceKey=BrushTypeSelectorControlTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.BrushPicker}" TargetType="{x:Type dxei:BrushPicker}">
    <Style.Triggers>
      <Trigger Property="BrushType" Value="None">
        <Setter Property="Template" Value="{DynamicResource {dxet:BrushEditThemeKey ResourceKey=BrushPickerNoneTemplate}}" />
      </Trigger>
      <Trigger Property="BrushType" Value="SolidColorBrush">
        <Setter Property="Template" Value="{DynamicResource {dxet:BrushEditThemeKey ResourceKey=BrushPickerSolidTemplate}}" />
      </Trigger>
      <Trigger Property="BrushType" Value="LinearGradientBrush">
        <Setter Property="Template" Value="{DynamicResource {dxet:BrushEditThemeKey ResourceKey=BrushPickerGradientTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.TokenEditor}" TargetType="{x:Type dxei:TokenEditor}">
    <Setter Property="IsTabStop" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsTabStop, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:TokenEditorThemeKey ResourceKey=Template}}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="TokenBorderTemplate" Value="{DynamicResource {dxet:TokenEditorThemeKey ResourceKey=TokenContainerTemplate}}" />
    <Setter Property="dx:ScrollBarExtensions.IsScrollBarThumbDragDeltaListener" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(ScrollViewer.HorizontalScrollBarVisibility), RelativeSource={RelativeSource Self}}" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(ScrollViewer.VerticalScrollBarVisibility), RelativeSource={RelativeSource Self}}" />
    <Setter Property="DeleteTokenButtonTemplate" Value="{DynamicResource {dxet:TokenEditorThemeKey ResourceKey=DeleteButtonTemplate}}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode}" Value="Standalone">
        <Setter Property="Padding" Value="{DynamicResource {dxet:TokenEditorThemeKey ResourceKey=TokenEditorMargin}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.TokenEditorPanel}" TargetType="{x:Type dxei:TokenEditorPanel}">
    <Setter Property="ClipToBounds" Value="True" />
    <Setter Property="EmptyTokenContainerTemplate" Value="{DynamicResource {dxet:TokenEditorThemeKey ResourceKey=EmptyTokenContainerTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.TokenEditorPresenter}" TargetType="{x:Type dxei:TokenEditorPresenter}">
    <Setter Property="Template" Value="{DynamicResource {dxet:TokenEditorThemeKey ResourceKey=CellPresenterTemplate}}" />
    <Setter Property="ActiveEditorStyle" Value="{DynamicResource {dxet:TokenEditorThemeKey ResourceKey=ActiveEditorStyle}}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="NewTokenText" Value="{Binding Path=(dxei:TokenEditor.OwnerTokenEditor).NewTokenText, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Foreground" Value="{DynamicResource {dxet:TokenEditorThemeKey ResourceKey=TokenForeground}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BarCodeEdit}" TargetType="{x:Type dxe:BarCodeEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="Template" Value="{DynamicResource {dxet:BarCodeEditThemeKey ResourceKey=Template}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:BarCodeEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:BarCodeEditThemeKey ResourceKey=EditTemplate}}" />
    <Setter Property="Background" Value="White" />
    <Setter Property="Foreground" Value="Black" />
    <Style.Triggers>
      <Trigger Property="IsVisible" Value="True">
        <Setter Property="Foreground" Value="Black" />
        <!-- the smells code, but I need to override the basestyle's trigger -->
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.CameraControl}" TargetType="{x:Type dxe:CameraControl}">
    <Setter Property="Template" Value="{DynamicResource {dxet:CameraControlThemeKey ResourceKey=Template}}" />
    <Setter Property="BorderTemplate" Value="{DynamicResource {dxet:BaseEditThemeKey ResourceKey=CommonBorderTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.TakePictureControl}" TargetType="{x:Type dxei:TakePictureControl}">
    <Setter Property="Template" Value="{DynamicResource {dxet:CameraControlThemeKey ResourceKey=TakePictureControlTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ToggleSwitch}" TargetType="{x:Type dxe:ToggleSwitch}">
    <Setter Property="KeyboardNavigation.AcceptsReturn" Value="False" />
    <Setter Property="Template" Value="{DynamicResource {dxet:ToggleSwitchThemeKey ResourceKey=Template}}" />
    <Setter Property="ToggleSwitchWidth" Value="{DynamicResource {dxet:ToggleSwitchThemeKey ResourceKey=ToggleSwitchWidth}}" />
    <Setter Property="ToggleSwitchHeight" Value="{DynamicResource {dxet:ToggleSwitchThemeKey ResourceKey=ToggleSwitchHeight}}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="ToggleSwitchWidth" Value="96" />
        <Setter Property="ToggleSwitchHeight" Value="44" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ToggleSwitchEdit}" TargetType="{x:Type dxe:ToggleSwitchEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.BaseEdit}}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:ToggleSwitchEditThemeKey ResourceKey=Template}}" />
    <Setter Property="DisplayTemplate" Value="{DynamicResource {dxet:ToggleSwitchEditThemeKey ResourceKey=DisplayTemplate}}" />
    <Setter Property="EditTemplate" Value="{DynamicResource {dxet:ToggleSwitchEditThemeKey ResourceKey=EditTemplate}}" />
    <Setter Property="ToggleSwitchWidth" Value="{DynamicResource {dxet:ToggleSwitchThemeKey ResourceKey=ToggleSwitchWidth}}" />
    <Setter Property="ToggleSwitchHeight" Value="{DynamicResource {dxet:ToggleSwitchThemeKey ResourceKey=ToggleSwitchHeight}}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="ToggleSwitchWidth" Value="96" />
        <Setter Property="ToggleSwitchHeight" Value="44" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceInactive">
        <Setter Property="ToggleSwitchHeight" Value="{DynamicResource {dxet:ToggleSwitchEditThemeKey ResourceKey=InplaceToggleSwitchHeight}}" />
      </Trigger>
      <Trigger Property="EditMode" Value="InplaceActive">
        <Setter Property="ToggleSwitchHeight" Value="{DynamicResource {dxet:ToggleSwitchEditThemeKey ResourceKey=InplaceToggleSwitchHeight}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="EditMode" Value="InplaceActive" />
          <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="ToggleSwitchHeight" Value="40" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="EditMode" Value="InplaceInactive" />
          <Condition Property="dx:ThemeManager.IsTouchEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="ToggleSwitchHeight" Value="40" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.TimePicker}" TargetType="{x:Type dxe:TimePicker}">
    <Setter Property="Template" Value="{DynamicResource {dxet:TimePickerThemeKey ResourceKey=Template}}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Background" Value="{DynamicResource {dxet:TimePickerThemeKey ResourceKey=BackgroundBrush}}" />
  </Style>
  <Style x:Key="ButtonInfoBaseStyle" TargetType="{x:Type dxe:ButtonInfoBase}">
    <Setter Property="CornerRadius" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=CornerRadius}}" />
    <Setter Property="Padding" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=Padding}}" />
    <Setter Property="Foreground" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=Foreground}}" />
    <Setter Property="Margin" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=RightButtonMargin}}" />
    <Setter Property="MarginCorrection" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=RightButtonMarginCorrection}}" />
    <Style.Triggers>
      <Trigger Property="IsLeft" Value="True">
        <Setter Property="Margin" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=LeftButtonMargin}}" />
        <Setter Property="MarginCorrection" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=LeftButtonMarginCorrection}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="CommonButtonInfoStyle" TargetType="{x:Type dxe:CommonButtonInfo}" BasedOn="{StaticResource ButtonInfoBaseStyle}">
    <Setter Property="BorderThickness" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DefaultBorderThickness}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ButtonInfoTemplate}}" />
    <Setter Property="dxei:ButtonInfoPropertyProvider.GlyphContainerStyle" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ButtonInfoContentStyle}}" />
    <Style.Triggers>
      <Trigger Property="ButtonKind" Value="Repeat">
        <Setter Property="Template" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=RepeatButtonInfoTemplate}}" />
      </Trigger>
      <Trigger Property="ButtonKind" Value="Toggle">
        <Setter Property="Template" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ToggleButtonInfoTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ButtonStyleBase" TargetType="{x:Type ButtonBase}">
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="Cursor" Value="{Binding Path=Cursor}" />
    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    <Setter Property="Foreground" Value="{Binding Path=Foreground}" />
    <Setter Property="BorderThickness" Value="{Binding Path=BorderThickness}" />
    <Setter Property="BorderBrush" Value="{Binding Path=BorderBrush}" />
    <Setter Property="Background" Value="{Binding Path=Background}" />
    <Setter Property="Padding" Value="{Binding Path=Padding}" />
    <Setter Property="dxcn:AppearanceOptions.CornerRadius" Value="{Binding Path=(dxcn:AppearanceOptions.CornerRadius)}" />
    <Setter Property="dxcn:AppearanceOptions.HasCornerRadius" Value="{Binding Path=(dxcn:AppearanceOptions.HasCornerRadius)}" />
    <Setter Property="Command" Value="{Binding Path=Command}" />
    <Setter Property="CommandParameter" Value="{Binding Path=CommandParameter}" />
    <Setter Property="ClickMode" Value="{Binding Path=ClickMode}" />
    <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled}" />
    <Setter Property="Visibility" Value="{Binding Path=(dxe:ButtonInfo.Visibility)}" />
    <Setter Property="CommandTarget" Value="{Binding Path=CommandTarget}" />
    <Setter Property="ToolTip" Value="{Binding Path=ToolTip}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{Binding Path=(ToolTipService.ShowDuration)}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{Binding Path=(ToolTipService.InitialShowDelay)}" />
  </Style>
  <Style x:Key="{dxet:ButtonsThemeKey ResourceKey=ButtonStyle}" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource ButtonStyleBase}">
    <Setter Property="Content" Value="{Binding Path=Content}" />
    <Setter Property="ContentTemplate" Value="{Binding Path=ContentTemplate}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ButtonTemplate}}" />
  </Style>
  <Style x:Key="{dxet:ButtonsThemeKey ResourceKey=DeleteButtonStyle}" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource ButtonStyleBase}">
    <Setter Property="Margin" Value="2,0" />
  </Style>
  <Style x:Key="{dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoHorizontalStyle}" TargetType="{x:Type FrameworkElement}" />
  <Style x:Key="{dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoVerticalStyle}" TargetType="{x:Type FrameworkElement}" />
  <Style x:Key="{dxet:ButtonsThemeKey ResourceKey=ImageButtonStyle}" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource ButtonStyleBase}">
    <Setter Property="Content" Value="{Binding}" />
    <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ImageButtonContentTemplate}}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ButtonTemplate}}" />
  </Style>
  <Style x:Key="{dxet:ButtonsThemeKey ResourceKey=DateEditButtonStyle}" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource {dxet:ButtonsThemeKey ResourceKey=ImageButtonStyle}}">
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxet:BaseEditThemeKey ResourceKey=DefaultIconSvgPalette}}" />
    <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DateEditButtonContentTemplate}}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=ActualGlyphKind}" Value="Arrow">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DropDownGlyph}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ButtonInfo}" TargetType="{x:Type dxe:ButtonInfo}" BasedOn="{StaticResource CommonButtonInfoStyle}">
    <Setter Property="ButtonStyle" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ButtonStyle}}" />
    <Style.Triggers>
      <Trigger Property="GlyphKind" Value="User">
        <Setter Property="dxei:ButtonInfoPropertyProvider.GlyphContainerStyle" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=UserButtonInfoContentStyle}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="None">
        <Setter Property="dxei:ButtonInfoPropertyProvider.GlyphContainerStyle" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=NoneButtonInfoContentStyle}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="DropDown">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DropDownGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Regular">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=RegularGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Up">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=UpGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Down">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DownGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Left">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=LeftGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Right">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=RightGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Cancel">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=CancelGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Apply">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ApplyGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Plus">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=PlusGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Minus">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=MinusGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Undo">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=UndoGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Redo">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=RedoGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Refresh">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=RefreshGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Search">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SearchGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="NextPage">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=NextPageGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="PrevPage">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=PrevPageGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Last">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=LastGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="First">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=FirstGlyph}}" />
      </Trigger>
      <Trigger Property="GlyphKind" Value="Edit">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=EditGlyph}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.SpinButtonInfo}" TargetType="{x:Type dxe:SpinButtonInfo}" BasedOn="{StaticResource ButtonInfoBaseStyle}">
    <Style.Triggers>
      <Trigger Property="SpinStyle" Value="Horizontal">
        <Setter Property="Template" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoHorizontalTemplate}}" />
      </Trigger>
      <Trigger Property="SpinStyle" Value="Vertical">
        <Setter Property="Template" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoVerticalTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ImageButtonInfo}" TargetType="{x:Type dxe:ImageButtonInfo}" BasedOn="{StaticResource CommonButtonInfoStyle}">
    <Setter Property="ButtonStyle" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ImageButtonStyle}}" />
    <Setter Property="GlyphStyle" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=ImageButtonGlyphStyle}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DeleteButtonInfo}" TargetType="{x:Type dxe:DeleteButtonInfo}" BasedOn="{StaticResource ButtonInfoBaseStyle}">
    <Setter Property="Template" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DeleteButtonInfoTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.LoadingIndicatorButtonInfo}" TargetType="{x:Type dxe:LoadingIndicatorButtonInfo}" BasedOn="{StaticResource ButtonInfoBaseStyle}">
    <Setter Property="Template" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=LoadingButtonInfoTemplate}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateEditButtonInfo}" TargetType="{x:Type dxe:DateEditButtonInfo}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ImageButtonInfo}}">
    <Setter Property="dxei:ButtonInfoPropertyProvider.UseArrowGlyphOnly" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DateEditUseArrowGlyph}}" />
    <Setter Property="ButtonStyle" Value="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DateEditButtonStyle}}" />
    <Style.Triggers>
      <Trigger Property="ActualGlyphKind" Value="Date">
        <Setter Property="Glyph" Value="{dx:SvgImageSource Uri={dx:EditorsResource Images/DateEdit/Date.svg}}" />
      </Trigger>
      <Trigger Property="ActualGlyphKind" Value="Time">
        <Setter Property="Glyph" Value="{dx:SvgImageSource Uri={dx:EditorsResource Images/DateEdit/Time.svg}}" />
      </Trigger>
      <Trigger Property="ActualGlyphKind" Value="DateAndTime">
        <Setter Property="Glyph" Value="{dx:SvgImageSource Uri={dx:EditorsResource Images/DateEdit/DateAndTime.svg}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxet:ButtonsThemeKey ResourceKey=ButtonContainerStyle}" TargetType="{x:Type ContentPresenter}">
    <Setter Property="ContentTemplate" Value="{Binding Path=Template}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateRangeControl}" TargetType="{x:Type dxe:DateRangeControl}">
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="Template" Value="{DynamicResource {dxet:DateRangeControlThemeKey ResourceKey=Template}}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource {dxet:DateRangeControlThemeKey ResourceKey=Foreground}}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.RangeDateNavigator}" TargetType="{x:Type dxe:RangeDateNavigator}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateNavigator.DateNavigator}}">
    <Setter Property="Background" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ShowTodayButton" Value="False" />
    <Setter Property="ColumnCount" Value="2" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.DateRangeButtonEdit}" TargetType="{x:Type dxe:DateRangeButtonEdit}" BasedOn="{StaticResource {dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.ButtonEdit}}">
    <Setter Property="ShowBorder" Value="False" />
    <Setter Property="Margin" Value="2" />
    <Setter Property="MaskUseAsDisplayFormat" Value="True" />
    <Setter Property="MaskType" Value="DateTimeAdvancingCaret" />
    <Setter Property="AllowNullInput" Value="True" />
    <Setter Property="AllowDefaultButton" Value="False" />
    <Setter Property="Mask" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).Mask, RelativeSource={RelativeSource Self}}" />
    <Setter Property="IsReadOnly" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).IsTextReadOnly, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Foreground" Value="{Binding Path=(dxe:DateRangeControl.DateRangeControl).Foreground, RelativeSource={RelativeSource Self}}" />
  </Style>
</ResourceDictionary>