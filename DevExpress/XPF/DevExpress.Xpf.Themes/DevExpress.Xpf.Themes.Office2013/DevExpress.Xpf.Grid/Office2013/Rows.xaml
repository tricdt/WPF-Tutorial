<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- BEGIN WPF -->

    <ResourceDictionary.MergedDictionaries>
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2013.v24.1;component/DevExpress.Xpf.Grid/Office2013/Constants.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

    <!-- END WPF -->

    <dxg:DetailLevelToObjectConverter x:Key="DetailLevelToBorderLeftConverter"
                                      DetailValue="1,0,0,0"
                                      NotDetailValue="0,0,0,0"/>

    <dx:EnumToObjectConverter x:Key="EnumToObjectConverter">
        <dx:EnumToObjectConverter.Values>
            <dx:EnumObjectProvider x:Key="None"
                                   cs:Name="EnumObjectProvider_0001"
                                   Value="Transparent"
                                   cs:Office2013DarkGray.Value="Transparent"
                                   cs:Office2013LightGray.Value="Transparent"
                                   cs:Office2016Black.Value="Transparent"
                                   cs:Office2016Colorful.Value="Transparent"
                                   cs:Office2016White.Value="Transparent"
                                  />
            <dx:EnumObjectProvider x:Key="Selected" Value="{StaticResource {dxgt:GridRowThemeKey ResourceKey=BorderSelectedBrush}}"/>
            <dx:EnumObjectProvider x:Key="Focused" Value="{StaticResource {dxgt:GridRowThemeKey ResourceKey=BorderFocusedBrush}}"/>
        </dx:EnumToObjectConverter.Values>
    </dx:EnumToObjectConverter>

    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter/>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Border x:Name="ContentBorder" TextBlock.Foreground="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupGridRowHeaderTextBrush}}">
            <ContentPresenter/>
        </Border>
    </ControlTemplate>

    <Style x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowPresenterStyle}" TargetType="{x:Type dxg:GroupGridRowPresenter}"/>

    <!-- BEGIN WPF -->

    <ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Border x:Name="groupBorder"
                Background="#FFFFFFFF"
                BorderBrush="#FFD6D6D6"
                cs:Name="Border_0003"
                SnapsToDevicePixels="True"
                cs:Office2013DarkGray.Background="#FFFFFFFF"
                cs:Office2013DarkGray.BorderBrush="#FFB9B9B9"
                cs:Office2013LightGray.Background="#FFFFFFFF"
                cs:Office2013LightGray.BorderBrush="#FFB9B9B9"
                cs:Office2016Black.Background="#FFD4D4D4"
                cs:Office2016Black.BorderBrush="#FF444444"
                cs:Office2016Colorful.Background="#FFFFFFFF"
                cs:Office2016Colorful.BorderBrush="#FFA6A6A6"
                cs:Office2016White.Background="#FFFFFFFF"
                cs:Office2016White.BorderBrush="#FFD6D6D6"
               >
            <ContentPresenter/>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Decorator x:Name="ContentDecorator">
            <Border x:Name="ContentBorder"
                    BorderBrush="#FFD6D6D6"
                    BorderThickness="0,0,0,0"
                    cs:Name="Border_0001"
                    DockPanel.Dock="Top"
                    TextBlock.Foreground="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupGridRowHeaderTextBrush}}"
                    cs:Office2013DarkGray.BorderBrush="#FFABABAB"
                    cs:Office2013LightGray.BorderBrush="#FFABABAB"
                    cs:Office2016Black.BorderBrush="#FF969696"
                    cs:Office2016Colorful.BorderBrush="#FFd3d3d3"
                    cs:Office2016White.BorderBrush="#FFD6D6D6"
                   >
                <ContentPresenter/>
            </Border>
        </Decorator>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsPreviewExpanded}" Value="True">
                <Setter Property="BorderThickness"
                        TargetName="ContentBorder"
                        Value="0,1,0,0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsRowVisible}" Value="false">
                <Setter Property="Visibility"
                        TargetName="ContentBorder"
                        Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource TemplatedParent}}" Value="Horizontal">
                <Setter Property="DockPanel.Dock"
                        TargetName="ContentBorder"
                        Value="Left"/>
                <Setter Property="VerticalAlignment"
                        TargetName="ContentBorder"
                        Value="Stretch"/>
                <Setter Property="LayoutTransform" TargetName="ContentDecorator">
                    <Setter.Value>
                        <RotateTransform Angle="-90"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <SolidColorBrush x:Key="BorderFocusedBrush"
                     Color="#FF0072C6"
                     cs:Name="SolidColorBrush_0001"
                     cs:Office2013DarkGray.Color="#FF333333"
                     cs:Office2013LightGray.Color="#FF19478A"
                     cs:Office2016Black.Color="#47000000"
                     cs:Office2016Colorful.Color="#00000000"
                     cs:Office2016White.Color="#FF0072C6"/>

    <SolidColorBrush x:Key="BorderSelectedUnfocusedBrush"
                     Color="#FFD6D6D6"
                     cs:Name="SolidColorBrush_0002"
                     cs:Office2013DarkGray.Color="#FFABABAB"
                     cs:Office2013LightGray.Color="#FFABABAB"
                     cs:Office2016Black.Color="#FFB2B2B2"
                     cs:Office2016Colorful.Color="#30000000"
                     cs:Office2016White.Color="#FFD6D6D6"/>

    <!-- END WPF -->

    <SolidColorBrush x:Key="RowControlContainerValidationErrorBackground"
                     cs:Name="SolidColorBrush_0003"
                     cs:Office2013DarkGray.Color="#FFFFD9D9"
                     cs:Office2013LightGray.Color="#FFFFD9D9"
                     cs:Office2016Black.Color="#FFFFCCCC"
                     cs:Office2016Colorful.Color="#FFFFD9D9"
                     cs:Office2016White.Color="#FFFFD9D9">
        #FFFFD9D9
    </SolidColorBrush>

    <SolidColorBrush x:Key="RowControlContainerTransparentBackground"
                     cs:Name="SolidColorBrush_0004"
                     cs:Office2013DarkGray.Color="#00000000"
                     cs:Office2013LightGray.Color="#00000000"
                     cs:Office2016Black.Color="#00000001"
                     cs:Office2016Colorful.Color="#00000000"
                     cs:Office2016White.Color="#00000000">
        #00000000
    </SolidColorBrush>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=RowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid>
            <!--ONLY SL<Grid.Background>
                <Binding Path="(dxe:BaseEdit.HasValidationError)">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter TrueValue="{StaticResource RowControlContainerValidationErrorBackground}"
                            FalseValue="{StaticResource RowControlContainerTransparentBackground}"/>
                    </Binding.Converter>
                </Binding>
            </Grid.Background>
            <Grid x:Name="AlternateRowElement" Background="{Binding Path=View.AlternateRowBackground}" dxg:FadeSelectionHelper.IsKeyboardFocusWithinView="{Binding Path=(dxg:GridControl.ActiveView).IsKeyboardFocusWithin, RelativeSource={RelativeSource Mode=Self}}" dxg:FadeSelectionHelper.FadeSelectionOnLostFocus="{Binding Path=View.ActualFadeSelectionOnLostFocus}">
                        <Grid.Visibility>
                            <Binding Path="AlternateRow">
                                <Binding.Converter>
                                    <dx:BoolToVisibilityConverter />
                                </Binding.Converter>
                            </Binding>
                        </Grid.Visibility>
                    </Grid>
            ONLY SL-->
            <Border x:Name="RowContentBorder">
                <!-- BEGIN WPF -->
                <Border.Background>
                    <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}"/>
                </Border.Background>
                <!-- END WPF -->
                <!--ONLY SL
                <Border.Background>
                    <Binding Path="SelectionState" Converter="{StaticResource EnumToObjectConverter}" />
                </Border.Background>
                ONLY SL-->
            </Border>
            <Border Background="{StaticResource UnfocusedRowBrush}"
                    dxg:FadeSelectionHelper.FadeSelectionOnLostFocus="{Binding Path=View.ActualFadeSelectionOnLostFocus}"
                    dxg:FadeSelectionHelper.IsKeyboardFocusWithinView="{Binding Path=(dxg:GridControl.ActiveView).IsKeyboardFocusWithin, RelativeSource={RelativeSource Mode=Self}}"
                    dxg:FadeSelectionHelper.IsSelected="{Binding SelectionState, Converter={dxg:SelectionStateToBooleanConverter}}"
                    dxg:FadeSelectionHelper.Opacity="1"
                    Visibility="Collapsed"/>
            <Border x:Name="RowBottomLine"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Padding="{TemplateBinding Padding}">
                <Border.BorderThickness>
                    <Binding Path="View.ShowHorizontalLines">
                        <Binding.Converter>
                            <dx:BoolToObjectConverter FalseValue="0" TrueValue="0,0,0,1"/>
                        </Binding.Converter>
                    </Binding>
                </Border.BorderThickness>
            </Border>
            <ContentPresenter/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ShowBottomLine}" Value="True">
                <Setter Property="BorderThickness"
                        TargetName="RowBottomLine"
                        Value="0,0,0,1"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxg:RowData.CurrentRowData).(dxe:BaseEdit.HasValidationError), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                    <Condition Binding="{Binding Path=(dxg:RowData.CurrentRowData).IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="RowContentBorder"
                        Value="{StaticResource {dxgt:GridRowThemeKey ResourceKey=ValidationErrorBrush}}"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.FixedGroupsAdorner}" TargetType="{x:Type dxg:FixedGroupsAdorner}">
        <Setter Property="AdornerBrush">
            <Setter.Value>
                <LinearGradientBrush cs:Name="LinearGradientBrush_0083"
                                     EndPoint="0.5,1"
                                     StartPoint="0.5,0"
                                    >
                    <GradientStop Color="#20000000"
                                  cs:Name="GradientStop_0001"
                                  Offset="0"
                                  cs:Office2013DarkGray.Color="#20000000"
                                  cs:Office2013LightGray.Color="#20000000"
                                  cs:Office2016Black.Color="#20000000"
                                  cs:Office2016Colorful.Color="#20000000"
                                  cs:Office2016White.Color="#20000000"
                                 />
                    <GradientStop Color="#00000000"
                                  cs:Name="GradientStop_0002"
                                  Offset="1"
                                  cs:Office2013DarkGray.Color="#00000000"
                                  cs:Office2013LightGray.Color="#00000000"
                                  cs:Office2016Black.Color="#00000001"
                                  cs:Office2016Colorful.Color="#00000000"
                                  cs:Office2016White.Color="#00000000"
                                 />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="AdornerHeight" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxg:FixedGroupsAdorner}">
                    <ContentPresenter Content="{TemplateBinding Content}" IsHitTestVisible="false"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowIndicatorControl}" TargetType="{x:Type dxg:RowIndicatorControl}">
        <Setter Property="Foreground" Value="{StaticResource ResourceKey={dxgt:RowIndicatorThemeKey ResourceKey=ForegroundBrush}}"/>
    </Style>

    <Style x:Key="{dxgt:GridRowThemeKey ResourceKey=DetailTotalSummaryIndentBorderStyle}" TargetType="{x:Type Border}">
        <Setter cs:Name="Setter_0003"
                Property="BorderBrush"
                Value="#FFD6D6D6"
                cs:Office2013DarkGray.Value="#FFABABAB"
                cs:Office2013LightGray.Value="#FFABABAB"
                cs:Office2016Black.Value="#30000000"
                cs:Office2016Colorful.Value="#30000000"
                cs:Office2016White.Value="#FFD6D6D6"
               />
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GridDetailExpandButtonContainer}" TargetType="{x:Type dxg:GridDetailExpandButtonContainer}">
        <Setter Property="IsMasterRowExpanded" Value="{Binding IsMasterRowExpanded}"/>
        <Setter Property="RowPosition" Value="Single"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxg:GridDetailExpandButtonContainer">
                    <Grid>
                        <dxg:GridDetailExpandButton Name="PART_ExpandButton"
                                                    Command="{Binding View.Commands.ChangeMasterRowExpanded}"
                                                    CommandParameter="{Binding Path=RowHandle.Value}"
                                                    dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible="{Binding Path=(dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible), RelativeSource={RelativeSource TemplatedParent}}"
                                                    IsChecked="{Binding Path=IsRowExpanded, Mode=OneWay}"/>
                        <Border x:Name="detailRightLine"
                                BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"
                                BorderThickness="0,0,1,0"
                                HorizontalAlignment="Right"
                                Visibility="Collapsed"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.DetailIndentControl}" TargetType="{x:Type dxg:DetailIndentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <dxg:BackgroundBorderControl IsDetailMargin="{Binding Path=IsDetailMargin}"
                                                     IsMasterRowExpanded="{Binding Path=(dx:DataObjectBase.DataObject).IsMasterRowExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                     ItemLevel="{Binding Path=Level}"
                                                     LineLevel="{Binding Path=(dx:DataObjectBase.DataObject).LineLevel, RelativeSource={RelativeSource TemplatedParent}}"
                                                     RowLevel="{Binding Path=(dx:DataObjectBase.DataObject).DetailLevel, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="detailLeftLine"
                                BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"
                                BorderThickness="1,0,0,0"
                                dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"
                                Width="1"
                                HorizontalAlignment="Right"/>
                        <Border x:Name="detailBottomLine" BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsDetailMargin}" Value="True">
                            <Setter Property="BorderBrush"
                                    TargetName="detailLeftLine"
                                    Value="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=BorderBrush}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Level}" Value="0">
                            <Setter Property="Width" TargetName="detailLeftLine" Value="0"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ShowLastDetailMargin, RelativeSource={RelativeSource FindAncestor, AncestorType=dxg:DetailRowsIndentControl}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsLast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility"
                                    TargetName="detailLeftLine"
                                    Value="Collapsed"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ShowBottomLine, RelativeSource={RelativeSource FindAncestor, AncestorType=dxg:DetailRowsIndentControl}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsLast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness"
                                    TargetName="detailBottomLine"
                                    Value="0,0,0,1"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.DetailRowsIndentControl}" TargetType="{x:Type dxg:DetailRowsIndentControl}">
        <Setter Property="dxg:DetailSummaryControlBase.SummaryDetailLevel" Value="{Binding Path=(dxg:DetailSummaryControlBase.SummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxg:DetailIndentControl dx:DataObjectBase.DataObject="{Binding Path=(dx:DataObjectBase.DataObject), RelativeSource={RelativeSource TemplatedParent}}"
                                             dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"
                                             Width="{Binding Path=Width}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsLeft" Value="False">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <dxg:DetailIndentControl dx:DataObjectBase.DataObject="{Binding Path=(dx:DataObjectBase.DataObject), RelativeSource={RelativeSource TemplatedParent}}"
                                                     dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}"
                                                     Width="{Binding Path=WidthAtRight}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="-1" ScaleY="1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Infinity Loading -->

    <ControlTemplate x:Key="LoadingIndicator" TargetType="{x:Type ProgressBar}">
        <Grid x:Name="Root">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Determinate"/>
                    <VisualState x:Name="Indeterminate">
                        <Storyboard RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0.38"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.26"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.26"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.38"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0.62"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0.62"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0.62"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.38"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.26"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.26"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0.38"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0.62"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse3" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.62"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.38"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.26"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0.26"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0.38"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.62"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse4" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.62"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.38"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0.26"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0.26"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.38"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.62"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse5" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.62"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0.38"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0.26"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.26"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.38"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0.62"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <StackPanel Orientation="Horizontal">
                    <Ellipse x:Name="Ellipse1"
                             Fill="{TemplateBinding Foreground}"
                             Height="5"
                             Margin="2"
                             Width="5"/>
                    <Ellipse x:Name="Ellipse2"
                             Fill="{TemplateBinding Foreground}"
                             Height="5"
                             Margin="2"
                             Width="5"/>
                    <Ellipse x:Name="Ellipse3"
                             Fill="{TemplateBinding Foreground}"
                             Height="5"
                             Margin="2"
                             Width="5"/>
                    <Ellipse x:Name="Ellipse4"
                             Fill="{TemplateBinding Foreground}"
                             Height="5"
                             Margin="2"
                             Width="5"/>
                    <Ellipse x:Name="Ellipse5"
                             Fill="{TemplateBinding Foreground}"
                             Height="5"
                             Margin="2"
                             Width="5"/>
                </StackPanel>
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=LoadingRowTemplate}" TargetType="dxg:LoadingRowControl">
        <Grid x:Name="Root"
              Margin="1"
              MinHeight="32">
            <ProgressBar x:Name="Indicator"
                         Foreground="#FF0072C6"
                         HorizontalAlignment="Center"
                         IsIndeterminate="{Binding ShowLoadingIndicator}"
                         Template="{StaticResource LoadingIndicator}"
                         VerticalAlignment="Center"
                         Visibility="{Binding ShowLoadingIndicator, Converter={StaticResource BoolToVisibilityConverter}}"
                         cs:Office2013DarkGray.Foreground="#FF333333"
                         cs:Office2013LightGray.Foreground="#FF19478A"
                         cs:Office2016Black.Foreground="#FF3C3C3C"
                         cs:Office2016Colorful.Foreground="#FF0072C6"
                         cs:Office2016White.Foreground="#FF0072C6"
                        />
            <dxg:LoadingRowButton Click="{DXEvent 'LoadMoreRows()'}"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  Visibility="{Binding AllowLoadMore, Converter={StaticResource BoolToVisibilityConverter}}">
                <StackPanel Margin="9,0,9,1" Orientation="Horizontal">
                    <Label Content="{dxg:GridControlStringId LoadingRowLoadMore}"/>
                    <Grid Height="16"
                          Margin="3"
                          Width="16">
                        <Path Data="F1 M 10,5L 5,10L 0,5L 3,5L 3,3L 7,3L 7,5L 10,5 Z M 3,2L 3,0L 7,0L 7,2L 3,2 Z "
                              Fill="#FF3C3C3C"
                              Height="10"
                              HorizontalAlignment="Center"
                              Margin="0,1,0,0"
                              Stretch="Fill"
                              VerticalAlignment="Center"
                              Width="10"
                              cs:Office2013DarkGray.Fill="#FF333333"
                              cs:Office2013LightGray.Fill="#FF3C3C3C"
                              cs:Office2016Black.Fill="#FF3C3C3C"
                              cs:Office2016Colorful.Fill="#FF3C3C3C"
                              cs:Office2016White.Fill="#FF3C3C3C"
                             />
                    </Grid>
                </StackPanel>
            </dxg:LoadingRowButton>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=LoadingRowErrorTemplate}" TargetType="dxg:LoadingRowControl">
        <Grid x:Name="Root" Margin="3">
            <Grid HorizontalAlignment="Center"
                  Margin="96,0,96,0"
                  MaxWidth="640"
                  VerticalAlignment="Top">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Path Data="F1 M 7,0C 10.866,0 14,3.13401 14,7C 14,10.866 10.866,14 7,14C 3.13401,14 -6.35783e-007,10.866 -6.35783e-007,7C -6.35783e-007,3.13401 3.13401,0 7,0 Z M 2.75736,4.17157L 5.58579,7L 2.75736,9.82843L 4.17157,11.2426L 7,8.41422L 9.82843,11.2426L 11.2426,9.82843L 8.41421,7L 11.2426,4.17157L 9.82843,2.75736L 7,5.58579L 4.17157,2.75736L 2.75736,4.17157 Z "
                      Fill="#FFCC0000"
                      Height="14"
                      HorizontalAlignment="Center"
                      Margin="4"
                      Stretch="Fill"
                      VerticalAlignment="Top"
                      Width="14"
                      cs:Office2013DarkGray.Fill="#FFCC0000"
                      cs:Office2013LightGray.Fill="#FFCC0000"
                      cs:Office2016Black.Fill="#FFCC0000"
                      cs:Office2016Colorful.Fill="#FFCC0000"
                      cs:Office2016White.Fill="#FFCC0000"
                     />
                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <TextBlock HorizontalAlignment="Left"
                               Margin="4,3,4,3"
                               Text="{Binding ErrorText}"
                               TextWrapping="Wrap"/>
                    <TextBlock HorizontalAlignment="Center" Visibility="{Binding IsLoadingButtonVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                        <dxe:HyperlinkEdit Command="{Binding LoadRowsCommand}" Text="{Binding LoadingButtonText}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=LoadingRowButtonTemplate}" TargetType="dxg:LoadingRowButton">
        <Grid x:Name="Root">
            <Border x:Name="IsDefault"
                    Background="Transparent"
                    cs:Office2013DarkGray.Background="Transparent"
                    cs:Office2013LightGray.Background="Transparent"
                    cs:Office2016Black.Background="Transparent"
                    cs:Office2016Colorful.Background="Transparent"
                    cs:Office2016White.Background="Transparent"
                   />
            <ContentPresenter x:Name="Content"
                              HorizontalAlignment="Center"
                              Margin="3"
                              TextBlock.Foreground="#FF3C3C3C"
                              VerticalAlignment="Center"
                              cs:Office2013DarkGray.TextBlock.Foreground="#FF333333"
                              cs:Office2013LightGray.TextBlock.Foreground="#FF3C3C3C"
                              cs:Office2016Black.TextBlock.Foreground="#FF3C3C3C"
                              cs:Office2016Colorful.TextBlock.Foreground="#FF3C3C3C"
                              cs:Office2016White.TextBlock.Foreground="#FF3C3C3C"
                             />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.Foreground"
                        TargetName="Content"
                        Value="#FF3C3C3C"
                        cs:Office2013DarkGray.Value="#FF333333"
                        cs:Office2013LightGray.Value="#FF3C3C3C"
                        cs:Office2016Black.Value="#FF3C3C3C"
                        cs:Office2016Colorful.Value="#FF3C3C3C"
                        cs:Office2016White.Value="#FF3C3C3C"
                       />
                <Setter Property="Background"
                        TargetName="IsDefault"
                        Value="#FFCDE6F7"
                        cs:Office2013DarkGray.Value="#FFCDE6F7"
                        cs:Office2013LightGray.Value="#FFCDE6F7"
                        cs:Office2016Black.Value="#FFC5C5C5"
                        cs:Office2016Colorful.Value="#30000000"
                        cs:Office2016White.Value="#FFCDE6F7"
                       />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="TextBlock.Foreground"
                        TargetName="Content"
                        Value="#FF3C3C3C"
                        cs:Office2013DarkGray.Value="#FF333333"
                        cs:Office2013LightGray.Value="#FF3C3C3C"
                        cs:Office2016Black.Value="#FF3C3C3C"
                        cs:Office2016Colorful.Value="#FF3C3C3C"
                        cs:Office2016White.Value="#FF3C3C3C"
                       />
                <Setter Property="Background"
                        TargetName="IsDefault"
                        Value="#FFB1D6F0"
                        cs:Office2013DarkGray.Value="#FFB1D6F0"
                        cs:Office2013LightGray.Value="#FFB1D6F0"
                        cs:Office2016Black.Value="#FF9F9F9F"
                        cs:Office2016Colorful.Value="#60000000"
                        cs:Office2016White.Value="#FFB1D6F0"
                       />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>