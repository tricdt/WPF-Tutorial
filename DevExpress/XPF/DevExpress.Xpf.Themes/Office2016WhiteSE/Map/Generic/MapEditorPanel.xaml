<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/map/themekeys" xmlns:local="http://schemas.devexpress.com/winfx/2008/xaml/map" xmlns:dxmcl="clr-namespace:DevExpress.Map.Localization;assembly=DevExpress.Map.v24.1.Core" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <local:ActiveActionToIsActiveConverter x:Key="ActiveActionToIsActiveConverter" />
  <local:MeasurementToolbarActionToIsActiveConverter x:Key="MeasurementToolbarActionToIsActiveConverter" />
  <local:LocalizedStringConverter x:Key="LocalizedStringConverter" />
  <Style x:Key="MapToggleButtonStyle" TargetType="{x:Type local:MapToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MapToggleButton}">
          <Grid>
            <Grid Margin="0,1,0,1">
              <Border Name="hover" Background="{DynamicResource {dxt:ButtonPanelThemeKeys ResourceKey=ItemBackground}}" CornerRadius="1" Opacity="0" />
              <Border Name="pressed" Background="{DynamicResource {dxt:ButtonPanelThemeKeys ResourceKey=ItemBackground}}" CornerRadius="1" Opacity="0" />
              <Border Name="active" Background="{DynamicResource {dxt:ButtonPanelThemeKeys ResourceKey=ItemBackground}}" CornerRadius="1" Opacity="0" />
            </Grid>
            <Border Name="border" Background="{TemplateBinding Background}" Margin="2,0,2,0" ToolTip="{TemplateBinding ToolTip}" ToolTipService.ShowOnDisabled="True">
              <StackPanel Orientation="Horizontal" Margin="{DynamicResource {dxt:ButtonPanelThemeKeys ResourceKey=ItemMargin}}">
                <Image Source="{TemplateBinding Tag}" Width="{DynamicResource {dxt:ButtonPanelThemeKeys ResourceKey=ItemSize}}" Height="{DynamicResource {dxt:ButtonPanelThemeKeys ResourceKey=ItemSize}}" />
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
              </StackPanel>
            </Border>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Duration="0" Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" To="1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Duration="0" Storyboard.TargetName="pressed" Storyboard.TargetProperty="Opacity" To="1" />
                    <DoubleAnimation Duration="0" Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="{DynamicResource ResourceKey={dxt:ButtonPanelThemeKeys ResourceKey=PressedItemOpacity}}" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Active">
                  <Storyboard>
                    <DoubleAnimation Duration="0" Storyboard.TargetName="active" Storyboard.TargetProperty="Opacity" To="1" />
                    <DoubleAnimation Duration="0" Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="{DynamicResource ResourceKey={dxt:ButtonPanelThemeKeys ResourceKey=ActiveItemOpacity}}" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Duration="0" Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="{DynamicResource ResourceKey={dxt:ButtonPanelThemeKeys ResourceKey=DisabledItemOpacity}}" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SeparatorStyle" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MapEditorPanelButton}">
          <Rectangle Width="1" Height="{DynamicResource {dxt:ButtonPanelThemeKeys ResourceKey=ItemSize}}" Margin="{DynamicResource {dxt:ButtonPanelThemeKeys ResourceKey=ItemMargin}}" Stroke="{DynamicResource {dxt:ButtonPanelThemeKeys ResourceKey=SeparatorColor}}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="UndoButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorUndo}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/Undo.svg}" />
  </Style>
  <Style x:Key="RedoButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorRedo}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/Redo.svg}" />
  </Style>
  <Style x:Key="ResetModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorDefault}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/Default.svg}" />
  </Style>
  <Style x:Key="SetTransformModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorTransform}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/Transform.svg}" />
  </Style>
  <Style x:Key="SetEditModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorEdit}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/Edit.svg}" />
  </Style>
  <Style x:Key="SetCreatePushpinModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddPushpin}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddPushpin.svg}" />
  </Style>
  <Style x:Key="SetCreatePolygonModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddPath}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddPath.svg}" />
  </Style>
  <Style x:Key="SetCreatePolylineModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddPolyline}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddPolyline.svg}" />
  </Style>
  <Style x:Key="SetCreateSplineModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddSpline}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddSpline.svg}" />
  </Style>
  <Style x:Key="SetCreateDotModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddDot}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddDot.svg}" />
  </Style>
  <Style x:Key="SetCreateEllipseModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddEllipse}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddEllipse.svg}" />
  </Style>
  <Style x:Key="SetCreateRectangleModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddRectangle}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddRectangle.svg}" />
  </Style>
  <Style x:Key="SetCreateLineModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddLine}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddLine.svg}" />
  </Style>
  <Style x:Key="SetCreateCustomElementModeButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MapEditorPanelButton}">
    <Setter Property="Visibility" Value="Collapsed" />
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.EditorAddCustomElement}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddCustomElement.svg}" />
  </Style>
  <Style x:Key="SetCreateDistanceRulerButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MeasurementToolbarButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.AddDistanceRuler}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddDistanceRuler.svg}" />
  </Style>
  <Style x:Key="SetCreateAreaRulerButtonStyle" BasedOn="{StaticResource MapToggleButtonStyle}" TargetType="{x:Type local:MeasurementToolbarButton}">
    <Setter Property="ToolTip" Value="{Binding Converter={StaticResource LocalizedStringConverter}, ConverterParameter={x:Static dxmcl:MapStringId.AddAreaRuler}}" />
    <Setter Property="Tag" Value="{local:MapCoreSvgImage Path=Images/Svg/EditorPanel/AddAreaRuler.svg}" />
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Map.MapEditorPanelControl}" TargetType="local:MapEditorPanelControl">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="local:MapEditorPanelControl">
          <Border Background="{DynamicResource {dxt:MapBrushesThemeKey ResourceKey=OverlayBackground}}">
            <StackPanel Orientation="Horizontal" x:Name="buttonsPanel">
              <local:MapEditorPanelButton Style="{StaticResource UndoButtonStyle}" Command="{Binding Editor.UndoCommand}" />
              <local:MapEditorPanelButton Style="{StaticResource RedoButtonStyle}" Command="{Binding Editor.RedoCommand}" />
              <local:MapEditorPanelButton Style="{StaticResource SeparatorStyle}" />
              <local:MapEditorPanelButton Style="{StaticResource ResetModeButtonStyle}" Command="{Binding Editor.ResetModeCommand}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:ItemsEditorPanelAction.Default},                                      Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SetTransformModeButtonStyle}" Command="{Binding Editor.SetTransformModeCommand}" CommandParameter="{x:Static local:MapItemTransform.All}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:ItemsEditorPanelAction.Transform},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SetEditModeButtonStyle}" Command="{Binding Editor.SetEditModeCommand}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:ItemsEditorPanelAction.Edit},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SeparatorStyle}" />
              <local:MapEditorPanelButton Style="{StaticResource SetCreatePushpinModeButtonStyle}" Command="{Binding Editor.SetCreateModeCommand}" CommandParameter="{x:Static local:MapPushpinSettings.Default}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:ItemsEditorPanelAction.AddPushpin},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SetCreatePolygonModeButtonStyle}" Command="{Binding Editor.SetCreateModeCommand}" CommandParameter="{x:Static local:MapPathSettings.Default}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:ItemsEditorPanelAction.AddPath},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SetCreatePolylineModeButtonStyle}" Command="{Binding Editor.SetCreateModeCommand}" CommandParameter="{x:Static local:MapPolylineSettings.Default}" IsActive="{Binding ActiveAction,                                     ConverterParameter={x:Static local:ItemsEditorPanelAction.AddPolyline},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SetCreateSplineModeButtonStyle}" Command="{Binding Editor.SetCreateModeCommand}" CommandParameter="{x:Static local:MapSplineSettings.Default}" IsActive="{Binding ActiveAction,                                     ConverterParameter={x:Static local:ItemsEditorPanelAction.AddSpline},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SetCreateDotModeButtonStyle}" Command="{Binding Editor.SetCreateModeCommand}" CommandParameter="{x:Static local:MapDotSettings.Default}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:ItemsEditorPanelAction.AddDot},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SetCreateEllipseModeButtonStyle}" Command="{Binding Editor.SetCreateModeCommand}" CommandParameter="{x:Static local:MapEllipseSettings.Default}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:ItemsEditorPanelAction.AddEllipse},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SetCreateRectangleModeButtonStyle}" Command="{Binding Editor.SetCreateModeCommand}" CommandParameter="{x:Static local:MapRectangleSettings.Default}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:ItemsEditorPanelAction.AddRectangle},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SetCreateLineModeButtonStyle}" Command="{Binding Editor.SetCreateModeCommand}" CommandParameter="{x:Static local:MapLineSettings.Default}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:ItemsEditorPanelAction.AddLine},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
              <local:MapEditorPanelButton Style="{StaticResource SetCreateCustomElementModeButtonStyle}" Command="{Binding Editor.SetCreateModeCommand}" CommandParameter="{x:Static local:MapCustomElementSettings.Default}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:ItemsEditorPanelAction.AddCustomElement},                                     Converter={StaticResource ActiveActionToIsActiveConverter}}" />
            </StackPanel>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Map.MeasurementToolbarControl}" TargetType="local:MeasurementToolbarControl">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Background="{DynamicResource {dxt:MapBrushesThemeKey ResourceKey=OverlayBackground}}">
            <StackPanel Orientation="Horizontal" x:Name="buttonsPanel">
              <local:MeasurementToolbarButton Visibility="{Binding Options.ShowDistanceButton, Converter={local:BoolToVisibilityConverter}}" Style="{StaticResource SetCreateDistanceRulerButtonStyle}" Command="{Binding Measurements.SetCreateModeCommand}" CommandParameter="{x:Static local:RulerType.Distance}" UndoCommand="{Binding Measurements.SetEditModeCommand}" IsActive="{Binding ActiveAction,                                     ConverterParameter={x:Static local:MeasurementToolbarAction.AddDistanceRuler},                                     Converter={StaticResource MeasurementToolbarActionToIsActiveConverter}}" />
              <local:MeasurementToolbarButton Visibility="{Binding Options.ShowAreaButton, Converter={local:BoolToVisibilityConverter}}" Style="{StaticResource SetCreateAreaRulerButtonStyle}" Command="{Binding Measurements.SetCreateModeCommand}" CommandParameter="{x:Static local:RulerType.Area}" UndoCommand="{Binding Measurements.SetEditModeCommand}" IsActive="{Binding ActiveAction,                                      ConverterParameter={x:Static local:MeasurementToolbarAction.AddAreaRuler},                                     Converter={StaticResource MeasurementToolbarActionToIsActiveConverter}}" />
            </StackPanel>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>