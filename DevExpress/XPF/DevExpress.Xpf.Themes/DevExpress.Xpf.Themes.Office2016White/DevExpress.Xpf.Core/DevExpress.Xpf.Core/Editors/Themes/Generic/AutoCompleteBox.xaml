<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:popups="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:themes="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:helpers="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <Thickness x:Key="{dxet:TokenEditorThemeKey ResourceKey=TokenEditorMargin}">1,0,0,0</Thickness>
  <ControlTemplate x:Key="{dxet:TokenEditorThemeKey ResourceKey=Template}" TargetType="{x:Type dxei:TokenEditor}">
    <Grid Background="{TemplateBinding Background}">
      <ScrollViewer IsTabStop="False" x:Name="PART_ScrollViewer" CanContentScroll="True" Focusable="False">
        <helpers:TokenEditorPanel Background="Transparent" x:Name="PART_Presenter" EnableTokenWrapping="{TemplateBinding EnableTokenWrapping}" />
      </ScrollViewer>
    </Grid>
  </ControlTemplate>
  <DataTemplate x:Key="{dxet:TokenEditorThemeKey ResourceKey=DeleteButtonTemplate}">
    <Button Visibility="{Binding Visibility}" Command="{Binding Command}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}" Style="{DynamicResource {dxet:TokenEditorThemeKey ResourceKey=DeleteButtonStyle}}" Focusable="False" />
  </DataTemplate>
  <Style x:Key="{dxet:TokenEditorThemeKey ResourceKey=ActiveEditorStyle}" TargetType="{x:Type dxe:ButtonEdit}">
    <Setter Property="AllowDefaultButton" Value="False" />
    <Setter Property="ValidateOnEnterKeyPressed" Value="True" />
    <Setter Property="ValidateOnTextInput" Value="True" />
    <Setter Property="EditValuePostMode" Value="Immediate" />
    <Setter Property="TextTrimming" Value="None" />
  </Style>
  <ControlTemplate x:Key="{dxet:TokenEditorThemeKey ResourceKey=EmptyTokenContainerTemplate}" TargetType="{x:Type ContentControl}">
    <Grid>
      <TextBlock VerticalAlignment="Center" Text="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).NewTokenText, RelativeSource={RelativeSource Self}}" Opacity="0.62" x:Name="text" Margin="4,1" />
      <TextBlock VerticalAlignment="Center" Text="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).NullText, RelativeSource={RelativeSource Self}}" x:Name="nulltext" Margin="4,1" Opacity="0" Foreground="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).NullTextForeground, RelativeSource={RelativeSource Self}}" />
      <ContentPresenter />
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsEditorActivated, RelativeSource={RelativeSource Self}}" Value="True">
        <Setter Property="Opacity" TargetName="text" Value="0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).HasNullText, RelativeSource={RelativeSource Self}}" Value="True">
        <Setter Property="Opacity" TargetName="text" Value="0" />
        <Setter Property="Opacity" TargetName="nulltext" Value="1" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsTokenEditorReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
        <Setter Property="Opacity" TargetName="text" Value="0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(dxei:TokenEditorPresenter.OwnerPresenter).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="False">
        <Setter Property="Opacity" TargetName="text" Value="0" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="{dxet:AutoSuggestListBoxThemeKey ResourceKey=Template}" TargetType="{x:Type popups:AutoSuggestListBox}">
    <Border x:Name="Bd" Background="{TemplateBinding Background}">
      <Grid>
        <ScrollViewer x:Name="ScrollViewer" Padding="{TemplateBinding Padding}" dx:FocusHelper2.Focusable="False" BorderThickness="0">
          <ItemsPresenter />
          <dx:ScrollBarExtensions.AllowMouseScrolling>
            <sys:Boolean>true</sys:Boolean>
          </dx:ScrollBarExtensions.AllowMouseScrolling>
        </ScrollViewer>
      </Grid>
    </Border>
  </ControlTemplate>
  <popups:AutoSuggestListBoxDisplayMemberPathConverter x:Key="DisplayMemberPathConverter" />
  <Style x:Key="{dxet:AutoSuggestListBoxThemeKey ResourceKey=Style}" TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="BorderBrush" Value="{x:Null}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template" Value="{DynamicResource {dxet:AutoSuggestListBoxThemeKey ResourceKey=Template}}" />
    <Setter Property="Background" Value="{DynamicResource {themes:BrushesThemeKey ResourceKey=EditorPopupListBoxBackground}}" />
    <Setter Property="TextSearch.TextPath" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(TextSearch.TextPath), RelativeSource={RelativeSource Self}}" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(ScrollViewer.CanContentScroll), RelativeSource={RelativeSource Self}}" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Contained" />
    <Setter Property="DisplayMemberPath" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayMember, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="ItemsSource" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemsSource, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="ItemTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="ItemTemplateSelector" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="ItemContainerStyle" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="ItemContainerStyleSelector" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemContainerStyleSelector, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="ItemStringFormat" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemStringFormat, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="ItemsPanel" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemsPanel, RelativeSource={RelativeSource TemplatedParent}}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="InplaceActive">
        <Setter Property="Foreground" Value="{DynamicResource {themes:ThemeColorsThemeKey ResourceKey=BlackForegroundColor}}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone">
        <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource Self}}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowPopupTextHighlighting, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplate, Converter={dxe:AutoSuggestEditPropertyIsNullConverter}, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemTemplateSelector, Converter={dxe:AutoSuggestEditPropertyIsNullConverter}, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemContainerStyle, Converter={dxe:AutoSuggestEditPropertyIsNullConverter}, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ItemContainerStyleSelector, Converter={dxe:AutoSuggestEditPropertyIsNullConverter}, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="helpers:TextBlockService.EnableTextHighlighting" Value="True" />
        <Setter Property="helpers:TextBlockService.HighlightedTextCriteria" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).PopupHighlightedTextCriteria, RelativeSource={RelativeSource Self}}" />
        <Setter Property="helpers:TextBlockService.HighlightedText" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).PopupHighlightedText, RelativeSource={RelativeSource Self}}" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="{dxet:AutoSuggestEditThemeKey ResourceKey=PopupContentTemplate}" TargetType="{x:Type ContentControl}">
    <popups:AutoSuggestListBox x:Name="PART_Content" Style="{DynamicResource {dxet:AutoSuggestListBoxThemeKey ResourceKey=Style}}" />
  </ControlTemplate>
</ResourceDictionary>