<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxeh="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <ResourceDictionary.MergedDictionaries>
    <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2016White.v24.1;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Editors/Themes/Generic/Common.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <dxei:HorizontalContentAlignmentToTextAlignmentConverter x:Key="HorizontalContentAlignmentToTextAlignmentConverter" />
  <sys:Double x:Key="{dxet:TextEditThemeKey ResourceKey=SelectionOpacity}">0.62</sys:Double>
  <SolidColorBrush x:Key="{dxet:TextEditThemeKey ResourceKey=SelectionBrush}">Transparent</SolidColorBrush>
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <Style x:Key="BaseTextBlockStyleBase" TargetType="{x:Type TextBlock}">
    <Setter Property="TextAlignment" Value="{Binding HorizontalContentAlignment, Converter={StaticResource HorizontalContentAlignmentToTextAlignmentConverter}}" />
    <Setter Property="VerticalAlignment" Value="{Binding VerticalContentAlignment}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Padding" Value="{Binding Padding}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Background" Value="{Binding Background}" />
    <Setter Property="Focusable" Value="{Binding Focusable}" />
    <Setter Property="TextTrimming" Value="{Binding TextTrimming}" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="{Binding IsTabStop}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=IsNullTextVisible}" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=NullTextForeground}" />
      </DataTrigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="0.35" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="BaseTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseTextBlockStyleBase}">
    <Setter Property="TextWrapping" Value="{Binding TextWrapping}" />
    <Setter Property="TextDecorations" Value="{Binding TextDecorations}" />
  </Style>
  <Style x:Key="BaseTextBlockInplaceStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="UseLayoutRounding" Value="False" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="0.35" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="BaseWatermarkTextBlockStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="Margin" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=WatermarkTextBlockMargin}}" />
    <Setter Property="VerticalAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="HorizontalAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="IsHitTestVisible" Value="false" />
    <Setter Property="Visibility" Value="Collapsed" />
    <Setter Property="Text" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).NullText, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).NullTextForeground, RelativeSource={RelativeSource TemplatedParent}}" />
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsNullTextVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
          <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
          <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowNullTextIfFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Visibility" Value="Visible" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxet:TextEditThemeKey ResourceKey=WatermarkTextBlockStyle}" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseWatermarkTextBlockStyle}" />
  <ControlTemplate x:Key="{dxet:TextEditThemeKey ResourceKey=TextBoxTemplate}" TargetType="{x:Type TextBox}">
    <Grid Background="{TemplateBinding Background}">
      <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="True" dx:FocusHelper2.Focusable="False" Padding="{TemplateBinding Padding}" Template="{DynamicResource {dxet:EditorListBoxThemeKey ResourceKey=ScrollViewerTemplate}}" />
      <TextBlock x:Name="PART_Watermark" Style="{DynamicResource {dxet:TextEditThemeKey ResourceKey=WatermarkTextBlockStyle}}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" TargetName="PART_ContentHost" Value="0.35" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="BaseTextStyle" TargetType="{x:Type TextBox}">
    <Setter Property="MaxLength" Value="{Binding MaxLength}" />
    <Setter Property="IsTabStop" Value="{Binding IsTabStop}" />
    <Setter Property="Focusable" Value="{Binding Focusable}" />
    <Setter Property="TextWrapping" Value="{Binding TextWrapping}" />
    <Setter Property="Background" Value="{Binding Background}" />
    <Setter Property="CaretBrush" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=CaretBrush}}" />
    <Setter Property="Padding" Value="{Binding Padding}" />
    <Setter Property="IsReadOnly" Value="{Binding IsReadOnly}" />
    <Setter Property="AcceptsReturn" Value="{Binding AcceptsReturn}" />
    <Setter Property="VerticalScrollBarVisibility" Value="{Binding VerticalScrollBarVisibility}" />
    <Setter Property="HorizontalScrollBarVisibility" Value="{Binding HorizontalScrollBarVisibility}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Template" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=TextBoxTemplate}}" />
    <Setter Property="AcceptsTab" Value="{Binding AcceptsTab}" />
    <Setter Property="CharacterCasing" Value="{Binding CharacterCasing}" />
    <Setter Property="ContextMenu" Value="{Binding ContextMenu}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding Foreground}" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment}" />
    <Setter Property="TextDecorations" Value="{Binding TextDecorations}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment}" />
    <Setter Property="dxb:BarManager.DXContextMenu" Value="{Binding Path=(dxb:BarManager.DXContextMenu)}" />
    <Setter Property="AutomationProperties.LabeledBy" Value="{Binding Path=(AutomationProperties.LabeledBy)}" />
    <Setter Property="AutomationProperties.HelpText">
      <Setter.Value>
        <MultiBinding Converter="{dxei:BaseEditAutomationHelpTextConverter}">
          <Binding Path="(AutomationProperties.HelpText)" />
          <Binding Path="ToolTip.Content" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=IsNullTextVisible}" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=NullTextForeground}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="BaseTextInplaceStyle" TargetType="{x:Type TextBox}">
    <Setter Property="MaxLength" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).MaxLength}" />
    <Setter Property="Background" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Background}" />
    <Setter Property="CaretBrush" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=CaretBrush}}" />
    <Setter Property="Padding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding}" />
    <Setter Property="IsTabStop" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsTabStop}" />
    <Setter Property="Focusable" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Focusable}" />
    <Setter Property="IsReadOnly" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsReadOnly}" />
    <Setter Property="AcceptsReturn" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).AcceptsReturn}" />
    <Setter Property="TextWrapping" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TextWrapping}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment}" />
    <Setter Property="VerticalScrollBarVisibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalScrollBarVisibility}" />
    <Setter Property="HorizontalScrollBarVisibility" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalScrollBarVisibility}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Template" Value="{DynamicResource {dxet:TextEditThemeKey ResourceKey=TextBoxTemplate}}" />
    <Setter Property="AcceptsTab" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).AcceptsTab}" />
    <Setter Property="CharacterCasing" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).CharacterCasing}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="ContextMenu" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).ContextMenu}" />
    <Setter Property="dxb:BarManager.DXContextMenu" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxb:BarManager.DXContextMenu)}" />
    <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground}" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment}" />
    <Setter Property="TextDecorations" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).TextDecorations}" />
    <Setter Property="AutomationProperties.LabeledBy" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(AutomationProperties.LabeledBy)}" />
    <Setter Property="AutomationProperties.HelpText" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(AutomationProperties.HelpText)}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsNullTextVisible}" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).NullTextForeground}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxet:TextEditThemeKey ResourceKey=TextStyle}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseTextStyle}">
    <Setter Property="dxeh:EditorMarginHelper.Margin" Value="3,2,3,2,0,2,3,2" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="dxeh:EditorMarginHelper.Margin" Value="14,13,14,13,0,13,14,13" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxet:TextEditThemeKey ResourceKey=TextInplaceStyle}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseTextInplaceStyle}">
    <Setter Property="dxeh:EditorMarginHelper.Margin" Value="2,2,2,2,0,2,2,2" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="dxeh:EditorMarginHelper.Margin" Value="13,13,13,13,0,13,13,13" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource BaseTextBlockInplaceStyle}" x:Key="{dxet:TextEditThemeKey ResourceKey=TextBlockInplaceStyle}" TargetType="{x:Type TextBlock}">
    <Setter Property="dxeh:EditorMarginHelper.Margin" Value="4,2,4,2,2,2,4,2" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="dxeh:EditorMarginHelper.Margin" Value="14,13,14,13,13,13,14,13" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource BaseTextBlockStyle}" x:Key="{dxet:TextEditThemeKey ResourceKey=TextBlockStyle}" TargetType="{x:Type TextBlock}">
    <Setter Property="Margin" Value="5,2,5,2" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,13,14,13" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="{dxet:TextEditThemeKey ResourceKey=DisplayInplaceTemplate}">
    <TextBlock x:Name="PART_Editor" Style="{DynamicResource {dxet:TextEditThemeKey ResourceKey=TextBlockInplaceStyle}}" dx:FocusHelper2.Focusable="False" />
  </ControlTemplate>
  <ControlTemplate x:Key="{dxet:TextEditThemeKey ResourceKey=EditNonEditableTemplate}">
    <TextBlock x:Name="PART_Editor" Style="{DynamicResource {dxet:TextEditThemeKey ResourceKey=TextBlockStyle}}">
      <TextBlock.FocusVisualStyle>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate />
            </Setter.Value>
          </Setter>
        </Style>
      </TextBlock.FocusVisualStyle>
    </TextBlock>
  </ControlTemplate>
  <ControlTemplate x:Key="{dxet:TextEditThemeKey ResourceKey=EditNonEditableInplaceTemplate}">
    <TextBlock x:Name="PART_Editor" Style="{DynamicResource {dxet:TextEditThemeKey ResourceKey=TextBlockInplaceStyle}}" />
  </ControlTemplate>
  <ControlTemplate x:Key="{dxet:TextEditThemeKey ResourceKey=EditInplaceTemplate}">
    <TextBox x:Name="PART_Editor" Style="{DynamicResource {dxet:TextEditThemeKey ResourceKey=TextInplaceStyle}}" />
  </ControlTemplate>
  <ControlTemplate x:Key="{dxet:TextEditThemeKey ResourceKey=EditTemplate}">
    <TextBox x:Name="PART_Editor" Style="{DynamicResource {dxet:TextEditThemeKey ResourceKey=TextStyle}}" />
  </ControlTemplate>
  <!-- -->
</ResourceDictionary>