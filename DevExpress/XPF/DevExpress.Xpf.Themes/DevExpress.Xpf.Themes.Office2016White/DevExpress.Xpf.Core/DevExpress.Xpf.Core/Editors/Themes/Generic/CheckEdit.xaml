<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:core="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
  <Thickness x:Key="{dxet:CheckEditThemeKey ResourceKey=ImagePadding}">0</Thickness>
  <DataTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=GlyphTemplate}">
    <core:DXImage x:Name="image" Width="16" Height="16" Source="{Binding}" />
    <DataTemplate.Triggers>
      <Trigger Property="core:ThemeManager.IsTouchEnabled" Value="True">
        <Setter TargetName="image" Property="MinWidth" Value="40" />
        <Setter TargetName="image" Property="MinHeight" Value="40" />
      </Trigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=ImageCheckEditBoxTemplate}" TargetType="{x:Type dxe:CheckEditBox}">
    <Grid Margin="{TemplateBinding Padding}" Background="#00FFFFFF">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Content="{TemplateBinding Glyph}" ContentTemplate="{TemplateBinding GlyphTemplate}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
      <ContentPresenter Name="contentPresenter" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="4,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Visibility="{Binding HasContent, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" RecognizesAccessKey="True" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.35" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="BaseCheckEditBoxStyle" TargetType="{x:Type dxe:CheckEditBox}">
    <Setter Property="IsTabStop" Value="{Binding DataContext.IsTabStop, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Focusable" Value="{Binding DataContext.Focusable, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Cursor" Value="{Binding DataContext.Cursor, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Padding" Value="{Binding DataContext.Padding, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Content" Value="{Binding DataContext.Content, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="ContentTemplate" Value="{Binding DataContext.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="IsThreeState" Value="{Binding DataContext.IsThreeState, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding DataContext.VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding DataContext.HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="ContentTemplateSelector" Value="{Binding DataContext.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Foreground" Value="{Binding DataContext.Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="DisplayMode" Value="{Binding Path=DataContext.DisplayMode, RelativeSource={RelativeSource TemplatedParent}}" />
    <Style.Triggers>
      <Trigger Property="DisplayMode" Value="Image">
        <Setter Property="Template" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=ImageCheckEditBoxTemplate}}" />
        <Setter Property="GlyphTemplate" Value="{Binding Path=DataContext.GlyphTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="BaseCheckEditBoxInplaceStyle" TargetType="{x:Type dxe:CheckEditBox}">
    <Setter Property="Padding" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Padding}" />
    <Setter Property="IsTabStop" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsTabStop}" />
    <Setter Property="Focusable" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Focusable}" />
    <Setter Property="Content" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.Content)}" />
    <Setter Property="ContentTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.ContentTemplate)}" />
    <Setter Property="IsThreeState" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.IsThreeState)}" />
    <Setter Property="Cursor" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Cursor}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment}" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment}" />
    <Setter Property="ContentTemplateSelector" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:CheckEdit.ContentTemplateSelector)}" />
    <Setter Property="Foreground" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground}" />
    <Setter Property="DisplayMode" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).DisplayMode, RelativeSource={RelativeSource TemplatedParent}}" />
    <Style.Triggers>
      <Trigger Property="DisplayMode" Value="Image">
        <Setter Property="Template" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=ImageCheckEditBoxTemplate}}" />
        <Setter Property="GlyphTemplate" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).GlyphTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <dxcn:RenderTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=RenderTemplate}">
    <dxe:EditorRenderCheckBox Name="checkBox" />
    <dxcn:RenderTemplate.Triggers>
      <dxcn:RenderBinding DependencyProperty="{x:Static FrameworkElement.IsEnabledProperty}" TargetName="checkBox" />
      <dxcn:RenderBinding DependencyProperty="{x:Static FrameworkElement.IsMouseOverProperty}" TargetName="checkBox" />
      <dxcn:RenderBinding DependencyProperty="{x:Static FrameworkElement.IsFocusedProperty}" TargetName="checkBox" />
      <dxcn:RenderBinding DependencyProperty="{x:Static ContentControl.ContentProperty}" TargetName="checkBox" />
      <dxcn:RenderBinding DependencyProperty="{x:Static ContentControl.ContentTemplateProperty}" TargetName="checkBox" />
      <dxcn:RenderBinding DependencyProperty="{x:Static ContentControl.ContentTemplateSelectorProperty}" TargetName="checkBox" />
      <dxcn:RenderBinding DependencyProperty="{x:Static ContentControl.VerticalContentAlignmentProperty}" TargetName="checkBox" />
      <dxcn:RenderBinding DependencyProperty="{x:Static ContentControl.HorizontalContentAlignmentProperty}" TargetName="checkBox" />
      <dxcn:RenderBinding DependencyProperty="{x:Static ContentControl.PaddingProperty}" TargetName="checkBox" />
      <dxcn:RenderBinding DependencyProperty="{x:Static ToggleButton.IsPressedProperty}" TargetName="checkBox" />
      <dxcn:RenderBinding DependencyProperty="{x:Static ToggleButton.IsCheckedProperty}" TargetName="checkBox" />
    </dxcn:RenderTemplate.Triggers>
  </dxcn:RenderTemplate>
  <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=CheckEditBoxTemplate}" TargetType="{x:Type dxe:CheckEditBox}">
    <dxcn:Chrome RenderTemplate="{StaticResource {dxet:CheckEditThemeKey ResourceKey=RenderTemplate}}" />
  </ControlTemplate>
</ResourceDictionary>