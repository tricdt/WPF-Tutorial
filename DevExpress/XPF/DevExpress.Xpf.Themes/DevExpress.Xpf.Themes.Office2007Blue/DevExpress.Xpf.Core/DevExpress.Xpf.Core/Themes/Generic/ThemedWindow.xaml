<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:core="clr-namespace:DevExpress.Xpf.Core;assembly=DevExpress.Data.Desktop.v24.1" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxev="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <ResourceDictionary.MergedDictionaries>
    <dxdst:ResourceDictionaryEx Source="{dx:DynamicThemeResource PseudoWindow.xaml, ResourcePath=Themes, ResourcePathInTheme='DevExpress.Xpf.Core/DevExpress.Xpf.Core/Themes', TypeInTargetAssembly={x:Type dxcn:RenderTemplate}}" />
  </ResourceDictionary.MergedDictionaries>
  <!-- Acrylic generic resources -->
  <Color x:Key="nearbyTransparentColor" A="1" B="0" G="0" R="0" />
  <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveBackground}" Color="{StaticResource nearbyTransparentColor}" />
  <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveBackground}" Color="{StaticResource nearbyTransparentColor}" />
  <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveContentBackground}" Color="{StaticResource nearbyTransparentColor}" />
  <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}" Color="{StaticResource nearbyTransparentColor}" />
  <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveContentBorderBrush}" Color="{StaticResource nearbyTransparentColor}" />
  <SolidColorBrush x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}" Color="{StaticResource nearbyTransparentColor}" />
  <SolidColorBrush x:Key="transparentHeaderBackground" Color="{StaticResource nearbyTransparentColor}" />
  <Thickness x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowContentBorderThickness}">0</Thickness>
  <Thickness x:Key="{dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowNormalPadding}">0</Thickness>
  <CornerRadius x:Key="win11CornerRadius">7</CornerRadius>
  <CornerRadius x:Key="win11HeaderCornerRadius">7,7,0,0</CornerRadius>
  <CornerRadius x:Key="win11ContentCornerRadius">7</CornerRadius>
  <CornerRadius x:Key="win11ContentCornerRadiusPartial">0,0,7,7</CornerRadius>
  <CornerRadius x:Key="win11ToolWindowCornerRadius">4</CornerRadius>
  <CornerRadius x:Key="win11ToolWindowHeaderCornerRadius">4,4,0,0</CornerRadius>
  <CornerRadius x:Key="win11ToolWindowContentCornerRadius">4</CornerRadius>
  <!-- THEMEDWINDOW LOCAL STYLES -->
  <!-- SizeGripStyle -->
  <Style x:Key="sizeGripStyle" TargetType="{x:Type dx:ThemedWindowSizeGrip}">
    <Setter Property="Cursor" Value="SizeNWSE" />
    <Setter Property="Width" Value="16" />
    <Setter Property="Height" Value="16" />
    <Setter Property="Template" Value="{DynamicResource {dxt:FloatingContainerThemeKey IsVisibleInBlend=True, ResourceKey=FloatingContainerSizeGripTemplate}}" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="Visibility" Value="Collapsed" />
    <Setter Property="Margin" Value="{Binding Path= Padding, RelativeSource={RelativeSource TemplatedParent}}" />
    <Style.Triggers>
      <DataTrigger Value="CanResizeWithGrip" Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ResizeMode}">
        <Setter Property="Visibility" Value="Visible" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <!-- ContentBackgroundBorderStyle -->
  <Style x:Key="contentBackgroundBorderStyle" TargetType="{x:Type dx:ThemedWindowContentBorder}">
    <Setter Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveContentBorderBrush}}" />
    <Setter Property="BorderThickness" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowContentBorderThickness}}" />
    <Setter Property="Margin" Value="{Binding Path=Padding, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="IsHitTestVisible" Value="{Binding Path=(dxcn:ThemedWindowsHelper.ActualHitTestVisible), RelativeSource={RelativeSource TemplatedParent}}" />
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="False" Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Value="False" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}">
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="Normal" Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="CornerRadius" Value="{StaticResource win11ContentCornerRadius}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="Normal" Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="True" Binding="{Binding Path=(dxcn:ThemedWindowOptions.RoundOnlyBottomContentCorners), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="CornerRadius" Value="{StaticResource win11ContentCornerRadiusPartial}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="Normal" Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="ToolWindow" Binding="{Binding Path=(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowContentCornerRadius}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <!-- AcrylicTriggers -->
      <DataTrigger Value="True" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}">
        <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveContentBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveContentBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowContentBorderThickness}}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveContentBorderBrush}}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="WidthAndHeight" Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SizeToContent}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsMessageBox), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="HorizontalAlignment" Value="Center" />
      </MultiDataTrigger>
      <DataTrigger Value="WidthAndHeight" Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SizeToContent}">
        <Setter Property="MinWidth">
          <Setter.Value>
            <MultiBinding Converter="{dx:ContentBorderMinWidthConverter}">
              <Binding Path="MinWidth" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </DataTrigger>
      <DataTrigger Value="Ribbon" Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWindowKind}">
        <Setter Property="BorderThickness" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonContentBorderThickness}}" />
      </DataTrigger>
      <DataTrigger Value="Tabbed" Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWindowKind}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <!-- WindowClipBorderStyle -->
  <Style x:Key="windowClipBorderStyle" TargetType="{x:Type dx:ThemedWindowContentBorder}">
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="Normal" Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="CornerRadius" Value="{StaticResource win11CornerRadius}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="Normal" Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="ToolWindow" Binding="{Binding Path=(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowCornerRadius}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <!-- WindowBorderStyle -->
  <Style x:Key="windowBorderStyle" TargetType="{x:Type dx:ThemedWindowBorder}">
    <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveBackground}}" />
    <Setter Property="BorderBrush" Value="{Binding Path=BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="BorderThickness" Value="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" />
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="False" Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveBackground}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Value="False" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}">
        <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveBackground}}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <!-- <Condition Value="False" Binding="{Binding Path=(core:WindowsVersionProvider.IsWindows11)}" /> -->
          <Condition Value="True" Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="Normal" Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="CornerRadius" Value="{StaticResource win11CornerRadius}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="Normal" Binding="{Binding Path=(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="ToolWindow" Binding="{Binding Path=(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowCornerRadius}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <!-- AcrylicTriggers -->
      <DataTrigger Value="True" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}">
        <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowActiveBackground}}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveBackground}}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource TemplatedParent}}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=WindowInactiveBackground}}" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <!-- StatusPanelStyle -->
  <Style x:Key="statusPanelStyle" TargetType="{x:Type dx:ThemedWindowBorder}">
    <Setter Property="Visibility" Value="Collapsed" />
    <Setter Property="DockPanel.Dock" Value="Bottom" />
    <Setter Property="Height" Value="16" />
    <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveBackground}}" />
  </Style>
  <!--WindowTitleTextBlockStyle-->
  <Style x:Key="windowTitleTextBlockStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Tag" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowIconMargin}}" />
    <Setter Property="FontSize" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowTitleFontSize}}" />
    <Setter Property="FontWeight" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowTitleFontWeight}}" />
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <!-- LOCAL DIALOG STYLES -->
  <!-- DialogFooterBorderStyle -->
  <Style x:Key="dialogFooterBorderStyle" TargetType="{x:Type dx:ThemedWindowBorder}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Visibility" Value="Collapsed" />
    <Style.Triggers>
      <DataTrigger Value="True" Binding="{Binding Path=ShowDialogFooter, RelativeSource={RelativeSource TemplatedParent}}">
        <Setter Property="Visibility" Value="Visible" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <!-- LOCAL MESSAGEBOX STYLES -->
  <!--MessageBoxImageStyle-->
  <Style x:Key="messageBoxImageStyle" TargetType="{x:Type dx:DXImage}">
    <Setter Property="Width" Value="48" />
    <Setter Property="Height" Value="48" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="DockPanel.Dock" Value="Left" />
    <Setter Property="Source" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Image), RelativeSource={RelativeSource Self}}" />
  </Style>
  <!--MessageBoxContentPresenterStyle-->
  <Style x:Key="messageBoxContentPresenterStyle" TargetType="{x:Type ContentPresenter}">
    <Setter Property="Margin" Value="12,0,0,0" />
  </Style>
  <!--MessageBoxTextStyle-->
  <Style x:Key="messageBoxTextStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="Text" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Text), RelativeSource={RelativeSource Self}}" />
    <Setter Property="TextAlignment" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.TextAlignment), RelativeSource={RelativeSource Self}}" />
    <Setter Property="TextTrimming" Value="WordEllipsis" />
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="Margin" Value="12,0,0,0" />
    <Setter Property="Padding" Value="2,2,4,2" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <!--messageBoxTextSelectionSupportStyle-->
  <Style x:Key="messageBoxTextSelectionSupportStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Text" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Text), RelativeSource={RelativeSource Self}}" />
    <Setter Property="TextAlignment" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.TextAlignment), RelativeSource={RelativeSource Self}}" />
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="Margin" Value="12,0,0,0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="IsReadOnly" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Visibility" Value="Collapsed" />
    <Setter Property="Padding" Value="0,2,0,2" />
    <Setter Property="Foreground" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Foreground), RelativeSource={RelativeSource Self}}" />
  </Style>
  <!-- HeaderItemsControlPanelTemplate -->
  <ItemsPanelTemplate x:Key="headerItemsControlPanelTemplate">
    <StackPanel x:Name="PART_ToolbarPanel" VerticalAlignment="Stretch" Orientation="Horizontal" />
  </ItemsPanelTemplate>
  <!-- HeaderItemsControlStyle -->
  <Style x:Key="headerItemsControlStyle" TargetType="{x:Type dx:ThemedWindowHeaderItemsControlBase}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="dxcn:WindowChrome.IsHitTestVisibleInChrome" Value="True" />
    <Setter Property="Margin" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowToolbarMargin}}" />
    <Setter Property="ItemsPanel" Value="{StaticResource headerItemsControlPanelTemplate}" />
  </Style>
  <!-- THEMEDWINDOW TEMPLATES -->
  <!-- BackButtonTemplate -->
  <ControlTemplate x:Key="{dxt:ThemedWindowThemeKey ResourceKey=BackButtonTemplate}" TargetType="{x:Type dx:ThemedWindowBackButton}">
    <Grid>
      <Control x:Name="PART_Background" Focusable="False" Template="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundNormalState}}" />
      <Border x:Name="MarginBorder" Margin="4,0" Background="Transparent">
        <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" ContentTemplate="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundGlyph}}" Focusable="False" RecognizesAccessKey="True" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_Background" Property="Template" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundMouseoverState}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonForegroundMouseoverState}}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="PART_Background" Property="Template" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonBackgroundPressedState}}" />
        <Setter Property="Foreground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonForegroundPressedState}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonForegroundNormalState}}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <!-- ThemedWindowTitleTemplate -->
  <ControlTemplate x:Key="themedWindowTitleTemplate" TargetType="{x:Type dx:ThemedWindowTitle}">
    <TextBlock x:Name="PART_TitleText" Text="{TemplateBinding Content}" Style="{StaticResource windowTitleTextBlockStyle}" />
  </ControlTemplate>
  <!-- ThemedWindowIconTemplate -->
  <ControlTemplate x:Key="themedWindowIconTemplate" TargetType="{x:Type dx:ThemedWindowIcon}">
    <dx:DXImage x:Name="PART_Image">
      <dx:DXImage.Source>
        <MultiBinding Converter="{dx:WindowIconConverter}">
          <Binding Path="Icon" RelativeSource="{RelativeSource AncestorType={x:Type dx:ThemedWindow}}" />
          <Binding Path="TemplatedParent" RelativeSource="{RelativeSource Mode=Self}" />
        </MultiBinding>
      </dx:DXImage.Source>
    </dx:DXImage>
  </ControlTemplate>
  <!-- ThemedWindowControlBoxTemplate -->
  <ControlTemplate x:Key="themedWindowControlBoxTemplate" TargetType="{x:Type dx:ThemedWindowControlBoxBorder}">
    <Border x:Name="PART_ControlBoxRootBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" dxcn:WindowChrome.IsHitTestVisibleInChrome="True">
      <Grid x:Name="PART_ControlBoxGrid">
        <Grid.ColumnDefinitions>
          <ColumnDefinition />
          <ColumnDefinition />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <!-- HeaderItems -->
        <dx:ThemedWindowHeaderItemsControl x:Name="PART_HeaderItems" Style="{StaticResource headerItemsControlStyle}" Grid.Column="0" />
        <ContentControl x:Name="PART_SearchItem" Grid.Column="1" Visibility="Collapsed" />
        <!-- Buttons -->
        <DockPanel x:Name="PART_Buttons" Grid.Column="2" dxev:MouseEventLockHelper.IsEnabled="false">
          <!-- Minimize -->
          <dx:HeaderItemControl x:Name="PART_Minimize" Command="{x:Static dxcn:WindowSystemCommands.MinimizeWindowCommand}" ToolTip="{dxe:EditorStringId ThemedWindow_Minimize}" ToolTipService.InitialShowDelay="1000" AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}" TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}" Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self}}">
            <dx:HeaderItemControl.Visibility>
              <Binding Path="(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" Converter="{dx:WindowControlBoxButtonsToVisibilityConverter}" RelativeSource="{RelativeSource Self}">
                <Binding.ConverterParameter>
                  <dx:ControlBoxButtons>Minimize</dx:ControlBoxButtons>
                </Binding.ConverterParameter>
              </Binding>
            </dx:HeaderItemControl.Visibility>
          </dx:HeaderItemControl>
          <dx:HeaderItemControl x:Name="PART_MinimizeRestore" Command="{x:Static dxcn:WindowSystemCommands.RestoreWindowCommand}" ToolTip="{dxe:EditorStringId ThemedWindow_Restore}" ToolTipService.InitialShowDelay="1000" AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}" TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}" Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self}}">
            <dx:HeaderItemControl.Visibility>
              <MultiBinding Converter="{dx:WindowControlBoxButtonsToVisibilityMultiValuesConverter}">
                <Binding Path="(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}" />
                <Binding Path="Visibility" ElementName="PART_Minimize" />
                <MultiBinding.ConverterParameter>
                  <dx:ControlBoxButtons>Restore</dx:ControlBoxButtons>
                </MultiBinding.ConverterParameter>
              </MultiBinding>
            </dx:HeaderItemControl.Visibility>
          </dx:HeaderItemControl>
          <!-- Restore -->
          <dx:HeaderItemControl x:Name="PART_Restore" dx:WindowChromeHelper.IsSnapLayoutsElement="True" Command="{x:Static dxcn:WindowSystemCommands.RestoreWindowCommand}" ToolTip="{dxe:EditorStringId ThemedWindow_Restore}" ToolTipService.InitialShowDelay="1000" AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}" TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}" Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self} }">
            <dx:HeaderItemControl.Visibility>
              <MultiBinding Converter="{dx:WindowControlBoxButtonsToVisibilityMultiValuesConverter}">
                <Binding Path="(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" RelativeSource="{RelativeSource Self}" />
                <Binding Path="Visibility" ElementName="PART_Maximize" />
                <MultiBinding.ConverterParameter>
                  <dx:ControlBoxButtons>MaximizeRestore</dx:ControlBoxButtons>
                </MultiBinding.ConverterParameter>
              </MultiBinding>
            </dx:HeaderItemControl.Visibility>
          </dx:HeaderItemControl>
          <!-- Maximize -->
          <dx:HeaderItemControl x:Name="PART_Maximize" dx:WindowChromeHelper.IsSnapLayoutsElement="True" Command="{x:Static dxcn:WindowSystemCommands.MaximizeWindowCommand}" ToolTip="{dxe:EditorStringId ThemedWindow_Maximize}" ToolTipService.InitialShowDelay="1000" AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}" TemplateProvider="{Binding Path=(dx:HeaderItemControl.CommonTemplateProvider), RelativeSource={RelativeSource Self}}" Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self} }">
            <dx:HeaderItemControl.Visibility>
              <Binding Path="(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" Converter="{dx:WindowControlBoxButtonsToVisibilityConverter}" RelativeSource="{RelativeSource Self}">
                <Binding.ConverterParameter>
                  <dx:ControlBoxButtons>MaximizeRestore</dx:ControlBoxButtons>
                </Binding.ConverterParameter>
              </Binding>
            </dx:HeaderItemControl.Visibility>
          </dx:HeaderItemControl>
          <!-- Close -->
          <dx:HeaderItemControl x:Name="PART_CloseButton" Command="{x:Static dxcn:WindowSystemCommands.CloseWindowCommand}" ToolTip="{dxe:EditorStringId ThemedWindow_Close}" ToolTipService.InitialShowDelay="1000" AutomationProperties.Name="{Binding Path=ToolTip, RelativeSource={RelativeSource Self}}" TemplateProvider="{Binding Path=(dx:HeaderItemControl.CloseTemplateProvider), RelativeSource={RelativeSource Self}}" Style="{Binding Path=TemplateProvider.HeaderItemControlStyle, RelativeSource={RelativeSource Self} }">
            <dx:HeaderItemControl.Visibility>
              <Binding Path="(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ControlBoxButtonSet)" Converter="{dx:WindowControlBoxButtonsToVisibilityConverter}" RelativeSource="{RelativeSource Self}">
                <Binding.ConverterParameter>
                  <dx:ControlBoxButtons>Close</dx:ControlBoxButtons>
                </Binding.ConverterParameter>
              </Binding>
            </dx:HeaderItemControl.Visibility>
          </dx:HeaderItemControl>
        </DockPanel>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <DataTrigger Value="True" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:WindowButtonHelper.IsYesNoDialog), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_CloseButton" Property="IsEnabled" Value="False" />
      </DataTrigger>
      <DataTrigger Value="CanMinimize" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ResizeMode), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_Maximize" Property="IsEnabled" Value="False" />
        <Setter TargetName="PART_Restore" Property="IsEnabled" Value="False" />
      </DataTrigger>
      <DataTrigger Value="Maximized" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_Maximize" Property="Visibility" Value="Collapsed" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(dxcn:ThemedWindowsHelper.SearchItemDisplayMode), RelativeSource={RelativeSource Self}}" Value="Right">
        <Setter TargetName="PART_SearchItem" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_SearchItem" Property="ContentTemplate" Value="{Binding Path=(dxcn:ThemedWindowsHelper.SearchItemTemplate), RelativeSource={RelativeSource Self}}" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <!-- ThemedWindowHeaderTemplate -->
  <ControlTemplate x:Key="themedWindowHeaderTemplate" TargetType="{x:Type dx:ThemedWindowHeader}">
    <Border x:Name="PART_HeaderRoot" Background="{TemplateBinding Background}" Opacity="{TemplateBinding Opacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
      <DockPanel x:Name="PART_HeaderDock" LastChildFill="True">
        <dx:ThemedWindowIcon x:Name="PART_WindowIcon" DockPanel.Dock="Left" />
        <dx:ThemedWindowBackButton x:Name="PART_WindowBackButton" DockPanel.Dock="Left" UseLayoutRounding="True" Style="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=BackButtonStyle}}" />
        <dx:ThemedWindowControlBoxBorder x:Name="PART_HeaderItemsAndButtons" DockPanel.Dock="Right" UseLayoutRounding="True" />
        <dx:ThemedWindowToolbarItemsControl x:Name="PART_ToolbarItems" DockPanel.Dock="Left" Style="{StaticResource headerItemsControlStyle}" />
        <dx:ThemedWindowTitle x:Name="PART_WindowTitle" />
      </DockPanel>
    </Border>
    <ControlTemplate.Triggers>
      <DataTrigger Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowIcon), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_WindowIcon" Property="Visibility" Value="Collapsed" />
      </DataTrigger>
      <DataTrigger Value="True" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowBackButton), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_WindowBackButton" Property="Visibility" Value="Visible" />
      </DataTrigger>
      <DataTrigger Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowTitle), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_WindowTitle" Property="Visibility" Value="Collapsed" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="Ribbon" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}" />
          <Condition Value="True" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:ThemedWindowsHelper.IsRibbonControlAsContent), RelativeSource={RelativeSource Self}}" />
          <Condition Value="Visible" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:ThemedWindowsHelper.RibbonHeaderVisibility), RelativeSource={RelativeSource Self}}" />
          <Condition Value="Visible" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:ThemedWindowsHelper.RibbonControlVisibility), RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="PART_WindowTitle" Property="Visibility" Value="Collapsed" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="PART_WindowIcon" Property="Opacity" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
          <Setter TargetName="PART_WindowTitle" Property="Opacity" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
          <Setter TargetName="PART_HeaderItemsAndButtons" Property="Opacity" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_WindowIcon" Property="Opacity" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
        <Setter TargetName="PART_WindowTitle" Property="Opacity" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
        <Setter TargetName="PART_HeaderItemsAndButtons" Property="Opacity" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:ThemedWindowsHelper.UseInactiveAppearanceForWholeHeader), RelativeSource={RelativeSource Self}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="PART_ToolbarItems" Property="Opacity" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:ThemedWindowsHelper.UseInactiveAppearanceForWholeHeader), RelativeSource={RelativeSource Self}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="PART_ToolbarItems" Property="Opacity" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderOpacity}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <!-- ThemedWindowHeaderTabbedTemplate -->
  <ControlTemplate x:Key="themedWindowHeaderTabbedTemplate" TargetType="{x:Type dx:ThemedWindowHeader}">
    <Border x:Name="PART_HeaderRoot" Background="{TemplateBinding Background}" Opacity="{TemplateBinding Opacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
      <DockPanel x:Name="PART_HeaderDock" LastChildFill="True">
        <dx:ThemedWindowIcon x:Name="PART_WindowIcon" DockPanel.Dock="Left" />
        <dx:ThemedWindowControlBoxBorder x:Name="PART_HeaderItemsAndButtons" DockPanel.Dock="Right" />
        <dx:ThemedWindowTitle x:Name="PART_WindowTitle" />
        <dx:ThemedWindowHiddenBorder x:Name="PART_TabControlHeaderHiddenBorder" DockPanel.Dock="Right" />
      </DockPanel>
    </Border>
    <ControlTemplate.Triggers>
      <DataTrigger Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowIcon), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_WindowIcon" Property="Visibility" Value="Collapsed" />
      </DataTrigger>
      <DataTrigger Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowTitle), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_WindowTitle" Property="Visibility" Value="Collapsed" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <!-- ThemedWindowTemplate -->
  <ControlTemplate x:Key="themedWindowTemplate" TargetType="{x:Type dx:ThemedWindow}">
    <dx:ThemedWindowRoot x:Name="PART_WindowRoot">
      <Rectangle x:Name="PART_AcrylicBackground" Fill="Transparent" Visibility="Collapsed" />
      <AdornerDecorator x:Name="PART_WindowAdornerDecorator">
        <dx:ThemedWindowBorder x:Name="PART_WindowBorder" Style="{StaticResource windowBorderStyle}">
          <dx:ThemedWindowContentBorder x:Name="PART_WindowContentClipBorder" Style="{StaticResource windowClipBorderStyle}">
            <DockPanel x:Name="PART_WindowContentPanel">
              <ContentPresenter x:Name="PART_LeftPanelContent" Content="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.LeftPanelContent), RelativeSource={RelativeSource Self}}" ContentTemplate="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.LeftPanelContentTemplate), RelativeSource={RelativeSource Self}}" ContentTemplateSelector="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.LeftPanelContentTemplateSelector), RelativeSource={RelativeSource Self}}" Visibility="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowLeftPanel), RelativeSource={RelativeSource Self}, Converter={dx:BooleanToVisibilityConverter}}" DockPanel.Dock="Left" />
              <DockPanel x:Name="PART_WindowHeaderContentAndStatusPanel" LastChildFill="True" DockPanel.Dock="Right">
                <dx:ThemedWindowBorder x:Name="PART_StatusPanel" Style="{StaticResource statusPanelStyle}" />
                <DockPanel x:Name="PART_WindowHeaderAndContent">
                  <dx:ThemedWindowHeader x:Name="PART_HeaderBorder" DockPanel.Dock="Top" />
                  <Border DockPanel.Dock="Top" HorizontalAlignment="Stretch">
                    <ContentPresenter x:Name="PART_HeaderContentPresenter" Content="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.HeaderContent), RelativeSource={RelativeSource Self}}" />
                  </Border>
                  <dx:ThemedWindowContentBorder x:Name="PART_ContentBackgroundBorder" Style="{StaticResource contentBackgroundBorderStyle}" DockPanel.Dock="Bottom">
                    <DockPanel x:Name="PART_ContentAndFooter" DockPanel.Dock="Top" LastChildFill="True">
                      <dx:ThemedWindowBorder x:Name="PART_DialogFooter" Style="{StaticResource dialogFooterBorderStyle}" DockPanel.Dock="Bottom">
                        <dx:ThemedWindowDialogButtonsControl x:Name="PART_DialogFooterButtonsControl" />
                      </dx:ThemedWindowBorder>
                      <ContentPresenter x:Name="PART_WindowContentPresenter" IsEnabled="{Binding IsAsyncCommandExecuting, Converter={dx:BoolInverseConverter}, ElementName=PART_DialogFooterButtonsControl}" DockPanel.Dock="Bottom" />
                    </DockPanel>
                  </dx:ThemedWindowContentBorder>
                </DockPanel>
              </DockPanel>
            </DockPanel>
          </dx:ThemedWindowContentBorder>
        </dx:ThemedWindowBorder>
      </AdornerDecorator>
      <dx:ThemedWindowSizeGrip x:Name="PART_SizeGrip" Style="{StaticResource sizeGripStyle}" />
    </dx:ThemedWindowRoot>
    <ControlTemplate.Triggers>
      <Trigger Property="ShowStatusPanel" Value="True">
        <Setter TargetName="PART_StatusPanel" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="WindowState" Value="Maximized">
        <Setter TargetName="PART_SizeGrip" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_WindowBorder" Property="BorderThickness" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="LeftPanelContent" Value="{x:Null}" />
          <Condition Property="LeftPanelContentTemplate" Value="{x:Null}" />
          <Condition Property="LeftPanelContentTemplateSelector" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter TargetName="PART_LeftPanelContent" Property="MinWidth" Value="50" />
        </MultiTrigger.Setters>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <!-- THEMEDWINDOW DEFAULT STYLES -->
  <!-- ThemedWindowIconStyle -->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowIcon}" TargetType="{x:Type dx:ThemedWindowIcon}">
    <Setter Property="Visibility" Value="Visible" />
    <Setter Property="Width" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowIconWidth}}" />
    <Setter Property="Height" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowIconHeight}}" />
    <Setter Property="Margin" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowIconMargin}}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template" Value="{StaticResource themedWindowIconTemplate}" />
    <Setter Property="dxcn:WindowChrome.IsHitTestVisibleInChrome" Value="True" />
    <Setter Property="UseLayoutRounding" Value="True" />
  </Style>
  <!-- ThemedWindowStyle -->
  <Style x:Key="{dxt:ThemedWindowThemeKey ResourceKey=WindowStyle}" TargetType="{x:Type dx:ThemedWindow}">
    <Setter Property="TabbedModeDefaultTopMargin" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=TabbedModeDefaultTopMargin}}" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Template" Value="{StaticResource themedWindowTemplate}" />
    <Setter Property="Padding" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowNormalPadding}}" />
    <Setter Property="TitleAlignment" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowTitleAlignment}}" />
    <Setter Property="Foreground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowContentForeground}}" />
    <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveContentBackground}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveBorderBrush}}" />
    <Setter Property="BorderThickness" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowBorderThickness}}" />
    <Setter Property="ActiveGlowColor" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveBorderBrush}}" />
    <Setter Property="InactiveGlowColor" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveBorderBrush}}" />
    <Setter Property="AcrylicColor" Value="{DynamicResource {dxt:AcrylicThemedWindowThemeKey ResourceKey=AcrylicColor}}" />
    <Setter Property="MinWidth" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dxcn:ThemedWindowsHelper.MinWidth)}" />
    <Setter Property="dxcn:WindowChrome.WindowChrome">
      <Setter.Value>
        <dxcn:WindowChrome />
      </Setter.Value>
    </Setter>
    <Setter Property="dxcn:WindowChrome.CaptionHeight" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowHeaderHeight}}" />
    <Setter Property="dxcn:WindowChrome.ResizeBorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=ResizeBorderThickness}" />
    <Setter Property="dxcn:WindowChrome.UseNullRegion" Value="{Binding RelativeSource={RelativeSource Self}, Path=ActualRoundCorners}" />
    <Setter Property="dxcn:WindowChrome.IsTouchMode" Value="{Binding RelativeSource={RelativeSource Self}, Path=(dx:ThemeManager.IsTouchEnabled)}" />
    <Setter Property="dxcn:WindowGlowChrome.WindowGlowChrome">
      <Setter.Value>
        <dxcn:WindowGlowChrome />
      </Setter.Value>
    </Setter>
    <Setter Property="dxcn:WindowGlowChrome.ShowGlow" Value="{Binding RelativeSource={RelativeSource Self}, Path=ShowGlow}" />
    <Setter Property="dxcn:WindowGlowChrome.UseGlowColors" Value="{Binding RelativeSource={RelativeSource Self}, Path=UseGlowColors}" />
    <Setter Property="dx:HeaderItemControl.CommonTemplateProvider" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderItemControlCommonTemplateProvider}}" />
    <Setter Property="dx:HeaderItemControl.CloseTemplateProvider" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderItemControlCloseTemplateProvider}}" />
    <Setter Property="HeaderForeground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowTitleForeground}}" />
    <Setter Property="dx:ScrollBarExtensions.AllowMiddleMouseScrolling" Value="{x:Static core:CompatibilitySettings.UseMiddleMouseScrolling}" />
    <Setter Property="RoundWindowCorners" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=RoundWindowCorners}}" />
    <Setter Property="SearchItemTemplate" Value="{DynamicResource {dxbt:BarItemSearchControlThemeKey ResourceKey=DefaultTemplate}}" />
    <Style.Triggers>
      <DataTrigger Value="False" Binding="{Binding Path=(dxcn:WindowChromeWorker.IsNCActive), RelativeSource={RelativeSource Self}}">
        <Setter Property="dxcn:ThemedWindowsHelper.IsMessageBoxNCActive" Value="False" />
      </DataTrigger>
      <DataTrigger Value="False" Binding="{Binding Path=(dxcn:ThemedWindowOptions.UseWindow10HeaderColor), RelativeSource={RelativeSource Self}}">
        <Setter Property="HeaderBackground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowActiveHeaderBackground}}" />
      </DataTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsActive" Value="False" />
          <Condition Property="dxcn:WindowButtonHelper.IsActiveAppearance" Value="False" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}}" />
          <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveBorderBrush}}" />
        </MultiTrigger.Setters>
      </MultiTrigger>
      <Trigger Property="dxcn:ThemedWindowsHelper.IsMessageBoxNCActive" Value="False">
        <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveContentBackground}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ShowInTaskbar" Value="False" />
          <Condition Property="WindowState" Value="Minimized" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="ControlBoxButtonSet" Value="Close,MaximizeRestore,Restore" />
        </MultiTrigger.Setters>
      </MultiTrigger>
      <Trigger Property="WindowStyle" Value="ToolWindow">
        <Setter Property="ControlBoxButtonSet" Value="Close" />
        <Setter Property="ShowIcon" Value="False" />
        <Setter Property="ShowGlow" Value="False" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="NoResize">
        <Setter Property="dxcn:WindowChrome.ResizeBorderThickness" Value="0" />
        <Setter Property="ControlBoxButtonSet" Value="Close" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="CanMinimize">
        <Setter Property="ControlBoxButtonSet" Value="Close,MaximizeRestore,Minimize" />
        <Setter Property="dxcn:WindowChrome.ResizeBorderThickness" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="WindowStyle" Value="None" />
          <Condition Property="EnableAcrylic" Value="False" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="dxcn:WindowChrome.CaptionHeight" Value="0" />
        </MultiTrigger.Setters>
      </MultiTrigger>
      <DataTrigger Value="Ribbon" Binding="{Binding Path=ActualWindowKind, RelativeSource={RelativeSource Self}}">
        <Setter Property="Padding" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonPadding}}" />
        <Setter Property="HeaderForeground" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonTitleForeground}}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="Ribbon" Binding="{Binding Path=ActualWindowKind, RelativeSource={RelativeSource Self}}" />
          <Condition Value="True" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsRibbonControlAsContent), RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="TitleAlignment" Value="Center" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <!-- ThemedWindowControlBoxBorderStyle -->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowControlBoxBorder}" TargetType="{x:Type dx:ThemedWindowControlBoxBorder}">
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Template" Value="{StaticResource themedWindowControlBoxTemplate}" />
    <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxBackground}}" />
    <Setter Property="BorderThickness" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxBorderThickness}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxBorderBrush}}" />
    <Setter Property="VerticalAlignment" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderControlBoxVerticalAlignment}}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
  </Style>
  <!-- ThemedWindowTitleStyle -->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowTitle}" TargetType="{x:Type dx:ThemedWindowTitle}">
    <Setter Property="Template" Value="{StaticResource themedWindowTitleTemplate}" />
    <Setter Property="TitleAlignment" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.TitleAlignment), RelativeSource={RelativeSource Self}}" />
    <Setter Property="Content" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.Title), RelativeSource={RelativeSource Self}}" />
    <Setter Property="Foreground" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.HeaderForeground), RelativeSource={RelativeSource Self}}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Margin" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowTitleControlMargin}}" />
  </Style>
  <!-- ThemedWindowHeaderStyle -->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowHeader}" TargetType="{x:Type dx:ThemedWindowHeader}">
    <Setter Property="Height" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:WindowChrome.CaptionHeight), RelativeSource={RelativeSource Self}}" />
    <Setter Property="Background" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.HeaderBackground), RelativeSource={RelativeSource Self}}" />
    <Setter Property="Content" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.Title), RelativeSource={RelativeSource Self}}" />
    <Setter Property="TitleAlignment" Value="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.TitleAlignment), RelativeSource={RelativeSource Self}}" />
    <Setter Property="Padding" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderNormalPadding}}" />
    <Setter Property="Template" Value="{StaticResource themedWindowHeaderTemplate}" />
    <Setter Property="Focusable" Value="False" />
    <Style.Triggers>
      <DataTrigger Value="None" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource Self}}">
        <Setter Property="Visibility" Value="Collapsed" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource Self}}" />
          <Condition Value="Normal" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="CornerRadius" Value="{StaticResource win11HeaderCornerRadius}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="True" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualRoundCorners), RelativeSource={RelativeSource Self}}" />
          <Condition Value="Normal" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" />
          <Condition Value="ToolWindow" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowStyle), RelativeSource={RelativeSource Self}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:WindowSnappingHelper.IsDocked), RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="CornerRadius" Value="{StaticResource win11ToolWindowHeaderCornerRadius}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Value="True" Binding="{Binding Path=(dxcn:ThemedWindowsHelper.IsBlurBehindEnabled), RelativeSource={RelativeSource TemplatedParent}}">
        <Setter Property="EnableTransparency" Value="True" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderBackground}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:ThemedWindowsHelper.IsMessageBoxNCActive), RelativeSource={RelativeSource Self}}">
        <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowInactiveHeaderBackground}}" />
      </DataTrigger>
      <Trigger Property="EnableTransparency" Value="True">
        <Setter Property="Background" Value="{StaticResource transparentHeaderBackground}" />
      </Trigger>
      <DataTrigger Value="Tabbed" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}">
        <Setter Property="Template" Value="{StaticResource themedWindowHeaderTabbedTemplate}" />
      </DataTrigger>
      <DataTrigger Value="Ribbon" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}">
        <Setter Property="Padding" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=HeaderRibbonPadding}}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonActiveHeaderBackground}}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.IsActive), RelativeSource={RelativeSource Self}}" />
          <Condition Value="Ribbon" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ActualWindowKind), RelativeSource={RelativeSource Self}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dxcn:WindowButtonHelper.IsActiveAppearance), RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Background" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=WindowRibbonInactiveHeaderBackground}}" />
          <Setter Property="Opacity" Value="1" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Value="Minimized" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.WindowState), RelativeSource={RelativeSource Self}}" />
          <Condition Value="False" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedWindow.ShowInTaskbar), RelativeSource={RelativeSource Self}}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="HorizontalAlignment" Value="Left" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <!-- DIALOG TEMPLATES -->
  <!--DialogButtonsControlTemplate-->
  <ControlTemplate x:Key="{dxt:ThemedWindowThemeKey ResourceKey=DialogButtonsControlTemplate}" TargetType="{x:Type dx:ThemedWindowDialogButtonsControl}">
    <Border x:Name="PART_DialogButtonsControlBorder">
      <ItemsPresenter />
    </Border>
  </ControlTemplate>
  <!--DialogButtonsControlPanelTemplate-->
  <ItemsPanelTemplate x:Key="dialogButtonsControlPanelTemplate">
    <Grid x:Name="PART_DialogButtonsGrid" Margin="12" />
  </ItemsPanelTemplate>
  <!--DialogButtonsControlGroupContainerTemplate-->
  <ControlTemplate x:Key="dialogButtonsControlGroupContainerTemplate">
    <StackPanel x:Name="PART_GroupItemStack">
      <ItemsPresenter />
    </StackPanel>
  </ControlTemplate>
  <!-- ThemedWindowDialogButtonsControlItemsPanelTemplate -->
  <ItemsPanelTemplate x:Key="{dxt:ThemedWindowThemeKey ResourceKey=DialogButtonsControlItemsPanelTemplate}">
    <StackPanel x:Name="PART_ItemsStackPanel" Orientation="Horizontal" />
  </ItemsPanelTemplate>
  <!--DialogButtonsControlGroupContainerStyle-->
  <Style x:Key="dialogButtonsControlGroupContainerStyle" TargetType="{x:Type GroupItem}">
    <Setter Property="Template" Value="{StaticResource dialogButtonsControlGroupContainerTemplate}" />
    <Setter Property="HorizontalAlignment" Value="{Binding Path=Name, Converter={dx:GroupItemNameToHorizontalAlignmentConverter}}" />
  </Style>
  <!-- DIALOG DEFAULT STYLES -->
  <!--DialogButtonsControlGroupStyle-->
  <GroupStyle x:Key="{dxt:ThemedWindowThemeKey ResourceKey=DialogButtonsControlGroupStyle}" Panel="{StaticResource dialogButtonsControlPanelTemplate}" ContainerStyle="{StaticResource dialogButtonsControlGroupContainerStyle}" />
  <!-- ThemedWindowDialogButtonControlStyle -->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowDialogButtonsControl}" TargetType="{x:Type dx:ThemedWindowDialogButtonsControl}">
    <Setter Property="Template" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=DialogButtonsControlTemplate}}" />
    <Setter Property="ItemsPanel" Value="{DynamicResource {dxt:ThemedWindowThemeKey ResourceKey=DialogButtonsControlItemsPanelTemplate}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Focusable" Value="False" />
  </Style>
  <!-- MESSAGEBOX TEMPLATES -->
  <!--MessageBoxContentTemplate-->
  <DataTemplate x:Key="messageBoxContentTemplate">
    <dx:ThemedMessageBoxContent x:Name="PART_MessageBoxContent" />
  </DataTemplate>
  <!-- MessageBoxContentTemplate -->
  <ControlTemplate x:Key="messageBoxContentControlTemplate" TargetType="{x:Type dx:ThemedMessageBoxContent}">
    <DockPanel x:Name="PART_MessageBoxContentDock" Margin="12" LastChildFill="True">
      <dx:DXImage x:Name="PART_MessageBoxImage" Style="{StaticResource messageBoxImageStyle}" />
      <TextBlock x:Name="PART_MessageBoxText" Style="{StaticResource messageBoxTextStyle}" />
      <TextBox x:Name="PART_MessageBoxTextSelectionSupport" Style="{StaticResource messageBoxTextSelectionSupportStyle}" />
      <!-- We should set binding to content here instead of style -->
      <!-- because of binding goes wrong with ContentPresenter in ContentControl -->
      <ContentPresenter x:Name="PART_MessageBoxContentPresenter" Style="{StaticResource messageBoxContentPresenterStyle}" Content="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.MessageContent), RelativeSource={RelativeSource Self}}" />
    </DockPanel>
    <ControlTemplate.Triggers>
      <DataTrigger Value="{x:Null}" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.MessageContent), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_MessageBoxContentPresenter" Property="Visibility" Value="Collapsed" />
      </DataTrigger>
      <DataTrigger Value="{x:Null}" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.Image), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_MessageBoxImage" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_MessageBoxText" Property="Margin" Value="0" />
        <Setter TargetName="PART_MessageBoxTextSelectionSupport" Property="Margin" Value="0" />
        <Setter TargetName="PART_MessageBoxContentPresenter" Property="Margin" Value="0" />
      </DataTrigger>
      <DataTrigger Value="True" Binding="{Binding Path=(dxcn:WindowServiceHelper.IWindowService).(dx:ThemedMessageBoxWindow.AllowTextSelection), RelativeSource={RelativeSource Self}}">
        <Setter TargetName="PART_MessageBoxText" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_MessageBoxTextSelectionSupport" Property="Visibility" Value="Visible" />
      </DataTrigger>
      <Trigger Value="Visible" SourceName="PART_MessageBoxContentPresenter" Property="Visibility">
        <Setter TargetName="PART_MessageBoxText" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_MessageBoxTextSelectionSupport" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <!-- MESSAGEBOX DEFAULT STYLES -->
  <!--ThemedMessageBoxContentStyle-->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedMessageBoxContent}" TargetType="{x:Type dx:ThemedMessageBoxContent}">
    <Setter Property="Template" Value="{StaticResource messageBoxContentControlTemplate}" />
    <Setter Property="Focusable" Value="False" />
  </Style>
  <!-- ThemedMessageBoxStyle -->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedMessageBoxWindow}" BasedOn="{StaticResource {dxt:ThemedWindowThemeKey ResourceKey=WindowStyle}}" TargetType="{x:Type dx:ThemedMessageBoxWindow}">
    <Setter Property="ResizeMode" Value="NoResize" />
    <Setter Property="ShowIcon" Value="False" />
    <Setter Property="MaxWidth" Value="500" />
    <Setter Property="MinWidth" Value="150" />
    <Setter Property="SizeToContent" Value="WidthAndHeight" />
    <Setter Property="ShowInTaskbar" Value="False" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="ContentTemplate" Value="{StaticResource messageBoxContentTemplate}" />
    <Setter Property="AutomationProperties.HelpText" Value="{Binding Text, RelativeSource={RelativeSource Self}}" />
  </Style>
  <!--HeaderItem DefaultStyle-->
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.HeaderItemControl}" BasedOn="{StaticResource headerItemControlStyle}" TargetType="{x:Type dx:HeaderItemControl}" />
  <!-- HEADER ITEM TEMPLATE PROVIDERS -->
  <!-- CommonTemplateProvider -->
  <dx:CommonHeaderItemControlTemplateProvider x:Key="{dxt:ThemedWindowThemeKey ResourceKey=HeaderItemControlCommonTemplateProvider}" HeaderItemControlStyle="{StaticResource ResourceKey={dxt:ThemedWindowHeaderItemsThemeKey ResourceKey=HeaderButtonStyle}}" MaximizeGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerMaximizeButtonGlyph}}" MinimizeGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerMinimizeButtonGlyph}}" RestoreGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerRestoreButtonGlyph}}" MouseOverBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonBackgroundMouseOverState}}" MouseOverForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonForegroundMouseOverState}}" NormalBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonBackgroundNormalState}}" NormalForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonForegroundNormalState}}" PressedBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonBackgroundPressedState}}" PressedForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerDefaultButtonForegroundPressedState}}" />
  <!-- CloseTemplateProvider -->
  <dx:CloseHeaderItemControlTemplateProvider x:Key="{dxt:ThemedWindowThemeKey ResourceKey=HeaderItemControlCloseTemplateProvider}" HeaderItemControlStyle="{StaticResource ResourceKey={dxt:ThemedWindowHeaderItemsThemeKey ResourceKey=HeaderCloseButtonStyle}}" CloseGlyphTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonGlyph}}" MouseOverBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonBackgroundMouseOverState}}" MouseOverForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonForegroundMouseOverState}}" NormalBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonBackgroundNormalState}}" NormalForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonForegroundNormalState}}" PressedBackgroundTemplate="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonBackgroundPressedState}}" PressedForeground="{StaticResource ResourceKey={dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonForegroundPressedState}}" />
</ResourceDictionary>