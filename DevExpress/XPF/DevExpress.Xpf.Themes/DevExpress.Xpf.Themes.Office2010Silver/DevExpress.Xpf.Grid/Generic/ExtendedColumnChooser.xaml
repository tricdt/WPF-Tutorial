<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys" xmlns:dxgcore="clr-namespace:DevExpress.Xpf.Grid;assembly=DevExpress.Xpf.Grid.v24.1.Core" xmlns:dxght="http://schemas.devexpress.com/winfx/2008/xaml/grid/internal" xmlns:dxgtl="http://schemas.devexpress.com/winfx/2008/xaml/grid" xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxeh="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <dxmvvm:ObjectToObjectConverter x:Key="HeaderPresenterTypeConverter" DefaultSource="False" DefaultTarget="ColumnChooser">
    <dxmvvm:MapItem Source="True" Target="Headers" />
  </dxmvvm:ObjectToObjectConverter>
  <dx:BoolInverseConverter x:Key="boolInverseConverter" />
  <dx:EditorStringIdConverter x:Key="EditorStringIdConverter" />
  <dxgtl:ExtendedColumnChooserHeaderPresenterTypeConverter x:Key="ExtendedColumnChooserHeaderPresenterTypeConverter" />
  <DataTemplate x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=CheckBoxColumnCellTemplate}">
    <dxe:CheckEdit EditValue="{Binding Path=RowData.Row.IsVisible, Mode=TwoWay}" EditMode="Standalone" VerticalAlignment="Center" HorizontalAlignment="Center" IsEnabled="{Binding Path=RowData.Row.AllowChangeVisibility}" Margin="0,0,0,0" Focusable="False" />
  </DataTemplate>
  <DataTemplate x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=DropMarkerTemplate}">
    <ContentPresenter ContentTemplate="{DynamicResource {dxgt:GridColumnHeaderThemeKey ResourceKey=DragIndicatorTemplate}}" dxgtl:GridColumnHeader.CanGroupMergeState="False" dxgtl:GridColumnHeader.DropPlaceOrientation="Vertical" dxgtl:GridColumnHeader.IsGroupPanel="False" dxgtl:GridColumnHeader.IsColumnChooser="True" />
  </DataTemplate>
  <DataTemplate x:Key="ColumnHeaderTemplate">
    <dxgtl:ExtendedColumnChooserGridColumnHeader DataContext="{Binding Value}" dxb:BarManager.DXContextMenu="{Binding Path=View.DataControlMenu}" dxgtl:GridPopupMenu.GridMenuType="Column" dxgtl:GridColumnHeader.GridColumn="{Binding}" dxgtl:GridColumn.HeaderPresenterType="ColumnChooser" dxgtl:GridControl.CurrentView="{Binding View}" dxgtl:GridColumnHeader.ExtendedColumnChooserView="{Binding RowData.View, RelativeSource={RelativeSource TemplatedParent}}" DropMarkerTemplate="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=DropMarkerTemplate}}" Margin="1,1,2,0" ColumnPosition="Standalone" SnapsToDevicePixels="True">
      <dxgtl:ExtendedColumnChooserGridColumnHeader.ColumnChooserHeaderPresenterType>
        <MultiBinding Converter="{StaticResource ExtendedColumnChooserHeaderPresenterTypeConverter}">
          <Binding Path="Visible" />
          <Binding Path="RowData.Row.IsGrouped" RelativeSource="{RelativeSource TemplatedParent}" />
        </MultiBinding>
      </dxgtl:ExtendedColumnChooserGridColumnHeader.ColumnChooserHeaderPresenterType>
      <dxgtl:GridControl.CurrentViewChangedListener>
        <dxgtl:ExtendedColumnChooserColumnHeaderInitializer />
      </dxgtl:GridControl.CurrentViewChangedListener>
    </dxgtl:ExtendedColumnChooserGridColumnHeader>
  </DataTemplate>
  <DataTemplate x:Key="BandHeaderTemplate">
    <dxgtl:ExtendedColumnChooserBandHeaderControl DataContext="{Binding Value}" dxb:BarManager.DXContextMenu="{Binding Path=View.DataControlMenu}" dxgtl:GridPopupMenu.GridMenuType="Band" ColumnChooserHeaderPresenterType="{Binding Visible, Converter={StaticResource HeaderPresenterTypeConverter}}" dxgtl:GridColumnHeader.GridColumn="{Binding}" dxgtl:GridColumn.HeaderPresenterType="ColumnChooser" dxgtl:GridControl.CurrentView="{Binding View}" dxgtl:GridColumnHeader.ExtendedColumnChooserView="{Binding RowData.View, RelativeSource={RelativeSource TemplatedParent}}" DropMarkerTemplate="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=DropMarkerTemplate}}" Margin="1,1,2,0" ColumnPosition="Standalone" SnapsToDevicePixels="True">
      <dxgtl:GridControl.CurrentViewChangedListener>
        <dxgtl:ExtendedColumnChooserColumnHeaderInitializer />
      </dxgtl:GridControl.CurrentViewChangedListener>
    </dxgtl:ExtendedColumnChooserBandHeaderControl>
  </DataTemplate>
  <Style x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=ColumnStyle}" TargetType="{x:Type dxg:TreeListColumn}">
    <Setter Property="CellTemplateSelector">
      <Setter.Value>
        <dxgtl:ExtendedColumnChooserColumnTemplateSelector ColumnHeaderTemplate="{StaticResource ColumnHeaderTemplate}" BandHeaderTemplate="{StaticResource BandHeaderTemplate}" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=CheckBoxColumnStyle}" TargetType="{x:Type dxg:TreeListColumn}">
    <Setter Property="Width" Value="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=CheckBoxColumnWidth}}" />
    <Setter Property="CellTemplate" Value="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=CheckBoxColumnCellTemplate}}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Width" Value="34" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.ExtendedColumnChooserRowMarginControl}" TargetType="{x:Type dxg:ExtendedColumnChooserRowMarginControl}">
    <Setter Property="Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextUnfocusedBrush}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="PART_RootGrid" Background="{DynamicResource {dxgt:TreeListViewThemeKey ResourceKey=RowMarginBackgroundBrush}}">
            <Path x:Name="PART_OffsetPath" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" />
            <Path x:Name="PART_TreeLinePath" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" />
            <dxgtl:IndentsPanel RowIndent="{Binding View.RowIndent}" HorizontalAlignment="Right">
              <dxgtl:TreeListNodeExpandButton x:Name="PART_ExpandButton" HorizontalAlignment="Left" Command="{Binding View.Commands.ChangeNodeExpanded}" CommandParameter="{Binding RowHandle.Value}" IsEnabled="{Binding IsButtonVisible}">
                <dxgtl:TreeListNodeExpandButton.IsExpandButtonVisible>
                  <MultiBinding>
                    <Binding Path="IsButtonVisible" />
                    <Binding Path="Row" />
                    <MultiBinding.Converter>
                      <dxgtl:ExtendedColumnChooserExpandButtonVisibleConverter />
                    </MultiBinding.Converter>
                  </MultiBinding>
                </dxgtl:TreeListNodeExpandButton.IsExpandButtonVisible>
                <dxgtl:TreeListNodeExpandButton.IsChecked>
                  <MultiBinding>
                    <Binding Path="IsButtonVisible" />
                    <Binding Path="IsExpanded" />
                    <MultiBinding.Converter>
                      <dxgtl:ExtendedColumnChooserExpandButtonCheckedConverter />
                    </MultiBinding.Converter>
                  </MultiBinding>
                </dxgtl:TreeListNodeExpandButton.IsChecked>
              </dxgtl:TreeListNodeExpandButton>
              <dxe:CheckEdit x:Name="PART_NodeCheckBox" Visibility="{Binding IsCheckBoxVisible, Converter={StaticResource BooleanToVisibilityConverter}}" IsEnabled="{Binding IsCheckBoxEnabled}" IsChecked="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Focusable="False" IsThreeState="{Binding View.AllowIndeterminateCheckState}">
                <dxgtl:GridViewHitInfoBase.HitTestAcceptor>
                  <dxgtl:TreeListNodeCheckboxHitTestAcceptor />
                </dxgtl:GridViewHitInfoBase.HitTestAcceptor>
              </dxe:CheckEdit>
              <dx:MeasurePixelSnapper Visibility="{Binding IsImageVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                <dx:DXImage x:Name="PART_NodeImage" Focusable="False" Source="{Binding Image, UpdateSourceTrigger=PropertyChanged}" Width="{Binding Path=View.NodeImageSize.Width}" Height="{Binding Path=View.NodeImageSize.Height}">
                  <dxgtl:GridViewHitInfoBase.HitTestAcceptor>
                    <dxgtl:TreeListNodeImageHitTestAcceptor />
                  </dxgtl:GridViewHitInfoBase.HitTestAcceptor>
                  <RenderOptions.BitmapScalingMode>NearestNeighbor</RenderOptions.BitmapScalingMode>
                </dx:DXImage>
              </dx:MeasurePixelSnapper>
            </dxgtl:IndentsPanel>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="PART_RootGrid" Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=RowTemplate}" TargetType="{x:Type dxg:ExtendedColumnChooserRowControl}">
    <Grid>
      <Grid.Margin>
        <Binding Path="RowPosition">
          <Binding.Converter>
            <dxmvvm:ObjectToObjectConverter DefaultTarget="0">
              <dxmvvm:MapItem Source="Top">
                <dxmvvm:MapItem.Target>
                  <Thickness>0,2,0,0</Thickness>
                </dxmvvm:MapItem.Target>
              </dxmvvm:MapItem>
              <dxmvvm:MapItem Source="Bottom">
                <dxmvvm:MapItem.Target>
                  <Thickness>0,0,0,3</Thickness>
                </dxmvvm:MapItem.Target>
              </dxmvvm:MapItem>
              <dxmvvm:MapItem Source="Single">
                <dxmvvm:MapItem.Target>
                  <Thickness>0,2,0,3</Thickness>
                </dxmvvm:MapItem.Target>
              </dxmvvm:MapItem>
            </dxmvvm:ObjectToObjectConverter>
          </Binding.Converter>
        </Binding>
      </Grid.Margin>
      <Border x:Name="Background" Background="{TemplateBinding Background}" Margin="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=RowPadding}}" />
      <Grid>
        <Grid.RowDefinitions>
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid x:Name="PART_LayoutPanel" Margin="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=RowMargin}}" />
        <Border x:Name="BottomLine" Grid.Row="1" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}" Margin="0,2,0,1" Background="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowSeparatorBrush}}" VerticalAlignment="Bottom" Height="1" Visibility="Collapsed" />
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="FadeSelection" Value="True">
        <Setter Property="Opacity" Value="0.5" TargetName="Background" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=TreeListControlStyle}" TargetType="{x:Type dxg:TreeListControl}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="ShowBorder" Value="False" />
    <Setter Property="Template" Value="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=TreeListControlTemplate}}" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.35" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <dxgtl:DefaultStyle x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=RowStyle}" TargetType="{x:Type dxg:GridRowContent}">
    <Setter Property="dxg:GridRowContent.Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderNoneBrush}}" />
    <Setter Property="dxg:GridRowContent.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextUnfocusedBrush}}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=AlternateRow}" Value="True">
        <Setter Property="dxg:GridRowContent.Background" Value="{Binding Path=View.ActualAlternateRowBackground}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=SelectionState}" Value="Selected">
        <Setter Property="dxg:GridRowContent.Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderSelectedBrush}}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextRowSelectedBrush}}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=SelectionState}" Value="Focused">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextFocusedBrush}}" />
        <Setter Property="dxg:GridRowContent.Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderFocusedBrush}}" />
      </DataTrigger>
    </Style.Triggers>
  </dxgtl:DefaultStyle>
  <Style x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=TreeListViewStyle}" TargetType="{x:Type dxg:TreeListView}">
    <Setter Property="AllowSorting" Value="False" />
    <Setter Property="ShowColumnHeaders" Value="False" />
    <Setter Property="ShowVerticalLines" Value="False" />
    <Setter Property="ShowHorizontalLines" Value="False" />
    <Setter Property="ShowIndicator" Value="False" />
    <Setter Property="RowStyle" Value="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=RowStyle}}" />
    <Setter Property="TreeLineStyle" Value="None" />
    <Setter Property="SearchDelay" Value="0" />
    <Setter Property="SearchPanelHorizontalAlignment" Value="Stretch" />
    <Setter Property="ShowRootIndent" Value="{Binding HasBands}" />
    <Setter Property="ShowSearchPanelMode" Value="Always" />
    <Setter Property="AutoExpandAllNodes" Value="True" />
    <Setter Property="ExpandNodesOnFiltering" Value="True" />
    <Setter Property="FilterMode" Value="Extended" />
    <Setter Property="ShowDragDropHint" Value="True" />
    <Setter Property="NavigationStyle" Value="None" />
    <Setter Property="VerticalScrollbarVisibility" Value="Auto" />
    <Setter Property="SearchPanelNullText">
      <Setter.Value>
        <MultiBinding>
          <Binding Path="DataControl.View.LocalizationDescriptor" />
          <Binding Path="HasBands" />
          <MultiBinding.Converter>
            <dxgtl:ExtendedColumnChooserSearchNullTextConverter SearchColumnsKey="ExtendedColumnChooserSearchColumns" SearchColumnsAndBandsKey="ExtendedColumnChooserSearchColumnsAndBands" />
          </MultiBinding.Converter>
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="Template" Value="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=TreeViewTemplate}}" />
  </Style>
  <ControlTemplate x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=Template}">
    <dxgtl:TreeListControl DataContext="{Binding Path=(dxg:ExtendedColumnChooserControl.ViewModel), RelativeSource={RelativeSource Self}}" ItemsSource="{Binding Path=Columns}" Style="{DynamicResource ResourceKey={dxgt:ExtendedColumnChooserThemeKey ResourceKey=TreeListControlStyle}}">
      <dxgtl:TreeListControl.Columns>
        <dxgtl:TreeListColumn FieldName="IsVisible" AllowSearchPanel="False" Style="{DynamicResource ResourceKey={dxgt:ExtendedColumnChooserThemeKey ResourceKey=CheckBoxColumnStyle}}" />
        <dxgtl:TreeListColumn FieldName="Source" AllowSearchPanel="False" Width="*" Style="{DynamicResource ResourceKey={dxgt:ExtendedColumnChooserThemeKey ResourceKey=ColumnStyle}}" />
        <dxgtl:TreeListColumn FieldName="VisibleIndex" SortOrder="Ascending" Visible="False" AllowSearchPanel="False" />
        <dxgtl:TreeListColumn FieldName="Header" Visible="False" AllowSearchPanel="True" />
      </dxgtl:TreeListControl.Columns>
      <dxgtl:TreeListControl.View>
        <dxgtl:ExtendedColumnChooserTreeListView TreeColumnFieldName="Source" KeyFieldName="Source" ParentFieldName="ParentBand" OriginalDataControl="{Binding DataControl}" Style="{DynamicResource ResourceKey={dxgt:ExtendedColumnChooserThemeKey ResourceKey=TreeListViewStyle}}">
          <dxmvvm:Interaction.Behaviors>
            <dxmvvm:EventToCommand SourceObject="{Binding}" EventName="ColumnsFixedStateChanged" Command="{DXCommand Execute='@s.AssociatedObject.UpdateRowsFixedState()'}" />
            <dxmvvm:EventToCommand SourceObject="{Binding DragDropManager}" EventName="DropInEmptyBand" Command="{DXCommand Execute='@s.AssociatedObject.UpdateNodeExpandState(@parameter.TargetBand, @parameter.Source)'}" PassEventArgsToCommand="True" />
          </dxmvvm:Interaction.Behaviors>
          <dx:DragManager.DropTargetFactory>
            <dxgtl:ExtendedColumnChooserDropTargetFactory />
          </dx:DragManager.DropTargetFactory>
        </dxgtl:ExtendedColumnChooserTreeListView>
      </dxgtl:TreeListControl.View>
    </dxgtl:TreeListControl>
  </ControlTemplate>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.ExtendedColumnChooserControl}" TargetType="{x:Type dxg:ExtendedColumnChooserControl}">
    <Setter Property="Template" Value="{DynamicResource ResourceKey={dxgt:ExtendedColumnChooserThemeKey ResourceKey=Template}}" />
  </Style>
  <ControlTemplate x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=TreeViewTemplate}" TargetType="{x:Type dxg:TreeListView}">
    <ScrollViewer x:Name="scr" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollbarVisibility}" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollbarVisibility}" Focusable="False" dxgtl:GridControl.CurrentView="{Binding RelativeSource={RelativeSource TemplatedParent}}" Template="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=TreeViewScrollViewerTemplate}}" dx:ScrollBarExtensions.ScrollBehavior="{x:Null}">
      <ScrollViewer.CanContentScroll>True</ScrollViewer.CanContentScroll>
      <dx:ScrollBarExtensions.AllowMouseScrolling>
        <Binding Path="(dxg:GridControl.CurrentView).UseExtendedMouseScrolling" RelativeSource="{RelativeSource Self}" />
      </dx:ScrollBarExtensions.AllowMouseScrolling>
    </ScrollViewer>
  </ControlTemplate>
  <ControlTemplate x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=SearchControlTemplate}" TargetType="dxg:GridSearchControl">
    <ContentControl dx:FocusHelper2.Focusable="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <dxeh:ChildMinWidthPanel ChildMinWidth="{TemplateBinding SearchTextBoxMinWidth}">
          <dxe:ComboBoxEdit MinHeight="22" ImmediatePopup="{Binding Path= SearchControlPropertyProvider.ActualImmediateMRUPopup, RelativeSource={RelativeSource TemplatedParent}}" x:Name="editor" AllowDefaultButton="False" AutomationProperties.Name="SearchComboBox" AutomationProperties.AutomationId="SearchComboBox" ShowNullText="{Binding Path=SearchControlPropertyProvider.ActualShowFindButton, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource boolInverseConverter}}" dxeh:MVVMFocusBehavior.IsFocused="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{TemplateBinding MRU}" Margin="0" ValidateOnEnterKeyPressed="True" IncrementalFiltering="False" IsCaseSensitiveSearch="True" EditValuePostDelay="{TemplateBinding SearchTextPostDelay}" EditValuePostMode="{Binding Path=SearchControlPropertyProvider.ActualPostMode, RelativeSource={RelativeSource TemplatedParent}}" EditValue="{Binding Path=SearchText, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" NullTextForeground="{Binding Path=NullTextForeground, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" IsTabStop="{Binding IsEditorTabStop, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}">
            <dxe:ComboBoxEdit.NullText>
              <MultiBinding>
                <Binding Path="NullText" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="IsTabStop" RelativeSource="{RelativeSource Self}" Converter="{StaticResource EditorStringIdConverter}" ConverterParameter="LookUpSearch" />
                <MultiBinding.Converter>
                  <dx:SearchControlNullTextConverter />
                </MultiBinding.Converter>
              </MultiBinding>
            </dxe:ComboBoxEdit.NullText>
            <dxe:ComboBoxEdit.Buttons>
              <dxe:ButtonInfo GlyphKind="Custom" x:Name="buttonClear" Command="{Binding Path=SearchControlPropertyProvider.ClearSearchTextCommand, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=SearchControlPropertyProvider.ActualShowClearButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <dxe:ButtonInfo.Template>
                  <DataTemplate>
                    <dxe:ButtonClose Command="{Binding Command}" Visibility="{Binding Visibility}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2,0" />
                  </DataTemplate>
                </dxe:ButtonInfo.Template>
              </dxe:ButtonInfo>
              <dxe:ButtonInfo GlyphKind="DropDown" Command="{Binding Path=OpenPopupCommand, ElementName=editor}" Visibility="{Binding Path=ShowMRUButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </dxe:ComboBoxEdit.Buttons>
          </dxe:ComboBoxEdit>
        </dxeh:ChildMinWidthPanel>
        <Button Grid.Column="1" Margin="4,0,0,0" MinWidth="55" x:Name="SearchFindButton" Command="{Binding Path=SearchControlPropertyProvider.FindCommand, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" CommandParameter="{TemplateBinding FilterCriteria}" Style="{DynamicResource {dxet:SearchControlThemeKey ResourceKey=FindButtonStyle}}" Visibility="{Binding Path=SearchControlPropertyProvider.ActualShowFindButton, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" />
        <Button Grid.Column="2" MinWidth="70" Margin="4,0,0,0" Command="{Binding PrevCommand, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource {dxet:SearchControlThemeKey ResourceKey=PrevButtonStyle}}" Visibility="{Binding Path=ShowSearchPanelNavigationButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}" />
        <Button Grid.Column="3" MinWidth="70" Margin="4,0,0,0" Command="{Binding NextCommand, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource {dxet:SearchControlThemeKey ResourceKey=NextButtonStyle}}" Visibility="{Binding Path=ShowSearchPanelNavigationButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}" />
        <Button Grid.Column="4" Margin="4,0,0,0" MinWidth="55" x:Name="SearchCloseButton" Command="{Binding Path=SearchControlPropertyProvider.CloseCommandInternal, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource {dxet:SearchControlThemeKey ResourceKey=CloseButtonStyle}}" Visibility="{Binding Path=ShowCloseButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}" />
      </Grid>
    </ContentControl>
  </ControlTemplate>
  <sys:Double x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=SearchPanelTextBoxMinWidth}">190</sys:Double>
  <Style x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=SearchPanelContentStyle}" TargetType="{x:Type ContentControl}">
    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid Background="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=SearchPanelBackground}}">
            <dxgtl:GridSearchControl x:Name="PART_SearchControl" View="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}" IsEditorTabStop="False" IsTabStop="False" HorizontalAlignment="{Binding Path=(dxg:GridControl.CurrentView).SearchPanelHorizontalAlignment, RelativeSource={RelativeSource TemplatedParent}}" SearchTextBoxMinWidth="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=SearchPanelTextBoxMinWidth}}" Visibility="{Binding Path=View.ActualShowSearchPanel, RelativeSource={RelativeSource Self}, Converter={dx:BooleanToVisibilityConverter}}" Margin="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=SearchPanelMargin}}" Template="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=SearchControlTemplate}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=OuterBorderElementStyle}" TargetType="{x:Type dxg:OuterBorderElement}">
    <Setter Property="Template" Value="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=OuterBorderElementTemplate}}" />
  </Style>
  <ControlTemplate x:Key="{dxgt:ExtendedColumnChooserThemeKey ResourceKey=TreeViewScrollViewerTemplate}">
    <Grid ClipToBounds="True" SnapsToDevicePixels="true" dxgtl:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}">
      <dx:ScrollBarExtensions.ScrollBehavior>
        <Binding Path="(dxg:GridControl.CurrentView).UseExtendedMouseScrolling" RelativeSource="{RelativeSource Self}">
          <Binding.Converter>
            <dx:BoolToObjectConverter FalseValue="{dx:NativeScrollBehavior}" TrueValue="{dxgcore:DataPresenterScrollBehavior}" />
          </Binding.Converter>
        </Binding>
      </dx:ScrollBarExtensions.ScrollBehavior>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Border Grid.Row="0" BorderBrush="{DynamicResource ResourceKey={dxgt:ExtendedColumnChooserThemeKey ResourceKey=SearchPanelBorderBrush}}" BorderThickness="{DynamicResource ResourceKey={dxgt:ExtendedColumnChooserThemeKey ResourceKey=SearchPanelBorderThickness}}">
        <ContentControl x:Name="part_SearchControlContainer" dxgtl:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(dxg:GridControl.CurrentView).ActualShowSearchPanel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" Style="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=SearchPanelContentStyle}}">
          <dxgtl:GridViewHitInfoBase.HitTestAcceptor>
            <dxght:GridSearchPanelHitTestAcceptor />
          </dxgtl:GridViewHitInfoBase.HitTestAcceptor>
        </ContentControl>
      </Border>
      <Grid dxgtl:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}" Margin="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=RowPresenterGridMargin}}" Grid.Row="1" x:Name="rowPresenterGrid">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid Grid.Row="1">
          <Grid.ColumnSpan>
            <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
              <Binding.Converter>
                <dxmvvm:ObjectToObjectConverter DefaultSource="Default" DefaultTarget="1">
                  <dxmvvm:MapItem Source="TouchOverlap" Target="2" />
                </dxmvvm:ObjectToObjectConverter>
              </Binding.Converter>
            </Binding>
          </Grid.ColumnSpan>
          <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" dxgtl:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding Path=(dxg:GridControl.CurrentView).ScrollableAreaMinWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" dxgcore:FocusRectPresenter.IsVerticalScrollHost="True" ScrollViewer.CanContentScroll="True">
            <dxgtl:GridControl.CurrentViewChangedListener>
              <dxgtl:ScrollContentPresenterInitializer />
            </dxgtl:GridControl.CurrentViewChangedListener>
            <ScrollContentPresenter.Content>
              <dxgtl:DataPresenter x:Name="dataPresenter" dxgtl:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}" Template="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=DataPresenterTemplate}}" />
            </ScrollContentPresenter.Content>
            <dxgtl:GridViewHitInfoBase.HitTestAcceptor>
              <dxght:DataAreaTableViewHitTestAcceptor />
            </dxgtl:GridViewHitInfoBase.HitTestAcceptor>
          </ScrollContentPresenter>
          <ContentControl HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
            <ContentControl.Template>
              <ControlTemplate TargetType="{x:Type ContentControl}">
                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding Content}" />
              </ControlTemplate>
            </ContentControl.Template>
            <ContentControl.Visibility>
              <Binding Path="(dxg:GridControl.CurrentView).WaitIndicatorType" RelativeSource="{RelativeSource TemplatedParent}">
                <Binding.Converter>
                  <dx:EnumToObjectConverter DefaultValue="Collapsed">
                    <dx:EnumToObjectConverter.Values>
                      <dx:EnumObjectProvider x:Key="Panel" Value="Visible" />
                    </dx:EnumToObjectConverter.Values>
                  </dx:EnumToObjectConverter>
                </Binding.Converter>
              </Binding>
            </ContentControl.Visibility>
            <dx:WaitIndicator DeferedVisibility="{Binding Path=(dxg:GridControl.CurrentView).IsWaitIndicatorVisible, RelativeSource={RelativeSource TemplatedParent}}" Style="{Binding Path=(dxg:GridControl.CurrentView).WaitIndicatorStyle, RelativeSource={RelativeSource TemplatedParent}}" />
          </ContentControl>
        </Grid>
        <Grid Grid.Column="1" HorizontalAlignment="Right" Visibility="{Binding ComputedVerticalScrollBarVisibility, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
          <Grid.RowSpan>
            <MultiBinding>
              <MultiBinding.Bindings>
                <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="(dxg:GridControl.CurrentView).ShowTotalSummary" RelativeSource="{RelativeSource TemplatedParent}" />
              </MultiBinding.Bindings>
              <MultiBinding.Converter>
                <dxgtl:VerticalScrollBarRowSpanConverter />
              </MultiBinding.Converter>
            </MultiBinding>
          </Grid.RowSpan>
          <ScrollBar x:Name="PART_VerticalScrollBar" HorizontalAlignment="Right" Value="{Binding VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" Maximum="{Binding ScrollableHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" ViewportSize="{Binding ViewportHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" dxgtl:GridControl.CurrentView="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}">
            <dxgtl:GridControl.CurrentViewChangedListener>
              <dxgtl:VerticalScrollBarBlendCustomizationExtension />
            </dxgtl:GridControl.CurrentViewChangedListener>
            <dxgtl:GridViewHitInfoBase.HitTestAcceptor>
              <dxght:VerticalScrollBarTableViewHitTestAcceptor />
            </dxgtl:GridViewHitInfoBase.HitTestAcceptor>
          </ScrollBar>
        </Grid>
        <Grid x:Name="gridScroll" VerticalAlignment="Bottom" Margin="{DynamicResource ResourceKey={dxgt:ExtendedColumnChooserThemeKey ResourceKey=HorizontalScrollbarMargin}}" Visibility="{Binding Path=(dxg:GridControl.CurrentView).ShowDataNavigator, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <Grid.Row>
            <MultiBinding>
              <MultiBinding.Bindings>
                <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="(dxg:GridControl.CurrentView).ShowTotalSummary" RelativeSource="{RelativeSource TemplatedParent}" />
              </MultiBinding.Bindings>
              <MultiBinding.Converter>
                <dxgtl:HorizontalScrollBarRowConverter />
              </MultiBinding.Converter>
            </MultiBinding>
          </Grid.Row>
          <Grid.RowSpan>
            <MultiBinding>
              <MultiBinding.Bindings>
                <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="(dxg:GridControl.CurrentView).ShowTotalSummary" RelativeSource="{RelativeSource TemplatedParent}" />
              </MultiBinding.Bindings>
              <MultiBinding.Converter>
                <dxgtl:HorizontalScrollBarRowSpanConverter />
              </MultiBinding.Converter>
            </MultiBinding>
          </Grid.RowSpan>
          <Grid.ColumnSpan>
            <MultiBinding>
              <MultiBinding.Bindings>
                <Binding Path="(dxg:GridControl.CurrentView).TotalSummaryPosition" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="(dxg:GridControl.CurrentView).FixedRightContentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="(dxg:GridControl.CurrentView).ExtendScrollBarToFixedColumns" RelativeSource="{RelativeSource TemplatedParent}" />
              </MultiBinding.Bindings>
              <MultiBinding.Converter>
                <dxgtl:HorizontalScrollBarGridColumnSpanConverter />
              </MultiBinding.Converter>
            </MultiBinding>
          </Grid.ColumnSpan>
          <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Value="{Binding HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" Maximum="{Binding ScrollableWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" ViewportSize="{Binding ViewportWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
            <dxgtl:GridViewHitInfoBase.HitTestAcceptor>
              <dxght:HorizontalScrollBarTableViewHitTestAcceptor />
            </dxgtl:GridViewHitInfoBase.HitTestAcceptor>
          </ScrollBar>
        </Grid>
        <dxgtl:FitContentContainer Grid.Row="3" Grid.Column="1">
          <dxgtl:FitContentContainer.Visibility>
            <MultiBinding>
              <MultiBinding.Bindings>
                <Binding Path="(dxg:GridControl.CurrentView).TotalSummaryPosition" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="(dxg:GridControl.CurrentView).FixedRightContentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="(dxg:GridControl.CurrentView).ExtendScrollBarToFixedColumns" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
              </MultiBinding.Bindings>
              <MultiBinding.Converter>
                <dxgtl:FitContentContainerConverter />
              </MultiBinding.Converter>
            </MultiBinding>
          </dxgtl:FitContentContainer.Visibility>
          <Border x:Name="PART_HorizontalScrollCorner" dxgtl:GridBorderHelper.ShowBorder="{Binding Path=(dxg:GridControl.CurrentView).ShowTotalSummary, RelativeSource={RelativeSource TemplatedParent}}" dxgtl:GridScrollBarHelper.ExtendScrollBarToFixedColumns="{Binding Path=(dxg:GridControl.CurrentView).ExtendScrollBarToFixedColumns, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource {dxgt:ScrollBarThemeKey ResourceKey=ScrollingCornerStyle}}" dxgtl:GridScrollBarHelper.HasFixedRightColumns="False" />
        </dxgtl:FitContentContainer>
      </Grid>
      <dxgtl:OuterBorderElement Grid.Row="1" Grid.RowSpan="2" x:Name="outerBorder" ShowColumnHeaders="{Binding Path=(dxg:GridControl.CurrentView).ShowColumnHeaders, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource ResourceKey={dxgt:ExtendedColumnChooserThemeKey ResourceKey=OuterBorderElementStyle}}" />
      <dxgcore:FocusRectPresenter x:Name="PART_FocusRectPresenter" Grid.RowSpan="4" View="{Binding Path=(dxg:GridControl.CurrentView), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" VerticalAlignment="Top" />
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=(dx:ScrollBarExtensions.ScrollBarMode), RelativeSource={RelativeSource TemplatedParent}}" Value="TouchOverlap">
        <Setter TargetName="gridScroll" Property="Grid.Visibility" Value="{Binding ComputedHorizontalScrollBarVisibility, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(dxg:GridControl.CurrentView).ShowDataNavigator, RelativeSource={RelativeSource Self}}" Value="False">
        <Setter TargetName="gridScroll" Property="Grid.Visibility" Value="{Binding ComputedHorizontalScrollBarVisibility, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>