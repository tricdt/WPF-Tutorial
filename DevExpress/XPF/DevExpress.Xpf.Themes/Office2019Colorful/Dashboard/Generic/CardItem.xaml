<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxdash="http://schemas.devexpress.com/winfx/2008/xaml/dashboard" xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxdashi="http://schemas.devexpress.com/winfx/2008/xaml/dashboard/internal" xmlns:dxdasht="http://schemas.devexpress.com/winfx/2008/xaml/dashboard/themekeys" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <ResourceDictionary.MergedDictionaries>
    <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2019Colorful.v24.1;component/Dashboard/Generic/DeltaValuePresenter.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <dxdashi:EventToCommandConverter x:Key="EventToCommandConverter" />
  <dx:BoolInverseConverter x:Key="boolInverceConverter" />
  <DataTemplate x:Key="ConditionFormattingImageTemplateKey">
    <dx:DXImage Source="{Binding Image}" Stretch="None" />
  </DataTemplate>
  <DataTemplate x:Key="ActualValueTemplateKey">
    <TextBlock Text="{Binding DisplayText}" TextDecorations="{Binding TextDecorations}" TextTrimming="CharacterEllipsis" />
  </DataTemplate>
  <DataTemplate x:Key="TitleTemplateKey">
    <dxe:TextEdit Text="{Binding DisplayText}" TextDecorations="{Binding TextDecorations}" TextTrimming="CharacterEllipsis" EditMode="InplaceInactive" />
  </DataTemplate>
  <DataTemplate x:Key="SubtitleTemplateKey">
    <dxe:TextEdit Text="{Binding DisplayText}" TextDecorations="{Binding TextDecorations}" TextTrimming="CharacterEllipsis" EditMode="InplaceInactive" />
  </DataTemplate>
  <DataTemplate x:Key="PercentVariationTemplateKey">
    <TextBlock Text="{Binding DisplayText}" TextDecorations="{Binding TextDecorations}" TextTrimming="CharacterEllipsis" />
  </DataTemplate>
  <DataTemplate x:Key="AbsoluteVariationTemplateKey">
    <TextBlock Text="{Binding DisplayText}" TextDecorations="{Binding TextDecorations}" TextTrimming="CharacterEllipsis" />
  </DataTemplate>
  <DataTemplate x:Key="IndicatorTemplateKey">
    <dxdashi:DeltaValuePresenter Padding="1,0,1,0" ShowValue="False" IndicatorType="{Binding Path=IndicatorType}" IsGood="{Binding Path=IsGood}" />
  </DataTemplate>
  <DataTemplate x:Key="SparklineTemplateKey">
    <Border Background="Transparent">
      <Border.ToolTip>
        <StackPanel>
          <DockPanel>
            <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipStartValue}" />
            <TextBlock Text=" " />
            <TextBlock Text="{Binding TooltipValues.Start}" />
          </DockPanel>
          <DockPanel>
            <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipEndValue}" />
            <TextBlock Text=" " />
            <TextBlock Text="{Binding TooltipValues.End}" />
          </DockPanel>
          <DockPanel>
            <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipMinValue}" />
            <TextBlock Text=" " />
            <TextBlock Text="{Binding TooltipValues.Min}" />
          </DockPanel>
          <DockPanel>
            <TextBlock Text="{dxdashi:DashboardLocalizationString SparklineTooltipMaxValue}" />
            <TextBlock Text=" " />
            <TextBlock Text="{Binding TooltipValues.Max}" />
          </DockPanel>
        </StackPanel>
      </Border.ToolTip>
      <dxe:SparklineEdit Focusable="False" Background="Transparent" EditValue="{Binding Value}" StyleSettings="{Binding StyleSettings}" MinHeight="0" />
    </Border>
  </DataTemplate>
  <ControlTemplate x:Key="ItemTemplate" TargetType="{x:Type dxdashi:CardItem}">
    <Grid>
      <Border Background="{Binding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource {dxdasht:CardItemThemeKey ResourceKey=CardBackgroundCornerRadius}}" />
      <Border x:Name="highlight" Background="{DynamicResource {dxdasht:CardItemThemeKey ResourceKey=HighlightedBackground}}" BorderBrush="{DynamicResource {dxdasht:CardItemThemeKey ResourceKey=HighlightedBorderBrush}}" BorderThickness="1" CornerRadius="{DynamicResource {dxdasht:CardItemThemeKey ResourceKey=CardBackgroundCornerRadius}}" Visibility="{Binding HasHighlightedBackground, Converter={dxmvvm:BooleanToVisibilityConverter}}" IsHitTestVisible="False" />
      <Grid Margin="{TemplateBinding Padding}">
        <dxmvvm:Interaction.Behaviors>
          <dxdashi:CardLayoutBehavior ActualValueTemplate="{StaticResource ActualValueTemplateKey}" TitleTemplate="{StaticResource TitleTemplateKey}" SubtitleTemplate="{StaticResource SubtitleTemplateKey}" PercentVariationTemplate="{StaticResource PercentVariationTemplateKey}" AbsoluteVariationTemplate="{StaticResource AbsoluteVariationTemplateKey}" IndicatorTemplate="{StaticResource IndicatorTemplateKey}" SparklineTemplate="{StaticResource SparklineTemplateKey}" ConditionFormattingImageTemplate="{StaticResource ConditionFormattingImageTemplateKey}" MainTextForeground="{DynamicResource {dxdasht:CardItemThemeKey ResourceKey=MainTextForeground}}" GoodForeground="{DynamicResource {dxdasht:DeltaValuePresenterThemeKey ResourceKey=GoodForeground}}" BadForeground="{DynamicResource {dxdasht:DeltaValuePresenterThemeKey ResourceKey=BadForeground}}" WarningForeground="{DynamicResource {dxdasht:DeltaValuePresenterThemeKey ResourceKey=WarningForeground}}" NeutralForeground="{DynamicResource {dxdasht:DeltaValuePresenterThemeKey ResourceKey=NeutralForeground}}" CardBackground="{DynamicResource {dxdasht:CardItemThemeKey ResourceKey=Background}}" />
        </dxmvvm:Interaction.Behaviors>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding IsSelected}" Value="True">
        <Setter Property="Background" TargetName="highlight" Value="{DynamicResource {dxdasht:DashboardControlThemeKey ResourceKey=SelectedItemBackground}}" />
        <Setter Property="BorderBrush" TargetName="highlight" Value="{DynamicResource {dxdasht:DashboardControlThemeKey ResourceKey=SelectedItemBorder}}" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <DataTemplate x:Key="{dxdasht:CardItemThemeKey ResourceKey=Template}">
    <dxdashi:CardItemsControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}" />
  </DataTemplate>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.DashboardWpf.Internal.CardItem}" TargetType="{x:Type dxdashi:CardItem}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template" Value="{StaticResource ItemTemplate}" />
    <Setter Property="Background" Value="{DynamicResource {dxdasht:CardItemThemeKey ResourceKey=CardItemBackground}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {dxdasht:CardItemThemeKey ResourceKey=CardItemBorderBrush}}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="16" />
  </Style>
  <Style x:Key="{dxdasht:CardItemThemeKey ResourceKey=ViewStyle}" TargetType="{x:Type dxdashi:CardItemsControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="ItemsSource" Value="{Binding ItemsSource}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <dxdashi:CardsPanel VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <dxdashi:CardItem />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ItemsControl">
          <Grid VerticalAlignment="Center">
            <ScrollViewer CanContentScroll="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Visibility="{Binding ShowCards}">
              <ItemsPresenter />
            </ScrollViewer>
            <TextBlock Text="{Binding WarningMessage}" Visibility="{Binding ShowWarning}" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" FontWeight="Bold" VerticalAlignment="Center" HorizontalAlignment="Center" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.DashboardWpf.Internal.CardItemContainer}" TargetType="{x:Type dxdashi:CardItemContainer}">
          <Setter Property="Focusable" Value="False" />
          <Setter Property="FocusVisualStyle" Value="{x:Null}" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="dxdashi:CardItemContainer">
                <ContentPresenter />
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
              <DataTemplate>
                <ItemsControl>
                  <dxmvvm:FocusBehavior EventName="MouseDown" />
                  <dxmvvm:EventToCommand EventName="MouseDown" Command="{Binding MouseDownCommand}" PassEventArgsToCommand="True" MarkRoutedEventsAsHandled="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                  <dxmvvm:EventToCommand EventName="MouseUp" Command="{Binding MouseUpCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                  <dxmvvm:EventToCommand EventName="MouseMove" Command="{Binding MouseMoveCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                  <dxmvvm:EventToCommand EventName="MouseDoubleClick" Command="{Binding MouseDoubleClickCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                  <dxmvvm:EventToCommand EventName="MouseLeave" Command="{Binding MouseLeaveCommand}" PassEventArgsToCommand="True" EventArgsConverter="{StaticResource EventToCommandConverter}" />
                </ItemsControl>
              </DataTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>