<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:core="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/charts/themekeys" xmlns:local="http://schemas.devexpress.com/winfx/2008/xaml/charts" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:dxh="http://schemas.devexpress.com/winfx/2008/xaml/heatmap" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
  <core:BoolToVisibilityConverter x:Key="boolToVisibilityConverter" />
  <local:IsEnabledToOpacityConverter x:Key="isEnabledToOpacityConverter" />
  <local:HeightToVisibilityConverter x:Key="heightToVisibilityConverter" />
  <Thickness x:Key="{dxt:ChartControlThemeKey ResourceKey=IndentFromDiagramValue}">16</Thickness>
  <Thickness x:Key="{dxt:ChartControlThemeKey ResourceKey=LegendPaddingValue}">8</Thickness>
  <Thickness x:Key="{dxt:ChartControlThemeKey ResourceKey=LegendBorderThickness}">1</Thickness>
  <Thickness x:Key="{dxt:ChartControlThemeKey ResourceKey=LegendItemMargin}">6,2</Thickness>
  <Thickness x:Key="{dxt:ChartControlThemeKey ResourceKey=LegendItemTextMargin}">4,0,0,0</Thickness>
  <Thickness x:Key="{dxt:ChartControlThemeKey ResourceKey=LegendItemCrosshairTextMargin}">4,0,0,0</Thickness>
  <sys:Double x:Key="{dxt:ChartControlThemeKey ResourceKey=LegendMarkerWidth}">12</sys:Double>
  <sys:Double x:Key="{dxt:ChartControlThemeKey ResourceKey=LegendMarkerHeight}">12</sys:Double>
  <ControlTemplate x:Key="{dxt:ChartControlThemeKey ResourceKey=LegendCheckBoxTemplate}" TargetType="{x:Type CheckBox}">
    <Grid x:Name="CheckBox" Background="Transparent" Width="14" Height="14">
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Disabled">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="CheckBox">
                <EasingDoubleKeyFrame KeyTime="0" Value="0.35" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Normal" />
          <VisualState x:Name="MouseOver" />
          <VisualState x:Name="Pressed" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Border BorderThickness="1" BorderBrush="{Binding CheckBoxBrush}" />
      <Path x:Name="CheckBoxMarker" Data="F1 M 135,156L 135,159L 139,163L 145,156L 145,153L 139,160L 135,156 Z" FlowDirection="LeftToRight" UseLayoutRounding="False" Stretch="Fill" Margin="2" Fill="{Binding CheckBoxBrush}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Converter={StaticResource ResourceKey=boolToVisibilityConverter}}" />
    </Grid>
  </ControlTemplate>
  <Style TargetType="{x:Type local:LegendBase}" x:Key="LegendBaseStyle">
    <Setter Property="Background" Value="{DynamicResource {dxt:ChartBrushesThemeKey ResourceKey=LegendBackgroundBrush}}" />
    <Setter Property="Foreground" Value="{DynamicResource {dxt:ChartBrushesThemeKey ResourceKey=LegendForeground}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {dxt:ChartBrushesThemeKey ResourceKey=LegendBorderBrush}}" />
    <Setter Property="BorderThickness" Value="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=LegendBorderThickness}}" />
    <Setter Property="Padding" Value="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=LegendPaddingValue}}" />
    <Setter Property="IndentFromDiagram" Value="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=IndentFromDiagramValue}}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel Orientation="{Binding Path=Orientation}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.Legend}" TargetType="local:Legend" BasedOn="{StaticResource LegendBaseStyle}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:Legend}">
          <Grid>
            <local:ChartContentControl x:Name="LegendWrapper" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Template="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=LegendWrapperTemplate}}" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding ElementName=legendItemsControl, Path=ActualHeight, Converter={StaticResource heightToVisibilityConverter}}">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <local:ChartContentPresenter Content="{TemplateBinding Title}" />
                <local:LegendItemsControl x:Name="legendItemsControl" LegendItems="{TemplateBinding Items}" ItemsPanel="{TemplateBinding ItemsPanel}" ItemTemplate="{TemplateBinding ItemTemplate}" ReverseItems="{TemplateBinding ReverseItems}" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="1" />
                <TextBlock x:Name="tbEmptyLegendContent" Text="Empty Legend" Grid.Row="1" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EmptyContentVisibility}" />
              </Grid>
            </local:ChartContentControl>
            <local:SelectionControl IsSelected="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectionInfo.IsSelected}" IsHighlighted="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectionInfo.IsHighlighted}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.Heatmap.HeatmapLegend}" TargetType="{x:Type dxh:HeatmapLegend}" BasedOn="{StaticResource LegendBaseStyle}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxh:HeatmapLegend}">
          <Grid>
            <local:ChartContentControl x:Name="LegendWrapper" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Template="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=LegendWrapperTemplate}}" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding ElementName=legendItemsControl, Path=ActualHeight, Converter={StaticResource heightToVisibilityConverter}}">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <local:ChartContentPresenter Content="{TemplateBinding Title}" />
                <dxh:HeatmapLegendItemsControl x:Name="legendItemsControl" ItemsSource="{TemplateBinding Items}" ItemsPanel="{TemplateBinding ItemsPanel}" ItemTemplate="{TemplateBinding ItemTemplate}" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="1" />
                <TextBlock x:Name="tbEmptyLegendContent" Text="Empty Legend" Grid.Row="1" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EmptyContentVisibility}" />
              </Grid>
            </local:ChartContentControl>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.LegendItemPresentation}" TargetType="local:LegendItemPresentation">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="local:LegendItemPresentation">
          <Path x:Name="PART_MarkerPath" Stretch="Uniform" Fill="{Binding Path=ActualMarkerBrush}" Margin="{Binding Path=ActualMarkerMargin}" OpacityMask="{Binding Path=OpacityMask}" Stroke="{Binding Path=ActualMarkerLineBrush}" StrokeThickness="{Binding Path=ActualLineThickness}" StrokeDashArray="{Binding Path=MarkerLineStyle.DashStyle.Dashes}" StrokeDashOffset="{Binding Path=MarkerLineStyle.DashStyle.Offset}" StrokeDashCap="{Binding Path=MarkerLineStyle.DashCap}" StrokeLineJoin="{Binding Path=MarkerLineStyle.LineJoin}" StrokeMiterLimit="{Binding Path=MarkerLineStyle.MiterLimit}" SnapsToDevicePixels="True" StrokeStartLineCap="Square" StrokeEndLineCap="Square" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.CustomLegendItem}" TargetType="local:CustomLegendItem">
    <Setter Property="MarkerBrush" Value="Red" />
    <Setter Property="MarkerTemplate">
      <Setter.Value>
        <DataTemplate>
          <Rectangle Fill="{Binding Path=ActualMarkerBrush}" Stretch="Uniform" SnapsToDevicePixels="True" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <!--<Setter
            Property="Foreground"
            Value="{DynamicResource {dxt:ChartBrushesThemeKey ResourceKey=LegendForeground}}" />-->
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LegendBase}}, Path=Foreground}" />
  </Style>
</ResourceDictionary>